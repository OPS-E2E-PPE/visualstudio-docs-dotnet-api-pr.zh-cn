<Type Name="IDeploymentStep" FullName="Microsoft.VisualStudio.SharePoint.Deployment.IDeploymentStep">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f1f75d57f318325267927301792f16f127d022f5" /><Meta Name="ms.sourcegitcommit" Value="7439021cdeee6a9ef5d4640250701344f6cbba15" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="08/13/2019" /><Meta Name="ms.locfileid" Value="69011732" /></Metadata><TypeSignature Language="C#" Value="public interface IDeploymentStep" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDeploymentStep" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualStudio.SharePoint.Deployment.IDeploymentStep" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualStudio.SharePoint</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>表示 SharePoint 项目的部署步骤。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualStudio.SharePoint.Deployment.IDeploymentStep>实现接口, 为 SharePoint 项目创建自定义部署步骤。 部署 SharePoint 项目时，[!INCLUDE[vs_current_short](~/includes/vs-current-short-md.md)] 会执行一系列部署步骤。 Visual Studio 包含用于很多任务的内置部署步骤，如收回和添加解决方案。 但是，还可以创建自己的部署步骤。 有关详细信息, 请参阅[扩展 SharePoint 打包和部署](/visualstudio/sharepoint/extending-sharepoint-packaging-and-deployment)以及[演练:为 SharePoint 项目](/visualstudio/sharepoint/walkthrough-creating-a-custom-deployment-step-for-sharepoint-projects)创建自定义部署步骤。  
  
 部署步骤是每个 Visual Studio 实例实例化一次的单一实例。  
  
 实现此接口的类必须包括<xref:System.ComponentModel.Composition.ExportAttribute?displayProperty=fullName> <xref:Microsoft.VisualStudio.SharePoint.Deployment.DeploymentStepAttribute>和要由项目系统发现的。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CanExecute">
      <MemberSignature Language="C#" Value="public bool CanExecute (Microsoft.VisualStudio.SharePoint.Deployment.IDeploymentContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanExecute(class Microsoft.VisualStudio.SharePoint.Deployment.IDeploymentContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualStudio.SharePoint.Deployment.IDeploymentStep.CanExecute(Microsoft.VisualStudio.SharePoint.Deployment.IDeploymentContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualStudio.SharePoint</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.VisualStudio.SharePoint.Deployment.IDeploymentContext" />
      </Parameters>
      <Docs>
        <param name="context">一个提供可用于确定在其中执行部署步骤的上下文的对象。</param>
        <summary>确定是否可在当前上下文中执行部署步骤。</summary>
        <returns>如果可执行部署步骤，则为 <see langword="true" />，否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当使用 Visual Studio 中的 "**生成**" 菜单上的 "**收回**" 选项收回 SharePoint 项目时, 将从 UI 线程执行此方法。 此方法在以下情况下在后台线程中执行:  
  
-   调试后自动收回项目的时间。 如果在 "项目属性" 的 " **SharePoint** " 选项卡上选择了 "**调试后自动收回**" 属性, 则会发生这种情况。  
  
-   部署项目时。  
  
 Visual Studio 对象模型中的某些 Api 在后台线程中可能无法正常工作。 如果需要从<xref:Microsoft.VisualStudio.SharePoint.Deployment.IDeploymentStep.CanExecute%2A>方法调用其中一个 api, 可以<xref:System.Threading.SynchronizationContext>使用对象封送对 UI 线程的调用。 在<xref:Microsoft.VisualStudio.SharePoint.Deployment.IDeploymentStep.Initialize%2A>方法的实现中, <xref:System.Threading.SynchronizationContext.Current%2A>使用属性获取<xref:System.Threading.SynchronizationContext> UI 线程的。 然后, 在<xref:Microsoft.VisualStudio.SharePoint.Deployment.IDeploymentStep.CanExecute%2A>方法的实现中, 使用<xref:System.Threading.SynchronizationContext>对象的<xref:System.Threading.SynchronizationContext.Post%2A>或<xref:System.Threading.SynchronizationContext.Send%2A>方法来封送对 UI 线程的调用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public void Execute (Microsoft.VisualStudio.SharePoint.Deployment.IDeploymentContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Execute(class Microsoft.VisualStudio.SharePoint.Deployment.IDeploymentContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualStudio.SharePoint.Deployment.IDeploymentStep.Execute(Microsoft.VisualStudio.SharePoint.Deployment.IDeploymentContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualStudio.SharePoint</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.VisualStudio.SharePoint.Deployment.IDeploymentContext" />
      </Parameters>
      <Docs>
        <param name="context">一个提供可用于确定在其中执行部署步骤的上下文的对象。</param>
        <summary>执行部署步骤。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在此方法中实现部署步骤逻辑。  
  
 当使用 Visual Studio 中的 "**生成**" 菜单上的 "**收回**" 选项收回 SharePoint 项目时, 将从 UI 线程执行此方法。 此方法在以下情况下在后台线程中执行:  
  
-   调试后自动收回项目的时间。 如果在 "项目属性" 的 " **SharePoint** " 选项卡上选择了 "**调试后自动收回**" 属性, 则会发生这种情况。  
  
-   部署项目时。  
  
 Visual Studio 对象模型中的某些 Api 在后台线程中可能无法正常工作。 如果需要从<xref:Microsoft.VisualStudio.SharePoint.Deployment.IDeploymentStep.Execute%2A>方法调用其中一个 api, 可以<xref:System.Threading.SynchronizationContext>使用对象封送对 UI 线程的调用。 在<xref:Microsoft.VisualStudio.SharePoint.Deployment.IDeploymentStep.Initialize%2A>方法的实现中, <xref:System.Threading.SynchronizationContext.Current%2A>使用属性获取<xref:System.Threading.SynchronizationContext> UI 线程的。 然后, 在<xref:Microsoft.VisualStudio.SharePoint.Deployment.IDeploymentStep.Execute%2A>方法的实现中, 使用<xref:System.Threading.SynchronizationContext>对象的<xref:System.Threading.SynchronizationContext.Post%2A>或<xref:System.Threading.SynchronizationContext.Send%2A>方法来封送对 UI 线程的调用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public void Initialize (Microsoft.VisualStudio.SharePoint.Deployment.IDeploymentStepInfo stepInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Initialize(class Microsoft.VisualStudio.SharePoint.Deployment.IDeploymentStepInfo stepInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualStudio.SharePoint.Deployment.IDeploymentStep.Initialize(Microsoft.VisualStudio.SharePoint.Deployment.IDeploymentStepInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualStudio.SharePoint</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stepInfo" Type="Microsoft.VisualStudio.SharePoint.Deployment.IDeploymentStepInfo" />
      </Parameters>
      <Docs>
        <param name="stepInfo">一个包含有关部署步骤信息的对象。</param>
        <summary>启动部署步骤。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 第一次初始化部署步骤时, Visual Studio 将调用此方法。 每个 Visual Studio 实例只发生一次。  
  
 在的<xref:Microsoft.VisualStudio.SharePoint.Deployment.IDeploymentStep.Initialize%2A>实现中, 设置`stepInfo`参数的属性, 以指定部署步骤的名称、说明和其他详细信息。  
  
 始终从 UI 线程执行此方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
