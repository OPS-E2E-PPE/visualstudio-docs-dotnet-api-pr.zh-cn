<Type Name="NamedRange" FullName="Microsoft.Office.Tools.Excel.NamedRange">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="08afd68956232229dd48b2ffa08f89143e65c3cf" />
    <Meta Name="ms.sourcegitcommit" Value="bb8a3a96823cedeffbdbcc0c41a8118399de8074" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="02/21/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface NamedRange : IDisposable, System.ComponentModel.IComponent, System.ComponentModel.ISupportInitialize, System.Windows.Forms.IBindableComponent" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract NamedRange implements class System.ComponentModel.IComponent, class System.ComponentModel.ISupportInitialize, class System.IDisposable, class System.Windows.Forms.IBindableComponent" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Tools.Excel.NamedRange" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.IComponent</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Forms.IBindableComponent</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("6b87f7cb-0689-4e7e-8dcb-3c0e654629bb")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件是一个具有唯一名称的范围，它可以公开事件并绑定到数据。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关详细信息，请参阅[NamedRange 控件](/visualstudio/vsto/namedrange-control.md)。  
  
 [!INCLUDE[vsto_interface](~/includes/vsto-interface-md.md)]  
  
## <a name="usage"></a>用法  
 [!INCLUDE[vsto_net35mref](~/includes/vsto-net35mref-md.md)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="_PasteSpecial">
      <MemberSignature Language="C#" Value="public object _PasteSpecial (Microsoft.Office.Interop.Excel.XlPasteType Paste = Microsoft.Office.Interop.Excel.XlPasteType.xlPasteAll, Microsoft.Office.Interop.Excel.XlPasteSpecialOperation Operation = Microsoft.Office.Interop.Excel.XlPasteSpecialOperation.xlPasteSpecialOperationNone, object SkipBlanks, object Transpose);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object _PasteSpecial(valuetype Microsoft.Office.Interop.Excel.XlPasteType Paste, valuetype Microsoft.Office.Interop.Excel.XlPasteSpecialOperation Operation, object SkipBlanks, object Transpose) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange._PasteSpecial(Microsoft.Office.Interop.Excel.XlPasteType,Microsoft.Office.Interop.Excel.XlPasteSpecialOperation,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Paste" Type="Microsoft.Office.Interop.Excel.XlPasteType" />
        <Parameter Name="Operation" Type="Microsoft.Office.Interop.Excel.XlPasteSpecialOperation" />
        <Parameter Name="SkipBlanks" Type="System.Object" />
        <Parameter Name="Transpose" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Paste">To be added.</param>
        <param name="Operation">To be added.</param>
        <param name="SkipBlanks">To be added.</param>
        <param name="Transpose">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="_PrintOut">
      <MemberSignature Language="C#" Value="public object _PrintOut (object From, object To, object Copies, object Preview, object ActivePrinter, object PrintToFile, object Collate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object _PrintOut(object From, object To, object Copies, object Preview, object ActivePrinter, object PrintToFile, object Collate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange._PrintOut(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="From" Type="System.Object" />
        <Parameter Name="To" Type="System.Object" />
        <Parameter Name="Copies" Type="System.Object" />
        <Parameter Name="Preview" Type="System.Object" />
        <Parameter Name="ActivePrinter" Type="System.Object" />
        <Parameter Name="PrintToFile" Type="System.Object" />
        <Parameter Name="Collate" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="From">To be added.</param>
        <param name="To">To be added.</param>
        <param name="Copies">To be added.</param>
        <param name="Preview">To be added.</param>
        <param name="ActivePrinter">To be added.</param>
        <param name="PrintToFile">To be added.</param>
        <param name="Collate">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Activate">
      <MemberSignature Language="C#" Value="public object Activate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Activate() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.Activate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>激活单个单元格 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要选择的一个单元范围，使用<xref:Microsoft.Office.Tools.Excel.NamedRange.Select%2A>方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddComment">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Comment AddComment (object Text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Interop.Excel.Comment AddComment(object Text) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.AddComment(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Comment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Text" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Text">注释文本。</param>
        <summary>向 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件添加注释。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 仅可以将备注添加到<xref:Microsoft.Office.Tools.Excel.NamedRange>包含的单个单元格的控件。 如果不能添加注释<xref:Microsoft.Office.Tools.Excel.NamedRange>控件具有多个单元格。  
  
## <a name="optional-parameters"></a>可选参数  
 可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions.md)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.NamedRange.AddComment%2A>方法添加批注"This is Martha 的范围"。 到<xref:Microsoft.Office.Tools.Excel.NamedRange>包括 A1 单元格的控件。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#41](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#41)]
 [!code-vb[Trin_ExcelNamedRange#41](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#41)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddIndent">
      <MemberSignature Language="C#" Value="public object AddIndent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object AddIndent" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.AddIndent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值确定在将 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件中的文本对齐方式设置为在水平或垂直方向均匀分布时文本是否自动缩进。</summary>
        <value>
          如果在将 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件中的文本对齐方式设置为在水平或垂直方向均匀分布时文本会自动缩进，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要设置文本对齐方式为均匀分布，可以设置<xref:Microsoft.Office.Interop.Excel.Range.VerticalAlignment%2A>属性<xref:Microsoft.Office.Interop.Excel.XlVAlign.xlVAlignDistributed>时的值<xref:Microsoft.Office.Interop.Excel.Range.Orientation%2A>属性是<xref:Microsoft.Office.Interop.Excel.XlOrientation.xlVertical>，还可以设置<xref:Microsoft.Office.Interop.Excel.Range.HorizontalAlignment%2A>属性<xref:Microsoft.Office.Interop.Excel.XlHAlign.xlHAlignDistributed>时的值<xref:Microsoft.Office.Interop.Excel.Range.Orientation%2A>属性是<xref:Microsoft.Office.Interop.Excel.XlOrientation.xlHorizontal>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Address">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Tools.Excel.NamedRange_AddressType Address { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Tools.Excel.NamedRange_AddressType Address" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.Address" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Tools.Excel.NamedRange_AddressType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的范围引用。</summary>
        <value>一个字符串，表示 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的用 R1C1 或 A1 样式表示法表示的范围引用。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Tools.Excel.NamedRange.Address%2A>属性应与以下参数一起使用。  
  
|参数|描述|  
|---------------|-----------------|  
|`RowAbsolute`|`true` 绝对引用的形式返回行。 默认值为 `true`。|  
|`ColumnAbsolute`|`true` 若要为的绝对引用返回列。 默认值为 `true`。|  
|`ColumnAbsolute`|<xref:Microsoft.Office.Interop.Excel.XlReferenceStyle> 值之一。|  
|`External`|`true` 若要返回的外部引用;`false`返回的本地引用。 默认值为 `false`。|  
|`RelativeTo`|A <xref:Microsoft.Office.Interop.Excel.Range> ，它定义的起始点。 如果`RowAbsolute`和`ColumnAbsolute`是`false`，和`ReferenceStyle`是<xref:Microsoft.Office.Interop.Excel.XlReferenceStyle.xlR1C1>，必须包含一个起始点，相对的引用。|  
  
 如果你尝试使用<xref:Microsoft.Office.Tools.Excel.NamedRange.Address%2A>而不指定任何参数，<xref:Microsoft.Office.Tools.Excel.NamedRange.Address%2A>将获取<xref:Microsoft.Office.Tools.Excel.NamedRange_AddressType>对象，是 Visual Studio 基础结构的一部分和不应在代码中直接使用。  
  
 如果引用包含多个单元格，`RowAbsolute`和`ColumnAbsolute`适用于所有行和列。  
  
## <a name="optional-parameters"></a>可选参数  
 可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions.md)。  
  
   
  
## Examples  
 下面的代码示例创建<xref:Microsoft.Office.Tools.Excel.NamedRange>，然后显示的地址<xref:Microsoft.Office.Tools.Excel.NamedRange>以四种格式。  
  
 此版本用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#42](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#42)]
 [!code-vb[Trin_ExcelNamedRange#42](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#42)]  
  
 此版本用于针对应用程序级外接程序。  
  
<!-- TODO: review snippet reference  [!CODE [Trin_ExcelNamedRange_AppLevelAddIn#42](Trin_ExcelNamedRange_AppLevelAddIn#42)]  -->  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddressLocal">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Tools.Excel.NamedRange_AddressLocalType AddressLocal { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Tools.Excel.NamedRange_AddressLocalType AddressLocal" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.AddressLocal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Tools.Excel.NamedRange_AddressLocalType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>以用户的语言获取 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的范围引用。</summary>
        <value>一个字符串，表示 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的采用用户语言并用 R1C1 或 A1 样式表示法表示的范围引用。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Tools.Excel.NamedRange.AddressLocal%2A>属性应与以下参数一起使用。  
  
|参数|描述|  
|---------------|-----------------|  
|`RowAbsolute`|`true` 绝对引用的形式返回行。 默认值为 `true`。|  
|`ColumnAbsolute`|`true` 若要为的绝对引用返回列。 默认值为 `true`。|  
|`ColumnAbsolute`|<xref:Microsoft.Office.Interop.Excel.XlReferenceStyle> 值之一。|  
|`External`|`true` 若要返回的外部引用;`false`返回的本地引用。 默认值为 `false`。|  
|`RelativeTo`|A <xref:Microsoft.Office.Interop.Excel.Range> ，它定义的起始点。 如果`RowAbsolute`和`ColumnAbsolute`是`false`，和`ReferenceStyle`是<xref:Microsoft.Office.Interop.Excel.XlReferenceStyle.xlR1C1>，必须包含一个起始点，相对的引用。|  
  
 如果你尝试使用<xref:Microsoft.Office.Tools.Excel.NamedRange.AddressLocal%2A>而不指定任何参数，<xref:Microsoft.Office.Tools.Excel.NamedRange.AddressLocal%2A>将获取<xref:Microsoft.Office.Tools.Excel.NamedRange_AddressLocalType>对象，是 Visual Studio 基础结构的一部分和不应在代码中直接使用。  
  
 如果引用包含多个单元格，`RowAbsolute`和`ColumnAbsolute`适用于所有行和列。  
  
## <a name="optional-parameters"></a>可选参数  
 可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions.md)。  
  
   
  
## Examples  
 下面的代码示例创建<xref:Microsoft.Office.Tools.Excel.NamedRange>，然后显示的地址<xref:Microsoft.Office.Tools.Excel.NamedRange>以四种格式。 如果示例使用德语语言支持的系统上运行的该示例将显示的地址字符串"$A$ 2"，"$A2"、"Z2S2"和"Z-[1] S [-1]"。  
  
 此版本用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#43](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#43)]
 [!code-vb[Trin_ExcelNamedRange#43](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#43)]  
  
 此版本用于针对应用程序级外接程序。  
  
<!-- TODO: review snippet reference  [!CODE [Trin_ExcelNamedRange_AppLevelAddIn#43](Trin_ExcelNamedRange_AppLevelAddIn#43)]  -->  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AdvancedFilter">
      <MemberSignature Language="C#" Value="public object AdvancedFilter (Microsoft.Office.Interop.Excel.XlFilterAction Action, object CriteriaRange, object CopyToRange, object Unique);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object AdvancedFilter(valuetype Microsoft.Office.Interop.Excel.XlFilterAction Action, object CriteriaRange, object CopyToRange, object Unique) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.AdvancedFilter(Microsoft.Office.Interop.Excel.XlFilterAction,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Action" Type="Microsoft.Office.Interop.Excel.XlFilterAction" />
        <Parameter Name="CriteriaRange" Type="System.Object" />
        <Parameter Name="CopyToRange" Type="System.Object" />
        <Parameter Name="Unique" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Action">可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlFilterAction" /> 值之一：  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlFilterAction.xlFilterCopy" /><see cref="F:Microsoft.Office.Interop.Excel.XlFilterAction.xlFilterInPlace" /></param>
        <param name="CriteriaRange">条件范围。 如果省略此参数，则没有任何条件。</param>
        <param name="CopyToRange">如果 Action 为 <see cref="F:Microsoft.Office.Interop.Excel.XlFilterAction.xlFilterCopy" />，则为复制行的目标范围<c></c>。 否则，将忽略此参数。</param>
        <param name="Unique">
          如果仅筛选唯一的记录，则为 <see langword="true" />；如果筛选所有符合条件的记录，则为 <see langword="false" />。 默认值为 <see langword="false" />。</param>
        <summary>基于条件范围从列表筛选或复制数据。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果初始选择为单个单元格，则使用该单元格的当前区域。  
  
## <a name="optional-parameters"></a>可选参数  
 可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions.md)。  
  
   
  
## Examples  
 下面的代码示例从通过 A5 A1 单元格的范围内设置整数值，然后使用<xref:Microsoft.Office.Tools.Excel.NamedRange.AdvancedFilter%2A>方法筛选，并将值复制到的单元格 B1 开始的范围。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#39](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#39)]
 [!code-vb[Trin_ExcelNamedRange#39](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#39)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllocateChanges">
      <MemberSignature Language="C#" Value="public void AllocateChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AllocateChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.AllocateChanges" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>基于 OLAP 数据源为命名范围内的所有已编辑单元格执行写回操作。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Tools.Excel.NamedRange.AllocateChanges%2A>方法将执行 UPDATE CUBE 语句的命名范围中最后一个应用的更改操作已提交以来的所有更改。 如果范围基于非 OLAP 数据源上执行，则此方法会生成运行时错误。  
  
> [!NOTE]
>  此方法将显示在 IntelliSense Excel 2007 项目中面向[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]。 但是，不能在 Excel 2007 项目中使用此方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MissingMemberException">在 Excel 2007 项目中使用此方法。</exception>
      </Docs>
    </Member>
    <Member MemberName="AllowEdit">
      <MemberSignature Language="C#" Value="public bool AllowEdit { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowEdit" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.AllowEdit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示是否可以在受保护的工作表上编辑 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件。</summary>
        <value>
          如果可以在受保护的工作表上编辑 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Application">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Application Application { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Application Application" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.Application" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Application</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个表示 <see cref="T:Microsoft.Office.Interop.Excel.Application" /> 控件的创建者的 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" />。</summary>
        <value>一个表示 <see cref="T:Microsoft.Office.Interop.Excel.Application" /> 控件的创建者的  <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例获取的名称和版本的应用程序包含<xref:Microsoft.Office.Tools.Excel.NamedRange>并在消息框中显示的信息。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#44](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#44)]
 [!code-vb[Trin_ExcelNamedRange#44](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#44)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyNames">
      <MemberSignature Language="C#" Value="public object ApplyNames (object Names, object IgnoreRelativeAbsolute, object UseRowColumnNames, object OmitColumn, object OmitRow, Microsoft.Office.Interop.Excel.XlApplyNamesOrder Order = Microsoft.Office.Interop.Excel.XlApplyNamesOrder.xlRowThenColumn, object AppendLast);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ApplyNames(object Names, object IgnoreRelativeAbsolute, object UseRowColumnNames, object OmitColumn, object OmitRow, valuetype Microsoft.Office.Interop.Excel.XlApplyNamesOrder Order, object AppendLast) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.ApplyNames(System.Object,System.Object,System.Object,System.Object,System.Object,Microsoft.Office.Interop.Excel.XlApplyNamesOrder,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Names" Type="System.Object" />
        <Parameter Name="IgnoreRelativeAbsolute" Type="System.Object" />
        <Parameter Name="UseRowColumnNames" Type="System.Object" />
        <Parameter Name="OmitColumn" Type="System.Object" />
        <Parameter Name="OmitRow" Type="System.Object" />
        <Parameter Name="Order" Type="Microsoft.Office.Interop.Excel.XlApplyNamesOrder" />
        <Parameter Name="AppendLast" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Names">要应用的名称的数组。 如果省略此参数，则会向该范围应用此表中的所有名称。</param>
        <param name="IgnoreRelativeAbsolute">
          如果无论引用类型为名称还是引用，都将引用替换为名称，则为 <see langword="true" />；如果只是将绝对引用替换为绝对名称，将相对引用替换为相对名称，将混合引用替换为混合名称，则为 <see langword="false" />。 默认值为 <see langword="true" />。</param>
        <param name="UseRowColumnNames">
          如果在找不到指定范围的名称时使用包含该范围的行和列范围的名称，则为 <see langword="true" />；如果忽略 <c>OmitColumn</c> 和 <c>OmitRow</c> 参数，则为 <see langword="false" />。 默认值为 <see langword="true" />。</param>
        <param name="OmitColumn">
          如果将整个引用替换为面向行的名称，则为 <see langword="true" />。 只有当引用的单元格与公式在同一列中，而且位于面向行的命名范围中时，才能省略面向列的名称。 默认值为 <see langword="true" />。</param>
        <param name="OmitRow">
          如果将整个引用替换为面向列的名称，则为 <see langword="true" />。 只有当引用的单元格与公式在同一行中，而且位于面向列的命名范围中时，才能省略面向行的名称。 默认值为 <see langword="true" />。</param>
        <param name="Order">确定在将单元格引用替换为面向行和面向列的范围名称时首先列出的范围名称。  
  
 可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlApplyNamesOrder" /> 常数之一：  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlApplyNamesOrder.xlColumnThenRow" /><see cref="F:Microsoft.Office.Interop.Excel.XlApplyNamesOrder.xlRowThenColumn" /></param>
        <param name="AppendLast">
          如果替换 <c>Names</c> 中名称的定义，还替换上次定义的名称的定义，则为 <see langword="true" />；如果仅替换 <c>Names</c> 中名称的定义，则为 <see langword="false" />。 默认值为 <see langword="false" />。</param>
        <summary>向 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件中的单元格应用名称。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以使用`Array`函数来创建的名称列表`Names`自变量。  
  
 如果你想要应用于整个表的名称，使用`Cells.ApplyNames`。  
  
 你不能"不应用"名称;若要删除名称，使用`Delete`方法。  
  
## <a name="optional-parameters"></a>可选参数  
 可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions.md)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.NamedRange.ApplyNames%2A>方法以应用一组名称到<xref:Microsoft.Office.Tools.Excel.NamedRange>控件。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#40](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#40)]
 [!code-vb[Trin_ExcelNamedRange#40](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#40)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyOutlineStyles">
      <MemberSignature Language="C#" Value="public object ApplyOutlineStyles ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ApplyOutlineStyles() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.ApplyOutlineStyles" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>向 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件应用大纲样式。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Areas">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Areas Areas { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Areas Areas" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.Areas" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Areas</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Areas" /> 集合，该集合表示多区域选择中的所有范围。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.Areas" /> 集合，表示多区域选择中的所有范围。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoComplete">
      <MemberSignature Language="C#" Value="public string AutoComplete (string String);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string AutoComplete(string String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.AutoComplete(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="String">要完成的字符串。</param>
        <summary>从列表中获取一个 AutoComplete 匹配。</summary>
        <returns>列表中的 AutoComplete 匹配项。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果没有自动完成匹配项，或者在列表中的多个条目与匹配要完成的字符串，此方法将返回空字符串。  
  
 此方法适用即使记忆式键入功能被禁用。  
  
   
  
## Examples  
 下面的代码示例演示如何使用 <xref:Microsoft.Office.Tools.Excel.NamedRange.AutoComplete%2A> 方法。 该示例首先将 A1 单元格的值设置为字符串"上 vineyard Martha 生活"，创建<xref:Microsoft.Office.Tools.Excel.NamedRange>A2 单元格中的控件。 然后该示例使用<xref:Microsoft.Office.Tools.Excel.NamedRange.AutoComplete%2A>方法来获取记忆式键入功能与来自"Ma"的子字符串，并将中的匹配值<xref:Microsoft.Office.Tools.Excel.NamedRange>。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#41](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#41)]
 [!code-vb[Trin_ExcelNamedRange#41](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#41)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoFill">
      <MemberSignature Language="C#" Value="public object AutoFill (Microsoft.Office.Interop.Excel.Range Destination, Microsoft.Office.Interop.Excel.XlAutoFillType Type = Microsoft.Office.Interop.Excel.XlAutoFillType.xlFillDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object AutoFill(class Microsoft.Office.Interop.Excel.Range Destination, valuetype Microsoft.Office.Interop.Excel.XlAutoFillType Type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.AutoFill(Microsoft.Office.Interop.Excel.Range,Microsoft.Office.Interop.Excel.XlAutoFillType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Destination" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Type" Type="Microsoft.Office.Interop.Excel.XlAutoFillType" />
      </Parameters>
      <Docs>
        <param name="Destination">要填充的单元格。 目标中必须包括源范围。</param>
        <param name="Type">指定填充类型。  
  
 可以是这些 <see cref="T:Microsoft.Office.Interop.Excel.XlAutoFillType" /> 值之一：  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlAutoFillType.xlFillDays" /><see cref="F:Microsoft.Office.Interop.Excel.XlAutoFillType.xlFillFormats" /><see cref="F:Microsoft.Office.Interop.Excel.XlAutoFillType.xlFillSeries" /><see cref="F:Microsoft.Office.Interop.Excel.XlAutoFillType.xlFillWeekdays" /><see cref="F:Microsoft.Office.Interop.Excel.XlAutoFillType.xlGrowthTrend" /><see cref="F:Microsoft.Office.Interop.Excel.XlAutoFillType.xlFillCopy" /><see cref="F:Microsoft.Office.Interop.Excel.XlAutoFillType.xlFillDefault" /><see cref="F:Microsoft.Office.Interop.Excel.XlAutoFillType.xlFillMonths" /><see cref="F:Microsoft.Office.Interop.Excel.XlAutoFillType.xlFillValues" /><see cref="F:Microsoft.Office.Interop.Excel.XlAutoFillType.xlFillYears" /><see cref="F:Microsoft.Office.Interop.Excel.XlAutoFillType.xlLinearTrend" />  
  
 如果此参数为 <see cref="F:Microsoft.Office.Interop.Excel.XlAutoFillType.xlFillDefault" /> 或者被省略，则 Microsoft Office Excel 将基于源范围选择最适合的填充类型。</param>
        <summary>自动填充 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件中的单元格。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a>可选参数  
 可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions.md)。  
  
   
  
## Examples  
 下面的代码示例设置单元格 A1 中的值 5，然后使用<xref:Microsoft.Office.Tools.Excel.NamedRange.AutoFill%2A>方法来自动填充单元格的 A1 至 A20 中 A1 单元格的值。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#25](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#25)]
 [!code-vb[Trin_ExcelNamedRange#25](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#25)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoFilter">
      <MemberSignature Language="C#" Value="public object AutoFilter (object Field, object Criteria1, Microsoft.Office.Interop.Excel.XlAutoFilterOperator Operator = Microsoft.Office.Interop.Excel.XlAutoFilterOperator.xlAnd, object Criteria2, object VisibleDropDown);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object AutoFilter(object Field, object Criteria1, valuetype Microsoft.Office.Interop.Excel.XlAutoFilterOperator Operator, object Criteria2, object VisibleDropDown) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.AutoFilter(System.Object,System.Object,Microsoft.Office.Interop.Excel.XlAutoFilterOperator,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Field" Type="System.Object" />
        <Parameter Name="Criteria1" Type="System.Object" />
        <Parameter Name="Operator" Type="Microsoft.Office.Interop.Excel.XlAutoFilterOperator" />
        <Parameter Name="Criteria2" Type="System.Object" />
        <Parameter Name="VisibleDropDown" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Field">要使筛选器基于的字段的偏移量（从列表的左边算起；最左边的字段为字段 1（一））。</param>
        <param name="Criteria1">条件（一个字符串；例如“101”）。 使用“=”查找空白字段，或使用“&lt;&gt;”查找非空白字段。 如果省略此参数，则条件为 <see langword="All" />。 如果 <c>Operator</c> 为 <see cref="F:Microsoft.Office.Interop.Excel.XlAutoFilterOperator.xlTop10Items" />，则 <c>Criteria1</c> 指定项数（如“10”）。</param>
        <param name="Operator">可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlAutoFilterOperator" /> 常量之一：  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlAutoFilterOperator.xlAnd" /><see cref="F:Microsoft.Office.Interop.Excel.XlAutoFilterOperator.xlBottom10Items" /><see cref="F:Microsoft.Office.Interop.Excel.XlAutoFilterOperator.xlBottom10Percent" /><see cref="F:Microsoft.Office.Interop.Excel.XlAutoFilterOperator.xlOr" /><see cref="F:Microsoft.Office.Interop.Excel.XlAutoFilterOperator.xlTop10Items" /><see cref="F:Microsoft.Office.Interop.Excel.XlAutoFilterOperator.xlTop10Percent" />  
  
 在 <c>Criteria1</c> 和 <c>Criteria2</c> 中使用 <see cref="F:Microsoft.Office.Interop.Excel.XlAutoFilterOperator.xlAnd" /> 和 <see cref="F:Microsoft.Office.Interop.Excel.XlAutoFilterOperator.xlOr" /> 来构造复合条件。</param>
        <param name="Criteria2">第二个条件（字符串）。 与 <c>Criteria1</c> 和 <c>Operator</c> 一起用于构造复合条件。</param>
        <param name="VisibleDropDown">
          如果对所筛选字段显示自动筛选下拉箭头，则为 <see langword="true" />；如果对所筛选字段隐藏自动筛选下拉箭头，则为 <see langword="false" />。 默认值为 <see langword="true" />。</param>
        <summary>使用“自动筛选”筛选列表。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果省略的自变量，则此方法只需切换的中的自动筛选下拉箭头显示<xref:Microsoft.Office.Tools.Excel.NamedRange>控件。  
  
## <a name="optional-parameters"></a>可选参数  
 可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions.md)。  
  
   
  
## Examples  
 下面的代码示例将通过 A5 A1 单元格设置为五个不同的名称字符串，然后使用<xref:Microsoft.Office.Tools.Excel.NamedRange.AutoFilter%2A>方法的名称筛选`"`Robert`"`。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#24](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#24)]
 [!code-vb[Trin_ExcelNamedRange#24](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#24)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoFit">
      <MemberSignature Language="C#" Value="public object AutoFit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object AutoFit() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.AutoFit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>更改 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件中的列宽或行高以实现最佳匹配。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一个单元的列宽度等于正文样式中的一个字符的宽度。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoFormat">
      <MemberSignature Language="C#" Value="public object AutoFormat (Microsoft.Office.Interop.Excel.XlRangeAutoFormat Format = Microsoft.Office.Interop.Excel.XlRangeAutoFormat.xlRangeAutoFormatClassic1, object Number, object Font, object Alignment, object Border, object Pattern, object Width);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object AutoFormat(valuetype Microsoft.Office.Interop.Excel.XlRangeAutoFormat Format, object Number, object Font, object Alignment, object Border, object Pattern, object Width) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.AutoFormat(Microsoft.Office.Interop.Excel.XlRangeAutoFormat,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Format" Type="Microsoft.Office.Interop.Excel.XlRangeAutoFormat" />
        <Parameter Name="Number" Type="System.Object" />
        <Parameter Name="Font" Type="System.Object" />
        <Parameter Name="Alignment" Type="System.Object" />
        <Parameter Name="Border" Type="System.Object" />
        <Parameter Name="Pattern" Type="System.Object" />
        <Parameter Name="Width" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Format">To be added.</param>
        <param name="Number">To be added.</param>
        <param name="Font">To be added.</param>
        <param name="Alignment">To be added.</param>
        <param name="Border">To be added.</param>
        <param name="Pattern">To be added.</param>
        <param name="Width">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoOutline">
      <MemberSignature Language="C#" Value="public object AutoOutline ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object AutoOutline() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.AutoOutline" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>自动为 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件创建大纲。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:Microsoft.Office.Tools.Excel.NamedRange>控件为单个单元格，则 Microsoft Office Excel 创建概述整张工作表。 新的大纲替换任何现有的大纲。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.NamedRange.AutoOutline%2A>方法创建的轮廓<xref:Microsoft.Office.Tools.Excel.NamedRange>控制，，然后提示用户通过调用清除该大纲<xref:Microsoft.Office.Tools.Excel.NamedRange.ClearOutline%2A>方法。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#30](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#30)]
 [!code-vb[Trin_ExcelNamedRange#30](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#30)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeDoubleClick">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.DocEvents_BeforeDoubleClickEventHandler BeforeDoubleClick;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.DocEvents_BeforeDoubleClickEventHandler BeforeDoubleClick" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.NamedRange.BeforeDoubleClick" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.DocEvents_BeforeDoubleClickEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当在默认的双击操作之前双击 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 双击重叠<xref:Microsoft.Office.Tools.Excel.NamedRange>控件引发上每个重叠的控件的事件。  
  
   
  
## Examples  
 下面的代码示例创建<xref:Microsoft.Office.Tools.Excel.NamedRange>然后填充带文本的所有单元格`Delete`。 若要测试事件，右键单击其中一个单元格，以便在该范围周围出现，然后双击要清除范围的单元格的边框。  
  
 此版本用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#45](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#45)]
 [!code-vb[Trin_ExcelNamedRange#45](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#45)]  
  
 此版本用于针对应用程序级外接程序。  
  
<!-- TODO: review snippet reference  [!CODE [Trin_ExcelNamedRange_AppLevelAddIn#45](Trin_ExcelNamedRange_AppLevelAddIn#45)]  -->  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeRightClick">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.DocEvents_BeforeRightClickEventHandler BeforeRightClick;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.DocEvents_BeforeRightClickEventHandler BeforeRightClick" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.NamedRange.BeforeRightClick" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.DocEvents_BeforeRightClickEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当在默认的右击操作之前右击 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 右键单击重叠<xref:Microsoft.Office.Tools.Excel.NamedRange>控件引发上每个重叠的控件的事件。  
  
   
  
## Examples  
 下面的代码示例创建<xref:Microsoft.Office.Tools.Excel.NamedRange>然后填充带文本的所有单元格`Delete`。 若要测试事件，右键单击其中一个单元格，以便在该范围周围出现，然后双击要清除范围的单元格的边框。  
  
 此版本用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#45](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#45)]
 [!code-vb[Trin_ExcelNamedRange#45](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#45)]  
  
 此版本用于针对应用程序级外接程序。  
  
<!-- TODO: review snippet reference  [!CODE [Trin_ExcelNamedRange_AppLevelAddIn#45](Trin_ExcelNamedRange_AppLevelAddIn#45)]  -->  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingContextChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BindingContextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BindingContextChanged" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.NamedRange.BindingContextChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BorderAround">
      <MemberSignature Language="C#" Value="public object BorderAround (object LineStyle, Microsoft.Office.Interop.Excel.XlBorderWeight Weight = Microsoft.Office.Interop.Excel.XlBorderWeight.xlThin, Microsoft.Office.Interop.Excel.XlColorIndex ColorIndex = Microsoft.Office.Interop.Excel.XlColorIndex.xlColorIndexAutomatic, object Color);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object BorderAround(object LineStyle, valuetype Microsoft.Office.Interop.Excel.XlBorderWeight Weight, valuetype Microsoft.Office.Interop.Excel.XlColorIndex ColorIndex, object Color) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.BorderAround(System.Object,Microsoft.Office.Interop.Excel.XlBorderWeight,Microsoft.Office.Interop.Excel.XlColorIndex,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="LineStyle" Type="System.Object" />
        <Parameter Name="Weight" Type="Microsoft.Office.Interop.Excel.XlBorderWeight" />
        <Parameter Name="ColorIndex" Type="Microsoft.Office.Interop.Excel.XlColorIndex" />
        <Parameter Name="Color" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="LineStyle">To be added.</param>
        <param name="Weight">To be added.</param>
        <param name="ColorIndex">To be added.</param>
        <param name="Color">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BorderAround2">
      <MemberSignature Language="C#" Value="public object BorderAround2 (object LineStyle, Microsoft.Office.Interop.Excel.XlBorderWeight Weight = Microsoft.Office.Interop.Excel.XlBorderWeight.xlThin, Microsoft.Office.Interop.Excel.XlColorIndex ColorIndex = Microsoft.Office.Interop.Excel.XlColorIndex.xlColorIndexAutomatic, object Color, object ThemeColor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object BorderAround2(object LineStyle, valuetype Microsoft.Office.Interop.Excel.XlBorderWeight Weight, valuetype Microsoft.Office.Interop.Excel.XlColorIndex ColorIndex, object Color, object ThemeColor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.BorderAround2(System.Object,Microsoft.Office.Interop.Excel.XlBorderWeight,Microsoft.Office.Interop.Excel.XlColorIndex,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="LineStyle" Type="System.Object" />
        <Parameter Name="Weight" Type="Microsoft.Office.Interop.Excel.XlBorderWeight" />
        <Parameter Name="ColorIndex" Type="Microsoft.Office.Interop.Excel.XlColorIndex" />
        <Parameter Name="Color" Type="System.Object" />
        <Parameter Name="ThemeColor" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="LineStyle">边框的线型。 可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlLineStyle" /> 值之一：  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlLineStyle.xlContinuous" /><see cref="F:Microsoft.Office.Interop.Excel.XlLineStyle.xlDash" /><see cref="F:Microsoft.Office.Interop.Excel.XlLineStyle.xlDashDot" /><see cref="F:Microsoft.Office.Interop.Excel.XlLineStyle.xlDashDotDot" /><see cref="F:Microsoft.Office.Interop.Excel.XlLineStyle.xlDot" /><see cref="F:Microsoft.Office.Interop.Excel.XlLineStyle.xlDouble" /><see cref="F:Microsoft.Office.Interop.Excel.XlLineStyle.xlSlantDashDot" /><see cref="F:Microsoft.Office.Interop.Excel.XlLineStyle.xlLineStyleNone" /></param>
        <param name="Weight">边框的粗细。 可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlBorderWeight" /> 常量之一：  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlBorderWeight.xlHairline" /><see cref="F:Microsoft.Office.Interop.Excel.XlBorderWeight.xlMedium" /><see cref="F:Microsoft.Office.Interop.Excel.XlBorderWeight.xlThick" /><see cref="F:Microsoft.Office.Interop.Excel.XlBorderWeight.xlThin" /></param>
        <param name="ColorIndex">边框颜色（作为访问当前调色板的索引或作为 <see cref="T:Microsoft.Office.Interop.Excel.XlColorIndex" /> 常数）。 可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlColorIndex" /> 常量之一：  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlColorIndex.xlColorIndexAutomatic" /><see cref="F:Microsoft.Office.Interop.Excel.XlColorIndex.xlColorIndexNone" /></param>
        <param name="Color">边框颜色，采用 RGB 值的形式。</param>
        <param name="ThemeColor">主题颜色（作为访问当前颜色主题的索引或作为 <see cref="T:Microsoft.Office.Interop.Excel.XlThemeColor" /> 值）。</param>
        <summary>向 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件添加一个边框，并设置新边框的 <see cref="P:Microsoft.Office.Interop.Excel.Border.Color" />、<see cref="P:Microsoft.Office.Interop.Excel.Border.LineStyle" /> 和 <see cref="P:Microsoft.Office.Interop.Excel.Border.Weight" /> 属性。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你必须指定`ColorIndex`或`Color`，但不是两者。  
  
 你可以指定`LineStyle`或`Weight`，但不是两者。 如果未指定两个参数，Microsoft Office Excel 将使用默认线条样式和权重。  
  
 此方法而不填充概述的整个范围。 若要设置的所有单元格的边框，必须设置<xref:Microsoft.Office.Interop.Excel.Borders.Color%2A>， <xref:Microsoft.Office.Interop.Excel.Borders.LineStyle%2A>，和<xref:Microsoft.Office.Interop.Excel.Borders.Weight%2A>属性<xref:Microsoft.Office.Interop.Excel.Borders>集合。 若要清除边框，必须设置<xref:Microsoft.Office.Interop.Excel.Borders.LineStyle%2A>属性<xref:Microsoft.Office.Interop.Excel.XlLineStyle.xlLineStyleNone>区域中的所有单元格。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Borders">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Borders Borders { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Borders Borders" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.Borders" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Borders</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个表示 <see cref="T:Microsoft.Office.Interop.Excel.Borders" /> 控件的边框 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 集合。</summary>
        <value>一个表示 <see cref="T:Microsoft.Office.Interop.Excel.Borders" /> 控件的边框的 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.NamedRange.Borders%2A>属性绘制的边框的双线<xref:Microsoft.Office.Tools.Excel.NamedRange>，并使用<xref:Microsoft.Office.Tools.Excel.NamedRange.Interior%2A>属性进行着色的内部<xref:Microsoft.Office.Tools.Excel.NamedRange>绿色。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#46](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#46)]
 [!code-vb[Trin_ExcelNamedRange#46](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#46)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Calculate">
      <MemberSignature Language="C#" Value="public object Calculate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Calculate() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.Calculate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>计算 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件中单元格的值。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例设置<xref:Microsoft.Office.Tools.Excel.NamedRange.Formula%2A>属性<xref:Microsoft.Office.Tools.Excel.NamedRange>控件来对其求和的单元格 A1 到 A5，使用<xref:Microsoft.Office.Tools.Excel.NamedRange.FormulaHidden%2A>属性来隐藏公式，并随后将调用<xref:Microsoft.Office.Tools.Excel.NamedRange.Calculate%2A>方法来对其求和的单元格和将其放在单元格中 A6。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#28](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#28)]
 [!code-vb[Trin_ExcelNamedRange#28](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#28)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CalculateRowMajorOrder">
      <MemberSignature Language="C#" Value="public object CalculateRowMajorOrder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object CalculateRowMajorOrder() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.CalculateRowMajorOrder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>计算某个特定范围的单元格。</summary>
        <returns>表示对特定范围单元格进行计算的对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Tools.Excel.NamedRange.CalculateRowMajorOrder%2A>方法计算指定的范围逐单元格，从其左上角到按行优先顺序其右下角。 这是通过 Excel 2000 和更早版本中用于计算一系列的相同过程。  
  
   
  
## Examples  
 下面的代码示例会导致 Excel 来计算指定的命名的范围。 若要运行此代码示例，请添加跨一个或多个单元格包含某些公式并将其命名的命名的范围控件`myFormulaRange`。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkBook_Additional#20](~/snippets/csharp/VS_Snippets_OfficeSP/trin_excelworkbook_additional/cs/ThisWorkbook.cs#20)]
 [!code-vb[Trin_ExcelWorkBook_Additional#20](~/snippets/visualbasic/VS_Snippets_OfficeSP/trin_excelworkbook_additional/vb/ThisWorkbook.vb#20)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cells">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range Cells { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range Cells" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.Cells" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个表示 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 控件中单元格的 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" />。</summary>
        <value>一个表示 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 控件中单元格的 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例创建<xref:Microsoft.Office.Tools.Excel.NamedRange>和颜色内部绿色。 然后，它显示的消息的显示多少单元格，列系列和行<xref:Microsoft.Office.Tools.Excel.NamedRange>。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#47](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#47)]
 [!code-vb[Trin_ExcelNamedRange#47](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#47)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.DocEvents_ChangeEventHandler Change;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.DocEvents_ChangeEventHandler Change" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.NamedRange.Change" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.DocEvents_ChangeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件中发生更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果将引发此事件<xref:Microsoft.Office.Tools.Excel.NamedRange>通过以编程方式修改或用户交互更改控制。 此事件不会发生时中的单元格<xref:Microsoft.Office.Tools.Excel.NamedRange>控件更改重新计算过程。  
  
   
  
## Examples  
 下面的代码示例创建<xref:Microsoft.Office.Tools.Excel.NamedRange>和<xref:Microsoft.Office.Tools.Excel.NamedRange.Change>事件处理程序。 若要引发<xref:Microsoft.Office.Tools.Excel.NamedRange.Change>事件，将文本添加到中的单元格之一<xref:Microsoft.Office.Tools.Excel.NamedRange>然后按 ENTER。  
  
 此版本用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#48](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#48)]
 [!code-vb[Trin_ExcelNamedRange#48](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#48)]  
  
 此版本用于针对应用程序级外接程序。  
  
<!-- TODO: review snippet reference  [!CODE [Trin_ExcelNamedRange_AppLevelAddIn#48](Trin_ExcelNamedRange_AppLevelAddIn#48)]  -->  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Characters">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Tools.Excel.NamedRange_CharactersType Characters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Tools.Excel.NamedRange_CharactersType Characters" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.Characters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Tools.Excel.NamedRange_CharactersType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Characters" /> 对象，该对象表示 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件文本中某一范围的字符。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.Characters" /> 对象，表示 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件文本中某一范围的字符。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Tools.Excel.NamedRange.Characters%2A>属性应与以下参数一起使用。  
  
|参数|描述|  
|---------------|-----------------|  
|`Start`|要返回的第一个字符。 如果此参数为 1 或被省略，则此属性将返回一系列字符开头的第一个字符。|  
|`Length`|要返回的字符数。 如果省略此参数，则此属性返回字符串的其余部分 (之后的所有内容`Start`字符)。|  
  
 如果你尝试使用<xref:Microsoft.Office.Tools.Excel.NamedRange.Characters%2A>而不指定任何参数，<xref:Microsoft.Office.Tools.Excel.NamedRange.Characters%2A>将获取<xref:Microsoft.Office.Tools.Excel.NamedRange_CharactersType>对象，是 Visual Studio 基础结构的一部分和不应在代码中直接使用。  
  
 你可以使用<xref:Microsoft.Office.Interop.Excel.Characters?displayProperty=fullName>到内的文本字符串的格式字符的对象。 <xref:Microsoft.Office.Interop.Excel.Characters?displayProperty=fullName>对象不是一个集合。  
  
## <a name="optional-parameters"></a>可选参数  
 可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions.md)。  
  
   
  
## Examples  
 下面的代码示例创建<xref:Microsoft.Office.Tools.Excel.NamedRange>word Smith 并用其填充它。 然后将它通过使加粗，并将大小设置为 14 更改 word 中的第一个字符。  
  
 此版本用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#49](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#49)]
 [!code-vb[Trin_ExcelNamedRange#49](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#49)]  
  
 此版本用于针对应用程序级外接程序。  
  
<!-- TODO: review snippet reference  [!CODE [Trin_ExcelNamedRange_AppLevelAddIn#49](Trin_ExcelNamedRange_AppLevelAddIn#49)]  -->  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckSpelling">
      <MemberSignature Language="C#" Value="public object CheckSpelling (object CustomDictionary, object IgnoreUppercase, object AlwaysSuggest, object SpellLang);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object CheckSpelling(object CustomDictionary, object IgnoreUppercase, object AlwaysSuggest, object SpellLang) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.CheckSpelling(System.Object,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CustomDictionary" Type="System.Object" />
        <Parameter Name="IgnoreUppercase" Type="System.Object" />
        <Parameter Name="AlwaysSuggest" Type="System.Object" />
        <Parameter Name="SpellLang" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="CustomDictionary">指示在主字典中找不到该单词时要检查的自定义字典的文件名。 如果省略此参数，则使用当前指定的字典。</param>
        <param name="IgnoreUppercase">
          如果让 Microsoft Office Excel 忽略全大写的单词，则为 <see langword="true" />；如果让 Excel 检查全大写的单词，则为 <see langword="false" />。 如果省略此参数，则使用当前设置。</param>
        <param name="AlwaysSuggest">
          如果让 Excel 在找到错误拼写时显示建议的替换拼写的列表，则为 <see langword="true" />；如果让 Excel 在您输入正确的拼写时暂停，则为 <see langword="false" />。 如果省略此参数，则使用当前设置。</param>
        <param name="SpellLang">所使用的字典的语言。 可以为 <see cref="T:Microsoft.Office.Core.MsoLanguageID" /> 属性使用的 <see cref="P:Microsoft.Office.Core.LanguageSettings.LanguageID(Microsoft.Office.Core.MsoAppLanguageID)" /> 值之一。</param>
        <summary>检查 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件中文本的拼写。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此窗体具有无返回值。Excel 显示**拼写**对话框。  
  
## <a name="optional-parameters"></a>可选参数  
 可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions.md)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.NamedRange.CheckSpelling%2A>方法检查字符串"Mongeese"的拼写是否正确。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#23](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#23)]
 [!code-vb[Trin_ExcelNamedRange#23](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public object Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.Clear" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>清除整个 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 以下代码添加注释和某些文本<xref:Microsoft.Office.Tools.Excel.NamedRange>控制，然后显示一个消息框，提示你以通过清除单元格<xref:Microsoft.Office.Tools.Excel.NamedRange.Clear%2A>方法。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#41](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#41)]
 [!code-vb[Trin_ExcelNamedRange#41](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#41)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearComments">
      <MemberSignature Language="C#" Value="public void ClearComments ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ClearComments() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.ClearComments" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件中清除所有单元格注释。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearContents">
      <MemberSignature Language="C#" Value="public object ClearContents ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ClearContents() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.ClearContents" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件中清除公式。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearFormats">
      <MemberSignature Language="C#" Value="public object ClearFormats ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ClearFormats() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.ClearFormats" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>清除 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的格式。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例添加到注释<xref:Microsoft.Office.Tools.Excel.NamedRange>控件名为`NamedRange1`然后会提示你删除中的所有格式`NamedRange1`通过调用<xref:Microsoft.Office.Tools.Excel.NamedRange.ClearFormats%2A>方法。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#36](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#36)]
 [!code-vb[Trin_ExcelNamedRange#36](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#36)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearHyperlinks">
      <MemberSignature Language="C#" Value="public void ClearHyperlinks ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ClearHyperlinks() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.ClearHyperlinks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从指定范围移除所有超链接。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用<xref:Microsoft.Office.Tools.Excel.NamedRange.ClearHyperlinks%2A>上指定的范围的方法相当于使用**清除超链接**命令**清除**下拉列表中的**编辑**组**主页**在 Excel 中的选项卡。 将删除仅超链接;所有其他单元格内容，例如文本和格式设置不会影响。  
  
> [!NOTE]
>  此属性将出现在 IntelliSense Excel 2007 项目中面向[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]。 但是，不能在 Excel 2007 项目中使用此属性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearNotes">
      <MemberSignature Language="C#" Value="public object ClearNotes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ClearNotes() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.ClearNotes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件中的所有单元格清除注释。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例添加到注释<xref:Microsoft.Office.Tools.Excel.NamedRange>控件名为`NamedRange1`然后会提示你删除所有注释从`NamedRange1`通过调用<xref:Microsoft.Office.Tools.Excel.NamedRange.ClearNotes%2A>方法。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#35](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#35)]
 [!code-vb[Trin_ExcelNamedRange#35](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#35)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearOutline">
      <MemberSignature Language="C#" Value="public object ClearOutline ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ClearOutline() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.ClearOutline" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>清除 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的大纲。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.NamedRange.AutoOutline%2A>方法创建的轮廓<xref:Microsoft.Office.Tools.Excel.NamedRange>控制，，然后提示你通过调用清除该大纲<xref:Microsoft.Office.Tools.Excel.NamedRange.ClearOutline%2A>方法。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#29](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#29)]
 [!code-vb[Trin_ExcelNamedRange#29](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#29)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Column">
      <MemberSignature Language="C#" Value="public int Column { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Column" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.Column" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的第一个区域中第一列的编号。</summary>
        <value>
          <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件中第一个区域内第一列的编号。 列 A 返回 1，列 B 返回 2，依此类推。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例创建<xref:Microsoft.Office.Tools.Excel.NamedRange>并使用<xref:Microsoft.Office.Tools.Excel.NamedRange.Column%2A>和<xref:Microsoft.Office.Tools.Excel.NamedRange.Row%2A>属性，以显示第一列数和行中<xref:Microsoft.Office.Tools.Excel.NamedRange>。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#50](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#50)]
 [!code-vb[Trin_ExcelNamedRange#50](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#50)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnDifferences">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range ColumnDifferences (object Comparison);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Interop.Excel.Range ColumnDifferences(object Comparison) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.ColumnDifferences(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Comparison" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Comparison">一个要与指定的范围进行比较的单元格。</param>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，它表示每一列中其内容与比较单元格不同的所有单元格。</summary>
        <returns>一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，表示内容与每一列中的比较单元格不同的所有单元格。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例创建<xref:Microsoft.Office.Tools.Excel.NamedRange>并填充具有两个不同值的范围中的单元格。 它比较中的单元格的所有<xref:Microsoft.Office.Tools.Excel.NamedRange>B5 单元格，这是 11 中，并选择具有不匹配的值的单元格的值。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#51](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#51)]
 [!code-vb[Trin_ExcelNamedRange#51](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#51)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Columns">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range Columns { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range Columns" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.Columns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，它表示 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件中的一列或多个列。</summary>
        <value>
          <see cref="T:Microsoft.Office.Interop.Excel.Range" />，它表示 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件中的一列或多个列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果使用不带参数，此属性返回<xref:Microsoft.Office.Interop.Excel.Range>对象，其中包含指定范围中的所有列。  
  
 此属性可以使用以下可选参数，用于指定范围中获取特定的列。 如果参数中使用此属性，返回值是必须强制转换为对象<xref:Microsoft.Office.Interop.Excel.Range>。  
  
|参数|描述|  
|---------------|-----------------|  
|`RowIndex`|若要获取的一个或多个列的索引。<br /><br /> 若要获取的单个列，请将以下对象之一传递给此参数：<br /><br /> 的一个整数，指定你想要获取的列的索引。 列索引从 1 开始。<br />的你想要获取的列的字母组成字符串。<br /><br /> 若要获取多个连续列，请传递与格式字符串"`first column letter`:`last column letter`"。 例如，若要获取列 A 到 E，传递"A:E"。 **注意：** 此参数的名称有误导性; 此参数指定你想要获取，不是行的列的索引。|  
|`ColumnIndex`|不使用此参数。 此属性将引发<xref:System.Runtime.InteropServices.COMException>如果你尝试将值传递给此参数。|  
  
   
  
## Examples  
 下面的代码示例创建<xref:Microsoft.Office.Tools.Excel.NamedRange>，然后使用<xref:Microsoft.Office.Tools.Excel.NamedRange.Columns%2A>属性在范围的第一列中设置颜色、 名称、 大小和加粗的字体的所有单元格。  
  
 此示例适用于文档级自定义。 若要运行此代码，请将其复制到你的项目中的工作表类之一。  
  
 [!code-csharp[Trin_ExcelNamedRange#119](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#119)]
 [!code-vb[Trin_ExcelNamedRange#119](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#119)]  
  
 下面的代码示例创建<xref:Microsoft.Office.Tools.Excel.NamedRange>，然后使用<xref:Microsoft.Office.Tools.Excel.NamedRange.Columns%2A>属性来确定有多少列都在范围之内。  
  
 此示例适用于文档级自定义。 若要运行此代码，请将其复制到你的项目中的工作表类之一。  
  
 [!code-csharp[Trin_ExcelNamedRange#47](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#47)]
 [!code-vb[Trin_ExcelNamedRange#47](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#47)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnWidth">
      <MemberSignature Language="C#" Value="public object ColumnWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ColumnWidth" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.ColumnWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件中所有列的宽度。</summary>
        <value>如果 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件中所有的列具有相同的宽度，则此属性返回一个表示该宽度的对象。 如果该范围中的列具有不同宽度，则此属性返回 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一个单元的列宽度等于正文样式中的一个字符的宽度。 对于非等宽字体使用的字符 0 （零） 的宽度。  
  
 使用<xref:Microsoft.Office.Interop.Excel.Range.Width%2A>属性以磅为单位返回列的宽度。  
  
   
  
## Examples  
 下面的代码示例创建<xref:Microsoft.Office.Tools.Excel.NamedRange>，然后设置列的宽度和范围的一部分的行的高度。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#52](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#52)]
 [!code-vb[Trin_ExcelNamedRange#52](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#52)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Comment">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Comment Comment { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Comment Comment" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.Comment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Comment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Comment" />，它表示与 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件左上角中的单元格相关联的注释。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.Comment" />，表示与 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件左上角中的单元格相关联的注释。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例创建<xref:Microsoft.Office.Tools.Excel.NamedRange>并将注释添加到单元格。 然后显示一个消息框，导致变得可见，如果用户单击此注释**确定**。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#53](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#53)]
 [!code-vb[Trin_ExcelNamedRange#53](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#53)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Consolidate">
      <MemberSignature Language="C#" Value="public object Consolidate (object Sources, object Function, object TopRow, object LeftColumn, object CreateLinks);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Consolidate(object Sources, object Function, object TopRow, object LeftColumn, object CreateLinks) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.Consolidate(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Sources" Type="System.Object" />
        <Parameter Name="Function" Type="System.Object" />
        <Parameter Name="TopRow" Type="System.Object" />
        <Parameter Name="LeftColumn" Type="System.Object" />
        <Parameter Name="CreateLinks" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Sources">合并源（作为以 R1C1 样式表示法表示的文本引用字符串的数组）。 引用必须包含要合并的工作表的完整路径。</param>
        <param name="Function">可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlConsolidationFunction" /> 常量之一：  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlConsolidationFunction.xlAverage" /><see cref="F:Microsoft.Office.Interop.Excel.XlConsolidationFunction.xlCount" /><see cref="F:Microsoft.Office.Interop.Excel.XlConsolidationFunction.xlCountNums" /><see cref="F:Microsoft.Office.Interop.Excel.XlConsolidationFunction.xlMax" /><see cref="F:Microsoft.Office.Interop.Excel.XlConsolidationFunction.xlMin" /><see cref="F:Microsoft.Office.Interop.Excel.XlConsolidationFunction.xlProduct" /><see cref="F:Microsoft.Office.Interop.Excel.XlConsolidationFunction.xlStDev" /><see cref="F:Microsoft.Office.Interop.Excel.XlConsolidationFunction.xlStDevP" /><see cref="F:Microsoft.Office.Interop.Excel.XlConsolidationFunction.xlSum" /><see cref="F:Microsoft.Office.Interop.Excel.XlConsolidationFunction.xlVar" /><see cref="F:Microsoft.Office.Interop.Excel.XlConsolidationFunction.xlVarP" /></param>
        <param name="TopRow">
          如果基于合并范围内首行中的列标题合并数据，则为 <see langword="true" />；如果按位置合并数据，则为 <see langword="false" />。 默认值为 <see langword="false" />。</param>
        <param name="LeftColumn">
          如果基于合并范围内左列中的行标题合并数据，则为 <see langword="true" />；如果按位置合并数据，则为 <see langword="false" />。 默认值为 <see langword="false" />。</param>
        <param name="CreateLinks">
          如果让合并功能使用工作表链接，则为 <see langword="true" />；如果让合并功能复制数据，则为 <see langword="false" />。 默认值为 <see langword="false" />。</param>
        <summary>将多个工作表中多个范围中的数据合并到 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件中。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a>可选参数  
 可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions.md)。  
  
   
  
## Examples  
 下面的代码示例为随机数字 B1 至 D10 之间设置的单元格范围，然后使用<xref:Microsoft.Office.Tools.Excel.NamedRange.Consolidate%2A>方法以合并到此范围<xref:Microsoft.Office.Tools.Excel.NamedRange>控件。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#22](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#22)]
 [!code-vb[Trin_ExcelNamedRange#22](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Container">
      <MemberSignature Language="C#" Value="public System.ComponentModel.IContainer Container { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.IContainer Container" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.Container" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.IContainer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public object Copy (object Destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Copy(object Destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.Copy(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Destination" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Destination">指定要将 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的内容复制到其中的新范围。 如果省略此参数，则 Microsoft Office Excel 将该范围复制到剪贴板。</param>
        <summary>将 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的内容复制到指定的范围或剪贴板。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a>可选参数  
 可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions.md)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.NamedRange.Copy%2A>方法的内容复制<xref:Microsoft.Office.Tools.Excel.NamedRange>控件名为`NamedRange1`到剪贴板，然后使用<xref:Microsoft.Office.Tools.Excel.NamedRange.PasteSpecial%2A>方法以粘贴到这些内容<xref:Microsoft.Office.Tools.Excel.NamedRange>控件名为`NamedRange2`. `Operation`参数设置为<xref:Microsoft.Office.Interop.Excel.XlPasteSpecialOperation.xlPasteSpecialOperationAdd>，以便在每个单元格的内容`NamedRange1`添加到中的相应单元格`NamedRange2`。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#10](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#10)]
 [!code-vb[Trin_ExcelNamedRange#10](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyFromRecordset">
      <MemberSignature Language="C#" Value="public int CopyFromRecordset (object Data, object MaxRows, object MaxColumns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CopyFromRecordset(object Data, object MaxRows, object MaxColumns) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.CopyFromRecordset(System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Data" Type="System.Object" />
        <Parameter Name="MaxRows" Type="System.Object" />
        <Parameter Name="MaxColumns" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Data">要复制到范围中的记录集。</param>
        <param name="MaxRows">要复制到工作表中的记录的最大数目。 如果省略此参数，则复制记录集对象中的所有记录。</param>
        <param name="MaxColumns">要复制到工作表中的字段的最大数目。 如果省略此参数，则复制记录集对象中的所有字段。</param>
        <summary>从 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的左上角开始，将 ADO 或 DAO 记录集的内容复制到工作表中。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果记录集包含与在其中的 OLE 对象的字段，此方法将失败。  
  
 复制开始记录集的当前行。 复制完成后，记录集对象的 EOF 属性是`true`。  
  
## <a name="optional-parameters"></a>可选参数  
 可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyPicture">
      <MemberSignature Language="C#" Value="public object CopyPicture (Microsoft.Office.Interop.Excel.XlPictureAppearance Appearance = Microsoft.Office.Interop.Excel.XlPictureAppearance.xlScreen, Microsoft.Office.Interop.Excel.XlCopyPictureFormat Format = Microsoft.Office.Interop.Excel.XlCopyPictureFormat.xlPicture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object CopyPicture(valuetype Microsoft.Office.Interop.Excel.XlPictureAppearance Appearance, valuetype Microsoft.Office.Interop.Excel.XlCopyPictureFormat Format) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.CopyPicture(Microsoft.Office.Interop.Excel.XlPictureAppearance,Microsoft.Office.Interop.Excel.XlCopyPictureFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Appearance" Type="Microsoft.Office.Interop.Excel.XlPictureAppearance" />
        <Parameter Name="Format" Type="Microsoft.Office.Interop.Excel.XlCopyPictureFormat" />
      </Parameters>
      <Docs>
        <param name="Appearance">指定复制图片的方法。  
  
 可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlPictureAppearance" /> 常量之一：  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlPictureAppearance.xlPrinter" /><see cref="F:Microsoft.Office.Interop.Excel.XlPictureAppearance.xlScreen" /></param>
        <param name="Format">该图片的格式。  
  
 可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlCopyPictureFormat" /> 常量之一：  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlCopyPictureFormat.xlBitmap" /><see cref="F:Microsoft.Office.Interop.Excel.XlCopyPictureFormat.xlPicture" /></param>
        <summary>将 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件作为图片复制到剪贴板。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a>可选参数  
 可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions.md)。  
  
   
  
## Examples  
 下面的代码示例创建<xref:Microsoft.Office.Tools.Excel.NamedRange>word Smith 并用其填充它。 然后，它使用<xref:Microsoft.Office.Tools.Excel.NamedRange.CopyPicture%2A>方法以复制<xref:Microsoft.Office.Tools.Excel.NamedRange>到剪贴板以位图格式。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#54](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#54)]
 [!code-vb[Trin_ExcelNamedRange#54](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#54)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件中单元格的数目。</summary>
        <value>
          <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件中单元格的数目。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例创建<xref:Microsoft.Office.Tools.Excel.NamedRange>和颜色内部绿色。 然后，它显示的消息的显示多少单元格，列系列和行<xref:Microsoft.Office.Tools.Excel.NamedRange>。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#47](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#47)]
 [!code-vb[Trin_ExcelNamedRange#47](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#47)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CountLarge">
      <MemberSignature Language="C#" Value="public object CountLarge { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object CountLarge" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.CountLarge" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取值范围内最大值出现的次数。</summary>
        <value>表示在值范围内最大值出现的次数的对象。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateNames">
      <MemberSignature Language="C#" Value="public object CreateNames (object Top, object Left, object Bottom, object Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object CreateNames(object Top, object Left, object Bottom, object Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.CreateNames(System.Object,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Top" Type="System.Object" />
        <Parameter Name="Left" Type="System.Object" />
        <Parameter Name="Bottom" Type="System.Object" />
        <Parameter Name="Right" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Top">
          如果通过使用首行中的标签来创建名称，则为 <see langword="true" />。 默认值为 <see langword="false" />。</param>
        <param name="Left">
          如果通过使用左列中的标签来创建名称，则为 <see langword="true" />。 默认值为 <see langword="false" />。</param>
        <param name="Bottom">
          如果通过使用底端行中的标签来创建名称，则为 <see langword="true" />。 默认值为 <see langword="false" />。</param>
        <param name="Right">
          如果通过使用右列中的标签来创建名称，则为 <see langword="true" />。 默认值为 <see langword="false" />。</param>
        <summary>在 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件中基于表中的文本标签创建名称。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果您不指定其中一个`Top`， `Left`， `Bottom`，或`Right`，Microsoft Office Excel 猜出文本标签，基于的形状上的位置<xref:Microsoft.Office.Tools.Excel.NamedRange>控件。  
  
## <a name="optional-parameters"></a>可选参数  
 可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePublisher">
      <MemberSignature Language="C#" Value="public object CreatePublisher (object Edition, Microsoft.Office.Interop.Excel.XlPictureAppearance Appearance = Microsoft.Office.Interop.Excel.XlPictureAppearance.xlScreen, object ContainsPICT, object ContainsBIFF, object ContainsRTF, object ContainsVALU);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object CreatePublisher(object Edition, valuetype Microsoft.Office.Interop.Excel.XlPictureAppearance Appearance, object ContainsPICT, object ContainsBIFF, object ContainsRTF, object ContainsVALU) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.CreatePublisher(System.Object,Microsoft.Office.Interop.Excel.XlPictureAppearance,System.Object,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Edition" Type="System.Object" />
        <Parameter Name="Appearance" Type="Microsoft.Office.Interop.Excel.XlPictureAppearance" />
        <Parameter Name="ContainsPICT" Type="System.Object" />
        <Parameter Name="ContainsBIFF" Type="System.Object" />
        <Parameter Name="ContainsRTF" Type="System.Object" />
        <Parameter Name="ContainsVALU" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Edition">To be added.</param>
        <param name="Appearance">To be added.</param>
        <param name="ContainsPICT">To be added.</param>
        <param name="ContainsBIFF">To be added.</param>
        <param name="ContainsRTF">To be added.</param>
        <param name="ContainsVALU">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Creator">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlCreator Creator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlCreator Creator" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.Creator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlCreator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 32 位整数，该整数指示已在其中创建 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的应用程序。</summary>
        <value>
          <see cref="T:Microsoft.Office.Interop.Excel.XlCreator" /> 值之一。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:Microsoft.Office.Tools.Excel.NamedRange>在 Microsoft Office Excel 中创建控件，则此属性返回十六进制数字 5843454 C 中，该数字与字符串接等效。  
  
   
  
## Examples  
 下面的代码示例创建<xref:Microsoft.Office.Tools.Excel.NamedRange>，然后使用<xref:Microsoft.Office.Tools.Excel.NamedRange.Creator%2A>属性来确定是否<xref:Microsoft.Office.Tools.Excel.NamedRange>在 Microsoft Office Excel 中创建。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#55](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#55)]
 [!code-vb[Trin_ExcelNamedRange#55](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#55)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentArray">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range CurrentArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range CurrentArray" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.CurrentArray" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>如果 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件属于某个数组，则获取一个表示整个数组的 <see cref="T:Microsoft.Office.Interop.Excel.Range" />。</summary>
        <value>如果 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 控件属于某个数组，则为表示数组的 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentRegion">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range CurrentRegion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range CurrentRegion" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.CurrentRegion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个表示当前区域的 <see cref="T:Microsoft.Office.Interop.Excel.Range" />。</summary>
        <value>一个表示当前区域的 <see cref="T:Microsoft.Office.Interop.Excel.Range" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当前的区域是受空白的行和空白的列的任意组合的范围。  
  
 此属性不能在受保护工作表。  
  
   
  
## Examples  
 下面的代码示例创建<xref:Microsoft.Office.Tools.Excel.NamedRange>值 123 并用其填充它。 然后进行着色的当前区域，这是由空白的行和列，绿色包围的区域。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#56](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#56)]
 [!code-vb[Trin_ExcelNamedRange#56](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#56)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cut">
      <MemberSignature Language="C#" Value="public object Cut (object Destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Cut(object Destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.Cut(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Destination" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Destination">应当将数据粘贴到其中的范围。 如果省略此参数，则将对象剪切到剪贴板。</param>
        <summary>将 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的内容剪切到剪贴板，或者将它复制到指定的目标。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a>可选参数  
 可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions.md)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.NamedRange.Find%2A>方法以查找具有值的第一个单元格`Seashell`中<xref:Microsoft.Office.Tools.Excel.NamedRange>控件。 然后该示例使用<xref:Microsoft.Office.Tools.Excel.NamedRange.FindNext%2A>和<xref:Microsoft.Office.Tools.Excel.NamedRange.FindPrevious%2A>方法查找具有值的下一步单元格`Seashell`，然后返回到原始的单元格。 最后，该示例使用<xref:Microsoft.Office.Tools.Excel.NamedRange.Cut%2A>方法剪切具有值的第一个单元格的内容`Seashell`并将它粘贴到单元格 B1。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#17](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#17)]
 [!code-vb[Trin_ExcelNamedRange#17](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataSeries">
      <MemberSignature Language="C#" Value="public object DataSeries (object Rowcol, Microsoft.Office.Interop.Excel.XlDataSeriesType Type = Microsoft.Office.Interop.Excel.XlDataSeriesType.xlDataSeriesLinear, Microsoft.Office.Interop.Excel.XlDataSeriesDate Date = Microsoft.Office.Interop.Excel.XlDataSeriesDate.xlDay, object Step, object Stop, object Trend);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object DataSeries(object Rowcol, valuetype Microsoft.Office.Interop.Excel.XlDataSeriesType Type, valuetype Microsoft.Office.Interop.Excel.XlDataSeriesDate Date, object Step, object Stop, object Trend) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.DataSeries(System.Object,Microsoft.Office.Interop.Excel.XlDataSeriesType,Microsoft.Office.Interop.Excel.XlDataSeriesDate,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rowcol" Type="System.Object" />
        <Parameter Name="Type" Type="Microsoft.Office.Interop.Excel.XlDataSeriesType" />
        <Parameter Name="Date" Type="Microsoft.Office.Interop.Excel.XlDataSeriesDate" />
        <Parameter Name="Step" Type="System.Object" />
        <Parameter Name="Stop" Type="System.Object" />
        <Parameter Name="Trend" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Rowcol">可以为 <see cref="F:Microsoft.Office.Interop.Excel.XlRowCol.xlRows" /> 或 <see cref="F:Microsoft.Office.Interop.Excel.XlRowCol.xlColumns" /> 常数以将数据系列分别输入行或列中。 如果省略此参数，则使用该范围的大小和形状。</param>
        <param name="Type">可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlDataSeriesType" /> 常量之一：  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlDataSeriesType.xlAutoFill" /><see cref="F:Microsoft.Office.Interop.Excel.XlDataSeriesType.xlDataSeriesLinear" /><see cref="F:Microsoft.Office.Interop.Excel.XlDataSeriesType.xlChronological" /><see cref="F:Microsoft.Office.Interop.Excel.XlDataSeriesType.xlGrowth" /></param>
        <param name="Date">如果 <c>Type</c> 参数为 <see cref="F:Microsoft.Office.Interop.Excel.XlDataSeriesType.xlChronological" />，则 <c>Date</c> 参数指示步长日期单位。  
  
 可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlDataSeriesDate" /> 常量之一：  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlDataSeriesDate.xlDay" /><see cref="F:Microsoft.Office.Interop.Excel.XlDataSeriesDate.xlWeekday" /><see cref="F:Microsoft.Office.Interop.Excel.XlDataSeriesDate.xlMonth" /><see cref="F:Microsoft.Office.Interop.Excel.XlDataSeriesDate.xlYear" /></param>
        <param name="Step">该系列的步长值。 默认值为 1（一）。</param>
        <param name="Stop">该系列的终止值。 如果省略此参数，则 Microsoft Office Excel 会填充到该范围的末尾。</param>
        <param name="Trend">
          如果创建等差序列或等比序列，则为 <see langword="true" />；如果创建标准数据系列，则为 <see langword="false" />。 默认值为 <see langword="false" />。</param>
        <summary>在 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件中创建一个数据系列。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a>可选参数  
 可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions.md)。  
  
   
  
## Examples  
 下面的代码示例创建十二个日期的一系列。 序列包含 1996 年中每个月的最后一天。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#57](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#57)]
 [!code-vb[Trin_ExcelNamedRange#57](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#57)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultDataSourceUpdateMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataSourceUpdateMode DefaultDataSourceUpdateMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataSourceUpdateMode DefaultDataSourceUpdateMode" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.DefaultDataSourceUpdateMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataSourceUpdateMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置默认 <see cref="T:System.Windows.Forms.DataSourceUpdateMode" />。</summary>
        <value>
          <see cref="T:System.Windows.Forms.DataSourceUpdateMode" /> 值之一。 默认值为 <see cref="F:System.Windows.Forms.DataSourceUpdateMode.Never" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在情况下使用此属性其中<xref:System.Windows.Forms.Binding>而无需<xref:System.Windows.Forms.Binding.DataSourceUpdateMode%2A>指定值添加到<xref:System.Windows.Forms.IBindableComponent.DataBindings%2A>集合。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public void Delete ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Delete() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.Delete" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>删除动态创建的 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件并将其从 <see cref="T:Microsoft.Office.Tools.Excel.ControlCollection" /> 中移除。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法仅应该用于<xref:Microsoft.Office.Tools.Excel.NamedRange>在运行时以编程方式创建的控件。 如果在调用此方法引发异常<xref:Microsoft.Office.Tools.Excel.NamedRange>在设计时添加到文档的控制。  
  
   
  
## Examples  
 下面的代码示例设置<xref:Microsoft.Office.Tools.Excel.NamedRange>包括 A1 到单元格 A5 到随机值，然后使用的控件<xref:Microsoft.Office.Tools.Excel.NamedRange.Delete%2A>方法移除<xref:Microsoft.Office.Tools.Excel.NamedRange>控件。 请注意，虽然<xref:Microsoft.Office.Tools.Excel.NamedRange>删除控件，通过 A5 A1 单元格保留其值。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#19](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#19)]
 [!code-vb[Trin_ExcelNamedRange#19](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#19)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dependents">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range Dependents { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range Dependents" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.Dependents" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，它表示包含 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的所有依赖单元格的范围。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，表示包含 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的所有依赖单元格的范围。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性可以返回一个多重选择 (的并集<xref:Microsoft.Office.Interop.Excel.Range?displayProperty=fullName>对象) 如果存在多个依赖。  
  
 此属性仅适用于活动工作表，不能跟踪远程引用。  
  
   
  
## Examples  
 下面的代码示例创建<xref:Microsoft.Office.Tools.Excel.NamedRange>和设置单元格 A1 来指代中的引用<xref:Microsoft.Office.Tools.Excel.NamedRange>。 它然后 A2 来引用单元格 A1 单元格中设置的引用。 然后，该代码示例使用<xref:Microsoft.Office.Tools.Excel.NamedRange.Dependents%2A>属性选择的依赖项<xref:Microsoft.Office.Tools.Excel.NamedRange>，这是单元格 A1 和 A2。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#58](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#58)]
 [!code-vb[Trin_ExcelNamedRange#58](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#58)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Deselected">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.DocEvents_SelectionChangeEventHandler Deselected;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.DocEvents_SelectionChangeEventHandler Deselected" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.NamedRange.Deselected" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.DocEvents_SelectionChangeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当所选内容从 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件移到 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件外部的区域时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 将引发此事件仅当<xref:Microsoft.Office.Tools.Excel.NamedRange>控件具有焦点，并且然后将焦点移远离<xref:Microsoft.Office.Tools.Excel.NamedRange>控件。  
  
   
  
## Examples  
 下面的代码示例演示的处理程序<xref:Microsoft.Office.Tools.Excel.NamedRange.Deselected>显示所选内容传输到的单元格的地址的事件。  
  
 此版本用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#59](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#59)]
 [!code-vb[Trin_ExcelNamedRange#59](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#59)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DialogBox">
      <MemberSignature Language="C#" Value="public object DialogBox ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object DialogBox() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.DialogBox" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>显示由 Microsoft Office Excel 4.0 宏工作表上的对话框定义表定义的对话框。</summary>
        <returns>所选控件的编号，或者如果用户单击“取消”按钮，则为 **<see langword="false" />**。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Tools.Excel.NamedRange>控件必须为 Excel 4.0 宏表上的对话框定义表。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DirectDependents">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range DirectDependents { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range DirectDependents" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.DirectDependents" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，它表示包含 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的所有直接依赖单元格的范围。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，表示包含 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的所有直接依赖单元格的范围。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性仅适用于活动工作表，不能跟踪远程引用。  
  
   
  
## Examples  
 下面的代码示例创建<xref:Microsoft.Office.Tools.Excel.NamedRange>和设置单元格 C1 来指代中的引用<xref:Microsoft.Office.Tools.Excel.NamedRange>。 它然后单元格 C2 来引用单元格 C1 中设置的引用。 然后，该代码示例使用<xref:Microsoft.Office.Tools.Excel.NamedRange.DirectDependents%2A>属性选择的直接依赖<xref:Microsoft.Office.Tools.Excel.NamedRange>，即单元格 C1。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#60](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#60)]
 [!code-vb[Trin_ExcelNamedRange#60](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#60)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DirectPrecedents">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range DirectPrecedents { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range DirectPrecedents" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.DirectPrecedents" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，它表示包含 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的所有直接引用单元格的范围。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，表示包含 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的所有直接引用单元格的范围。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性可以返回一个多重选择 (的并集<xref:Microsoft.Office.Interop.Excel.Range?displayProperty=fullName>对象) 如果存在多个依赖。  
  
 此属性仅适用于活动工作表，不能跟踪远程引用。  
  
   
  
## Examples  
 下面的代码示例创建<xref:Microsoft.Office.Tools.Excel.NamedRange>和单元格来引用单元格 C1，C2 中设置引用，然后设置的引用<xref:Microsoft.Office.Tools.Excel.NamedRange>来引用单元格 C2。 然后，该代码示例使用<xref:Microsoft.Office.Tools.Excel.NamedRange.DirectPrecedents%2A>属性选择的直接引用单元格<xref:Microsoft.Office.Tools.Excel.NamedRange>，即单元格 C2。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#61](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#61)]
 [!code-vb[Trin_ExcelNamedRange#61](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#61)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dirty">
      <MemberSignature Language="C#" Value="public void Dirty ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dirty() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.Dirty" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>指定要在下一次重新计算时重新计算的 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Tools.Excel.NamedRange.Calculate%2A>方法强制<xref:Microsoft.Office.Tools.Excel.NamedRange>控件进行重复计算，Microsoft Office Excel 理解为需要重新计算的单元格。  
  
 如果应用程序用于手动计算模式中，使用<xref:Microsoft.Office.Tools.Excel.NamedRange.Dirty%2A>方法指示 Excel 标识<xref:Microsoft.Office.Tools.Excel.NamedRange>控件重新计算。 如果应用程序是在自动计算模式下，使用<xref:Microsoft.Office.Tools.Excel.NamedRange.Dirty%2A>方法指示 Excel 执行重新计算。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DiscardChanges">
      <MemberSignature Language="C#" Value="public void DiscardChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DiscardChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.DiscardChanges" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>放弃范围内已编辑单元格中的所有更改。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 对于基于 OLAP 数据源的范围，此方法中删除所有值和公式的单元中输入，然后运行更新操作来从数据源检索的最新值。 它将所有值单元格的编辑，并还执行 ROLLBACK TRANSACTION 语句针对的 OLAP 服务器的数据源值都设置为 NULL。 对于基于非 OLAP 数据源的范围，此方法只是清除所有编辑过的单元格。  
  
> [!NOTE]
>  此方法将显示在 IntelliSense Excel 2007 项目中面向[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]。 但是，不能在 Excel 2007 项目中使用此方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MissingMemberException">在 Excel 2007 项目中使用此方法。</exception>
      </Docs>
    </Member>
    <Member MemberName="DisplayFormat">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.DisplayFormat DisplayFormat { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.DisplayFormat DisplayFormat" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.DisplayFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.DisplayFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个对象，该对象表示指定范围的显示设置。</summary>
        <value>表示指定范围的显示设置的对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  此属性将出现在 IntelliSense Excel 2007 项目中面向[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]。 但是，不能在 Excel 2007 项目中使用此属性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EditionOptions">
      <MemberSignature Language="C#" Value="public object EditionOptions (Microsoft.Office.Interop.Excel.XlEditionType Type, Microsoft.Office.Interop.Excel.XlEditionOptionsOption Option, object Name, object Reference, Microsoft.Office.Interop.Excel.XlPictureAppearance Appearance = Microsoft.Office.Interop.Excel.XlPictureAppearance.xlScreen, Microsoft.Office.Interop.Excel.XlPictureAppearance ChartSize = Microsoft.Office.Interop.Excel.XlPictureAppearance.xlScreen, object Format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object EditionOptions(valuetype Microsoft.Office.Interop.Excel.XlEditionType Type, valuetype Microsoft.Office.Interop.Excel.XlEditionOptionsOption Option, object Name, object Reference, valuetype Microsoft.Office.Interop.Excel.XlPictureAppearance Appearance, valuetype Microsoft.Office.Interop.Excel.XlPictureAppearance ChartSize, object Format) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.EditionOptions(Microsoft.Office.Interop.Excel.XlEditionType,Microsoft.Office.Interop.Excel.XlEditionOptionsOption,System.Object,System.Object,Microsoft.Office.Interop.Excel.XlPictureAppearance,Microsoft.Office.Interop.Excel.XlPictureAppearance,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Type" Type="Microsoft.Office.Interop.Excel.XlEditionType" />
        <Parameter Name="Option" Type="Microsoft.Office.Interop.Excel.XlEditionOptionsOption" />
        <Parameter Name="Name" Type="System.Object" />
        <Parameter Name="Reference" Type="System.Object" />
        <Parameter Name="Appearance" Type="Microsoft.Office.Interop.Excel.XlPictureAppearance" />
        <Parameter Name="ChartSize" Type="Microsoft.Office.Interop.Excel.XlPictureAppearance" />
        <Parameter Name="Format" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Type">To be added.</param>
        <param name="Option">To be added.</param>
        <param name="Name">To be added.</param>
        <param name="Reference">To be added.</param>
        <param name="Appearance">To be added.</param>
        <param name="ChartSize">To be added.</param>
        <param name="Format">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="End">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Tools.Excel.NamedRange_EndType End { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Tools.Excel.NamedRange_EndType End" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.End" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Tools.Excel.NamedRange_EndType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，它表示包含 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的区域末尾的单元格。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，表示包含 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的区域末尾的单元格。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Tools.Excel.NamedRange.End%2A>属性应与以下参数一起使用。  
  
|参数|描述|  
|---------------|-----------------|  
|`Direction`|之一<xref:Microsoft.Office.Interop.Excel.XlDirection>值，该值指示在其中查找最后一个单元格的方向。|  
  
 如果你尝试使用<xref:Microsoft.Office.Tools.Excel.NamedRange.End%2A>而不指定任何参数，<xref:Microsoft.Office.Tools.Excel.NamedRange.End%2A>将获取<xref:Microsoft.Office.Tools.Excel.NamedRange_EndType>对象，是 Visual Studio 基础结构的一部分和不应在代码中直接使用。  
  
 此属性等效于按结束 + 向上键、 结束 + 向下箭头、 结束 + 向左键或结束 + 向右键。  
  
   
  
## Examples  
 下面的代码示例创建<xref:Microsoft.Office.Tools.Excel.NamedRange>然后填充到右侧以创建空白的列的区域边界的单元格。 然后显示一个消息框，询问你是否想要选择的末尾的右侧区域<xref:Microsoft.Office.Tools.Excel.NamedRange>。  
  
 此版本用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#62](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#62)]
 [!code-vb[Trin_ExcelNamedRange#62](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#62)]  
  
 此版本用于针对应用程序级外接程序。  
  
<!-- TODO: review snippet reference  [!CODE [Trin_ExcelNamedRange_AppLevelAddIn#62](Trin_ExcelNamedRange_AppLevelAddIn#62)]  -->  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EntireColumn">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range EntireColumn { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range EntireColumn" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.EntireColumn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，它表示包含 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的整列（或多列）。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，表示包含 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的整列（或多列）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例创建<xref:Microsoft.Office.Tools.Excel.NamedRange>，然后将设置的列和包含的行的边框颜色<xref:Microsoft.Office.Tools.Excel.NamedRange>为绿色。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#63](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#63)]
 [!code-vb[Trin_ExcelNamedRange#63](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#63)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EntireRow">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range EntireRow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range EntireRow" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.EntireRow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，它表示包含 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的整行（或多行）。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，表示包含 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的整行（或多行）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例创建<xref:Microsoft.Office.Tools.Excel.NamedRange>，然后将设置的列和包含的行的边框颜色<xref:Microsoft.Office.Tools.Excel.NamedRange>为绿色。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#63](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#63)]
 [!code-vb[Trin_ExcelNamedRange#63](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#63)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Errors">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Errors Errors { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Errors Errors" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.Errors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Errors</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个使您可以访问错误检查选项的 <see cref="T:Microsoft.Office.Interop.Excel.Errors" /> 对象。</summary>
        <value>一个使您可以访问错误检查选项的 <see cref="T:Microsoft.Office.Interop.Excel.Errors" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引用<xref:Microsoft.Office.Interop.Excel.Errors>错误检查选项与关联的对象以查看索引值的列表。  
  
   
  
## Examples  
 下面的代码示例创建<xref:Microsoft.Office.Tools.Excel.NamedRange>和插入到的区域中，为文本格式的数字，然后使用<xref:Microsoft.Office.Tools.Excel.NamedRange.Errors%2A>属性来确定是否以文本形式写入数。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#64](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#64)]
 [!code-vb[Trin_ExcelNamedRange#64](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#64)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExportAsFixedFormat">
      <MemberSignature Language="C#" Value="public void ExportAsFixedFormat (Microsoft.Office.Interop.Excel.XlFixedFormatType Type, object Filename, object Quality, object IncludeDocProperties, object IgnorePrintAreas, object From, object To, object OpenAfterPublish, object FixedFormatExtClassPtr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExportAsFixedFormat(valuetype Microsoft.Office.Interop.Excel.XlFixedFormatType Type, object Filename, object Quality, object IncludeDocProperties, object IgnorePrintAreas, object From, object To, object OpenAfterPublish, object FixedFormatExtClassPtr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.ExportAsFixedFormat(Microsoft.Office.Interop.Excel.XlFixedFormatType,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Type" Type="Microsoft.Office.Interop.Excel.XlFixedFormatType" />
        <Parameter Name="Filename" Type="System.Object" />
        <Parameter Name="Quality" Type="System.Object" />
        <Parameter Name="IncludeDocProperties" Type="System.Object" />
        <Parameter Name="IgnorePrintAreas" Type="System.Object" />
        <Parameter Name="From" Type="System.Object" />
        <Parameter Name="To" Type="System.Object" />
        <Parameter Name="OpenAfterPublish" Type="System.Object" />
        <Parameter Name="FixedFormatExtClassPtr" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Type">要导出到的文件的格式类型。</param>
        <param name="Filename">要保存的文件的文件名。 可包括完整路径，或者 Excel 会将文件保存到当前文件夹中。</param>
        <param name="Quality">可选的 <see langword="XlFixedFormatQuality" />。 指定所发布文件的质量。</param>
        <param name="IncludeDocProperties">
          若要包括文档属性，请使用 <see langword="true" />；否则使用 <see langword="false" />。</param>
        <param name="IgnorePrintAreas">
          若要在导出时忽略任何打印区域设置，请使用 <see langword="true" />；否则使用 <see langword="false" />。</param>
        <param name="From">要导出的起始页的页码。 默认从第一页开始导出。</param>
        <param name="To">要导出的最后一页的页码。 默认在导出最后一页后停止导出。</param>
        <param name="OpenAfterPublish">
          如果立即在查看器中显示文件，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <param name="FixedFormatExtClassPtr">一个指向 <see langword="IMsoDocExporter" /> 接口的实现的指针，可使工作簿保存为另一种固定格式。 有关详细信息，请参阅“扩展 Office (2007) 固定格式导出功能”。</param>
        <summary>导出到指定格式的文件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法还支持初始化外接程序将文件导出到固定格式文件。 例如，如果存在转换器，则 Excel 将执行文件的格式转换。 通常由用户启动转换。  
  
   
  
## Examples  
 下面的代码示例将保存一个页面，其中包含命名的范围`NamedRange1`以 PDF 格式保存到指定的文件路径和文件的名称，使用标准质量分辨率。 生成的 PDF 文件包括工作簿属性。 若要运行此代码示例，你的工作簿必须包含名为的表`Sheet1`与名为的命名区域`NamedRange1`包含一些数据。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkbook_Additional#10](~/snippets/csharp/VS_Snippets_OfficeSP/trin_excelworkbook_additional/cs/ThisWorkbook.cs#10)]
 [!code-vb[Trin_ExcelWorkbook_Additional#10](~/snippets/visualbasic/VS_Snippets_OfficeSP/trin_excelworkbook_additional/vb/ThisWorkbook.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FillDown">
      <MemberSignature Language="C#" Value="public object FillDown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object FillDown() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.FillDown" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件中的顶端单元格向下填充到 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的底端。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 内容和格式的或多个单元中的顶行<xref:Microsoft.Office.Tools.Excel.NamedRange>控件复制到中的行的其余部分<xref:Microsoft.Office.Tools.Excel.NamedRange>控件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FillLeft">
      <MemberSignature Language="C#" Value="public object FillLeft ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object FillLeft() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.FillLeft" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件最右侧的单元格向左填充。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 内容和格式的单元格或范围的最右列中的单元格复制到区域中的列的其余部分。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FillRight">
      <MemberSignature Language="C#" Value="public object FillRight ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object FillRight() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.FillRight" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件中最左侧的单元格向右填充。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 内容和格式的单元格或范围的最左侧列中的单元格复制到区域中的列的其余部分。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FillUp">
      <MemberSignature Language="C#" Value="public object FillUp ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object FillUp() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.FillUp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件中的底端单元格向上填充到该范围的顶端。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 内容和格式的单元格或范围的底部行中的单元格复制到范围中的行的其余部分。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range Find (object What, object After, object LookIn, object LookAt, object SearchOrder, Microsoft.Office.Interop.Excel.XlSearchDirection SearchDirection = Microsoft.Office.Interop.Excel.XlSearchDirection.xlNext, object MatchCase, object MatchByte, object SearchFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Interop.Excel.Range Find(object What, object After, object LookIn, object LookAt, object SearchOrder, valuetype Microsoft.Office.Interop.Excel.XlSearchDirection SearchDirection, object MatchCase, object MatchByte, object SearchFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.Find(System.Object,System.Object,System.Object,System.Object,System.Object,Microsoft.Office.Interop.Excel.XlSearchDirection,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="What" Type="System.Object" />
        <Parameter Name="After" Type="System.Object" />
        <Parameter Name="LookIn" Type="System.Object" />
        <Parameter Name="LookAt" Type="System.Object" />
        <Parameter Name="SearchOrder" Type="System.Object" />
        <Parameter Name="SearchDirection" Type="Microsoft.Office.Interop.Excel.XlSearchDirection" />
        <Parameter Name="MatchCase" Type="System.Object" />
        <Parameter Name="MatchByte" Type="System.Object" />
        <Parameter Name="SearchFormat" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="What">要搜索的数据。 可以是字符串或任何 Microsoft Office Excel 数据类型。</param>
        <param name="After">从其后开始搜索的单元格。 此单元格就是从用户界面执行的搜索完成后处于活动状态的单元格。 注意，<c>After</c> 必须是该范围中的单个单元格。 请记住，搜索将从该单元格之后开始；只有方法绕回到指定的单元格之后，才会搜索该单元格。 如果您未指定此参数，则从该范围左上角中的单元格之后开始搜索。</param>
        <param name="LookIn">信息的类型。</param>
        <param name="LookAt">可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlLookAt" /> 值之一：<see cref="F:Microsoft.Office.Interop.Excel.XlLookAt.xlWhole" /> 或 <see cref="F:Microsoft.Office.Interop.Excel.XlLookAt.xlPart" />。</param>
        <param name="SearchOrder">可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlSearchOrder" /> 值之一：<see cref="F:Microsoft.Office.Interop.Excel.XlSearchOrder.xlByRows" /> 或 <see cref="F:Microsoft.Office.Interop.Excel.XlSearchOrder.xlByColumns" />。</param>
        <param name="SearchDirection">搜索方向。  
  
 可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlSearchDirection" /> 值之一：  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlSearchDirection.xlNext" /> 或 <see cref="F:Microsoft.Office.Interop.Excel.XlSearchDirection.xlPrevious" />。</param>
        <param name="MatchCase">
          如果在搜索时区分大小写，则为 <see langword="true" />。 默认值为 <see langword="false" />。</param>
        <param name="MatchByte">仅当已选择或安装双字节语言支持时，才会用到此参数。 如果让双字节字符仅与双字节字符相匹配，则为 <see langword="true" />；如果让双字节字符与其单字节等效字符相匹配，则为 <see langword="false" />。</param>
        <param name="SearchFormat">搜索格式。</param>
        <summary>在 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件中查找特定的信息，然后返回一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 对象，该对象表示在其中找到此信息的第一个单元格。</summary>
        <returns>一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 对象，表示在其中找到该信息的第一个单元格。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法返回`null`如果未找到匹配。  
  
 选定内容或活动的单元格，则此方法不会影响。  
  
 有关设置`LookIn`， `LookAt`， `SearchOrder`，和`MatchByte`保存每次使用此方法。 如果您不指定这些参数的值在调用该方法的下一步时，将使用保存的值。 设置这些参数将更改查找对话框中中的设置并更改查找对话框中的设置更改保存如果省略这些参数，则使用的值。 若要避免出现问题，这些自变量显式设置每次使用此方法。  
  
 你可以使用<xref:Microsoft.Office.Tools.Excel.NamedRange.FindNext%2A>和<xref:Microsoft.Office.Tools.Excel.NamedRange.FindPrevious%2A>方法重复搜索。  
  
 如果搜索到达搜索指定的搜索范围的末尾，它会绕到范围的开始处。 若要停止搜索此头尾回绕发生时，保存的第一个找到的单元格的地址并随后测试此保存地址针对每个连续找到单元格地址。  
  
## <a name="optional-parameters"></a>可选参数  
 可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions.md)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.NamedRange.Find%2A>方法以查找具有值的第一个单元格`Seashell`中<xref:Microsoft.Office.Tools.Excel.NamedRange>控件。 然后该示例使用<xref:Microsoft.Office.Tools.Excel.NamedRange.FindNext%2A>和<xref:Microsoft.Office.Tools.Excel.NamedRange.FindPrevious%2A>方法查找具有值的下一步单元格`Seashell`，然后返回到原始的单元格。 最后，该示例使用<xref:Microsoft.Office.Tools.Excel.NamedRange.Cut%2A>方法剪切具有值的第一个单元格的内容`Seashell`并将它粘贴到单元格 B1。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#17](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#17)]
 [!code-vb[Trin_ExcelNamedRange#17](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindNext">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range FindNext (object After);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Interop.Excel.Range FindNext(object After) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.FindNext(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="After" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="After">要在其之后搜索的单元格。 此单元格就是从用户界面执行的搜索完成后处于活动状态的单元格。 注意，<c>After</c> 必须是 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件中的单个单元格。 请记住，搜索将从该单元格之后开始；只有方法绕回到指定的单元格之后，才会搜索该单元格。 如果未指定此参数，则从 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件左上角中的单元格之后开始搜索。</param>
        <summary>继续执行用 <see cref="M:Microsoft.Office.Tools.Excel.NamedRange.Find(System.Object,System.Object,System.Object,System.Object,System.Object,Microsoft.Office.Interop.Excel.XlSearchDirection,System.Object,System.Object,System.Object)" /> 方法开始的搜索。</summary>
        <returns>一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 对象，表示包含指定信息的单元格。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 查找为相同的条件相匹配的下一步单元格<xref:Microsoft.Office.Tools.Excel.NamedRange.Find%2A>方法。  
  
 选定内容或活动的单元格，则此方法不会影响。  
  
 如果搜索到达搜索指定的搜索范围的末尾，它会绕到范围的开始处。 若要停止搜索此头尾回绕发生时，保存的第一个找到的单元格的地址并随后测试此保存地址针对每个连续找到单元格地址。  
  
## <a name="optional-parameters"></a>可选参数  
 可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions.md)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.NamedRange.Find%2A>方法以查找具有值的第一个单元格`Seashell`中<xref:Microsoft.Office.Tools.Excel.NamedRange>控件。 然后该示例使用<xref:Microsoft.Office.Tools.Excel.NamedRange.FindNext%2A>和<xref:Microsoft.Office.Tools.Excel.NamedRange.FindPrevious%2A>方法查找具有值的下一步单元格`Seashell`，然后返回到原始的单元格。 最后，该示例使用<xref:Microsoft.Office.Tools.Excel.NamedRange.Cut%2A>方法剪切具有值的第一个单元格的内容`Seashell`并将它粘贴到单元格 B1。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#16](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#16)]
 [!code-vb[Trin_ExcelNamedRange#16](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#16)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindPrevious">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range FindPrevious (object After);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Interop.Excel.Range FindPrevious(object After) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.FindPrevious(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="After" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="After">要在其之前搜索的单元格。 此单元格就是从用户界面执行的搜索完成后处于活动状态的单元格。 注意，<c>After</c> 必须是 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件中的单个单元格。 请记住，搜索将从该单元格之后开始；只有方法绕回到指定的单元格之后，才会搜索该单元格。 如果未指定此参数，则从 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件左上角单元格之前开始搜索。</param>
        <summary>继续执行用 <see cref="M:Microsoft.Office.Tools.Excel.NamedRange.Find(System.Object,System.Object,System.Object,System.Object,System.Object,Microsoft.Office.Interop.Excel.XlSearchDirection,System.Object,System.Object,System.Object)" /> 方法开始的搜索。</summary>
        <returns>一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 对象，表示包含指定信息的单元格。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 查找上一个单元格，为同一个条件相匹配<xref:Microsoft.Office.Tools.Excel.NamedRange.Find%2A>方法。  
  
 选定内容或活动的单元格，则此方法不会影响。  
  
 如果搜索到达搜索指定的搜索范围的开始处，它会绕到范围的末尾。 若要停止搜索此头尾回绕发生时，保存的第一个找到的单元格的地址并随后测试此保存地址针对每个连续找到单元格地址。  
  
## <a name="optional-parameters"></a>可选参数  
 可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions.md)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.NamedRange.Find%2A>方法以查找具有值的第一个单元格`Seashell`中<xref:Microsoft.Office.Tools.Excel.NamedRange>控件。 然后该示例使用<xref:Microsoft.Office.Tools.Excel.NamedRange.FindNext%2A>和<xref:Microsoft.Office.Tools.Excel.NamedRange.FindPrevious%2A>方法查找具有值的下一步单元格`Seashell`，然后返回到原始的单元格。 最后，该示例使用<xref:Microsoft.Office.Tools.Excel.NamedRange.Cut%2A>方法剪切具有值的第一个单元格的内容`Seashell`并将它粘贴到单元格 B1。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#15](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#15)]
 [!code-vb[Trin_ExcelNamedRange#15](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Font">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Font Font { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Font Font" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.Font" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Font</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个表示 <see cref="T:Microsoft.Office.Interop.Excel.Font" /> 控件的字体的 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" />。</summary>
        <value>一个表示 <see cref="T:Microsoft.Office.Interop.Excel.Font" /> 控件的字体的 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何设置各种不同的格式并显示特征<xref:Microsoft.Office.Tools.Excel.NamedRange>控件名为`NamedRange1`。 具体而言，此示例设置<xref:Microsoft.Office.Tools.Excel.NamedRange.Font%2A>属性设置为"宋体"。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#34](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#34)]
 [!code-vb[Trin_ExcelNamedRange#34](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#34)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FormatConditions">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.FormatConditions FormatConditions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.FormatConditions FormatConditions" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.FormatConditions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.FormatConditions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.FormatConditions" /> 集合，该集合表示 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的所有条件格式。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.FormatConditions" /> 集合，表示 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的所有条件格式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例创建<xref:Microsoft.Office.Tools.Excel.NamedRange>，然后使用<xref:Microsoft.Office.Tools.Excel.NamedRange.FormatConditions%2A>属性更改中的字体<xref:Microsoft.Office.Tools.Excel.NamedRange>如果中的值<xref:Microsoft.Office.Tools.Excel.NamedRange>小于 A1 单元格的值。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#65](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#65)]
 [!code-vb[Trin_ExcelNamedRange#65](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#65)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Formula">
      <MemberSignature Language="C#" Value="public object Formula { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Formula" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.Formula" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的用 A1 样式表示法表示的公式。</summary>
        <value>
          <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的用 A1 样式表示法表示的公式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:Microsoft.Office.Tools.Excel.NamedRange>控件包含一个常数，则此属性返回的常量。 如果<xref:Microsoft.Office.Tools.Excel.NamedRange>控件为空，则此属性返回一个空字符串。 如果<xref:Microsoft.Office.Tools.Excel.NamedRange>控件包含一个公式，则此属性将显示在公式栏 （包括等号） 的格式相同以字符串形式返回该公式。  
  
 如果你设置的值或公式<xref:Microsoft.Office.Tools.Excel.NamedRange>控制为日期，Microsoft Office Excel 将检查以查看是否使用日期或时间的数字格式之一已格式化该单元格。 如果没有，Excel 更改为默认的短日期数字格式的数字格式。  
  
 如果该范围是一维或二维范围，你可以设置为具有相同维数的数组的公式。 同样，你可以将该公式放入数组中。  
  
 设置多个单元格的公式<xref:Microsoft.Office.Tools.Excel.NamedRange>控件将填充使用公式控件中的所有单元格。  
  
   
  
## Examples  
 下面的代码示例设置<xref:Microsoft.Office.Tools.Excel.NamedRange.Formula%2A>属性<xref:Microsoft.Office.Tools.Excel.NamedRange>控件来对其求和的单元格 A1 到 A5，使用<xref:Microsoft.Office.Tools.Excel.NamedRange.FormulaHidden%2A>属性来隐藏公式，并随后将调用<xref:Microsoft.Office.Tools.Excel.NamedRange.Calculate%2A>方法来对其求和的单元格和将其放在单元格中 A6。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#26](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#26)]
 [!code-vb[Trin_ExcelNamedRange#26](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#26)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FormulaArray">
      <MemberSignature Language="C#" Value="public object FormulaArray { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object FormulaArray" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.FormulaArray" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的数组公式。</summary>
        <value>
          <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的数组公式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性返回 （或可以将设置为） 的单个公式或数组。  
  
 如果<xref:Microsoft.Office.Tools.Excel.NamedRange>控件不包含公式的数组，此属性返回`null`。  
  
 如果此属性用于输入数组公式，该公式必须使用 R1C1 引用样式，不将 A1 引用样式。  
  
   
  
## Examples  
 下面的代码示例创建<xref:Microsoft.Office.Tools.Excel.NamedRange>，然后使用<xref:Microsoft.Office.Tools.Excel.NamedRange.FormulaArray%2A>属性设置的值<xref:Microsoft.Office.Tools.Excel.NamedRange>为相等的单元格 A1 A3 到数组的总和。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#66](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#66)]
 [!code-vb[Trin_ExcelNamedRange#66](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#66)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FormulaHidden">
      <MemberSignature Language="C#" Value="public object FormulaHidden { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object FormulaHidden" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.FormulaHidden" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示在工作表受到保护时，是否隐藏 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件中的公式。</summary>
        <value>
          如果在工作表受到保护时将隐藏公式，则为 <see langword="true" />；如果 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件包含一些 <see cref="P:Microsoft.Office.Tools.Excel.NamedRange.FormulaHidden" /> 等于 <see langword="null" /> 的单元格和一些 <see cref="P:Microsoft.Office.Tools.Excel.NamedRange.FormulaHidden" /> 等于 <see langword="true" /> 的单元格，则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 将此属性与不混淆<xref:Microsoft.Office.Interop.Excel.Range.Hidden%2A>属性。 如果工作簿受到保护并且不是工作表，则不会隐藏公式。  
  
   
  
## Examples  
 下面的代码示例设置<xref:Microsoft.Office.Tools.Excel.NamedRange.Formula%2A>属性<xref:Microsoft.Office.Tools.Excel.NamedRange>控件来对其求和的单元格 A1 到 A5，使用<xref:Microsoft.Office.Tools.Excel.NamedRange.FormulaHidden%2A>属性来隐藏公式，并随后将调用<xref:Microsoft.Office.Tools.Excel.NamedRange.Calculate%2A>方法来对其求和的单元格和将其放在单元格中 A6。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#27](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#27)]
 [!code-vb[Trin_ExcelNamedRange#27](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#27)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FormulaLabel">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlFormulaLabel FormulaLabel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlFormulaLabel FormulaLabel" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.FormulaLabel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlFormulaLabel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FormulaLocal">
      <MemberSignature Language="C#" Value="public object FormulaLocal { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object FormulaLocal" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.FormulaLocal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的公式，该公式使用用户语言的 A1 样式的引用。</summary>
        <value>
          <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的公式，使用用户语言的 A1 样式的引用。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此属性上<xref:Microsoft.Office.Tools.Excel.NamedRange>包含多个单元格的控件将导致异常引发。  
  
 如果该单元格包含常量，此属性返回的就是，常量。 如果该单元格为空，则此属性返回一个空字符串。 如果该单元格包含一个公式，此属性将返回为字符串，其中它将显示在公式栏 （包括等号） 的格式相同的公式。  
  
 如果你设置为日期单元格公式的值，Microsoft Office Excel 会检查以确定是否使用日期或时间的数字格式之一已格式化该单元格。 否则，数字格式更改为默认的短日期数字格式。  
  
 如果该范围是一维或二维范围，你可以设置为具有相同维数的数组的公式。 同样，你可以将该公式放入数组中。  
  
   
  
## Examples  
 下面的代码示例创建<xref:Microsoft.Office.Tools.Excel.NamedRange>，然后使用<xref:Microsoft.Office.Tools.Excel.NamedRange.FormulaLocal%2A>属性设置的值<xref:Microsoft.Office.Tools.Excel.NamedRange>为相等的单元格 A1 和 A2 的值的总和。 该公式根据系统运行的语言进行了本地化。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#68](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#68)]
 [!code-vb[Trin_ExcelNamedRange#68](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#68)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FormulaR1C1">
      <MemberSignature Language="C#" Value="public object FormulaR1C1 { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object FormulaR1C1" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.FormulaR1C1" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置该对象的用 R1C1 样式表示法表示的公式。</summary>
        <value>该对象的用 R1C1 样式表示法表示的公式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此属性上<xref:Microsoft.Office.Tools.Excel.NamedRange>包含多个单元格的控件将导致异常引发。  
  
 如果该单元格包含常量，此属性将返回常量。 如果该单元格为空，则此属性返回一个空字符串。 如果该单元格包含一个公式，此属性将返回为字符串，其中它将显示在公式栏 （包括等号） 的格式相同的公式。  
  
 如果你设置为日期单元格公式的值，Microsoft Office Excel 会检查以确定是否使用日期或时间的数字格式之一已格式化该单元格。 否则，数字格式更改为默认的短日期数字格式。  
  
 如果该范围是一维或二维范围，你可以设置为具有相同维数的数组的公式。 同样，你可以将该公式放入数组中。  
  
   
  
## Examples  
 下面的代码示例创建<xref:Microsoft.Office.Tools.Excel.NamedRange>，然后使用<xref:Microsoft.Office.Tools.Excel.NamedRange.FormulaR1C1%2A>属性设置的值<xref:Microsoft.Office.Tools.Excel.NamedRange>为 A1 单元格，平方根等于作为使用 R1C1 表示法指定。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#69](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#69)]
 [!code-vb[Trin_ExcelNamedRange#69](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#69)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FormulaR1C1Local">
      <MemberSignature Language="C#" Value="public object FormulaR1C1Local { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object FormulaR1C1Local" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.FormulaR1C1Local" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的公式，该公式使用用户语言的 R1C1 样式表示法。</summary>
        <value>
          <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的公式，使用用户语言的 R1C1 样式表示法。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此属性上<xref:Microsoft.Office.Tools.Excel.NamedRange>包含多个单元格的控件将导致异常引发。  
  
 如果<xref:Microsoft.Office.Tools.Excel.NamedRange>控件包含一个常数，则此属性返回该常量。 如果<xref:Microsoft.Office.Tools.Excel.NamedRange>控件为空，则此属性返回一个空字符串。 如果<xref:Microsoft.Office.Tools.Excel.NamedRange>控件包含一个公式，则此属性将该公式返回为字符串，其中它将显示在公式栏 （包括等号） 的格式相同。  
  
 如果你设置的值或公式<xref:Microsoft.Office.Tools.Excel.NamedRange>控制为日期，Microsoft Office Excel 将检查以查看是否使用日期或时间的数字格式之一已格式化该单元格。 否则，数字格式更改为默认的短日期数字格式。  
  
 如果该范围是一维或二维范围，你可以设置为具有相同维数的数组的公式。 同样，你可以将该公式放入数组中。  
  
   
  
## Examples  
 下面的代码示例创建<xref:Microsoft.Office.Tools.Excel.NamedRange>，然后使用<xref:Microsoft.Office.Tools.Excel.NamedRange.FormulaR1C1%2A>属性设置的值<xref:Microsoft.Office.Tools.Excel.NamedRange>为 A1 单元格，平方根等于作为使用 R1C1 表示法指定。 该公式根据系统运行的语言进行了本地化。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#70](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#70)]
 [!code-vb[Trin_ExcelNamedRange#70](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#70)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FunctionWizard">
      <MemberSignature Language="C#" Value="public object FunctionWizard ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object FunctionWizard() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.FunctionWizard" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>对 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件左上角的单元格启动“函数向导”。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.GetEnumerator" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取一个 <see cref="T:System.Collections.IEnumerator" />，它可用于循环访问 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件中的单元格。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GoalSeek">
      <MemberSignature Language="C#" Value="public bool GoalSeek (object Goal, Microsoft.Office.Interop.Excel.Range ChangingCell);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GoalSeek(object Goal, class Microsoft.Office.Interop.Excel.Range ChangingCell) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.GoalSeek(System.Object,Microsoft.Office.Interop.Excel.Range)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Goal" Type="System.Object" />
        <Parameter Name="ChangingCell" Type="Microsoft.Office.Interop.Excel.Range" />
      </Parameters>
      <Docs>
        <param name="Goal">To be added.</param>
        <param name="ChangingCell">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Group">
      <MemberSignature Language="C#" Value="public object Group (object Start, object End, object By, object Periods);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Group(object Start, object End, object By, object Periods) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.Group(System.Object,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Start" Type="System.Object" />
        <Parameter Name="End" Type="System.Object" />
        <Parameter Name="By" Type="System.Object" />
        <Parameter Name="Periods" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Start">要进行分组的第一个值。 如果省略此参数或者它为 <see langword="true" />，则使用该字段中的第一个值。</param>
        <param name="End">要进行分组的最后一个值。 如果省略此参数或者它为 <see langword="true" />，则使用该字段中的最后一个值。</param>
        <param name="By">如果该字段为数值字段，则此参数指定每组的大小。 如果该字段是日期字段，则此参数指定当 <c>Periods</c> 数组中的元素 4 为 <see langword="true" /> 而所有其他元素为 <see langword="false" /> 时每一组中的天数。 否则，将忽略此参数。 如果省略此参数，则 Microsoft Office Excel 会自动选择一个默认的组大小。</param>
        <param name="Periods">一个数组，包含七个为该组指定时间段的布尔值，如下所示：  
  
 1 — 秒  
  
 2 — 分钟  
  
 3 —   
  
 4 — 日期  
  
 5 — 月份  
  
 6 — 季度  
  
 7 — 年份  
  
 如果数组中的某个元素为 <see langword="true" />，则针对相应的时间创建一个组；如果该元素为 <see langword="false" />，则不创建组。 如果字段不是日期字段，则省略此参数。</param>
        <summary>当 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件表示数据透视表字段的数据范围中的单个单元格时，<see cref="M:Microsoft.Office.Tools.Excel.NamedRange.Group(System.Object,System.Object,System.Object,System.Object)" /> 方法在该字段中执行基于数值或日期的分组。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Tools.Excel.NamedRange>控件必须为数据透视表字段的数据区域中的单个单元格。 如果你尝试对多个单元格应用此方法，就会失败 （而不显示一条错误消息）。  
  
## <a name="optional-parameters"></a>可选参数  
 可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions.md)。  
  
   
  
## Examples  
 下面的代码示例创建数据透视表和<xref:Microsoft.Office.Tools.Excel.NamedRange>内的数据透视表的区域。 然后，它使用<xref:Microsoft.Office.Tools.Excel.NamedRange.PivotTable%2A>， <xref:Microsoft.Office.Tools.Excel.NamedRange.LocationInTable%2A>， <xref:Microsoft.Office.Tools.Excel.NamedRange.PivotCell%2A>， <xref:Microsoft.Office.Tools.Excel.NamedRange.PivotItem%2A>，和<xref:Microsoft.Office.Tools.Excel.NamedRange.PivotField%2A>要显示的布局的信息的属性<xref:Microsoft.Office.Tools.Excel.NamedRange>数据透视表中。 此示例还使用<xref:Microsoft.Office.Tools.Excel.NamedRange.Group%2A>方法来执行数值分组基于字段中的第一个值。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#117](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#117)]
 [!code-vb[Trin_ExcelNamedRange#117](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#117)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasArray">
      <MemberSignature Language="C#" Value="public object HasArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object HasArray" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.HasArray" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件是否属于数组公式。</summary>
        <value>
          如果 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件属于数组公式，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasFormula">
      <MemberSignature Language="C#" Value="public object HasFormula { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object HasFormula" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.HasFormula" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件中的所有单元格是否包含公式。</summary>
        <value>
          如果 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件中的所有单元格都包含公式，则为 <see langword="true" />；如果该范围中的任何单元格都不包含公式，则为 <see langword="false" />；除此之外，则为 <see langword="null" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Height">
      <MemberSignature Language="C#" Value="public object Height { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Height" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.Height" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的高度。</summary>
        <value>
          <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的高度。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例创建<xref:Microsoft.Office.Tools.Excel.NamedRange>，然后使用<xref:Microsoft.Office.Tools.Excel.NamedRange.Width%2A>和<xref:Microsoft.Office.Tools.Excel.NamedRange.Height%2A>要显示的宽度和高度属性<xref:Microsoft.Office.Tools.Excel.NamedRange>。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#72](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#72)]
 [!code-vb[Trin_ExcelNamedRange#72](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#72)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Hidden">
      <MemberSignature Language="C#" Value="public object Hidden { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Hidden" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.Hidden" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个对象，该对象指示是否隐藏行或列。</summary>
        <value>
          如果隐藏行或列，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Tools.Excel.NamedRange>控件必须跨越整个列或行。 你必须访问此属性使用<xref:Microsoft.Office.Tools.Excel.NamedRange.EntireRow%2A>或<xref:Microsoft.Office.Tools.Excel.NamedRange.EntireColumn%2A>属性，例如`namedRange1.EntireRow.Hidden = true`。  
  
 将此属性与不混淆<xref:Microsoft.Office.Tools.Excel.NamedRange.FormulaHidden%2A>属性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HorizontalAlignment">
      <MemberSignature Language="C#" Value="public object HorizontalAlignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object HorizontalAlignment" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.HorizontalAlignment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的水平对齐方式。</summary>
        <value>
          <see cref="T:Microsoft.Office.Interop.Excel.XlHAlign" /> 值之一。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 某些<xref:Microsoft.Office.Interop.Excel.XlHAlign>值可能不是提供给你，具体取决于的语言支持 （美国美式英语）。  
  
   
  
## Examples  
 下面的代码示例演示如何设置各种不同的格式并显示特征<xref:Microsoft.Office.Tools.Excel.NamedRange>控件名为`NamedRange1`。 具体而言，此示例设置<xref:Microsoft.Office.Tools.Excel.NamedRange.HorizontalAlignment%2A>属性<xref:Microsoft.Office.Interop.Excel.XlHAlign.xlHAlignCenter>以使每个单元格边界内水平居中的范围的内容。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#33](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#33)]
 [!code-vb[Trin_ExcelNamedRange#33](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Hyperlinks">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Hyperlinks Hyperlinks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Hyperlinks Hyperlinks" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.Hyperlinks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Hyperlinks</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Hyperlinks" /> 集合，该集合表示 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件中的超链接。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.Hyperlinks" /> 集合，表示 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件中的超链接。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例创建<xref:Microsoft.Office.Tools.Excel.NamedRange>，然后使用<xref:Microsoft.Office.Tools.Excel.NamedRange.Hyperlinks%2A>属性添加到超链接<xref:Microsoft.Office.Tools.Excel.NamedRange>。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#73](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#73)]
 [!code-vb[Trin_ExcelNamedRange#73](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#73)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ID">
      <MemberSignature Language="C#" Value="public string ID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ID" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.ID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在将该页另存为网页时，获取或设置 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的标识标签。</summary>
        <value>在将该页另存为网页时，<see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的标识标签。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此属性上<xref:Microsoft.Office.Tools.Excel.NamedRange>包含多个单元格的控件将导致异常引发。  
  
 你可以使用作为其他 HTML 文档中或在相同的网页上的超链接引用的 ID 标签。  
  
   
  
## Examples  
 下面的代码示例创建<xref:Microsoft.Office.Tools.Excel.NamedRange>，然后使用<xref:Microsoft.Office.Tools.Excel.NamedRange.ID%2A>属性设置为 Web 页保存工作簿的情况下使用的 ID。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#74](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#74)]
 [!code-vb[Trin_ExcelNamedRange#74](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#74)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndentLevel">
      <MemberSignature Language="C#" Value="public object IndentLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object IndentLevel" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.IndentLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的缩进级别。</summary>
        <value>
          <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的缩进级别。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 缩进级别可以是从 0 到 15 的整数。  
  
 使用此属性将缩进级别设置为小于 0 （零） 的数或大于 15，将会引发异常。  
  
   
  
## Examples  
 下面的代码示例创建<xref:Microsoft.Office.Tools.Excel.NamedRange>，然后使用 I<xref:Microsoft.Office.Tools.Excel.NamedRange.IndentLevel%2A>属性来设置缩进级别的<xref:Microsoft.Office.Tools.Excel.NamedRange>为 3。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#75](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#75)]
 [!code-vb[Trin_ExcelNamedRange#75](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#75)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InnerObject">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range InnerObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range InnerObject" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.InnerObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，表示 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 的基础本机对象。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，表示 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 的基础本机对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以使用<xref:Microsoft.Office.Tools.Excel.NamedRange.InnerObject%2A>属性来访问基础<xref:Microsoft.Office.Interop.Excel.Range?displayProperty=fullName>为<xref:Microsoft.Office.Tools.Excel.NamedRange>并将其传递到方法或属性需要<xref:Microsoft.Office.Interop.Excel.Range?displayProperty=fullName>作为传递<xref:Microsoft.Office.Interop.Excel.Range?displayProperty=fullName>。 有关详细信息，请参阅[限制的主机项和主机控件编程](/visualstudio/vsto/programmatic-limitations-of-host-items-and-host-controls.md)。  
  
   
  
## Examples  
 下面的代码示例启动一系列的星期几名称，然后创建<xref:Microsoft.Office.Tools.Excel.NamedRange>来包含该系列。 然后，它使用<xref:Microsoft.Office.Interop.Excel.Range.AutoFill%2A>方法以完成序列。 <xref:Microsoft.Office.Interop.Excel.Range.AutoFill%2A> 需要<xref:Microsoft.Office.Interop.Excel.Range?displayProperty=fullName>作为参数。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#118](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#118)]
 [!code-vb[Trin_ExcelNamedRange#118](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#118)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public object Insert (object Shift, object CopyOrigin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Insert(object Shift, object CopyOrigin) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.Insert(System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Shift" Type="System.Object" />
        <Parameter Name="CopyOrigin" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Shift">指定移动单元格的方向。 可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlInsertShiftDirection" /> 值之一：<see cref="F:Microsoft.Office.Interop.Excel.XlInsertShiftDirection.xlShiftToRight" /> 或 <see cref="F:Microsoft.Office.Interop.Excel.XlInsertShiftDirection.xlShiftDown" />。 如果省略此参数，则 Microsoft Office Excel 基于该范围的形状进行确定。</param>
        <param name="CopyOrigin">
          <see cref="T:Microsoft.Office.Interop.Excel.XlInsertFormatOrigin" /> 值之一，用于指定在何处获取要应用于新单元格的格式。</param>
        <summary>在 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件中插入一个单元格或某一范围的单元格，并移走其他单元格以腾出空间。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a>可选参数  
 可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions.md)。  
  
   
  
## Examples  
 下面的代码示例通过 A3，A1 单元中设置值，然后使用<xref:Microsoft.Office.Tools.Excel.NamedRange.Insert%2A>方法插入到空白单元格<xref:Microsoft.Office.Tools.Excel.NamedRange>控件名为`NamedRange1`是否设置为 A1 单元格。 此操作将范围中的单元格下，这意味着，`NamedRange1`现在设置为 A2 单元格。 为了演示它，该示例设置的值`NamedRange1`到`Raven`，它会显示在单元格 A2。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#13](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#13)]
 [!code-vb[Trin_ExcelNamedRange#13](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertIndent">
      <MemberSignature Language="C#" Value="public void InsertIndent (int InsertAmount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InsertIndent(int32 InsertAmount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.InsertIndent(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="InsertAmount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="InsertAmount">要添加到当前缩进的量。</param>
        <summary>向 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件添加缩进。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此方法将缩进级别设置为小于 0 （零） 的数或大于 15，将会引发异常。  
  
 使用<xref:Microsoft.Office.Tools.Excel.NamedRange.IndentLevel%2A>属性以返回一系列的缩进级别。  
  
   
  
## Examples  
 下面的代码示例创建<xref:Microsoft.Office.Tools.Excel.NamedRange>，然后使用<xref:Microsoft.Office.Tools.Excel.NamedRange.InsertIndent%2A>方法以设置缩进级别<xref:Microsoft.Office.Tools.Excel.NamedRange>。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#76](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#76)]
 [!code-vb[Trin_ExcelNamedRange#76](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#76)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Interior">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Interior Interior { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Interior Interior" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.Interior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Interior</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Interior" />，它表示 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的内部。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.Interior" />，表示 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的内部。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.NamedRange.Borders%2A>属性绘制的边框的双线<xref:Microsoft.Office.Tools.Excel.NamedRange>，并使用内部属性颜色的内部<xref:Microsoft.Office.Tools.Excel.NamedRange>绿色。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#46](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#46)]
 [!code-vb[Trin_ExcelNamedRange#46](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#46)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Tools.Excel.NamedRange_ItemType Item { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Tools.Excel.NamedRange_ItemType Item" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Tools.Excel.NamedRange_ItemType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，它表示距离 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的某偏移量处的范围。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，表示距离 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的某偏移量处的范围。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Tools.Excel.NamedRange.Item%2A>属性应与以下参数一起使用。  
  
|参数|描述|  
|---------------|-----------------|  
|`RowIndex`|单元格的索引号你想要访问，请按从左到右的顺序。 `NamedRange.Item(1)` 返回范围; 左上角单元格`NamedRange.Item(2)`左上角单元格右侧立即返回该单元格。|  
|`ColumnIndex`|数字或字符串，指示你想要访问，该单元格的列号开头 1 或"A"的范围中的第一列。|  
  
 如果你尝试使用<xref:Microsoft.Office.Tools.Excel.NamedRange.Item%2A>而不指定任何参数，<xref:Microsoft.Office.Tools.Excel.NamedRange.Item%2A>将获取<xref:Microsoft.Office.Tools.Excel.NamedRange_ItemType>对象，是 Visual Studio 基础结构的一部分和不应在代码中直接使用。  
  
 `RowIndex`和`ColumnIndex`自变量是相对偏移量。 换而言之，指定`RowIndex`1 的范围不工作表中的第一行的第一行中返回的单元格。  
  
   
  
## Examples  
 下面的代码示例创建<xref:Microsoft.Office.Tools.Excel.NamedRange>，然后使用<xref:Microsoft.Office.Tools.Excel.NamedRange.Item%2A>属性以选择从偏移量的单元格<xref:Microsoft.Office.Tools.Excel.NamedRange>由三个列和三个行。  
  
 此版本用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#77](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#77)]
 [!code-vb[Trin_ExcelNamedRange#77](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#77)]  
  
 此版本用于针对应用程序级外接程序。  
  
<!-- TODO: review snippet reference  [!CODE [Trin_ExcelNamedRange_AppLevelAddIn#77](Trin_ExcelNamedRange_AppLevelAddIn#77)]  -->  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Justify">
      <MemberSignature Language="C#" Value="public object Justify ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Justify() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.Justify" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>重新排列 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件中的文本，以便它在该范围中均匀填充。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果范围不足够大，Microsoft Office Excel 会显示一消息，告知你文本将超出范围。 如果你单击**确定**按钮，对齐的文本将替换中扩展到所选范围之外的单元格的内容。 若要防止出现此消息，将设置<xref:Microsoft.Office.Interop.Excel._Application.DisplayAlerts%2A>属性`false`。 设置此属性后，文本将始终替换下面的单元中的内容<xref:Microsoft.Office.Tools.Excel.NamedRange>控件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public object Left { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Left" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.Left" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取从列 A 的左边缘到 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的左边缘的距离。</summary>
        <value>从列 A 的左边缘到 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的左边缘的距离。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果该区域不超过一列的宽度，则使用的范围中最左边的列。  
  
 如果该窗口最大化，<xref:Microsoft.Office.Tools.Excel.NamedRange.Left%2A>返回一个负数，而异基于窗口边框的宽度。 设置<xref:Microsoft.Office.Tools.Excel.NamedRange.Left%2A>为 0 （零） 将使窗口稍微小小于其应有应用程序窗口被最大化时。 换而言之，如果<xref:Microsoft.Office.Tools.Excel.NamedRange.Left%2A>为 0 （零），Microsoft Office Excel 主窗口的左边的框仅能执行将在屏幕上可见。  
  
   
  
## Examples  
 下面的代码示例创建<xref:Microsoft.Office.Tools.Excel.NamedRange>控件。 然后，它使用<xref:Microsoft.Office.Tools.Excel.NamedRange.Left%2A>和<xref:Microsoft.Office.Tools.Excel.NamedRange.Top%2A>属性，以显示从列 A 到左边缘的左边缘的距离<xref:Microsoft.Office.Tools.Excel.NamedRange>，以及按自上而下的行 1 到上边缘的距离<xref:Microsoft.Office.Tools.Excel.NamedRange>。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#78](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#78)]
 [!code-vb[Trin_ExcelNamedRange#78](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#78)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ListHeaderRows">
      <MemberSignature Language="C#" Value="public int ListHeaderRows { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ListHeaderRows" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.ListHeaderRows" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的标题行的数目。</summary>
        <value>
          <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的标题行的数目。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例创建<xref:Microsoft.Office.Tools.Excel.NamedRange>，然后显示一条消息，显示标头中的行数<xref:Microsoft.Office.Tools.Excel.NamedRange>。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#79](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#79)]
 [!code-vb[Trin_ExcelNamedRange#79](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#79)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ListNames">
      <MemberSignature Language="C#" Value="public object ListNames ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ListNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.ListNames" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件中的第一个单元格开始，将所显示的全部名称的列表粘贴到工作表中。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:Microsoft.Office.Interop.Excel._Application.Names%2A>属性返回的工作表上的所有名称的集合。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ListObject">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.ListObject ListObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.ListObject ListObject" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.ListObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.ListObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:Microsoft.Office.Interop.Excel.ListObject" /> 控件的 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" />。</summary>
        <value>
          <see cref="T:Microsoft.Office.Interop.Excel.ListObject" /> 控件的一个 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例创建<xref:Microsoft.Office.Tools.Excel.ListObject>内<xref:Microsoft.Office.Tools.Excel.NamedRange>，然后使用<xref:Microsoft.Office.Tools.Excel.NamedRange.ListObject%2A>属性<xref:Microsoft.Office.Tools.Excel.NamedRange>以显示中的行数<xref:Microsoft.Office.Tools.Excel.ListObject>。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#80](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#80)]
 [!code-vb[Trin_ExcelNamedRange#80](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#80)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocationInTable">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlLocationInTable LocationInTable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlLocationInTable LocationInTable" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.LocationInTable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlLocationInTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个常数，该常数描述包含 <see cref="T:Microsoft.Office.Interop.Excel.PivotTable" /> 控件左上角的 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 报表部分。</summary>
        <value>
          <see cref="T:Microsoft.Office.Interop.Excel.XlLocationInTable" /> 值之一。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Interop.Excel.XlLocationInTable> 可以是以下之一<xref:Microsoft.Office.Interop.Excel.XlLocationInTable>值：  
  
-   <xref:Microsoft.Office.Interop.Excel.XlLocationInTable.xlRowHeader>  
  
-   <xref:Microsoft.Office.Interop.Excel.XlLocationInTable.xlColumnHeader>  
  
-   <xref:Microsoft.Office.Interop.Excel.XlLocationInTable.xlPageHeader>  
  
-   <xref:Microsoft.Office.Interop.Excel.XlLocationInTable.xlDataHeader>  
  
-   <xref:Microsoft.Office.Interop.Excel.XlLocationInTable.xlRowItem>  
  
-   <xref:Microsoft.Office.Interop.Excel.XlLocationInTable.xlColumnItem>  
  
-   <xref:Microsoft.Office.Interop.Excel.XlLocationInTable.xlPageItem>  
  
-   <xref:Microsoft.Office.Interop.Excel.XlLocationInTable.xlDataItem>  
  
-   <xref:Microsoft.Office.Interop.Excel.XlLocationInTable.xlTableBody>  
  
   
  
## Examples  
 下面的代码示例创建数据透视表和<xref:Microsoft.Office.Tools.Excel.NamedRange>内的数据透视表的区域。 然后，它使用<xref:Microsoft.Office.Tools.Excel.NamedRange.PivotTable%2A>， <xref:Microsoft.Office.Tools.Excel.NamedRange.LocationInTable%2A>， <xref:Microsoft.Office.Tools.Excel.NamedRange.PivotCell%2A>， <xref:Microsoft.Office.Tools.Excel.NamedRange.PivotItem%2A>，和<xref:Microsoft.Office.Tools.Excel.NamedRange.PivotField%2A>要显示的布局的信息的属性<xref:Microsoft.Office.Tools.Excel.NamedRange>数据透视表中。 此示例还使用<xref:Microsoft.Office.Tools.Excel.NamedRange.Group%2A>方法来执行数值分组基于字段中的第一个值。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#117](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#117)]
 [!code-vb[Trin_ExcelNamedRange#117](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#117)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Locked">
      <MemberSignature Language="C#" Value="public object Locked { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Locked" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.Locked" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件是否处于锁定状态。</summary>
        <value>
          如果 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件处于锁定状态，则为 <see langword="true" />；如果 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件可以在该表处于保护状态时进行修改，则为 <see langword="false" />；如果 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件中既包含处于锁定状态的单元格又包含处于未锁定状态的单元格，则为 <see langword="null" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MDX">
      <MemberSignature Language="C#" Value="public string MDX { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MDX" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.MDX" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取指定的 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 对象的 MDX 名称。</summary>
        <value>表示指定 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 对象的 MDX 名称的字符串。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (object Across);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Merge(object Across) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.Merge(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Across" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Across">
          如果将指定范围中每一行中的单元格作为单独的合并单元格来合并，则为 <see langword="true" />。 默认值为 <see langword="false" />。</param>
        <summary>从 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件创建一个合并单元格。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 合并范围的值指定在左上角单元格中<xref:Microsoft.Office.Tools.Excel.NamedRange>控件。  
  
## <a name="optional-parameters"></a>可选参数  
 可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions.md)。  
  
   
  
## Examples  
 下面的代码示例显示的值<xref:Microsoft.Office.Tools.Excel.NamedRange.MergeArea%2A>和<xref:Microsoft.Office.Tools.Excel.NamedRange.MergeCells%2A>的单单元格属性<xref:Microsoft.Office.Tools.Excel.NamedRange>之前和之后使用<xref:Microsoft.Office.Tools.Excel.NamedRange.Merge%2A>方法合并多个单元格<xref:Microsoft.Office.Tools.Excel.NamedRange>包含单个单元格<xref:Microsoft.Office.Tools.Excel.NamedRange>.  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#12](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#12)]
 [!code-vb[Trin_ExcelNamedRange#12](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MergeArea">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range MergeArea { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range MergeArea" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.MergeArea" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，它表示包含 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的合并范围。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，表示包含 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的合并范围。 如果 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件不在合并范围内，则此属性返回一个表示 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 控件的 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Tools.Excel.NamedRange.MergeArea%2A>属性仅适用于单单元格范围。  
  
   
  
## Examples  
 下面的代码示例显示的值<xref:Microsoft.Office.Tools.Excel.NamedRange.MergeArea%2A>和<xref:Microsoft.Office.Tools.Excel.NamedRange.MergeCells%2A>的单单元格属性<xref:Microsoft.Office.Tools.Excel.NamedRange>之前和之后使用<xref:Microsoft.Office.Tools.Excel.NamedRange.Merge%2A>方法合并多个单元格<xref:Microsoft.Office.Tools.Excel.NamedRange>包含单个单元格<xref:Microsoft.Office.Tools.Excel.NamedRange>.  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#12](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#12)]
 [!code-vb[Trin_ExcelNamedRange#12](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MergeCells">
      <MemberSignature Language="C#" Value="public object MergeCells { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object MergeCells" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.MergeCells" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件是否包含合并单元格。</summary>
        <value>
          如果 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件包含合并单元格，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例显示的值<xref:Microsoft.Office.Tools.Excel.NamedRange.MergeArea%2A>和<xref:Microsoft.Office.Tools.Excel.NamedRange.MergeCells%2A>的单单元格属性<xref:Microsoft.Office.Tools.Excel.NamedRange>之前和之后使用<xref:Microsoft.Office.Tools.Excel.NamedRange.Merge%2A>方法合并多个单元格<xref:Microsoft.Office.Tools.Excel.NamedRange>包含单个单元格<xref:Microsoft.Office.Tools.Excel.NamedRange>.  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#12](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#12)]
 [!code-vb[Trin_ExcelNamedRange#12](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public object Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Name" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:Microsoft.Office.Interop.Excel.Name" /> 控件的 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 对象。</summary>
        <value>
          <see cref="T:Microsoft.Office.Interop.Excel.Name" /> 控件的 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例创建<xref:Microsoft.Office.Tools.Excel.NamedRange>，然后显示一条消息的名称。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#81](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#81)]
 [!code-vb[Trin_ExcelNamedRange#81](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#81)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NavigateArrow">
      <MemberSignature Language="C#" Value="public object NavigateArrow (object TowardPrecedent, object ArrowNumber, object LinkNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object NavigateArrow(object TowardPrecedent, object ArrowNumber, object LinkNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.NavigateArrow(System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="TowardPrecedent" Type="System.Object" />
        <Parameter Name="ArrowNumber" Type="System.Object" />
        <Parameter Name="LinkNumber" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="TowardPrecedent">指定导航方向：如果朝着引用单元格导航，则为 <see langword="true" />；如果朝着依赖单元格导航，则为 <see langword="false" />。</param>
        <param name="ArrowNumber">指定要定位的箭头编号；与单元格公式中带编号的引用相对应。</param>
        <param name="LinkNumber">如果该箭头是外部引用箭头，则此参数指示要遵循哪个外部引用。 如果省略此参数，则遵循第一个外部引用。</param>
        <summary>将 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的跟踪标志箭头定位到引用单元格、依赖单元格或导致错误的单元格。</summary>
        <returns>一个表示新选择的 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 选择引用单元格、 相关或错误的单元格。 如果应用于没有可见追踪箭头的单元格，则此方法会导致错误。  
  
## <a name="optional-parameters"></a>可选参数  
 可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions.md)。  
  
   
  
## Examples  
 下面的代码示例使 A1 单元格的从属<xref:Microsoft.Office.Tools.Excel.NamedRange>。 然后该示例使用<xref:Microsoft.Office.Tools.Excel.NamedRange.ShowDependents%2A>方法之间绘制一个箭头<xref:Microsoft.Office.Tools.Excel.NamedRange>从属单元格，并调用和<xref:Microsoft.Office.Tools.Excel.NamedRange.NavigateArrow%2A>方法来选择依赖的单元格。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#96](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#96)]
 [!code-vb[Trin_ExcelNamedRange#96](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#96)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Next">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range Next { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range Next" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.Next" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个表示下一个单元格的 <see cref="T:Microsoft.Office.Interop.Excel.Range" />。</summary>
        <value>一个表示下一个单元格的 <see cref="T:Microsoft.Office.Interop.Excel.Range" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性模拟 TAB 键，但该属性返回的下一个单元而不选择它。  
  
 对于受保护的表，此属性返回的下一步解锁单元格。 在未受保护的工作表，此属性始终返回该单元格立即指定的单元格右侧。  
  
   
  
## Examples  
 下面的代码示例创建<xref:Microsoft.Office.Tools.Excel.NamedRange>，然后使用<xref:Microsoft.Office.Tools.Excel.NamedRange.Next%2A>属性来选择右侧的单元格<xref:Microsoft.Office.Tools.Excel.NamedRange>。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#97](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#97)]
 [!code-vb[Trin_ExcelNamedRange#97](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#97)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NoteText">
      <MemberSignature Language="C#" Value="public string NoteText (object Text, object Start, object Length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string NoteText(object Text, object Start, object Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.NoteText(System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Text" Type="System.Object" />
        <Parameter Name="Start" Type="System.Object" />
        <Parameter Name="Length" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Text">要添加到说明中的文本（最多 255 个字符）。 该文本将从 <c>Start</c> 位置处开始插入，并替换现有注释的 <c>Length</c> 个字符。 如果省略此参数，则此方法将返回该注释中从 <c>Start</c> 位置开始的 <c>Length</c> 个字符的当前文本。</param>
        <param name="Start">所设置或返回的文本的起始位置。 如果省略此参数，则此方法将从第一个字符开始。 若要向该注释追加文本，请指定一个比现有注释中字符数大的数字。</param>
        <param name="Length">要设置或返回的字符数。 如果省略此参数，则 Microsoft Office Excel 将设置或返回从注释的起始位置到末尾的字符（最多 255 个字符）。 如果从注释的 <c>Start</c> 到末尾有 255 个以上的字符，则此方法只返回 255 个字符。</param>
        <summary>获取或设置与 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件左上角中的单元格相关联的单元格注释。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 单元格说明已替换为范围注释。 有关详细信息，请参阅<xref:Microsoft.Office.Interop.Excel.Comment>对象。  
  
 若要添加包含超过 255 个字符的注释，使用此方法一次并将检索指定的前 255 个字符，然后再次使用它要追加的说明 （一次不超过 255 个字符） 的其余部分。  
  
## <a name="optional-parameters"></a>可选参数  
 可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions.md)。  
  
   
  
## Examples  
 下面的代码示例演示如何设置各种不同的格式并显示特征<xref:Microsoft.Office.Tools.Excel.NamedRange>控件名为`NamedRange1`。 具体而言，此示例使用<xref:Microsoft.Office.Tools.Excel.NamedRange.NoteText%2A>方法添加到注释`NamedRange1`与文本`This is a Formatting test`。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#31](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#31)]
 [!code-vb[Trin_ExcelNamedRange#31](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#31)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NumberFormat">
      <MemberSignature Language="C#" Value="public object NumberFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object NumberFormat" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.NumberFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的格式代码。</summary>
        <value>
          <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的格式代码。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性返回`null`如果中的所有单元格<xref:Microsoft.Office.Tools.Excel.NamedRange>控件不具有相同的数字格式。  
  
 格式代码是相同的字符串**格式代码**选项**设置单元格格式**对话框。 `Format`函数使用不同的格式代码字符串比<xref:Microsoft.Office.Tools.Excel.NamedRange.NumberFormat%2A>和<xref:Microsoft.Office.Tools.Excel.NamedRange.NumberFormatLocal%2A>属性。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.NamedRange.NumberFormat%2A>属性来设置格式的日期字符串<xref:Microsoft.Office.Tools.Excel.NamedRange>。 此示例还使用<xref:Microsoft.Office.Tools.Excel.NamedRange.NumberFormatLocal%2A>属性中的用户的语言显示的日期格式。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#98](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#98)]
 [!code-vb[Trin_ExcelNamedRange#98](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#98)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NumberFormatLocal">
      <MemberSignature Language="C#" Value="public object NumberFormatLocal { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object NumberFormatLocal" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.NumberFormatLocal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的采用用户语言的格式代码。</summary>
        <value>
          <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的采用用户语言的格式代码。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Format`函数使用不同的格式代码字符串比<xref:Microsoft.Office.Tools.Excel.NamedRange.NumberFormat%2A>和<xref:Microsoft.Office.Tools.Excel.NamedRange.NumberFormatLocal%2A>属性。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.NamedRange.NumberFormat%2A>属性来设置格式的日期字符串<xref:Microsoft.Office.Tools.Excel.NamedRange>。 此示例还使用<xref:Microsoft.Office.Tools.Excel.NamedRange.NumberFormatLocal%2A>属性中的用户的语言显示的日期格式。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#98](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#98)]
 [!code-vb[Trin_ExcelNamedRange#98](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#98)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Offset">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Tools.Excel.NamedRange_OffsetType Offset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Tools.Excel.NamedRange_OffsetType Offset" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.Offset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Tools.Excel.NamedRange_OffsetType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，它表示距离 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的偏移量。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，表示距离 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的偏移量。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Tools.Excel.NamedRange.Offset%2A>属性应与以下参数一起使用。  
  
|参数|描述|  
|---------------|-----------------|  
|`RowOffset`|行 （正数、 负数还是 0 （零）） 数的范围是偏移。 表示向下偏移正值和负值表示向上偏移。 默认值为 0。|  
|`ColumnOffset`|列 （正数、 负数还是 0 （零）） 数的范围是偏移。 在右侧偏移正值和负值表示向左侧偏移。 默认值为 0。|  
  
 如果你尝试使用<xref:Microsoft.Office.Tools.Excel.NamedRange.Offset%2A>而不指定任何参数，<xref:Microsoft.Office.Tools.Excel.NamedRange.Offset%2A>将获取<xref:Microsoft.Office.Tools.Excel.NamedRange_OffsetType>对象，是 Visual Studio 基础结构的一部分和不应在代码中直接使用。  
  
## <a name="optional-parameters"></a>可选参数  
 可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions.md)。  
  
   
  
## Examples  
 下面的代码示例创建<xref:Microsoft.Office.Tools.Excel.NamedRange>，然后将文本添加到单元格偏移量从<xref:Microsoft.Office.Tools.Excel.NamedRange>由三个列和三个单元格。  
  
 此版本用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#99](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#99)]
 [!code-vb[Trin_ExcelNamedRange#99](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#99)]  
  
 此版本用于针对应用程序级外接程序。  
  
<!-- TODO: review snippet reference  [!CODE [Trin_ExcelNamedRange_AppLevelAddIn#99](Trin_ExcelNamedRange_AppLevelAddIn#99)]  -->  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Orientation">
      <MemberSignature Language="C#" Value="public object Orientation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Orientation" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.Orientation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置文本方向。</summary>
        <value>位于 -90 至 90 度范围中的整数值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例创建<xref:Microsoft.Office.Tools.Excel.NamedRange>，然后使用<xref:Microsoft.Office.Tools.Excel.NamedRange.Orientation%2A>属性显示在垂直文本<xref:Microsoft.Office.Tools.Excel.NamedRange>。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#100](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#100)]
 [!code-vb[Trin_ExcelNamedRange#100](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#100)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OutlineLevel">
      <MemberSignature Language="C#" Value="public object OutlineLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object OutlineLevel" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.OutlineLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的当前大纲级别。</summary>
        <value>
          <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的当前大纲级别。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 级别 1 是最外层的摘要级别。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PageBreak">
      <MemberSignature Language="C#" Value="public int PageBreak { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PageBreak" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.PageBreak" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置分页符的位置。</summary>
        <value>分页符的位置。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以设置此属性使用以下项之一<xref:Microsoft.Office.Interop.Excel.XlPageBreak>值：  
  
-   <xref:Microsoft.Office.Interop.Excel.XlPageBreak.xlPageBreakAutomatic>  
  
-   <xref:Microsoft.Office.Interop.Excel.XlPageBreak.xlPageBreakManual>  
  
-   <xref:Microsoft.Office.Interop.Excel.XlPageBreak.xlPageBreakNone>  
  
 此属性可以返回的位置是自动还是手动上的分页符，但它仅可以将手动换页符的位置进行设置 (它只能设置为<xref:Microsoft.Office.Interop.Excel.XlPageBreak.xlPageBreakManual>或<xref:Microsoft.Office.Interop.Excel.XlPageBreak.xlPageBreakNone>)。  
  
   
  
## Examples  
 下面的代码示例创建<xref:Microsoft.Office.Tools.Excel.NamedRange>，然后使用<xref:Microsoft.Office.Tools.Excel.NamedRange.PageBreak%2A>属性设置在分页符<xref:Microsoft.Office.Tools.Excel.NamedRange>。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#101](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#101)]
 [!code-vb[Trin_ExcelNamedRange#101](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#101)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public object Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Parent" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的父对象。</summary>
        <value>
          <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的父对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例创建<xref:Microsoft.Office.Tools.Excel.NamedRange>，然后使用<xref:Microsoft.Office.Tools.Excel.NamedRange.Parent%2A>属性显示的父级名称<xref:Microsoft.Office.Interop.Excel.Worksheet>的<xref:Microsoft.Office.Tools.Excel.NamedRange>。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#102](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#102)]
 [!code-vb[Trin_ExcelNamedRange#102](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#102)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public object Parse (object ParseLine, object Destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Parse(object ParseLine, object Destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.Parse(System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ParseLine" Type="System.Object" />
        <Parameter Name="Destination" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="ParseLine">一个字符串，包含指示应在何处拆分单元格的左中括号和右中括号。  
  
 例如，“<c>[xxx][xxx]</c>”会在目标范围的第一列中插入前三个字符，并在第二列中插入随后的三个字符。  
  
 如果省略此参数，则 Microsoft Office Excel 基于该范围中左上角单元格的间距猜测在何处拆分列。 如果要使用另一个范围来猜测分析行，请将 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 对象用作 <c>ParseLine</c> 参数。 该范围必须是正被分析的那些单元格之一。 <c>ParseLine</c> 参数不能超过 255 个字符，包括括号和空格。</param>
        <param name="Destination">一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 对象，表示所分析数据的目标范围的左上角。 如果省略此参数，则 Excel 就地分析。</param>
        <summary>分析某一范围的数据并将它分成多个单元格。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 将分发的内容<xref:Microsoft.Office.Tools.Excel.NamedRange>控件填充多个相邻的列。 <xref:Microsoft.Office.Tools.Excel.NamedRange>控件均可以是不能超过一列的宽度。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.NamedRange.Parse%2A>方法，以便分析每个组中的电话号码从一组数字的<xref:Microsoft.Office.Tools.Excel.NamedRange>控件名为`NamedRange1`到单元格从单元格 D1 开始新的范围。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#11](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#11)]
 [!code-vb[Trin_ExcelNamedRange#11](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PasteSpecial">
      <MemberSignature Language="C#" Value="public object PasteSpecial (Microsoft.Office.Interop.Excel.XlPasteType Paste = Microsoft.Office.Interop.Excel.XlPasteType.xlPasteAll, Microsoft.Office.Interop.Excel.XlPasteSpecialOperation Operation = Microsoft.Office.Interop.Excel.XlPasteSpecialOperation.xlPasteSpecialOperationNone, object SkipBlanks, object Transpose);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object PasteSpecial(valuetype Microsoft.Office.Interop.Excel.XlPasteType Paste, valuetype Microsoft.Office.Interop.Excel.XlPasteSpecialOperation Operation, object SkipBlanks, object Transpose) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.PasteSpecial(Microsoft.Office.Interop.Excel.XlPasteType,Microsoft.Office.Interop.Excel.XlPasteSpecialOperation,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Paste" Type="Microsoft.Office.Interop.Excel.XlPasteType" />
        <Parameter Name="Operation" Type="Microsoft.Office.Interop.Excel.XlPasteSpecialOperation" />
        <Parameter Name="SkipBlanks" Type="System.Object" />
        <Parameter Name="Transpose" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Paste">该范围中要粘贴的部分。  
  
 可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlPasteType" /> 值之一：  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlPasteType.xlPasteAll" /><see cref="F:Microsoft.Office.Interop.Excel.XlPasteType.xlPasteAllExceptBorders" /><see cref="F:Microsoft.Office.Interop.Excel.XlPasteType.xlPasteColumnWidths" /><see cref="F:Microsoft.Office.Interop.Excel.XlPasteType.xlPasteComments" /><see cref="F:Microsoft.Office.Interop.Excel.XlPasteType.xlPasteFormats" /><see cref="F:Microsoft.Office.Interop.Excel.XlPasteType.xlPasteFormulas" /><see cref="F:Microsoft.Office.Interop.Excel.XlPasteType.xlPasteFormulasAndNumberFormats" /><see cref="F:Microsoft.Office.Interop.Excel.XlPasteType.xlPasteValidation" /><see cref="F:Microsoft.Office.Interop.Excel.XlPasteType.xlPasteValues" /><see cref="F:Microsoft.Office.Interop.Excel.XlPasteType.xlPasteValuesAndNumberFormats" /></param>
        <param name="Operation">粘贴操作。  
  
 可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlPasteSpecialOperation" /> 值之一：  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlPasteSpecialOperation.xlPasteSpecialOperationAdd" /><see cref="F:Microsoft.Office.Interop.Excel.XlPasteSpecialOperation.xlPasteSpecialOperationDivide" /><see cref="F:Microsoft.Office.Interop.Excel.XlPasteSpecialOperation.xlPasteSpecialOperationMultiply" /><see cref="F:Microsoft.Office.Interop.Excel.XlPasteSpecialOperation.xlPasteSpecialOperationNone" /><see cref="F:Microsoft.Office.Interop.Excel.XlPasteSpecialOperation.xlPasteSpecialOperationSubtract" /></param>
        <param name="SkipBlanks">
          如果不将剪贴板上该范围中的空单元格粘贴到目标范围，则为 <see langword="true" />。 默认值为 <see langword="false" />。</param>
        <param name="Transpose">
          如果在粘贴该范围时对行和列进行转置，则为 <see langword="true" />。 默认值为 <see langword="false" />。</param>
        <summary>将剪贴板上 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 对象的内容粘贴到 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件中。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a>可选参数  
 可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions.md)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.NamedRange.Copy%2A>方法的内容复制<xref:Microsoft.Office.Tools.Excel.NamedRange>控件名为`NamedRange1`到剪贴板，然后使用<xref:Microsoft.Office.Tools.Excel.NamedRange.PasteSpecial%2A>方法以粘贴到这些内容<xref:Microsoft.Office.Tools.Excel.NamedRange>控件名为`NamedRange2`. `Operation`参数设置为<xref:Microsoft.Office.Interop.Excel.XlPasteSpecialOperation.xlPasteSpecialOperationAdd>，以便在每个单元格的内容`NamedRange1`添加到中的相应单元格`NamedRange2`。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#10](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#10)]
 [!code-vb[Trin_ExcelNamedRange#10](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Phonetic">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Phonetic Phonetic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Phonetic Phonetic" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.Phonetic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Phonetic</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:Microsoft.Office.Interop.Excel.Phonetic" /> 对象，该对象包含有关 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件中特定拼音文本字符串的信息。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.Phonetic" /> 对象，包含有关 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件中特定拼音文本字符串的信息。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性提供与早期版本的 Microsoft Office Excel 的兼容性。 应使用<xref:Microsoft.Office.Tools.Excel.NamedRange.Phonetics%2A>(`index`)，其中`index`是要返回单个的拼音文本的索引号<xref:Microsoft.Office.Interop.Excel.Phonetic>对象。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Phonetics">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Phonetics Phonetics { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Phonetics Phonetics" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.Phonetics" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Phonetics</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:Microsoft.Office.Interop.Excel.Phonetics" /> 控件的 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 集合。</summary>
        <value>
          <see cref="T:Microsoft.Office.Interop.Excel.Phonetics" /> 控件的 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 集合。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PivotCell">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.PivotCell PivotCell { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.PivotCell PivotCell" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.PivotCell" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.PivotCell</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.PivotCell" />，它表示数据透视表中的一个单元格。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.PivotCell" />，表示数据透视表中的一个单元格。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例创建数据透视表和<xref:Microsoft.Office.Tools.Excel.NamedRange>内的数据透视表的区域。 然后，它使用<xref:Microsoft.Office.Tools.Excel.NamedRange.PivotTable%2A>， <xref:Microsoft.Office.Tools.Excel.NamedRange.LocationInTable%2A>， <xref:Microsoft.Office.Tools.Excel.NamedRange.PivotCell%2A>， <xref:Microsoft.Office.Tools.Excel.NamedRange.PivotItem%2A>，和<xref:Microsoft.Office.Tools.Excel.NamedRange.PivotField%2A>要显示的布局的信息的属性<xref:Microsoft.Office.Tools.Excel.NamedRange>数据透视表中。 此示例还使用<xref:Microsoft.Office.Tools.Excel.NamedRange.Group%2A>方法来执行数值分组基于字段中的第一个值。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#117](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#117)]
 [!code-vb[Trin_ExcelNamedRange#117](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#117)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PivotField">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.PivotField PivotField { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.PivotField PivotField" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.PivotField" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.PivotField</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.PivotField" />，它表示包含 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件左上角的数据透视表字段。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.PivotField" />，表示包含 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件左上角的数据透视表字段。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例创建数据透视表和<xref:Microsoft.Office.Tools.Excel.NamedRange>内的数据透视表的区域。 然后，它使用<xref:Microsoft.Office.Tools.Excel.NamedRange.PivotTable%2A>， <xref:Microsoft.Office.Tools.Excel.NamedRange.LocationInTable%2A>， <xref:Microsoft.Office.Tools.Excel.NamedRange.PivotCell%2A>， <xref:Microsoft.Office.Tools.Excel.NamedRange.PivotItem%2A>，和<xref:Microsoft.Office.Tools.Excel.NamedRange.PivotField%2A>要显示的布局的信息的属性<xref:Microsoft.Office.Tools.Excel.NamedRange>数据透视表中。 此示例还使用<xref:Microsoft.Office.Tools.Excel.NamedRange.Group%2A>方法来执行数值分组基于字段中的第一个值。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#117](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#117)]
 [!code-vb[Trin_ExcelNamedRange#117](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#117)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PivotItem">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.PivotItem PivotItem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.PivotItem PivotItem" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.PivotItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.PivotItem</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.PivotItem" />，它表示包含 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件左上角的数据透视表项。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.PivotItem" />，表示包含 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件左上角的数据透视表项。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例创建数据透视表和<xref:Microsoft.Office.Tools.Excel.NamedRange>内的数据透视表的区域。 然后，它使用<xref:Microsoft.Office.Tools.Excel.NamedRange.PivotTable%2A>， <xref:Microsoft.Office.Tools.Excel.NamedRange.LocationInTable%2A>， <xref:Microsoft.Office.Tools.Excel.NamedRange.PivotCell%2A>， <xref:Microsoft.Office.Tools.Excel.NamedRange.PivotItem%2A>，和<xref:Microsoft.Office.Tools.Excel.NamedRange.PivotField%2A>要显示的布局的信息的属性<xref:Microsoft.Office.Tools.Excel.NamedRange>数据透视表中。 此示例还使用<xref:Microsoft.Office.Tools.Excel.NamedRange.Group%2A>方法来执行数值分组基于字段中的第一个值。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#117](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#117)]
 [!code-vb[Trin_ExcelNamedRange#117](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#117)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PivotTable">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.PivotTable PivotTable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.PivotTable PivotTable" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.PivotTable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.PivotTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.PivotTable" />，它表示包含 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件左上角的数据透视表或者与数据透视图报表相关联的数据透视表。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.PivotTable" />，表示包含 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件左上角的数据透视表或者与数据透视图报表相关联的数据透视表。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例创建数据透视表和<xref:Microsoft.Office.Tools.Excel.NamedRange>内的数据透视表的区域。 然后，它使用<xref:Microsoft.Office.Tools.Excel.NamedRange.PivotTable%2A>， <xref:Microsoft.Office.Tools.Excel.NamedRange.LocationInTable%2A>， <xref:Microsoft.Office.Tools.Excel.NamedRange.PivotCell%2A>， <xref:Microsoft.Office.Tools.Excel.NamedRange.PivotItem%2A>，和<xref:Microsoft.Office.Tools.Excel.NamedRange.PivotField%2A>要显示的布局的信息的属性<xref:Microsoft.Office.Tools.Excel.NamedRange>数据透视表中。 此示例还使用<xref:Microsoft.Office.Tools.Excel.NamedRange.Group%2A>方法来执行数值分组基于字段中的第一个值。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#117](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#117)]
 [!code-vb[Trin_ExcelNamedRange#117](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#117)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Precedents">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range Precedents { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range Precedents" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.Precedents" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，它表示 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的所有引用单元格。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，表示 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的所有引用单元格。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 这可以是多重选择 (的并集<xref:Microsoft.Office.Interop.Excel.Range?displayProperty=fullName>对象) 如果存在多个引用单元格。  
  
   
  
## Examples  
 下面的代码示例设置单元格 A2 来引用单元格 A1 中的引用，然后设置的引用<xref:Microsoft.Office.Tools.Excel.NamedRange>来引用单元格 A2。 然后，该代码示例使用<xref:Microsoft.Office.Tools.Excel.NamedRange.Precedents%2A>属性选择的引用单元格<xref:Microsoft.Office.Tools.Excel.NamedRange>，这是单元格 A1 和 A2。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#103](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#103)]
 [!code-vb[Trin_ExcelNamedRange#103](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#103)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PrefixCharacter">
      <MemberSignature Language="C#" Value="public object PrefixCharacter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object PrefixCharacter" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.PrefixCharacter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的前缀字符。</summary>
        <value>
          <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的前缀字符。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果值<xref:Microsoft.Office.Interop.Excel._Application.TransitionNavigKeys%2A>属性是`false`，此前缀字符是对于文本标签，或为空。 如果值<xref:Microsoft.Office.Interop.Excel._Application.TransitionNavigKeys%2A>属性是`true`，该字符是左对齐的标签，"右对齐的标签，^ 的居中添加 \ 重复的标签，标签或留空。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.NamedRange.PrefixCharacter%2A>属性显示的前缀字符<xref:Microsoft.Office.Tools.Excel.NamedRange>。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#104](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#104)]
 [!code-vb[Trin_ExcelNamedRange#104](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#104)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Previous">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range Previous { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range Previous" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.Previous" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个表示上一个单元格的 <see cref="T:Microsoft.Office.Interop.Excel.Range" />。</summary>
        <value>一个表示上一个单元格的 <see cref="T:Microsoft.Office.Interop.Excel.Range" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性会模拟按下 SHIFT + TAB;与不同的键的组合，但是，该属性返回上一个单元格而不选择它。  
  
 对于受保护的表，此属性返回上一个解锁单元格。 在未受保护的工作表，此属性始终返回该单元格立即指定的单元格左侧。  
  
   
  
## Examples  
 下面的代码示例创建<xref:Microsoft.Office.Tools.Excel.NamedRange>，然后使用<xref:Microsoft.Office.Tools.Excel.NamedRange.Previous%2A>属性选择该单元格左侧<xref:Microsoft.Office.Tools.Excel.NamedRange>。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#105](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#105)]
 [!code-vb[Trin_ExcelNamedRange#105](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#105)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PrintOut">
      <MemberSignature Language="C#" Value="public object PrintOut (object From, object To, object Copies, object Preview, object ActivePrinter, object PrintToFile, object Collate, object PrToFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object PrintOut(object From, object To, object Copies, object Preview, object ActivePrinter, object PrintToFile, object Collate, object PrToFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.PrintOut(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="From" Type="System.Object" />
        <Parameter Name="To" Type="System.Object" />
        <Parameter Name="Copies" Type="System.Object" />
        <Parameter Name="Preview" Type="System.Object" />
        <Parameter Name="ActivePrinter" Type="System.Object" />
        <Parameter Name="PrintToFile" Type="System.Object" />
        <Parameter Name="Collate" Type="System.Object" />
        <Parameter Name="PrToFileName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="From">To be added.</param>
        <param name="To">To be added.</param>
        <param name="Copies">To be added.</param>
        <param name="Preview">To be added.</param>
        <param name="ActivePrinter">To be added.</param>
        <param name="PrintToFile">To be added.</param>
        <param name="Collate">To be added.</param>
        <param name="PrToFileName">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrintOutEx">
      <MemberSignature Language="C#" Value="public object PrintOutEx (object From, object To, object Copies, object Preview, object ActivePrinter, object PrintToFile, object Collate, object PrToFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object PrintOutEx(object From, object To, object Copies, object Preview, object ActivePrinter, object PrintToFile, object Collate, object PrToFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.PrintOutEx(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="From" Type="System.Object" />
        <Parameter Name="To" Type="System.Object" />
        <Parameter Name="Copies" Type="System.Object" />
        <Parameter Name="Preview" Type="System.Object" />
        <Parameter Name="ActivePrinter" Type="System.Object" />
        <Parameter Name="PrintToFile" Type="System.Object" />
        <Parameter Name="Collate" Type="System.Object" />
        <Parameter Name="PrToFileName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="From">要开始打印的起始页的页码。 默认从第一页开始打印。</param>
        <param name="To">要打印的最后一页的页码。 默认在打印完最后一页后停止打印。</param>
        <param name="Copies">要打印的份数。 默认情况下，只打印一份。</param>
        <param name="Preview">
          如果让 Excel 在打印对象之前调用打印预览，则为 <see langword="true" />。 为 <see langword="false" />（或省略）时，立即打印对象。</param>
        <param name="ActivePrinter">设置活动打印机的名称。</param>
        <param name="PrintToFile">
          若要打印到文件，请使用 <see langword="true" />。 若未指定 <c>PrToFileName</c>，则 Excel 会提示用户输入输出文件的名称。</param>
        <param name="Collate">
          若逐份打印多个副本，请使用 <see langword="true" />。</param>
        <param name="PrToFileName">如果 <c>PrintToFile</c> 设为 <see langword="true" />，则此参数指定要打印到的文件的名称。</param>
        <summary>打印对象。</summary>
        <returns>一个表示 <see cref="T:System.Object" /> 对象的 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.NamedRange.PrintOutEx%2A>方法要打印一份命名范围的前两页`NamedRange1`到默认打印机。 若要运行此代码示例，你的工作簿必须包含名为工作表`Sheet1`与名为的命名区域`NamedRange1`中包含的单元格包含一些数据区域。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkBook_Additional#14](~/snippets/csharp/VS_Snippets_OfficeSP/trin_excelworkbook_additional/cs/ThisWorkbook.cs#14)]
 [!code-vb[Trin_ExcelWorkBook_Additional#14](~/snippets/visualbasic/VS_Snippets_OfficeSP/trin_excelworkbook_additional/vb/ThisWorkbook.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PrintPreview">
      <MemberSignature Language="C#" Value="public object PrintPreview (object EnableChanges);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object PrintPreview(object EnableChanges) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.PrintPreview(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="EnableChanges" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="EnableChanges">
          如果在显示打印预览时启用所做的更改，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <summary>显示 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的预览（显示打印时的外观）。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a>可选参数  
 可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions.md)。  
  
   
  
## Examples  
 下面的代码示例设置的值中的单元格<xref:Microsoft.Office.Tools.Excel.NamedRange>到随机数字，然后使用控件<xref:Microsoft.Office.Tools.Excel.NamedRange.PrintPreview%2A>方法生成的命名范围的内容打印预览。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#8](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#8)]
 [!code-vb[Trin_ExcelNamedRange#8](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryTable">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.QueryTable QueryTable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.QueryTable QueryTable" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.QueryTable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.QueryTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.QueryTable" />，它表示与 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件相交的查询表。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.QueryTable" />，表示与 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件相交的查询表。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.NamedRange.QueryTable%2A>属性刷新查询表相交<xref:Microsoft.Office.Tools.Excel.NamedRange>。 此代码示例假定该工作表包含与单元格 C1 相交查询表。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#106](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#106)]
 [!code-vb[Trin_ExcelNamedRange#106](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#106)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadingOrder">
      <MemberSignature Language="C#" Value="public int ReadingOrder { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReadingOrder" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.ReadingOrder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的读取顺序。</summary>
        <value>以下值之一：<see cref="F:Microsoft.Office.Interop.Excel.Constants.xlRTL" />（从右向左）、<see cref="F:Microsoft.Office.Interop.Excel.Constants.xlLTR" />（从左向右）或 <see cref="F:Microsoft.Office.Interop.Excel.Constants.xlContext" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 这些常量中的某些可能不可用，这取决于的语言支持 （美国美式英语）。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.NamedRange.ReadingOrder%2A>属性要反转的阅读顺序<xref:Microsoft.Office.Tools.Excel.NamedRange>，如果选择或安装的当前语言支持它。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#107](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#107)]
 [!code-vb[Trin_ExcelNamedRange#107](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#107)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RefersTo">
      <MemberSignature Language="C#" Value="public string RefersTo { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RefersTo" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.RefersTo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件定义为引用的公式（使用 A1 样式表示法）。</summary>
        <value>
          <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件定义为引用的公式。 该公式使用 A1 样式表示法并以等号开头。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:Microsoft.Office.Tools.Excel.NamedRange.RefersTo%2A>属性可更改范围，<xref:Microsoft.Office.Tools.Excel.NamedRange>控件是指。  
  
   
  
## Examples  
 下面的代码示例创建<xref:Microsoft.Office.Tools.Excel.NamedRange>和显示的公式<xref:Microsoft.Office.Tools.Excel.NamedRange>。 然后将分配到新的单元格<xref:Microsoft.Office.Tools.Excel.NamedRange>并显示新的公式。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#108](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#108)]
 [!code-vb[Trin_ExcelNamedRange#108](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#108)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RefersToLocal">
      <MemberSignature Language="C#" Value="public string RefersToLocal { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RefersToLocal" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.RefersToLocal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件定义为引用的公式（使用 A1 样式表示法并采用用户语言）。</summary>
        <value>
          <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件定义为引用的公式。 该公式使用 A1 样式表示法，采用用户语言并以等号开头。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:Microsoft.Office.Tools.Excel.NamedRange.RefersToLocal%2A>属性可更改范围，<xref:Microsoft.Office.Tools.Excel.NamedRange>控件是指。  
  
   
  
## Examples  
 下面的代码示例创建<xref:Microsoft.Office.Tools.Excel.NamedRange>和显示的公式<xref:Microsoft.Office.Tools.Excel.NamedRange>中用户的语言。 然后将分配到新的单元格<xref:Microsoft.Office.Tools.Excel.NamedRange>并显示新的公式。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#109](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#109)]
 [!code-vb[Trin_ExcelNamedRange#109](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#109)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RefersToR1C1">
      <MemberSignature Language="C#" Value="public string RefersToR1C1 { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RefersToR1C1" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.RefersToR1C1" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件定义为引用的公式（使用 R1C1 样式表示法）。</summary>
        <value>
          <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件定义为引用的公式。 该公式使用 R1C1 样式表示法并以等号开头。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:Microsoft.Office.Tools.Excel.NamedRange.RefersToR1C1%2A>属性可更改范围，<xref:Microsoft.Office.Tools.Excel.NamedRange>控件是指。  
  
   
  
## Examples  
 下面的代码示例创建<xref:Microsoft.Office.Tools.Excel.NamedRange>和显示的公式<xref:Microsoft.Office.Tools.Excel.NamedRange>。 然后将分配到新的单元格<xref:Microsoft.Office.Tools.Excel.NamedRange>并显示新的公式。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#110](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#110)]
 [!code-vb[Trin_ExcelNamedRange#110](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#110)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RefersToR1C1Local">
      <MemberSignature Language="C#" Value="public string RefersToR1C1Local { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RefersToR1C1Local" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.RefersToR1C1Local" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件定义为引用的公式（使用 R1C1 样式表示法并采用用户语言）。</summary>
        <value>
          <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件定义为引用的公式。 该公式使用 R1C1 样式表示法，采用用户语言并以等号开头。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:Microsoft.Office.Tools.Excel.NamedRange.RefersToR1C1Local%2A>属性可更改范围，<xref:Microsoft.Office.Tools.Excel.NamedRange>控件是指。  
  
   
  
## Examples  
 下面的代码示例创建<xref:Microsoft.Office.Tools.Excel.NamedRange>和显示的公式<xref:Microsoft.Office.Tools.Excel.NamedRange>中用户的语言。 然后将分配到新的单元格<xref:Microsoft.Office.Tools.Excel.NamedRange>并显示新的公式。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#111](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#111)]
 [!code-vb[Trin_ExcelNamedRange#111](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#111)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RefersToRange">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range RefersToRange { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range RefersToRange" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.RefersToRange" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取由 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 控件引用的 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" />。</summary>
        <value>一个由 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 控件引用的 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:Microsoft.Office.Tools.Excel.NamedRange.RefersTo%2A>属性可更改范围，<xref:Microsoft.Office.Tools.Excel.NamedRange>控件是指。  
  
   
  
## Examples  
 下面的代码示例启动一系列的星期几名称，然后创建<xref:Microsoft.Office.Tools.Excel.NamedRange>来包含该系列。 然后，它使用<xref:Microsoft.Office.Tools.Excel.NamedRange.AutoFill%2A>方法以完成序列。 <xref:Microsoft.Office.Tools.Excel.NamedRange.AutoFill%2A> 需要<xref:Microsoft.Office.Interop.Excel.Range?displayProperty=fullName>作为参数。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#112](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#112)]
 [!code-vb[Trin_ExcelNamedRange#112](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#112)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveDuplicates">
      <MemberSignature Language="C#" Value="public void RemoveDuplicates (object Columns, Microsoft.Office.Interop.Excel.XlYesNoGuess Header = Microsoft.Office.Interop.Excel.XlYesNoGuess.xlNo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveDuplicates(object Columns, valuetype Microsoft.Office.Interop.Excel.XlYesNoGuess Header) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.RemoveDuplicates(System.Object,Microsoft.Office.Interop.Excel.XlYesNoGuess)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Columns" Type="System.Object" />
        <Parameter Name="Header" Type="Microsoft.Office.Interop.Excel.XlYesNoGuess" />
      </Parameters>
      <Docs>
        <param name="Columns">可选。 包含重复值的列的索引数组。 如果为空，将对所有列搜索重复信息。</param>
        <param name="Header">可选。 指定第一行中是否包含标题信息。 默认值为 <see langword="xlNo" />。 如果想让 Excel 尝试确定标题，请使用 <see langword="xlGuess" />。</param>
        <summary>从某一范围的值中移除重复值。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveSubtotal">
      <MemberSignature Language="C#" Value="public object RemoveSubtotal ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object RemoveSubtotal() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.RemoveSubtotal" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件中移除小计。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public bool Replace (object What, object Replacement, object LookAt, object SearchOrder, object MatchCase, object MatchByte, object SearchFormat, object ReplaceFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Replace(object What, object Replacement, object LookAt, object SearchOrder, object MatchCase, object MatchByte, object SearchFormat, object ReplaceFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.Replace(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="What" Type="System.Object" />
        <Parameter Name="Replacement" Type="System.Object" />
        <Parameter Name="LookAt" Type="System.Object" />
        <Parameter Name="SearchOrder" Type="System.Object" />
        <Parameter Name="MatchCase" Type="System.Object" />
        <Parameter Name="MatchByte" Type="System.Object" />
        <Parameter Name="SearchFormat" Type="System.Object" />
        <Parameter Name="ReplaceFormat" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="What">希望 Microsoft Office Excel 搜索的字符串。</param>
        <param name="Replacement">替换字符串。</param>
        <param name="LookAt">可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlLookAt" /> 常数之一：<see cref="F:Microsoft.Office.Interop.Excel.XlLookAt.xlWhole" /> 或 <see cref="F:Microsoft.Office.Interop.Excel.XlLookAt.xlPart" />。</param>
        <param name="SearchOrder">可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlSearchOrder" /> 常数之一：<see cref="F:Microsoft.Office.Interop.Excel.XlSearchOrder.xlByRows" /> 或 <see cref="F:Microsoft.Office.Interop.Excel.XlSearchOrder.xlByColumns" />。</param>
        <param name="MatchCase">
          如果在搜索时区分大小写，则为 <see langword="true" />。</param>
        <param name="MatchByte">仅当已在 Excel 中选择或安装双字节语言支持时，才会用到此参数。 如果让双字节字符仅与双字节字符相匹配，则为 <see langword="true" />；如果让双字节字符与其单字节等效字符相匹配，则为 <see langword="false" />。</param>
        <param name="SearchFormat">该方法的搜索格式。</param>
        <param name="ReplaceFormat">该方法的替换格式。</param>
        <summary>将 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件中指定的字符替换为新字符串。</summary>
        <returns>
          如果指定的字符位于 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件中的单元格中，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此方法不会更改选定内容或活动的单元格。  
  
 有关设置`LookAt`， `SearchOrder`， `MatchCase`，和`MatchByte`保存每次使用此方法。 如果您不指定这些参数的值在调用该方法的下一步时，将使用保存的值。 设置这些参数将更改中的设置**查找**对话框中，并更改中的设置**查找**对话框中更改如果省略这些参数，则使用的已保存的值。 若要避免出现问题，这些自变量显式设置每次使用此方法。  
  
## <a name="optional-parameters"></a>可选参数  
 可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions.md)。  
  
   
  
## Examples  
 下面的代码示例设置中的单元格的值<xref:Microsoft.Office.Tools.Excel.NamedRange>到字符串的控件"`This is a sentence.`"，然后使用<xref:Microsoft.Office.Tools.Excel.NamedRange.Replace%2A>方法将子字符串"`a`"与"`my`"。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#7](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#7)]
 [!code-vb[Trin_ExcelNamedRange#7](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Resize">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Tools.Excel.NamedRange_ResizeType Resize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Tools.Excel.NamedRange_ResizeType Resize" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.Resize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Tools.Excel.NamedRange_ResizeType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个基于 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 控件调整大小的 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" />。</summary>
        <value>一个基于 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 控件调整大小的 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Tools.Excel.NamedRange.Resize%2A>属性应与以下参数一起使用。  
  
|参数|描述|  
|---------------|-----------------|  
|`RowSize`|新的范围中的行数。 如果省略此参数，该范围中的行数保持不变。|  
|`ColumnSize`|新的范围中的列数。 如果省略此参数，该范围中的列数保持不变。|  
  
 如果你尝试使用<xref:Microsoft.Office.Tools.Excel.NamedRange.Resize%2A>而不指定任何参数，<xref:Microsoft.Office.Tools.Excel.NamedRange.Resize%2A>将获取<xref:Microsoft.Office.Tools.Excel.NamedRange_ResizeType>对象，是 Visual Studio 基础结构的一部分和不应在代码中直接使用。  
  
## <a name="optional-parameters"></a>可选参数  
 可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions.md)。  
  
   
  
## Examples  
 下面的代码示例创建<xref:Microsoft.Office.Tools.Excel.NamedRange>，然后使用<xref:Microsoft.Office.Tools.Excel.NamedRange.Resize%2A>属性以获得更大范围基于<xref:Microsoft.Office.Tools.Excel.NamedRange>。 然后，该代码选择新的范围。  
  
 此版本用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#113](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#113)]
 [!code-vb[Trin_ExcelNamedRange#113](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#113)]  
  
 此版本用于针对应用程序级外接程序。  
  
<!-- TODO: review snippet reference  [!CODE [Trin_ExcelNamedRange_AppLevelAddIn#113](Trin_ExcelNamedRange_AppLevelAddIn#113)]  -->  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Row">
      <MemberSignature Language="C#" Value="public int Row { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Row" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.Row" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的第一个区域中第一行的编号。</summary>
        <value>
          <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的第一个区域中第一行的编号。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例创建<xref:Microsoft.Office.Tools.Excel.NamedRange>并使用<xref:Microsoft.Office.Tools.Excel.NamedRange.Column%2A>和<xref:Microsoft.Office.Tools.Excel.NamedRange.Row%2A>属性，以显示第一列数和行中<xref:Microsoft.Office.Tools.Excel.NamedRange>。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#50](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#50)]
 [!code-vb[Trin_ExcelNamedRange#50](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#50)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RowDifferences">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range RowDifferences (object Comparison);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Interop.Excel.Range RowDifferences(object Comparison) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.RowDifferences(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Comparison" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Comparison">要与该行中的其他单元格进行比较的单个单元格。</param>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 对象，该对象表示内容与每一行中的比较单元格不同的所有单元格。</summary>
        <returns>一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 对象，表示内容与每一行中的比较单元格不同的所有单元格。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例创建<xref:Microsoft.Office.Tools.Excel.NamedRange>并填充具有三个不同值的范围中的单元格。 它比较中的单元格的所有<xref:Microsoft.Office.Tools.Excel.NamedRange>B5 单元格，为 22，然后选择包含不匹配的值的单元格的值。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#114](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#114)]
 [!code-vb[Trin_ExcelNamedRange#114](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#114)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RowHeight">
      <MemberSignature Language="C#" Value="public object RowHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object RowHeight" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.RowHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件中所有行的高度（以磅为度量单位）。</summary>
        <value>
          <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件中所有行的高度（以磅为度量单位）。 如果指定范围中的行高不尽相同，则返回 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 对于单个行的值<xref:Microsoft.Office.Tools.Excel.NamedRange.Height%2A>属性等于的值<xref:Microsoft.Office.Tools.Excel.NamedRange.RowHeight%2A>属性。 但是，你还可以使用<xref:Microsoft.Office.Tools.Excel.NamedRange.Height%2A>属性以返回一系列单元格的总高度。  
  
 其他差异<xref:Microsoft.Office.Tools.Excel.NamedRange.RowHeight%2A>和<xref:Microsoft.Office.Tools.Excel.NamedRange.Height%2A>如下：  
  
-   <xref:Microsoft.Office.Tools.Excel.NamedRange.Height%2A> 为只读。  
  
-   如果返回<xref:Microsoft.Office.Tools.Excel.NamedRange.RowHeight%2A>的多个行的属性，你将获取的每个行的行高度 （如果所有行的高度相同） 或`null`（如果它们是不同的高度）。 如果返回<xref:Microsoft.Office.Tools.Excel.NamedRange.Height%2A>的多个行的属性，将获取所有行的总高度。  
  
   
  
## Examples  
 下面的代码示例创建<xref:Microsoft.Office.Tools.Excel.NamedRange>，然后设置列的宽度和范围的一部分的行的高度。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#52](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#52)]
 [!code-vb[Trin_ExcelNamedRange#52](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#52)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rows">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range Rows { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range Rows" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.Rows" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，它表示 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件中的一行或多个行。</summary>
        <value>
          <see cref="T:Microsoft.Office.Interop.Excel.Range" />，它表示 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件中的一行或多个行。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果使用不带参数，此属性返回<xref:Microsoft.Office.Interop.Excel.Range>对象，其中包含指定范围中的所有行。  
  
 此属性可以使用以下可选参数，用于获取指定范围中的特定行。 如果参数中使用此属性，返回值是必须强制转换为对象<xref:Microsoft.Office.Interop.Excel.Range>。  
  
|参数|描述|  
|---------------|-----------------|  
|`RowIndex`|若要获取的一个或多个行的索引。<br /><br /> 若要获取单个行，请传递一个整数，指定你想要获取的行的索引。 从 1 开始的行索引。<br /><br /> 若要获取多个连续行，请传递与格式字符串"`first row`:`last row`"。 例如，若要获取行 1 至 5，可传递"1:5"。|  
|`ColumnIndex`|不使用此参数。 此属性将引发<xref:System.Runtime.InteropServices.COMException>如果你尝试将值传递给此参数。|  
  
   
  
## Examples  
 下面的代码示例创建<xref:Microsoft.Office.Tools.Excel.NamedRange>，然后使用<xref:Microsoft.Office.Tools.Excel.NamedRange.Rows%2A>属性在范围中的前五个行中设置颜色、 名称、 大小和加粗的字体的所有单元格。  
  
 此示例适用于文档级自定义。 若要运行此代码，请将其复制到你的项目中的工作表类之一。  
  
 [!code-csharp[Trin_ExcelNamedRange#120](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#120)]
 [!code-vb[Trin_ExcelNamedRange#120](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#120)]  
  
 下面的代码示例创建<xref:Microsoft.Office.Tools.Excel.NamedRange>，然后使用<xref:Microsoft.Office.Tools.Excel.NamedRange.Rows%2A>属性来确定有多少行处于的范围。  
  
 此示例适用于文档级自定义。 若要运行此代码，请将其复制到你的项目中的工作表类之一。  
  
 [!code-csharp[Trin_ExcelNamedRange#47](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#47)]
 [!code-vb[Trin_ExcelNamedRange#47](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#47)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public object Run (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Run(object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.Run(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public object Select ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Select() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.Select" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>选择 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.NamedRange.Select%2A>方法来选择中的单元格<xref:Microsoft.Office.Tools.Excel.NamedRange>包括的单元格 A1 E5 到范围的控件。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#6](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#6)]
 [!code-vb[Trin_ExcelNamedRange#6](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Selected">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.DocEvents_SelectionChangeEventHandler Selected;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.DocEvents_SelectionChangeEventHandler Selected" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.NamedRange.Selected" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.DocEvents_SelectionChangeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当选择 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 所选内容更改为时会引发此事件<xref:Microsoft.Office.Tools.Excel.NamedRange>控件。  
  
   
  
## Examples  
 下面的代码示例演示的处理程序<xref:Microsoft.Office.Tools.Excel.NamedRange.Selected>显示中选择的单元格的地址的事件<xref:Microsoft.Office.Tools.Excel.NamedRange>。  
  
 此版本用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#115](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#115)]
 [!code-vb[Trin_ExcelNamedRange#115](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#115)]  
  
 此版本用于针对应用程序级外接程序。  
  
<!-- TODO: review snippet reference  [!CODE [Trin_ExcelNamedRange_AppLevelAddIn#115](Trin_ExcelNamedRange_AppLevelAddIn#115)]  -->  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectionChange">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.DocEvents_SelectionChangeEventHandler SelectionChange;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.DocEvents_SelectionChangeEventHandler SelectionChange" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.NamedRange.SelectionChange" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.DocEvents_SelectionChangeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件内部的所选内容更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 所选内容更改到或在内时引发此事件<xref:Microsoft.Office.Tools.Excel.NamedRange>控件。  
  
   
  
## Examples  
 下面的代码示例演示的处理程序<xref:Microsoft.Office.Tools.Excel.NamedRange.SelectionChange>显示中选择的单元格的地址的事件<xref:Microsoft.Office.Tools.Excel.NamedRange>。  
  
 此版本用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#116](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#116)]
 [!code-vb[Trin_ExcelNamedRange#116](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#116)]  
  
 此版本用于针对应用程序级外接程序。  
  
<!-- TODO: review snippet reference  [!CODE [Trin_ExcelNamedRange_AppLevelAddIn#116](Trin_ExcelNamedRange_AppLevelAddIn#116)]  -->  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ServerActions">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Actions ServerActions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Actions ServerActions" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.ServerActions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Actions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取可以在 Microsoft Office SharePoint 服务器上对 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 对象执行的操作。</summary>
        <value>
          <c>Microsoft.Office.Interop.Excel.Actions</c>对象，表示可以在 SharePoint 服务器执行的操作<see cref="T:Microsoft.Office.Tools.Excel.NamedRange" />对象。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPhonetic">
      <MemberSignature Language="C#" Value="public void SetPhonetic ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetPhonetic() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.SetPhonetic" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>为 <see cref="T:Microsoft.Office.Interop.Excel.Phonetic" /> 控件中的所有单元格创建 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 任何现有<xref:Microsoft.Office.Interop.Excel.Phonetic>中的对象<xref:Microsoft.Office.Tools.Excel.NamedRange>控件都会自动覆盖 （删除） 通过使用此方法添加的新对象。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Show">
      <MemberSignature Language="C#" Value="public object Show ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Show() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.Show" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在活动窗口的内容中滚动，以便将 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件移到视图中。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 范围必须包含的活动文档中的单个单元格。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowDependents">
      <MemberSignature Language="C#" Value="public object ShowDependents (object Remove);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ShowDependents(object Remove) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.ShowDependents(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Remove" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Remove">
          如果移除指向直接依赖单元格的某一级别的跟踪标志箭头，则为 <see langword="true" />；如果展开某一级别的跟踪标志箭头，则为 <see langword="false" />。 默认值为 <see langword="false" />。</param>
        <summary>绘制指向 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的直接依赖单元格的跟踪标志箭头。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Tools.Excel.NamedRange>控件必须为单个单元格。  
  
## <a name="optional-parameters"></a>可选参数  
 可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions.md)。  
  
   
  
## Examples  
 下面的代码示例使 A1 单元格的从属<xref:Microsoft.Office.Tools.Excel.NamedRange>。 然后该示例使用<xref:Microsoft.Office.Tools.Excel.NamedRange.ShowDependents%2A>方法之间绘制一个箭头<xref:Microsoft.Office.Tools.Excel.NamedRange>从属单元格，并调用和<xref:Microsoft.Office.Tools.Excel.NamedRange.NavigateArrow%2A>方法来选择依赖的单元格。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#96](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#96)]
 [!code-vb[Trin_ExcelNamedRange#96](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#96)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowDetail">
      <MemberSignature Language="C#" Value="public object ShowDetail { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ShowDetail" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.ShowDetail" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取和设置一个对象，该对象指示是否展开了 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的大纲（以便列或行的详细信息可见）。</summary>
        <value>
          如果展开指定范围的大纲（以便列或行的详细信息可见），则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Tools.Excel.NamedRange>控件必须包含单个摘要列或概述中的行。  
  
 如果<xref:Microsoft.Office.Tools.Excel.NamedRange>控件位于数据透视表中，此属性设置为`true`如果项显示详细信息。  
  
 如果<xref:Microsoft.Office.Tools.Excel.NamedRange>控件不在数据透视表，以下语句为 true:  
  
-   <xref:Microsoft.Office.Tools.Excel.NamedRange>控件必须为单个摘要行或列中。  
  
-   此属性返回`false`如果任何行或列的子级处于隐藏状态。  
  
-   此属性设置为`true`等效于显示的摘要行或列的所有子级。  
  
-   此属性设置为`false`等效于隐藏摘要行或列的所有子级。  
  
-   如果<xref:Microsoft.Office.Tools.Excel.NamedRange>控件位于数据透视表中，可以一次设置此属性对于多个单元格。 可以返回此属性，仅当<xref:Microsoft.Office.Tools.Excel.NamedRange>控件是单个单元格。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowErrors">
      <MemberSignature Language="C#" Value="public object ShowErrors ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ShowErrors() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.ShowErrors" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>绘制通过引用单元格树指向作为错误源的单元格的跟踪标志箭头，然后返回包含该单元格的 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 对象。</summary>
        <returns>一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 对象，包含作为错误源的单元格。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowPrecedents">
      <MemberSignature Language="C#" Value="public object ShowPrecedents (object Remove);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ShowPrecedents(object Remove) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.ShowPrecedents(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Remove" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Remove">
          如果移除指向直接引用单元格的某一级别的跟踪标志箭头，则为 <see langword="true" />；如果展开某一级别的跟踪标志箭头，则为 <see langword="false" />。 默认值为 <see langword="false" />。</param>
        <summary>绘制指向 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的直接引用单元格的跟踪标志箭头。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Tools.Excel.NamedRange>控件必须为单个单元格。  
  
## <a name="optional-parameters"></a>可选参数  
 可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions.md)。  
  
   
  
## Examples  
 下面的代码示例使 A1 单元格的引用单元格<xref:Microsoft.Office.Tools.Excel.NamedRange>。 然后该示例使用<xref:Microsoft.Office.Tools.Excel.NamedRange.ShowPrecedents%2A>方法之间绘制一个箭头<xref:Microsoft.Office.Tools.Excel.NamedRange>和引用单元格。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#95](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#95)]
 [!code-vb[Trin_ExcelNamedRange#95](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#95)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShrinkToFit">
      <MemberSignature Language="C#" Value="public object ShrinkToFit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ShrinkToFit" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.ShrinkToFit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示文本是否自动缩小以适合可用的列宽。</summary>
        <value>
          如果文本自动收缩以适应可用的列宽，则为 <see langword="true" />；如果对于 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件中所有的单元格，未将此属性设置为同一个值，则为 <see langword="null" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SmartTags">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.SmartTags SmartTags { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.SmartTags SmartTags" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.SmartTags" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.SmartTags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public object Sort (object Key1, Microsoft.Office.Interop.Excel.XlSortOrder Order1 = Microsoft.Office.Interop.Excel.XlSortOrder.xlAscending, object Key2, object Type, Microsoft.Office.Interop.Excel.XlSortOrder Order2 = Microsoft.Office.Interop.Excel.XlSortOrder.xlAscending, object Key3, Microsoft.Office.Interop.Excel.XlSortOrder Order3 = Microsoft.Office.Interop.Excel.XlSortOrder.xlAscending, Microsoft.Office.Interop.Excel.XlYesNoGuess Header = Microsoft.Office.Interop.Excel.XlYesNoGuess.xlNo, object OrderCustom, object MatchCase, Microsoft.Office.Interop.Excel.XlSortOrientation Orientation = Microsoft.Office.Interop.Excel.XlSortOrientation.xlSortRows, Microsoft.Office.Interop.Excel.XlSortMethod SortMethod = Microsoft.Office.Interop.Excel.XlSortMethod.xlPinYin, Microsoft.Office.Interop.Excel.XlSortDataOption DataOption1 = Microsoft.Office.Interop.Excel.XlSortDataOption.xlSortNormal, Microsoft.Office.Interop.Excel.XlSortDataOption DataOption2 = Microsoft.Office.Interop.Excel.XlSortDataOption.xlSortNormal, Microsoft.Office.Interop.Excel.XlSortDataOption DataOption3 = Microsoft.Office.Interop.Excel.XlSortDataOption.xlSortNormal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Sort(object Key1, valuetype Microsoft.Office.Interop.Excel.XlSortOrder Order1, object Key2, object Type, valuetype Microsoft.Office.Interop.Excel.XlSortOrder Order2, object Key3, valuetype Microsoft.Office.Interop.Excel.XlSortOrder Order3, valuetype Microsoft.Office.Interop.Excel.XlYesNoGuess Header, object OrderCustom, object MatchCase, valuetype Microsoft.Office.Interop.Excel.XlSortOrientation Orientation, valuetype Microsoft.Office.Interop.Excel.XlSortMethod SortMethod, valuetype Microsoft.Office.Interop.Excel.XlSortDataOption DataOption1, valuetype Microsoft.Office.Interop.Excel.XlSortDataOption DataOption2, valuetype Microsoft.Office.Interop.Excel.XlSortDataOption DataOption3) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.Sort(System.Object,Microsoft.Office.Interop.Excel.XlSortOrder,System.Object,System.Object,Microsoft.Office.Interop.Excel.XlSortOrder,System.Object,Microsoft.Office.Interop.Excel.XlSortOrder,Microsoft.Office.Interop.Excel.XlYesNoGuess,System.Object,System.Object,Microsoft.Office.Interop.Excel.XlSortOrientation,Microsoft.Office.Interop.Excel.XlSortMethod,Microsoft.Office.Interop.Excel.XlSortDataOption,Microsoft.Office.Interop.Excel.XlSortDataOption,Microsoft.Office.Interop.Excel.XlSortDataOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Key1" Type="System.Object" />
        <Parameter Name="Order1" Type="Microsoft.Office.Interop.Excel.XlSortOrder" />
        <Parameter Name="Key2" Type="System.Object" />
        <Parameter Name="Type" Type="System.Object" />
        <Parameter Name="Order2" Type="Microsoft.Office.Interop.Excel.XlSortOrder" />
        <Parameter Name="Key3" Type="System.Object" />
        <Parameter Name="Order3" Type="Microsoft.Office.Interop.Excel.XlSortOrder" />
        <Parameter Name="Header" Type="Microsoft.Office.Interop.Excel.XlYesNoGuess" />
        <Parameter Name="OrderCustom" Type="System.Object" />
        <Parameter Name="MatchCase" Type="System.Object" />
        <Parameter Name="Orientation" Type="Microsoft.Office.Interop.Excel.XlSortOrientation" />
        <Parameter Name="SortMethod" Type="Microsoft.Office.Interop.Excel.XlSortMethod" />
        <Parameter Name="DataOption1" Type="Microsoft.Office.Interop.Excel.XlSortDataOption" />
        <Parameter Name="DataOption2" Type="Microsoft.Office.Interop.Excel.XlSortDataOption" />
        <Parameter Name="DataOption3" Type="Microsoft.Office.Interop.Excel.XlSortDataOption" />
      </Parameters>
      <Docs>
        <param name="Key1">第一个排序字段，要么是文本（范围名称），要么是一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 对象（例如，“Dept”或 <c>Cells(1, 1)</c>）。</param>
        <param name="Order1">在 <c>Key1</c> 中指定的字段或范围的排序顺序。  
  
 可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlSortOrder" /> 值之一：  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlSortOrder.xlDescending" />。 将 <c>Key1</c> 按降序排序。  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlSortOrder.xlAscending" />。 将 <c>Key1</c> 按升序排序。</param>
        <param name="Key2">第二个排序字段，要么是文本（范围名称），要么是一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 对象。 如果您省略此参数，则没有第二个排序字段。</param>
        <param name="Type">指定要进行排序的元素。 只有当对数据透视表进行排序时，才使用此参数。  
  
 可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlSortType" /> 值之一：  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlSortType.xlSortLabels" />。 按标签对数据透视表进行排序。  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlSortType.xlSortValues" />。 按值对数据透视表进行排序。</param>
        <param name="Order2">在 <c>Key2</c> 中指定的范围的排序顺序。 不可用于数据透视表的排序。  
  
 可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlSortOrder" /> 值之一：  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlSortOrder.xlDescending" />。 将 <c>Key2</c> 按降序排序。  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlSortOrder.xlAscending" />。 将 <c>Key2</c> 按升序排序。</param>
        <param name="Key3">第三个排序字段，要么是文本（范围名称），要么是一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 对象。 如果您省略此参数，则没有第三个排序字段。 不可用于数据透视表的排序。</param>
        <param name="Order3">在 <c>Key3</c> 中指定的字段或范围的排序顺序。 不可用于数据透视表的排序。  
  
 可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlSortOrder" /> 值之一：  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlSortOrder.xlDescending" />。 将 <c>Key3</c> 按降序排序。  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlSortOrder.xlAscending" />。 将 <c>Key3</c> 按升序排序。</param>
        <param name="Header">指定第一行中是否包含标题。 不可用于数据透视表的排序。  
  
 可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlYesNoGuess" /> 值之一：  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlYesNoGuess.xlGuess" />。 让 Microsoft Office Excel 确定是否有标题，如果有的话，确定它的位置。  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlYesNoGuess.xlNo" />。 （应当对整个范围进行排序。）  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlYesNoGuess.xlYes" />。 （不应当对整个范围进行排序。）</param>
        <param name="OrderCustom">此参数是一个在自定义排序顺序列表中的从 1 开始的整数偏移量。 如果省略 <c>OrderCustom</c>，则使用正常排序。</param>
        <param name="MatchCase">
          如果执行区分大小写的排序，则为 <see langword="true" />；如果执行不区分大小写的排序，则为 <see langword="false" />。 不可用于数据透视表的排序。</param>
        <param name="Orientation">排序方向。  
  
 可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlSortOrientation" /> 值之一：  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlSortOrientation.xlSortRows" />。 按行排序。  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlSortOrientation.xlSortColumns" />。 按列排序。</param>
        <param name="SortMethod">排序的类型。 您可能无法使用其中某些常数，具体取决于您选择或安装的语言支持（例如，美国美式英语）。  
  
 可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlSortMethod" /> 值之一：  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlSortMethod.xlStroke" />。 按每个字符中的笔画数进行排序。  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlSortMethod.xlPinYin" />。 字符的中文拼音排序顺序。</param>
        <param name="DataOption1">指定如何对 <c>key1</c> 中的文本排序。 不可用于数据透视表的排序。  
  
 可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlSortDataOption" /> 值之一：  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlSortDataOption.xlSortTextAsNumbers" />。 在进行排序时将文本数据视为数值数据。  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlSortDataOption.xlSortNormal" />。 分别对数值数据和文本数据进行排序。</param>
        <param name="DataOption2">指定如何对 <c>key2</c> 中的文本排序。 不可用于数据透视表的排序。  
  
 可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlSortDataOption" /> 值之一：  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlSortDataOption.xlSortTextAsNumbers" />。 在进行排序时将文本数据视为数值数据。  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlSortDataOption.xlSortNormal" />。 分别对数值数据和文本数据进行排序。</param>
        <param name="DataOption3">指定如何对 <c>key3</c> 中的文本排序。 不可用于数据透视表的排序。  
  
 可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlSortDataOption" /> 值之一：  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlSortDataOption.xlSortTextAsNumbers" />。 在进行排序时将文本数据视为数值数据。  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlSortDataOption.xlSortNormal" />。 分别对数值数据和文本数据进行排序。</param>
        <summary>对 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件中的数据进行排序。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关设置`Header`， `Order1`， `Order2`， `Order3`， `OrderCustom`，和`Orientation`保存后，特定的工作表，每次使用此方法。 如果您不指定这些参数的值在调用该方法的下一步时，将使用保存的值。 这些自变量显式设置每次使用此方法，如果你选择不使用保存的值。  
  
 通常排序不可转换为数值数据的文本字符串。  
  
 如果使用此方法定义没有自变量，Microsoft Office Excel 会进行排序以升序所选内容。  
  
## <a name="optional-parameters"></a>可选参数  
 可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions.md)。  
  
   
  
## Examples  
 下面的代码示例将整数的一组放在单元格 A1 A5 到，然后使用<xref:Microsoft.Office.Tools.Excel.NamedRange.Sort%2A>方法以将数据按升序排序。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#2](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#2)]
 [!code-vb[Trin_ExcelNamedRange#2](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SortSpecial">
      <MemberSignature Language="C#" Value="public object SortSpecial (Microsoft.Office.Interop.Excel.XlSortMethod SortMethod = Microsoft.Office.Interop.Excel.XlSortMethod.xlPinYin, object Key1, Microsoft.Office.Interop.Excel.XlSortOrder Order1 = Microsoft.Office.Interop.Excel.XlSortOrder.xlAscending, object Type, object Key2, Microsoft.Office.Interop.Excel.XlSortOrder Order2 = Microsoft.Office.Interop.Excel.XlSortOrder.xlAscending, object Key3, Microsoft.Office.Interop.Excel.XlSortOrder Order3 = Microsoft.Office.Interop.Excel.XlSortOrder.xlAscending, Microsoft.Office.Interop.Excel.XlYesNoGuess Header = Microsoft.Office.Interop.Excel.XlYesNoGuess.xlNo, object OrderCustom, object MatchCase, Microsoft.Office.Interop.Excel.XlSortOrientation Orientation = Microsoft.Office.Interop.Excel.XlSortOrientation.xlSortRows, Microsoft.Office.Interop.Excel.XlSortDataOption DataOption1 = Microsoft.Office.Interop.Excel.XlSortDataOption.xlSortNormal, Microsoft.Office.Interop.Excel.XlSortDataOption DataOption2 = Microsoft.Office.Interop.Excel.XlSortDataOption.xlSortNormal, Microsoft.Office.Interop.Excel.XlSortDataOption DataOption3 = Microsoft.Office.Interop.Excel.XlSortDataOption.xlSortNormal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object SortSpecial(valuetype Microsoft.Office.Interop.Excel.XlSortMethod SortMethod, object Key1, valuetype Microsoft.Office.Interop.Excel.XlSortOrder Order1, object Type, object Key2, valuetype Microsoft.Office.Interop.Excel.XlSortOrder Order2, object Key3, valuetype Microsoft.Office.Interop.Excel.XlSortOrder Order3, valuetype Microsoft.Office.Interop.Excel.XlYesNoGuess Header, object OrderCustom, object MatchCase, valuetype Microsoft.Office.Interop.Excel.XlSortOrientation Orientation, valuetype Microsoft.Office.Interop.Excel.XlSortDataOption DataOption1, valuetype Microsoft.Office.Interop.Excel.XlSortDataOption DataOption2, valuetype Microsoft.Office.Interop.Excel.XlSortDataOption DataOption3) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.SortSpecial(Microsoft.Office.Interop.Excel.XlSortMethod,System.Object,Microsoft.Office.Interop.Excel.XlSortOrder,System.Object,System.Object,Microsoft.Office.Interop.Excel.XlSortOrder,System.Object,Microsoft.Office.Interop.Excel.XlSortOrder,Microsoft.Office.Interop.Excel.XlYesNoGuess,System.Object,System.Object,Microsoft.Office.Interop.Excel.XlSortOrientation,Microsoft.Office.Interop.Excel.XlSortDataOption,Microsoft.Office.Interop.Excel.XlSortDataOption,Microsoft.Office.Interop.Excel.XlSortDataOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SortMethod" Type="Microsoft.Office.Interop.Excel.XlSortMethod" />
        <Parameter Name="Key1" Type="System.Object" />
        <Parameter Name="Order1" Type="Microsoft.Office.Interop.Excel.XlSortOrder" />
        <Parameter Name="Type" Type="System.Object" />
        <Parameter Name="Key2" Type="System.Object" />
        <Parameter Name="Order2" Type="Microsoft.Office.Interop.Excel.XlSortOrder" />
        <Parameter Name="Key3" Type="System.Object" />
        <Parameter Name="Order3" Type="Microsoft.Office.Interop.Excel.XlSortOrder" />
        <Parameter Name="Header" Type="Microsoft.Office.Interop.Excel.XlYesNoGuess" />
        <Parameter Name="OrderCustom" Type="System.Object" />
        <Parameter Name="MatchCase" Type="System.Object" />
        <Parameter Name="Orientation" Type="Microsoft.Office.Interop.Excel.XlSortOrientation" />
        <Parameter Name="DataOption1" Type="Microsoft.Office.Interop.Excel.XlSortDataOption" />
        <Parameter Name="DataOption2" Type="Microsoft.Office.Interop.Excel.XlSortDataOption" />
        <Parameter Name="DataOption3" Type="Microsoft.Office.Interop.Excel.XlSortDataOption" />
      </Parameters>
      <Docs>
        <param name="SortMethod">排序的类型。 您可能无法使用其中某些常数，具体取决于您选择或安装的语言支持（例如，美国美式英语）。  
  
 可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlSortMethod" /> 值之一：  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlSortMethod.xlStroke" />。 按每个字符中的笔画数进行排序。  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlSortMethod.xlPinYin" />（默认）。 字符的中文拼音排序顺序。</param>
        <param name="Key1">第一个排序字段，要么是文本（范围名称），要么是一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 对象（例如，“Dept”或 <c>Cells(1, 1)</c>）。</param>
        <param name="Order1">在 <c>Key1</c> 中指定的字段或范围的排序顺序。  
  
 可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlSortOrder" /> 值之一：  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlSortOrder.xlDescending" />。 将 <c>Key1</c> 按降序排序。  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlSortOrder.xlAscending" />（默认）。 将 <c>Key1</c> 按升序排序。</param>
        <param name="Type">指定要进行排序的元素。 只有当对数据透视表进行排序时，才使用此参数。</param>
        <param name="Key2">第二个排序字段，要么是文本（范围名称），要么是一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 对象。 如果您省略此参数，则没有第二个排序字段。 不可用于数据透视表的排序。</param>
        <param name="Order2">在 <c>Key2</c> 参数中指定的字段或范围的排序顺序。 不可用于数据透视表的排序。  
  
 可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlSortOrder" /> 值之一：  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlSortOrder.xlDescending" />。 将 <c>Key2</c> 按降序排序。  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlSortOrder.xlAscending" />（默认）。 将 <c>Key2</c> 按升序排序。</param>
        <param name="Key3">第三个排序字段，要么是文本（范围名称），要么是一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 对象。 如果您省略此参数，则没有第三个排序字段。 不可用于数据透视表的排序。</param>
        <param name="Order3">在 <c>Key3</c> 参数中指定的字段或范围的排序顺序。 不可用于数据透视表的排序。  
  
 可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlSortOrder" /> 值之一：  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlSortOrder.xlDescending" />。 将 <c>Key3</c> 按降序排序。  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlSortOrder.xlAscending" />（默认）。 将 <c>Key3</c> 按升序排序。</param>
        <param name="Header">指定第一行中是否包含标题。 不可用于数据透视表的排序。  
  
 可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlYesNoGuess" /> 值之一：  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlYesNoGuess.xlGuess" />。 让 Microsoft Office Excel 确定是否有标题，如果有的话，确定它的位置。  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlYesNoGuess.xlNo" />（默认）。 应当对整个范围进行排序。  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlYesNoGuess.xlYes" />。 不应当对整个范围进行排序。</param>
        <param name="OrderCustom">此参数是一个在自定义排序顺序列表中的从 1 开始的整数偏移量。 如果省略 <c>OrderCustom</c>，则使用正常排序顺序。</param>
        <param name="MatchCase">
          如果执行区分大小写的排序，则为 <see langword="true" />；如果执行不区分大小写的排序，则为 <see langword="false" />。 不可用于数据透视表的排序。</param>
        <param name="Orientation">排序方向。  
  
 可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlSortOrientation" /> 值之一：  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlSortOrientation.xlSortRows" />（默认）。 按行进行排序。  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlSortOrientation.xlSortColumns" />。 按列进行了排序。</param>
        <param name="DataOption1">指定如何对 <c>key1</c> 中的文本排序。 不可用于数据透视表的排序。  
  
 可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlSortDataOption" /> 值之一：  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlSortDataOption.xlSortTextAsNumbers" />。 在进行排序时将文本数据视为数值数据。  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlSortDataOption.xlSortNormal" />（默认）。 分别对数值数据和文本数据进行排序。</param>
        <param name="DataOption2">指定如何对 <c>key2</c> 中的文本排序。 不可用于数据透视表的排序。  
  
 可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlSortDataOption" /> 值之一：  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlSortDataOption.xlSortTextAsNumbers" />。 在进行排序时将文本数据视为数值数据。  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlSortDataOption.xlSortNormal" />（默认）。 分别对数值数据和文本数据进行排序。</param>
        <param name="DataOption3">指定如何对 <c>key3</c> 中的文本排序。 不可用于数据透视表的排序。  
  
 可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlSortDataOption" /> 值之一：  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlSortDataOption.xlSortTextAsNumbers" />。 在进行排序时将文本数据视为数值数据。  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlSortDataOption.xlSortNormal" />（默认）。 分别对数值数据和文本数据进行排序。</param>
        <summary>使用东亚排序方法对 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件进行排序。 例如，在日语中，按照假名音节表顺序进行排序。 有关更多信息，请参见参数列表。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果使用此方法定义没有自变量，Microsoft Office Excel 对进行排序以升序所选内容。  
  
## <a name="optional-parameters"></a>可选参数  
 可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions.md)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.NamedRange.SortSpecial%2A>方法进行排序<xref:Microsoft.Office.Tools.Excel.NamedRange>使用拼音 （拼音中文字符的排序顺序）。 若要对中文字符进行排序，此示例假定用户具有中文语言支持 Microsoft Office excel。 Excel 将默认为排序<xref:Microsoft.Office.Tools.Excel.NamedRange>通过如果用户不具有中文语言支持的值。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#93](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#93)]
 [!code-vb[Trin_ExcelNamedRange#93](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#93)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SoundNote">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.SoundNote SoundNote { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.SoundNote SoundNote" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.SoundNote" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.SoundNote</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不应使用此属性。 已从 Microsoft Office Excel 中删除的语音批注。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparklineGroups">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.SparklineGroups SparklineGroups { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.SparklineGroups SparklineGroups" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.SparklineGroups" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.SparklineGroups</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个对象，该对象表示来自指定范围的现有迷你图组。</summary>
        <value>表示来自指定范围的现有迷你图组的对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  此属性将出现在 IntelliSense Excel 2007 项目中面向[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]。 但是，不能在 Excel 2007 项目中使用此属性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Speak">
      <MemberSignature Language="C#" Value="public void Speak (object SpeakDirection, object SpeakFormulas);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Speak(object SpeakDirection, object SpeakFormulas) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.Speak(System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SpeakDirection" Type="System.Object" />
        <Parameter Name="SpeakFormulas" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="SpeakDirection">朗读方向（按行或列）。</param>
        <param name="SpeakFormulas">
          对于包含公式的单元格，如果为 <see langword="true" />，则会导致将公式发送到文字语音转换 (TTS) 引擎。 如果单元格中没有公式，则发送该值；如果为 <see langword="false" />（默认值），则会导致总是将该值发送到 TTS 引擎。</param>
        <summary>导致按行顺序或列顺序朗读 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的单元格。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a>可选参数  
 可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions.md)。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:Microsoft.Office.Tools.Excel.NamedRange.Speak%2A>方法进行沟通的内容<xref:Microsoft.Office.Tools.Excel.NamedRange>控件名为`NamedRange1`列。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#1](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#1)]
 [!code-vb[Trin_ExcelNamedRange#1](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpecialCells">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range SpecialCells (Microsoft.Office.Interop.Excel.XlCellType Type, object Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Interop.Excel.Range SpecialCells(valuetype Microsoft.Office.Interop.Excel.XlCellType Type, object Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.SpecialCells(Microsoft.Office.Interop.Excel.XlCellType,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Type" Type="Microsoft.Office.Interop.Excel.XlCellType" />
        <Parameter Name="Value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Type">要包括的单元格。  
  
 可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlCellType" /> 值之一：  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlCellType.xlCellTypeAllFormatConditions" />。 任何格式的单元格。  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlCellType.xlCellTypeAllValidation" />。 具有验证条件的单元格。  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlCellType.xlCellTypeBlanks" />。 空单元格。  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlCellType.xlCellTypeComments" />。 包含注释的单元格。  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlCellType.xlCellTypeConstants" />。 包含常量的单元格。  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlCellType.xlCellTypeFormulas" />。 包含公式的单元格。  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlCellType.xlCellTypeLastCell" />。 所使用范围中的最后一个单元格。  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlCellType.xlCellTypeSameFormatConditions" />。 具有相同格式的单元格。  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlCellType.xlCellTypeSameValidation" />。 具有相同验证条件的单元格。  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlCellType.xlCellTypeVisible" />。 所有可见的单元格。</param>
        <param name="Value">如果 <c>Type</c> 为 <see cref="F:Microsoft.Office.Interop.Excel.XlCellType.xlCellTypeConstants" /> 或 <see cref="F:Microsoft.Office.Interop.Excel.XlCellType.xlCellTypeFormulas" />，则此参数用于确定要在结果中包含哪些类型的单元格。 这些值可以一起添加以返回多种类型。 默认情况下，无论是何种类型，都选择所有的常数或公式。 可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlSpecialCellsValue" /> 值之一：  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlSpecialCellsValue.xlErrors" /><see cref="F:Microsoft.Office.Interop.Excel.XlSpecialCellsValue.xlLogical" /><see cref="F:Microsoft.Office.Interop.Excel.XlSpecialCellsValue.xlNumbers" /><see cref="F:Microsoft.Office.Interop.Excel.XlSpecialCellsValue.xlTextValues" /></param>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 对象，该对象表示与指定的类型和值相匹配的所有单元格。</summary>
        <returns>一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 对象，表示与指定的类型和值相匹配的所有单元格。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a>可选参数  
 可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions.md)。  
  
   
  
## Examples  
 下面的代码示例创建<xref:Microsoft.Office.Tools.Excel.NamedRange>，然后使用<xref:Microsoft.Office.Tools.Excel.NamedRange.SpecialCells%2A>方法来选择中的最后一个使用单元格<xref:Microsoft.Office.Tools.Excel.NamedRange>。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#92](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#92)]
 [!code-vb[Trin_ExcelNamedRange#92](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#92)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Style">
      <MemberSignature Language="C#" Value="public object Style { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Style" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.Style" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个表示 <see cref="T:Microsoft.Office.Interop.Excel.Style" /> 控件的样式的 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" />。</summary>
        <value>一个表示 <see cref="T:Microsoft.Office.Interop.Excel.Style" /> 控件的样式的 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例创建一个新的自定义样式垂直显示文本，然后设置<xref:Microsoft.Office.Tools.Excel.NamedRange>以使用此样式。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#91](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#91)]
 [!code-vb[Trin_ExcelNamedRange#91](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#91)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SubscribeTo">
      <MemberSignature Language="C#" Value="public object SubscribeTo (string Edition, Microsoft.Office.Interop.Excel.XlSubscribeToFormat Format = Microsoft.Office.Interop.Excel.XlSubscribeToFormat.xlSubscribeToText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object SubscribeTo(string Edition, valuetype Microsoft.Office.Interop.Excel.XlSubscribeToFormat Format) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.SubscribeTo(System.String,Microsoft.Office.Interop.Excel.XlSubscribeToFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Edition" Type="System.String" />
        <Parameter Name="Format" Type="Microsoft.Office.Interop.Excel.XlSubscribeToFormat" />
      </Parameters>
      <Docs>
        <param name="Edition">To be added.</param>
        <param name="Format">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtotal">
      <MemberSignature Language="C#" Value="public object Subtotal (int GroupBy, Microsoft.Office.Interop.Excel.XlConsolidationFunction Function, object TotalList, object Replace, object PageBreaks, Microsoft.Office.Interop.Excel.XlSummaryRow SummaryBelowData = Microsoft.Office.Interop.Excel.XlSummaryRow.xlSummaryBelow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Subtotal(int32 GroupBy, valuetype Microsoft.Office.Interop.Excel.XlConsolidationFunction Function, object TotalList, object Replace, object PageBreaks, valuetype Microsoft.Office.Interop.Excel.XlSummaryRow SummaryBelowData) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.Subtotal(System.Int32,Microsoft.Office.Interop.Excel.XlConsolidationFunction,System.Object,System.Object,System.Object,Microsoft.Office.Interop.Excel.XlSummaryRow)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="GroupBy" Type="System.Int32" />
        <Parameter Name="Function" Type="Microsoft.Office.Interop.Excel.XlConsolidationFunction" />
        <Parameter Name="TotalList" Type="System.Object" />
        <Parameter Name="Replace" Type="System.Object" />
        <Parameter Name="PageBreaks" Type="System.Object" />
        <Parameter Name="SummaryBelowData" Type="Microsoft.Office.Interop.Excel.XlSummaryRow" />
      </Parameters>
      <Docs>
        <param name="GroupBy">要作为分组依据的字段，是从 1 开始的整数偏移量。</param>
        <param name="Function">小计函数。  
  
 可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlConsolidationFunction" /> 值之一：  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlConsolidationFunction.xlAverage" /><see cref="F:Microsoft.Office.Interop.Excel.XlConsolidationFunction.xlCount" /><see cref="F:Microsoft.Office.Interop.Excel.XlConsolidationFunction.xlCountNums" /><see cref="F:Microsoft.Office.Interop.Excel.XlConsolidationFunction.xlMax" /><see cref="F:Microsoft.Office.Interop.Excel.XlConsolidationFunction.xlMin" /><see cref="F:Microsoft.Office.Interop.Excel.XlConsolidationFunction.xlProduct" /><see cref="F:Microsoft.Office.Interop.Excel.XlConsolidationFunction.xlStDev" /><see cref="F:Microsoft.Office.Interop.Excel.XlConsolidationFunction.xlStDevP" /><see cref="F:Microsoft.Office.Interop.Excel.XlConsolidationFunction.xlSum" /><see cref="F:Microsoft.Office.Interop.Excel.XlConsolidationFunction.xlUnknown" /><see cref="F:Microsoft.Office.Interop.Excel.XlConsolidationFunction.xlVar" /><see cref="F:Microsoft.Office.Interop.Excel.XlConsolidationFunction.xlVarP" /></param>
        <param name="TotalList">一个从 1 开始的字段偏移量数组，指示要将小计添加到的字段。</param>
        <param name="Replace">
          如果替换现有的小计，则为 <see langword="true" />。 默认值为 <see langword="false" />。</param>
        <param name="PageBreaks">
          如果在每组后面添加分页符，则为 <see langword="true" />。 默认值为 <see langword="false" />。</param>
        <param name="SummaryBelowData">放置与小计相关的摘要数据。  
  
 可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlSummaryRow" /> 值之一：  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlSummaryRow.xlSummaryAbove" /><see cref="F:Microsoft.Office.Interop.Excel.XlSummaryRow.xlSummaryBelow" />（默认值）</param>
        <summary>为 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件创建小计。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a>可选参数  
 可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions.md)。  
  
   
  
## Examples  
 下面的代码示例创建小计<xref:Microsoft.Office.Tools.Excel.NamedRange>。 将小计是中的所有三个字段的总和<xref:Microsoft.Office.Tools.Excel.NamedRange>。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#90](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#90)]
 [!code-vb[Trin_ExcelNamedRange#90](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#90)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Summary">
      <MemberSignature Language="C#" Value="public object Summary { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Summary" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.Summary" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示此范围是否为大纲摘要行或列。</summary>
        <value>
          如果此范围是大纲摘要行或列，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 范围应为行或列。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Table">
      <MemberSignature Language="C#" Value="public object Table (object RowInput, object ColumnInput);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Table(object RowInput, object ColumnInput) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.Table(System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="RowInput" Type="System.Object" />
        <Parameter Name="ColumnInput" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="RowInput">一个要用作表的行输入的单元格。</param>
        <param name="ColumnInput">一个要用作表的列输入的单元格。</param>
        <summary>基于在工作表中定义的输入值和公式创建数据表。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用数据表通过更改某些常量值在工作表中，若要查看如何影响其他单元格中的值执行假设分析。  
  
## <a name="optional-parameters"></a>可选参数  
 可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions.md)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.NamedRange.Table%2A>方法来创建在一个格式化的乘法表<xref:Microsoft.Office.Tools.Excel.NamedRange>。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#89](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#89)]
 [!code-vb[Trin_ExcelNamedRange#89](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#89)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置包含有关 <see cref="P:Microsoft.Office.Tools.Excel.NamedRange.Tag" /> 控件的数据的对象。</summary>
        <value>一个包含有关 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的数据的对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一个常见用途<xref:Microsoft.Office.Tools.Excel.NamedRange.Tag%2A>属性是与紧密关联的数据存储<xref:Microsoft.Office.Tools.Excel.NamedRange>控件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public object Text { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Text" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的文本。</summary>
        <value>
          <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的文本。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返回`null`为<xref:Microsoft.Office.Tools.Excel.NamedRange>具有多个单元格的控件。  
  
   
  
## Examples  
 下面的代码示例比较了<xref:Microsoft.Office.Tools.Excel.NamedRange.Text%2A>和<xref:Microsoft.Office.Tools.Excel.NamedRange.Value2%2A>属性不同的单元格包含格式化数字。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#87](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#87)]
 [!code-vb[Trin_ExcelNamedRange#87](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#87)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextToColumns">
      <MemberSignature Language="C#" Value="public object TextToColumns (object Destination, Microsoft.Office.Interop.Excel.XlTextParsingType DataType = Microsoft.Office.Interop.Excel.XlTextParsingType.xlDelimited, Microsoft.Office.Interop.Excel.XlTextQualifier TextQualifier = Microsoft.Office.Interop.Excel.XlTextQualifier.xlTextQualifierDoubleQuote, object ConsecutiveDelimiter, object Tab, object Semicolon, object Comma, object Space, object Other, object OtherChar, object FieldInfo, object DecimalSeparator, object ThousandsSeparator, object TrailingMinusNumbers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object TextToColumns(object Destination, valuetype Microsoft.Office.Interop.Excel.XlTextParsingType DataType, valuetype Microsoft.Office.Interop.Excel.XlTextQualifier TextQualifier, object ConsecutiveDelimiter, object Tab, object Semicolon, object Comma, object Space, object Other, object OtherChar, object FieldInfo, object DecimalSeparator, object ThousandsSeparator, object TrailingMinusNumbers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.TextToColumns(System.Object,Microsoft.Office.Interop.Excel.XlTextParsingType,Microsoft.Office.Interop.Excel.XlTextQualifier,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Destination" Type="System.Object" />
        <Parameter Name="DataType" Type="Microsoft.Office.Interop.Excel.XlTextParsingType" />
        <Parameter Name="TextQualifier" Type="Microsoft.Office.Interop.Excel.XlTextQualifier" />
        <Parameter Name="ConsecutiveDelimiter" Type="System.Object" />
        <Parameter Name="Tab" Type="System.Object" />
        <Parameter Name="Semicolon" Type="System.Object" />
        <Parameter Name="Comma" Type="System.Object" />
        <Parameter Name="Space" Type="System.Object" />
        <Parameter Name="Other" Type="System.Object" />
        <Parameter Name="OtherChar" Type="System.Object" />
        <Parameter Name="FieldInfo" Type="System.Object" />
        <Parameter Name="DecimalSeparator" Type="System.Object" />
        <Parameter Name="ThousandsSeparator" Type="System.Object" />
        <Parameter Name="TrailingMinusNumbers" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Destination">一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 对象，指定 Microsoft Office Excel 将在何处放置结果。 如果范围大于单个单元格，则使用左上角的单元格。</param>
        <param name="DataType">要拆分成多列的文本的格式。  
  
 可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlTextParsingType" /> 常量之一：  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlTextParsingType.xlDelimited" />（默认值）  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlTextParsingType.xlFixedWidth" /></param>
        <param name="TextQualifier">可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlTextQualifier" /> 值之一：  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlTextQualifier.xlTextQualifierDoubleQuote" />（默认值）  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlTextQualifier.xlTextQualifierNone" /><see cref="F:Microsoft.Office.Interop.Excel.XlTextQualifier.xlTextQualifierSingleQuote" /></param>
        <param name="ConsecutiveDelimiter">
          如果让 Excel 将连续分隔符视为一个分隔符，则为 <see langword="true" />。 默认值为 <see langword="false" />。</param>
        <param name="Tab">
          如果让 <c>DataType</c> 为 <see cref="F:Microsoft.Office.Interop.Excel.XlTextParsingType.xlDelimited" />，并将制表符用作分隔符，则为 <see langword="true" />。 默认值为 <see langword="false" />。</param>
        <param name="Semicolon">
          如果让 <c>DataType</c> 为 <see cref="F:Microsoft.Office.Interop.Excel.XlTextParsingType.xlDelimited" />，并将分号用作分隔符，则为 <see langword="true" />。 默认值为 <see langword="false" />。</param>
        <param name="Comma">
          如果让 <c>DataType</c> 为 <see cref="F:Microsoft.Office.Interop.Excel.XlTextParsingType.xlDelimited" />，并将逗号用作分隔符，则为 <see langword="true" />。 默认值为 <see langword="false" />。</param>
        <param name="Space">
          如果让 <c>DataType</c> 为 <see cref="F:Microsoft.Office.Interop.Excel.XlTextParsingType.xlDelimited" />，并将空格字符用作分隔符，则为 <see langword="true" />。 默认值为 <see langword="false" />。</param>
        <param name="Other">
          如果让 <c>DataType</c> 为 <see cref="F:Microsoft.Office.Interop.Excel.XlTextParsingType.xlDelimited" />，并且将 <c>OtherChar</c> 参数指定的字符用作分隔符，则为 <see langword="true" />。 默认值为 <see langword="false" />。</param>
        <param name="OtherChar">当 <c>Other</c> 为 <see langword="true" /> 时的分隔符字符。 如果指定了多个字符，则只使用该字符串的第一个字符；忽略其余字符。</param>
        <param name="FieldInfo">一个数组，包含各个数据列的分析信息。 解释取决于 <c>DataType</c> 的值。 当对数据进行分隔时，此参数是一个由两元素数组组成的数组，每个两元素数组都指定特定列的转换选项。 第一个元素是列号（从 1 开始），第二个元素是指定如何分析列的 <see cref="T:Microsoft.Office.Interop.Excel.XlColumnDataType" /> 常量之一。  
  
 可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlColumnDataType" /> 值之一：  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlColumnDataType.xlGeneralFormat" /><see cref="F:Microsoft.Office.Interop.Excel.XlColumnDataType.xlTextFormat" /><see cref="F:Microsoft.Office.Interop.Excel.XlColumnDataType.xlMDYFormat" /><see cref="F:Microsoft.Office.Interop.Excel.XlColumnDataType.xlDMYFormat" /><see cref="F:Microsoft.Office.Interop.Excel.XlColumnDataType.xlYMDFormat" /><see cref="F:Microsoft.Office.Interop.Excel.XlColumnDataType.xlMYDFormat" /><see cref="F:Microsoft.Office.Interop.Excel.XlColumnDataType.xlDYMFormat" /><see cref="F:Microsoft.Office.Interop.Excel.XlColumnDataType.xlYDMFormat" /><see cref="F:Microsoft.Office.Interop.Excel.XlColumnDataType.xlEMDFormat" /><see cref="F:Microsoft.Office.Interop.Excel.XlColumnDataType.xlSkipColumn" />  
  
 仅当已安装和选择繁体中文支持时，才会用到 <see cref="F:Microsoft.Office.Interop.Excel.XlColumnDataType.xlEMDFormat" />。 <see cref="F:Microsoft.Office.Interop.Excel.XlColumnDataType.xlEMDFormat" /> 指定要使用的繁体中文纪元日期。  
  
 列说明符可以采用任何顺序。 如果对于输入数据中的特定列，给定的列说明符不存在，则用 <see cref="F:Microsoft.Office.Interop.Excel.XlColumnDataType.xlGeneralFormat" /> 设置对列进行分析。  
  
 如果源数据具有固定宽度的列，则每个两元素数组中的第一个元素都指定该列中的起始字符位置（以整数形式指定；0（零）是第一个字符）。 两元素数组的第二个元素将该列的分析选项指定为从 1 至 9 的数字，如上面列出的那样。</param>
        <param name="DecimalSeparator">Excel 用于识别数字的小数点分隔符。 默认设置是系统设置。</param>
        <param name="ThousandsSeparator">Excel 用于识别数字的千位分隔符。 默认设置是系统设置。</param>
        <param name="TrailingMinusNumbers">以负号开头的数字。</param>
        <summary>将包含文本的单元格所在的列分析为几列。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下表显示的文本的各种导入设置导入 Excel 的结果。 数值结果将显示在最右侧的列。  
  
|系统小数分隔符|系统千位分隔符|小数分隔符的值|千位分隔符的值|原始文本|单元格值 （数据类型）|  
|------------------------------|--------------------------------|-----------------------------|-------------------------------|-------------------|------------------------------|  
|段|逗号|逗号|段|123.123,45|123,123.45 （数值）|  
|段|逗号|逗号|逗号|123.123,45|123.123,45 （文本）|  
|逗号|段|逗号|段|123,123.45|123,123.45 （数值）|  
|段|逗号|段|逗号|123 123.45|123 123.45 （文本）|  
|段|逗号|段|空格|123 123.45|123,123.45 （数值）|  
  
## <a name="optional-parameters"></a>可选参数  
 可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions.md)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.NamedRange.TextToColumns%2A>方法将转换的用空格分隔日期字符串<xref:Microsoft.Office.Tools.Excel.NamedRange>为三列。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#86](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#86)]
 [!code-vb[Trin_ExcelNamedRange#86](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#86)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Top">
      <MemberSignature Language="C#" Value="public object Top { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Top" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.Top" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取第 1（一）行的上边缘到 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的上边缘之间的距离（以磅为单位）。</summary>
        <value>第 1（一）行的上边缘到 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的上边缘之间的距离（以磅为单位）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:Microsoft.Office.Tools.Excel.NamedRange>控件是高，多个行越小越 （编号） 的首行<xref:Microsoft.Office.Tools.Excel.NamedRange>使用控件。  
  
   
  
## Examples  
 下面的代码示例创建<xref:Microsoft.Office.Tools.Excel.NamedRange>控件。 然后，它使用<xref:Microsoft.Office.Tools.Excel.NamedRange.Left%2A>和<xref:Microsoft.Office.Tools.Excel.NamedRange.Top%2A>属性，以显示从列 A 到左边缘的左边缘的距离<xref:Microsoft.Office.Tools.Excel.NamedRange>，以及按自上而下的行 1 到上边缘的距离<xref:Microsoft.Office.Tools.Excel.NamedRange>。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#78](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#78)]
 [!code-vb[Trin_ExcelNamedRange#78](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#78)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ungroup">
      <MemberSignature Language="C#" Value="public object Ungroup ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Ungroup() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.Ungroup" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>提升大纲中的 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件（即，降低它的大纲级别）。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Tools.Excel.NamedRange>控件必须为行或列或行或列的范围。 如果<xref:Microsoft.Office.Tools.Excel.NamedRange>控件位于数据透视表中，此方法中包含的项取消分组<xref:Microsoft.Office.Tools.Excel.NamedRange>控件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnMerge">
      <MemberSignature Language="C#" Value="public void UnMerge ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnMerge() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.NamedRange.UnMerge" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将一个合并区域分成多个单元格。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseStandardHeight">
      <MemberSignature Language="C#" Value="public object UseStandardHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object UseStandardHeight" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.UseStandardHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的行高是否等于此表的标准高度。</summary>
        <value>
          如果 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的行高等于该表的标准高度，则为 <see langword="true" />；如果 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件包含多行，而且这些行的高度不尽相同，则为 <see langword="null" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseStandardWidth">
      <MemberSignature Language="C#" Value="public object UseStandardWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object UseStandardWidth" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.UseStandardWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的列宽是否等于此表的标准宽度。</summary>
        <value>
          如果 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的列宽等于该表的标准宽度，则为 <see langword="true" />；如果 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件包含多列，而且这些列的宽度不尽相同，则为 <see langword="null" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Validation">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Validation Validation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Validation Validation" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.Validation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Validation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Validation" /> 对象，该对象表示 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的数据验证。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.Validation" /> 对象，表示 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的数据验证。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你必须使用工作表的启动事件处理程序将验证添加到命名范围。 有关启动事件处理程序的详细信息，请参阅[Office 项目中的事件](/visualstudio/vsto/events-in-office-projects.md)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.NamedRange.Validation%2A>属性以验证至少三个字符的字符串输入到<xref:Microsoft.Office.Tools.Excel.NamedRange>。 `SetValidation`必须从启动事件处理程序调用方法。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#85](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#85)]
 [!code-vb[Trin_ExcelNamedRange#85](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#85)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public object Value { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Value" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的值。</summary>
        <value>
          <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Tools.Excel.NamedRange.Value%2A>属性可以用于以下可选参数。 如果指定可选的参数，则必须使用<xref:Microsoft.Office.Tools.Excel.NamedRange.set_Value%2A>和<xref:Microsoft.Office.Tools.Excel.NamedRange.get_Value%2A>Visual Basic 和 C# 中的访问器。  
  
|参数|描述|  
|---------------|-----------------|  
|`RangeValueDataType`|用于指定范围值数据类型的 <xref:Microsoft.Office.Interop.Excel.XlRangeValueDataType> 值之一。 默认值为 <xref:Microsoft.Office.Interop.Excel.XlRangeValueDataType.xlRangeValueDefault>。|  
|`_arg1`|<xref:Microsoft.Office.Tools.Excel.NamedRange> 控件的值。 此参数仅用于<xref:Microsoft.Office.Tools.Excel.NamedRange.set_Value%2A>访问器。|  
  
## <a name="optional-parameters"></a>可选参数  
 可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions.md)。  
  
   
  
## Examples  
 下面的代码示例演示如何设置<xref:Microsoft.Office.Tools.Excel.NamedRange.Value%2A>属性具有和没有可选的参数。  
  
 此版本用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#84](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#84)]
 [!code-vb[Trin_ExcelNamedRange#84](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#84)]  
  
 此版本用于针对应用程序级外接程序。  
  
<!-- TODO: review snippet reference  [!CODE [Trin_ExcelNamedRange_AppLevelAddIn#84](Trin_ExcelNamedRange_AppLevelAddIn#84)]  -->  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value2">
      <MemberSignature Language="C#" Value="public object Value2 { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Value2" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.Value2" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的值。</summary>
        <value>
          <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性的唯一区别和<xref:Microsoft.Office.Tools.Excel.NamedRange.Value%2A>属性是<xref:Microsoft.Office.Tools.Excel.NamedRange.Value2%2A>不是参数化的属性。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.NamedRange.Value2%2A>属性设置的值<xref:Microsoft.Office.Tools.Excel.NamedRange>为从获取值<xref:Microsoft.Office.Tools.Excel.NamedRange.AutoComplete%2A>方法。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#41](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#41)]
 [!code-vb[Trin_ExcelNamedRange#41](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#41)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VerticalAlignment">
      <MemberSignature Language="C#" Value="public object VerticalAlignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object VerticalAlignment" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.VerticalAlignment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的垂直对齐方式。</summary>
        <value>
          <see cref="T:Microsoft.Office.Interop.Excel.XlVAlign" /> 值之一。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 某些<xref:Microsoft.Office.Interop.Excel.XlVAlign>值可能不是提供给你，具体取决于的语言支持 （美国美式英语）。  
  
   
  
## Examples  
 下面的代码示例演示如何设置各种不同的格式并显示特征<xref:Microsoft.Office.Tools.Excel.NamedRange>控件名为`NamedRange1`。 具体而言，此示例设置<xref:Microsoft.Office.Tools.Excel.NamedRange.VerticalAlignment%2A>属性<xref:Microsoft.Office.Interop.Excel.XlVAlign.xlVAlignCenter>以使每个单元格边界内的该范围的内容垂直居中。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#32](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#32)]
 [!code-vb[Trin_ExcelNamedRange#32](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Width">
      <MemberSignature Language="C#" Value="public object Width { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Width" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.Width" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的宽度（以磅为单位）。</summary>
        <value>
          <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的宽度（以磅为单位）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例创建<xref:Microsoft.Office.Tools.Excel.NamedRange>，然后使用<xref:Microsoft.Office.Tools.Excel.NamedRange.Width%2A>和<xref:Microsoft.Office.Tools.Excel.NamedRange.Height%2A>要显示的宽度和高度属性<xref:Microsoft.Office.Tools.Excel.NamedRange>。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#72](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#72)]
 [!code-vb[Trin_ExcelNamedRange#72](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#72)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Worksheet">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Worksheet Worksheet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Worksheet Worksheet" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.Worksheet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Worksheet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Worksheet" />，它表示包含 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的工作表。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.Worksheet" />，表示包含 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的工作表。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例显示包含的工作表的名称<xref:Microsoft.Office.Tools.Excel.NamedRange>。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#83](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#83)]
 [!code-vb[Trin_ExcelNamedRange#83](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#83)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WrapText">
      <MemberSignature Language="C#" Value="public object WrapText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object WrapText" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.WrapText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示 Microsoft Office Excel 是否对 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件中的文本进行换行。</summary>
        <value>
          如果 Excel 对该对象中的文本进行换行，则为 <see langword="true" />；如果 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件包含一些对文本进行换行的单元格，还包含一些不对文本进行换行的单元格，则为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Excel 将更改的行高度<xref:Microsoft.Office.Tools.Excel.NamedRange>控制，如有必要，以适应范围中的文本。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XPath">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XPath XPath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.XPath XPath" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.NamedRange.XPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XPath</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.XPath" />，它表示映射到 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的元素的 Xpath。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.XPath" />，表示映射到 <see cref="T:Microsoft.Office.Tools.Excel.NamedRange" /> 控件的元素的 Xpath。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 XML 功能，除了将文件保存 XML 电子表格格式，将仅在 Microsoft Office Professional Edition 2003 和 Microsoft Office Excel 2003 中可用。  
  
   
  
## Examples  
 下面的代码示例地图<xref:Microsoft.Office.Interop.Excel.XmlMap>到当前工作簿，然后设置<xref:Microsoft.Office.Tools.Excel.NamedRange.XPath%2A>属性<xref:Microsoft.Office.Tools.Excel.NamedRange>到 XmlMap 中定义的 XPath。 此示例假定 Excel 架构定义文件名 Customers.xsd 包含 XPath 定义为"/ ns1:Customer / ns1:LastName"位于 C 目录的根目录。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelNamedRange#82](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/CS/Trin_ExcelNamedRange.cs#82)]
 [!code-vb[Trin_ExcelNamedRange#82](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelNamedRange/VB/Sheet1.vb#82)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>