<Type Name="WorkbookBase" FullName="Microsoft.Office.Tools.Excel.WorkbookBase">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e36f4c2b05b223dd332d67393740cb46cde68ba9" /><Meta Name="ms.sourcegitcommit" Value="66ccc1ab172558cdfd2b9ffb616a60e4c9105be3" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/19/2018" /><Meta Name="ms.locfileid" Value="46456606" /></Metadata><TypeSignature Language="C#" Value="public abstract class WorkbookBase : IDisposable, Microsoft.Office.Tools.Excel.IWorkbookExtension, Microsoft.Office.Tools.ICachedDataPersistanceCallback, System.ComponentModel.IComponent, System.ComponentModel.ISupportInitialize, System.Windows.Forms.IBindableComponent" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit WorkbookBase extends System.Object implements class Microsoft.Office.Tools.EntryPoint, class Microsoft.Office.Tools.Excel.IWorkbookExtension, class Microsoft.Office.Tools.ICachedDataPersistanceCallback, class Microsoft.Office.Tools.IExtension, class System.ComponentModel.IComponent, class System.ComponentModel.ISupportInitialize, class System.IDisposable, class System.Windows.Forms.IBindableComponent" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Tools.Excel.WorkbookBase" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Office.Tools.Excel.IWorkbookExtension</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.Office.Tools.ICachedDataPersistanceCallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.IComponent</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Forms.IBindableComponent</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItem(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="18d1c-101">提供 Microsoft Office Excel 的文档级项目中的 <c>ThisWorkbook</c> 类的基类。</span><span class="sxs-lookup"><span data-stu-id="18d1c-101">Provides the base class for the <c>ThisWorkbook</c> class in document-level projects for Microsoft Office Excel.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-102"><xref:Microsoft.Office.Tools.Excel.WorkbookBase>类是基类`ThisWorkbook`使用 Visual Studio 创建的文档级 Excel 项目中的类。</span><span class="sxs-lookup"><span data-stu-id="18d1c-102">The <xref:Microsoft.Office.Tools.Excel.WorkbookBase> class is the base class for the `ThisWorkbook` class in document-level Excel projects created by using Visual Studio.</span></span> <span data-ttu-id="18d1c-103">使用`ThisWorkbook`类以编程方式访问你的项目中的工作簿。</span><span class="sxs-lookup"><span data-stu-id="18d1c-103">Use the `ThisWorkbook` class to programmatically access the workbook in your project.</span></span> <span data-ttu-id="18d1c-104">有关详细信息，请参阅[Programming Document-level Customizations](/visualstudio/vsto/programming-document-level-customizations)。</span><span class="sxs-lookup"><span data-stu-id="18d1c-104">For more information, see [Programming Document-Level Customizations](/visualstudio/vsto/programming-document-level-customizations).</span></span>  
  
 <span data-ttu-id="18d1c-105"><xref:Microsoft.Office.Tools.Excel.WorkbookBase>类提供了相同的成员<xref:Microsoft.Office.Interop.Excel.Workbook?displayProperty=fullName>对象在 Excel 主互操作程序集，但添加了以下功能：</span><span class="sxs-lookup"><span data-stu-id="18d1c-105">The <xref:Microsoft.Office.Tools.Excel.WorkbookBase> class provides the same members as the <xref:Microsoft.Office.Interop.Excel.Workbook?displayProperty=fullName> object in the Excel primary interop assembly, but it adds the following features:</span></span>  
  
-   <span data-ttu-id="18d1c-106"><xref:Microsoft.Office.Tools.Excel.WorkbookBase.VstoSmartTags%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="18d1c-106"><xref:Microsoft.Office.Tools.Excel.WorkbookBase.VstoSmartTags%2A> property.</span></span> <span data-ttu-id="18d1c-107">使用此属性添加到工作簿的智能标记。</span><span class="sxs-lookup"><span data-stu-id="18d1c-107">Use this property to add smart tags to a workbook.</span></span>  
  
-   <span data-ttu-id="18d1c-108"><xref:Microsoft.Office.Tools.Excel.WorkbookBase.InnerObject%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="18d1c-108"><xref:Microsoft.Office.Tools.Excel.WorkbookBase.InnerObject%2A> property.</span></span> <span data-ttu-id="18d1c-109">使用此属性来获取基础<xref:Microsoft.Office.Interop.Excel.Workbook?displayProperty=fullName>工作簿主机项的对象。</span><span class="sxs-lookup"><span data-stu-id="18d1c-109">Use this property to get the underlying <xref:Microsoft.Office.Interop.Excel.Workbook?displayProperty=fullName> object for a workbook host item.</span></span>  
  
-   <span data-ttu-id="18d1c-110"><xref:Microsoft.Office.Tools.Excel.WorkbookBase.RemoveCustomization%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="18d1c-110"><xref:Microsoft.Office.Tools.Excel.WorkbookBase.RemoveCustomization%2A> method.</span></span> <span data-ttu-id="18d1c-111">使用此方法从文档级自定义中的工作簿中删除 Office 自定义程序集。</span><span class="sxs-lookup"><span data-stu-id="18d1c-111">Use this method to remove the Office customization assembly from the workbook in a document-level customization.</span></span>  
  
-   <span data-ttu-id="18d1c-112"><xref:Microsoft.Office.Tools.Excel.WorkbookBase.CreateRibbonObjects%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="18d1c-112"><xref:Microsoft.Office.Tools.Excel.WorkbookBase.CreateRibbonObjects%2A> method.</span></span> <span data-ttu-id="18d1c-113">重写此方法，如果使用的多个自定义功能区添加到你的项目**功能区 （可视化设计器）** 项模板，并且想要指定功能区显示在运行时。</span><span class="sxs-lookup"><span data-stu-id="18d1c-113">Override this method if you added multiple custom Ribbons to your project by using the **Ribbon (Visual Designer)** item template, and you want to specify which Ribbons to display at run time.</span></span>  
  
-   <span data-ttu-id="18d1c-114"><xref:Microsoft.Office.Tools.Excel.WorkbookBase.GetAutomationObject%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="18d1c-114"><xref:Microsoft.Office.Tools.Excel.WorkbookBase.GetAutomationObject%2A> method.</span></span> <span data-ttu-id="18d1c-115">重写此方法以将向工作簿中的 VBA 代码项目中的类公开。</span><span class="sxs-lookup"><span data-stu-id="18d1c-115">Override this method to expose a class in your project to VBA code in the workbook.</span></span>  
  
## <a name="creating-workbook-host-items"></a><span data-ttu-id="18d1c-116">创建工作簿主机项</span><span class="sxs-lookup"><span data-stu-id="18d1c-116">Creating Workbook Host Items</span></span>  
 <span data-ttu-id="18d1c-117">无法创建<xref:Microsoft.Office.Tools.Excel.WorkbookBase>以编程方式在 Office 项目中的对象。</span><span class="sxs-lookup"><span data-stu-id="18d1c-117">You cannot create <xref:Microsoft.Office.Tools.Excel.WorkbookBase> objects programmatically in Office projects.</span></span>  
  
 <span data-ttu-id="18d1c-118">在文档级项目中，`ThisWorkbook`类 (派生自<xref:Microsoft.Office.Tools.Excel.WorkbookBase>) 来自动实例化[!INCLUDE[vsto_runtime](~/includes/vsto-runtime-md.md)]当最终用户打开工作簿。</span><span class="sxs-lookup"><span data-stu-id="18d1c-118">In document-level projects, the `ThisWorkbook` class (which derives from <xref:Microsoft.Office.Tools.Excel.WorkbookBase>) is instantiated automatically by the [!INCLUDE[vsto_runtime](~/includes/vsto-runtime-md.md)] when the end user opens the workbook.</span></span> <span data-ttu-id="18d1c-119">有关详细信息，请参阅[Programming Document-level Customizations](/visualstudio/vsto/programming-document-level-customizations)。</span><span class="sxs-lookup"><span data-stu-id="18d1c-119">For more information, see [Programming Document-Level Customizations](/visualstudio/vsto/programming-document-level-customizations).</span></span>  
  
 <span data-ttu-id="18d1c-120">在应用程序级项目中，您可以创建工作簿主机项以编程方式使用`GetVstoObject`方法。</span><span class="sxs-lookup"><span data-stu-id="18d1c-120">In application-level projects, you can create workbook host items programmatically by using the `GetVstoObject` method.</span></span> <span data-ttu-id="18d1c-121">有关更多信息，请参见 [在运行时在 VSTO 外接程序中扩展 Word 文档和 Excel 工作簿](/visualstudio/vsto/extending-word-documents-and-excel-workbooks-in-vsto-add-ins-at-run-time)。</span><span class="sxs-lookup"><span data-stu-id="18d1c-121">For more information, see [Extending Word Documents and Excel Workbooks in VSTO Add-ins at Run Time](/visualstudio/vsto/extending-word-documents-and-excel-workbooks-in-vsto-add-ins-at-run-time).</span></span>  
  
## <a name="usage"></a><span data-ttu-id="18d1c-122">用法</span><span class="sxs-lookup"><span data-stu-id="18d1c-122">Usage</span></span>  
 [!INCLUDE[vsto_net4utilities](~/includes/vsto-net4utilities-md.md)]  
  
   
  
## Examples  
 [<span data-ttu-id="18d1c-123">主机项和主机控件概述</span><span class="sxs-lookup"><span data-stu-id="18d1c-123">Host Items and Host Controls Overview</span></span>](/visualstudio/vsto/host-items-and-host-controls-overview)  
  
 [<span data-ttu-id="18d1c-124">工作簿主机项</span><span class="sxs-lookup"><span data-stu-id="18d1c-124">Workbook Host Item</span></span>](/visualstudio/vsto/workbook-host-item)  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WorkbookBase (Microsoft.Office.Tools.Excel.Factory factory, IServiceProvider serviceProvider, string primaryCookie, string identifier);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Microsoft.Office.Tools.Excel.Factory factory, class System.IServiceProvider serviceProvider, string primaryCookie, string identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.#ctor(Microsoft.Office.Tools.Excel.Factory,System.IServiceProvider,System.String,System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="factory" Type="Microsoft.Office.Tools.Excel.Factory" />
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
        <Parameter Name="primaryCookie" Type="System.String" />
        <Parameter Name="identifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="factory">To be added.</param>
        <param name="serviceProvider">To be added.</param>
        <param name="primaryCookie">To be added.</param>
        <param name="identifier">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="_CodeName">
      <MemberSignature Language="C#" Value="public string _CodeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string _CodeName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase._CodeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="_ReadOnlyRecommended">
      <MemberSignature Language="C#" Value="public bool _ReadOnlyRecommended { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool _ReadOnlyRecommended" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase._ReadOnlyRecommended" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AcceptAllChanges">
      <MemberSignature Language="C#" Value="public void AcceptAllChanges (object when, object who, object where);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcceptAllChanges(object when, object who, object where) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.AcceptAllChanges(System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="when" Type="System.Object" />
        <Parameter Name="who" Type="System.Object" />
        <Parameter Name="where" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="when"><span data-ttu-id="18d1c-125"><see cref="T:Microsoft.Office.Interop.Excel.XlHighlightChangesTime" /> 值中的一个，指定要接受的更改是在何时进行的。</span><span class="sxs-lookup"><span data-stu-id="18d1c-125">One of the <see cref="T:Microsoft.Office.Interop.Excel.XlHighlightChangesTime" /> values that specifies when the changes to be accepted were made.</span></span></param>
        <param name="who"><span data-ttu-id="18d1c-126">一个标识进行要接受的更改的人的字符串。</span><span class="sxs-lookup"><span data-stu-id="18d1c-126">A string that identifies who made the changes to be accepted.</span></span> <span data-ttu-id="18d1c-127">可以是“Everyone”、“Everyone but Me”或共享工作簿的用户名之一。</span><span class="sxs-lookup"><span data-stu-id="18d1c-127">Can be "Everyone", "Everyone but Me", or the name of one of the users of the shared workbook.</span></span></param>
        <param name="where"><span data-ttu-id="18d1c-128">指定要接受的更改的位置的 A1 样式范围引用。</span><span class="sxs-lookup"><span data-stu-id="18d1c-128">An A1-style range reference that specifies the location of the changes to be accepted.</span></span></param>
        <summary><span data-ttu-id="18d1c-129">接受共享工作簿中的所有更改。</span><span class="sxs-lookup"><span data-stu-id="18d1c-129">Accepts all changes in the shared workbook.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a><span data-ttu-id="18d1c-130">可选参数</span><span class="sxs-lookup"><span data-stu-id="18d1c-130">Optional Parameters</span></span>  
 <span data-ttu-id="18d1c-131">可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。</span><span class="sxs-lookup"><span data-stu-id="18d1c-131">For information on optional parameters, see [Optional Parameters in Office Solutions](/visualstudio/vsto/optional-parameters-in-office-solutions).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AcceptLabelsInFormulas">
      <MemberSignature Language="C#" Value="public bool AcceptLabelsInFormulas { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AcceptLabelsInFormulas" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.AcceptLabelsInFormulas" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccuracyVersion">
      <MemberSignature Language="C#" Value="public int AccuracyVersion { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AccuracyVersion" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.AccuracyVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-132">指定特定工作表函数是否使用最新精度算法来计算其结果。</span><span class="sxs-lookup"><span data-stu-id="18d1c-132">Specifies whether certain worksheet functions use the latest accuracy algorithms to calculate their results.</span></span></summary>
        <value><span data-ttu-id="18d1c-133">一个指定特定工作表函数是否使用最新精度算法来计算其结果的值。</span><span class="sxs-lookup"><span data-stu-id="18d1c-133">A value that specifies whether certain worksheet functions use the latest accuracy algorithms to calculate their results.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-134">默认情况下的某些工作表函数，从 Excel 2007 和 Excel 的早期版本使用新的算法，可提高其准确性。</span><span class="sxs-lookup"><span data-stu-id="18d1c-134">By default, some of the worksheet functions from Excel 2007 and earlier versions of Excel use new algorithms that increase their accuracy.</span></span> <span data-ttu-id="18d1c-135">但是，在某些情况下，新算法会降低性能的相对于其性能在 Excel 2007 中的这些函数和 Excel 的早期版本。</span><span class="sxs-lookup"><span data-stu-id="18d1c-135">However, in some cases, the new algorithms decrease the performance of these functions relative to their performance in Excel 2007 and earlier versions of Excel.</span></span> <span data-ttu-id="18d1c-136">若要指定这些工作表函数使用较旧的算法以提高其性能，请设置<xref:Microsoft.Office.Tools.Excel.WorkbookBase.AccuracyVersion%2A>属性设置为 1。</span><span class="sxs-lookup"><span data-stu-id="18d1c-136">To specify that these worksheet functions use the older algorithms to increase their performance, set the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.AccuracyVersion%2A> property to 1.</span></span>  
  
 <span data-ttu-id="18d1c-137">下表描述的可能设置<xref:Microsoft.Office.Tools.Excel.WorkbookBase.AccuracyVersion%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="18d1c-137">The following table describes the possible settings for the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.AccuracyVersion%2A> property.</span></span>  
  
|<span data-ttu-id="18d1c-138">设置</span><span class="sxs-lookup"><span data-stu-id="18d1c-138">Setting</span></span>|<span data-ttu-id="18d1c-139">描述</span><span class="sxs-lookup"><span data-stu-id="18d1c-139">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="18d1c-140">0</span><span class="sxs-lookup"><span data-stu-id="18d1c-140">0</span></span>|<span data-ttu-id="18d1c-141">使用最新、 最准确的算法 （默认值）</span><span class="sxs-lookup"><span data-stu-id="18d1c-141">Use the latest, most accurate algorithms (default)</span></span>|  
|<span data-ttu-id="18d1c-142">1</span><span class="sxs-lookup"><span data-stu-id="18d1c-142">1</span></span>|<span data-ttu-id="18d1c-143">使用 Excel 2007 或更早版本算法</span><span class="sxs-lookup"><span data-stu-id="18d1c-143">Use Excel 2007 or earlier version algorithms</span></span>|  
|<span data-ttu-id="18d1c-144">2</span><span class="sxs-lookup"><span data-stu-id="18d1c-144">2</span></span>|<span data-ttu-id="18d1c-145">使用 Excel 2010 的算法</span><span class="sxs-lookup"><span data-stu-id="18d1c-145">Use Excel 2010 algorithms</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="18d1c-146">设置<xref:Microsoft.Office.Tools.Excel.WorkbookBase.AccuracyVersion%2A>属性设置为 0、 1 或 2 以外的值将导致未定义的行为。</span><span class="sxs-lookup"><span data-stu-id="18d1c-146">Setting the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.AccuracyVersion%2A> property to a value other than 0, 1, or 2 will result in undefined behavior.</span></span>  
  
 <span data-ttu-id="18d1c-147">下表总结了设置会影响哪些函数<xref:Microsoft.Office.Tools.Excel.WorkbookBase.AccuracyVersion%2A>属性设置为 1。</span><span class="sxs-lookup"><span data-stu-id="18d1c-147">The following table summarizes which functions are affected by setting the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.AccuracyVersion%2A> property to 1.</span></span> <span data-ttu-id="18d1c-148">"函数不会受到影响"列中列出的函数将始终使用最新精度算法或 Excel 2010 中未更改。</span><span class="sxs-lookup"><span data-stu-id="18d1c-148">The functions that are listed in the "Functions not affected" column will always use the latest accuracy algorithms or were not changed in Excel 2010.</span></span> <span data-ttu-id="18d1c-149">对于在其名称中包含句点 （.） 的函数名称，若要确定相应的函数名称在 VBA 中作为方法实现的<xref:Microsoft.Office.Interop.Excel.WorksheetFunction>对象，该期间将下划线字符 (_)。</span><span class="sxs-lookup"><span data-stu-id="18d1c-149">For function names that include a period (.) in their names, to determine the name of the corresponding function implemented in VBA as a method of the <xref:Microsoft.Office.Interop.Excel.WorksheetFunction> object, substitute the underscore character ( _ ) for the period.</span></span> <span data-ttu-id="18d1c-150">例如，为 beta 版本相对应的 VBA 方法。DIST 函数是<xref:Microsoft.Office.Interop.Excel.WorksheetFunction.BetaDist%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="18d1c-150">For example, the VBA method that corresponds to the BETA.DIST function is the <xref:Microsoft.Office.Interop.Excel.WorksheetFunction.BetaDist%2A> method.</span></span>  
  
|<span data-ttu-id="18d1c-151">受影响的函数</span><span class="sxs-lookup"><span data-stu-id="18d1c-151">Functions affected</span></span>|<span data-ttu-id="18d1c-152">不受影响的函数</span><span class="sxs-lookup"><span data-stu-id="18d1c-152">Functions not affected</span></span>|  
|------------------------|----------------------------|  
|<span data-ttu-id="18d1c-153">忽略</span><span class="sxs-lookup"><span data-stu-id="18d1c-153">BETADIST</span></span>|<span data-ttu-id="18d1c-154">聚合</span><span class="sxs-lookup"><span data-stu-id="18d1c-154">AGGREGATE</span></span>|  
|<span data-ttu-id="18d1c-155">BETAINV</span><span class="sxs-lookup"><span data-stu-id="18d1c-155">BETAINV</span></span>|<span data-ttu-id="18d1c-156">试用版。DIST</span><span class="sxs-lookup"><span data-stu-id="18d1c-156">BETA.DIST</span></span>|  
|<span data-ttu-id="18d1c-157">BINOMDIST</span><span class="sxs-lookup"><span data-stu-id="18d1c-157">BINOMDIST</span></span>|<span data-ttu-id="18d1c-158">试用版。INV</span><span class="sxs-lookup"><span data-stu-id="18d1c-158">BETA.INV</span></span>|  
|<span data-ttu-id="18d1c-159">则 CHIDIST 将</span><span class="sxs-lookup"><span data-stu-id="18d1c-159">CHIDIST</span></span>|<span data-ttu-id="18d1c-160">BINOM。DIST</span><span class="sxs-lookup"><span data-stu-id="18d1c-160">BINOM.DIST</span></span>|  
|<span data-ttu-id="18d1c-161">CHIINV</span><span class="sxs-lookup"><span data-stu-id="18d1c-161">CHIINV</span></span>|<span data-ttu-id="18d1c-162">BINOM。INV</span><span class="sxs-lookup"><span data-stu-id="18d1c-162">BINOM.INV</span></span>|  
|<span data-ttu-id="18d1c-163">CHITEST</span><span class="sxs-lookup"><span data-stu-id="18d1c-163">CHITEST</span></span>|<span data-ttu-id="18d1c-164">上限</span><span class="sxs-lookup"><span data-stu-id="18d1c-164">CEILING</span></span>|  
|<span data-ttu-id="18d1c-165">置信度</span><span class="sxs-lookup"><span data-stu-id="18d1c-165">CONFIDENCE</span></span>|<span data-ttu-id="18d1c-166">上限。精确</span><span class="sxs-lookup"><span data-stu-id="18d1c-166">CEILING.PRECISE</span></span>|  
|<span data-ttu-id="18d1c-167">CRITBINOM</span><span class="sxs-lookup"><span data-stu-id="18d1c-167">CRITBINOM</span></span>|<span data-ttu-id="18d1c-168">CHISQ。DIST</span><span class="sxs-lookup"><span data-stu-id="18d1c-168">CHISQ.DIST</span></span>|  
|<span data-ttu-id="18d1c-169">CUMIPMT</span><span class="sxs-lookup"><span data-stu-id="18d1c-169">CUMIPMT</span></span>|<span data-ttu-id="18d1c-170">CHISQ。程序分发RT</span><span class="sxs-lookup"><span data-stu-id="18d1c-170">CHISQ.DIST.RT</span></span>|  
|<span data-ttu-id="18d1c-171">CUMPRINC</span><span class="sxs-lookup"><span data-stu-id="18d1c-171">CUMPRINC</span></span>|<span data-ttu-id="18d1c-172">CHISQ。INV</span><span class="sxs-lookup"><span data-stu-id="18d1c-172">CHISQ.INV</span></span>|  
|<span data-ttu-id="18d1c-173">ERF</span><span class="sxs-lookup"><span data-stu-id="18d1c-173">ERF</span></span>|<span data-ttu-id="18d1c-174">CHISQ.INV.RT</span><span class="sxs-lookup"><span data-stu-id="18d1c-174">CHISQ.INV.RT</span></span>|  
|<span data-ttu-id="18d1c-175">ERFC</span><span class="sxs-lookup"><span data-stu-id="18d1c-175">ERFC</span></span>|<span data-ttu-id="18d1c-176">CHISQ.TEST</span><span class="sxs-lookup"><span data-stu-id="18d1c-176">CHISQ.TEST</span></span>|  
|<span data-ttu-id="18d1c-177">EXPONDIST</span><span class="sxs-lookup"><span data-stu-id="18d1c-177">EXPONDIST</span></span>|<span data-ttu-id="18d1c-178">置信度。NORM</span><span class="sxs-lookup"><span data-stu-id="18d1c-178">CONFIDENCE.NORM</span></span>|  
|<span data-ttu-id="18d1c-179">FDIST</span><span class="sxs-lookup"><span data-stu-id="18d1c-179">FDIST</span></span>|<span data-ttu-id="18d1c-180">置信度。T</span><span class="sxs-lookup"><span data-stu-id="18d1c-180">CONFIDENCE.T</span></span>|  
|<span data-ttu-id="18d1c-181">FINV</span><span class="sxs-lookup"><span data-stu-id="18d1c-181">FINV</span></span>|<span data-ttu-id="18d1c-182">COVAR</span><span class="sxs-lookup"><span data-stu-id="18d1c-182">COVAR</span></span>|  
|<span data-ttu-id="18d1c-183">FTEST</span><span class="sxs-lookup"><span data-stu-id="18d1c-183">FTEST</span></span>|<span data-ttu-id="18d1c-184">协变。P</span><span class="sxs-lookup"><span data-stu-id="18d1c-184">COVARIANCE.P</span></span>|  
|<span data-ttu-id="18d1c-185">GAMMADIST</span><span class="sxs-lookup"><span data-stu-id="18d1c-185">GAMMADIST</span></span>|<span data-ttu-id="18d1c-186">协变。S</span><span class="sxs-lookup"><span data-stu-id="18d1c-186">COVARIANCE.S</span></span>|  
|<span data-ttu-id="18d1c-187">GAMMALN</span><span class="sxs-lookup"><span data-stu-id="18d1c-187">GAMMALN</span></span>|<span data-ttu-id="18d1c-188">ERF。精确</span><span class="sxs-lookup"><span data-stu-id="18d1c-188">ERF.PRECISE</span></span>|  
|<span data-ttu-id="18d1c-189">GAMMINV</span><span class="sxs-lookup"><span data-stu-id="18d1c-189">GAMMINV</span></span>|<span data-ttu-id="18d1c-190">ERFC。精确</span><span class="sxs-lookup"><span data-stu-id="18d1c-190">ERFC.PRECISE</span></span>|  
|<span data-ttu-id="18d1c-191">HYPGEOMDIST</span><span class="sxs-lookup"><span data-stu-id="18d1c-191">HYPGEOMDIST</span></span>|<span data-ttu-id="18d1c-192">EXPON。DIST</span><span class="sxs-lookup"><span data-stu-id="18d1c-192">EXPON.DIST</span></span>|  
|<span data-ttu-id="18d1c-193">IPMT</span><span class="sxs-lookup"><span data-stu-id="18d1c-193">IPMT</span></span>|<span data-ttu-id="18d1c-194">F.DIST</span><span class="sxs-lookup"><span data-stu-id="18d1c-194">F.DIST</span></span>|  
|<span data-ttu-id="18d1c-195">IRR</span><span class="sxs-lookup"><span data-stu-id="18d1c-195">IRR</span></span>|<span data-ttu-id="18d1c-196">F.DIST.RT</span><span class="sxs-lookup"><span data-stu-id="18d1c-196">F.DIST.RT</span></span>|  
|<span data-ttu-id="18d1c-197">LOGINV</span><span class="sxs-lookup"><span data-stu-id="18d1c-197">LOGINV</span></span>|<span data-ttu-id="18d1c-198">F.INV</span><span class="sxs-lookup"><span data-stu-id="18d1c-198">F.INV</span></span>|  
|<span data-ttu-id="18d1c-199">LOGNORMDIST</span><span class="sxs-lookup"><span data-stu-id="18d1c-199">LOGNORMDIST</span></span>|<span data-ttu-id="18d1c-200">F.INV。RT</span><span class="sxs-lookup"><span data-stu-id="18d1c-200">F.INV.RT</span></span>|  
|<span data-ttu-id="18d1c-201">NEGBINOMDIST</span><span class="sxs-lookup"><span data-stu-id="18d1c-201">NEGBINOMDIST</span></span>|<span data-ttu-id="18d1c-202">F.TEST</span><span class="sxs-lookup"><span data-stu-id="18d1c-202">F.TEST</span></span>|  
|<span data-ttu-id="18d1c-203">正态分布</span><span class="sxs-lookup"><span data-stu-id="18d1c-203">NORMDIST</span></span>|<span data-ttu-id="18d1c-204">FLOOR</span><span class="sxs-lookup"><span data-stu-id="18d1c-204">FLOOR</span></span>|  
|<span data-ttu-id="18d1c-205">NORMINV</span><span class="sxs-lookup"><span data-stu-id="18d1c-205">NORMINV</span></span>|<span data-ttu-id="18d1c-206">基底。精确</span><span class="sxs-lookup"><span data-stu-id="18d1c-206">FLOOR.PRECISE</span></span>|  
|<span data-ttu-id="18d1c-207">NORMSDIST</span><span class="sxs-lookup"><span data-stu-id="18d1c-207">NORMSDIST</span></span>|<span data-ttu-id="18d1c-208">GAMMA。DIST</span><span class="sxs-lookup"><span data-stu-id="18d1c-208">GAMMA.DIST</span></span>|  
|<span data-ttu-id="18d1c-209">NORMSINV</span><span class="sxs-lookup"><span data-stu-id="18d1c-209">NORMSINV</span></span>|<span data-ttu-id="18d1c-210">GAMMA。INV</span><span class="sxs-lookup"><span data-stu-id="18d1c-210">GAMMA.INV</span></span>|  
|<span data-ttu-id="18d1c-211">PMT</span><span class="sxs-lookup"><span data-stu-id="18d1c-211">PMT</span></span>|<span data-ttu-id="18d1c-212">GAMMALN。精确</span><span class="sxs-lookup"><span data-stu-id="18d1c-212">GAMMALN.PRECISE</span></span>|  
|<span data-ttu-id="18d1c-213">泊松</span><span class="sxs-lookup"><span data-stu-id="18d1c-213">POISSON</span></span>|<span data-ttu-id="18d1c-214">HYPGEOM。DIST</span><span class="sxs-lookup"><span data-stu-id="18d1c-214">HYPGEOM.DIST</span></span>|  
|<span data-ttu-id="18d1c-215">PPMT</span><span class="sxs-lookup"><span data-stu-id="18d1c-215">PPMT</span></span>|<span data-ttu-id="18d1c-216">ISO。上限</span><span class="sxs-lookup"><span data-stu-id="18d1c-216">ISO.CEILING</span></span>|  
|<span data-ttu-id="18d1c-217">STDEV</span><span class="sxs-lookup"><span data-stu-id="18d1c-217">STDEV</span></span>|<span data-ttu-id="18d1c-218">LOGNORM。DIST</span><span class="sxs-lookup"><span data-stu-id="18d1c-218">LOGNORM.DIST</span></span>|  
|<span data-ttu-id="18d1c-219">STDEVP</span><span class="sxs-lookup"><span data-stu-id="18d1c-219">STDEVP</span></span>|<span data-ttu-id="18d1c-220">LOGNORM。INV</span><span class="sxs-lookup"><span data-stu-id="18d1c-220">LOGNORM.INV</span></span>|  
|<span data-ttu-id="18d1c-221">TDIST</span><span class="sxs-lookup"><span data-stu-id="18d1c-221">TDIST</span></span>|<span data-ttu-id="18d1c-222">MOD</span><span class="sxs-lookup"><span data-stu-id="18d1c-222">MOD</span></span>|  
|<span data-ttu-id="18d1c-223">TINV</span><span class="sxs-lookup"><span data-stu-id="18d1c-223">TINV</span></span>|<span data-ttu-id="18d1c-224">模式</span><span class="sxs-lookup"><span data-stu-id="18d1c-224">MODE</span></span>|  
|<span data-ttu-id="18d1c-225">TTEST</span><span class="sxs-lookup"><span data-stu-id="18d1c-225">TTEST</span></span>|<span data-ttu-id="18d1c-226">模式。MULT</span><span class="sxs-lookup"><span data-stu-id="18d1c-226">MODE.MULT</span></span>|  
|<span data-ttu-id="18d1c-227">VAR</span><span class="sxs-lookup"><span data-stu-id="18d1c-227">VAR</span></span>|<span data-ttu-id="18d1c-228">模式。SNGL</span><span class="sxs-lookup"><span data-stu-id="18d1c-228">MODE.SNGL</span></span>|  
|<span data-ttu-id="18d1c-229">VARA</span><span class="sxs-lookup"><span data-stu-id="18d1c-229">VARA</span></span>|<span data-ttu-id="18d1c-230">NEGBINOM。DIST</span><span class="sxs-lookup"><span data-stu-id="18d1c-230">NEGBINOM.DIST</span></span>|  
|<span data-ttu-id="18d1c-231">VARP</span><span class="sxs-lookup"><span data-stu-id="18d1c-231">VARP</span></span>|<span data-ttu-id="18d1c-232">NETWORKDAYS。INTL</span><span class="sxs-lookup"><span data-stu-id="18d1c-232">NETWORKDAYS.INTL</span></span>|  
|<span data-ttu-id="18d1c-233">VARPA</span><span class="sxs-lookup"><span data-stu-id="18d1c-233">VARPA</span></span>|<span data-ttu-id="18d1c-234">NORM。DIST</span><span class="sxs-lookup"><span data-stu-id="18d1c-234">NORM.DIST</span></span>|  
|<span data-ttu-id="18d1c-235">韦伯</span><span class="sxs-lookup"><span data-stu-id="18d1c-235">WEIBULL</span></span>|<span data-ttu-id="18d1c-236">NORM。INV</span><span class="sxs-lookup"><span data-stu-id="18d1c-236">NORM.INV</span></span>|  
|<span data-ttu-id="18d1c-237">XIRR</span><span class="sxs-lookup"><span data-stu-id="18d1c-237">XIRR</span></span>|<span data-ttu-id="18d1c-238">NORM。S.DIST</span><span class="sxs-lookup"><span data-stu-id="18d1c-238">NORM.S.DIST</span></span>|  
|<span data-ttu-id="18d1c-239">ZTEST</span><span class="sxs-lookup"><span data-stu-id="18d1c-239">ZTEST</span></span>|<span data-ttu-id="18d1c-240">NORM。S.INV</span><span class="sxs-lookup"><span data-stu-id="18d1c-240">NORM.S.INV</span></span>|  
||<span data-ttu-id="18d1c-241">百分位数</span><span class="sxs-lookup"><span data-stu-id="18d1c-241">PERCENTILE</span></span>|  
||<span data-ttu-id="18d1c-242">百分位数。独占</span><span class="sxs-lookup"><span data-stu-id="18d1c-242">PERCENTILE.EXC</span></span>|  
||<span data-ttu-id="18d1c-243">百分位数。INC</span><span class="sxs-lookup"><span data-stu-id="18d1c-243">PERCENTILE.INC</span></span>|  
||<span data-ttu-id="18d1c-244">位</span><span class="sxs-lookup"><span data-stu-id="18d1c-244">PERCENTRANK</span></span>|  
||<span data-ttu-id="18d1c-245">位。独占</span><span class="sxs-lookup"><span data-stu-id="18d1c-245">PERCENTRANK.EXC</span></span>|  
||<span data-ttu-id="18d1c-246">位。INC</span><span class="sxs-lookup"><span data-stu-id="18d1c-246">PERCENTRANK.INC</span></span>|  
||<span data-ttu-id="18d1c-247">泊松。DIST</span><span class="sxs-lookup"><span data-stu-id="18d1c-247">POISSON.DIST</span></span>|  
||<span data-ttu-id="18d1c-248">四分位数</span><span class="sxs-lookup"><span data-stu-id="18d1c-248">QUARTILE</span></span>|  
||<span data-ttu-id="18d1c-249">四分位数。独占</span><span class="sxs-lookup"><span data-stu-id="18d1c-249">QUARTILE.EXC</span></span>|  
||<span data-ttu-id="18d1c-250">四分位数。INC</span><span class="sxs-lookup"><span data-stu-id="18d1c-250">QUARTILE.INC</span></span>|  
||<span data-ttu-id="18d1c-251">排名</span><span class="sxs-lookup"><span data-stu-id="18d1c-251">RANK</span></span>|  
||<span data-ttu-id="18d1c-252">等级。AVG</span><span class="sxs-lookup"><span data-stu-id="18d1c-252">RANK.AVG</span></span>|  
||<span data-ttu-id="18d1c-253">等级。EQ</span><span class="sxs-lookup"><span data-stu-id="18d1c-253">RANK.EQ</span></span>|  
||<span data-ttu-id="18d1c-254">STDEV。P</span><span class="sxs-lookup"><span data-stu-id="18d1c-254">STDEV.P</span></span>|  
||<span data-ttu-id="18d1c-255">STDEV。S</span><span class="sxs-lookup"><span data-stu-id="18d1c-255">STDEV.S</span></span>|  
||<span data-ttu-id="18d1c-256">T.DIST</span><span class="sxs-lookup"><span data-stu-id="18d1c-256">T.DIST</span></span>|  
||<span data-ttu-id="18d1c-257">T.DIST.2T</span><span class="sxs-lookup"><span data-stu-id="18d1c-257">T.DIST.2T</span></span>|  
||<span data-ttu-id="18d1c-258">T.DIST.RT</span><span class="sxs-lookup"><span data-stu-id="18d1c-258">T.DIST.RT</span></span>|  
||<span data-ttu-id="18d1c-259">T.DIST.RT</span><span class="sxs-lookup"><span data-stu-id="18d1c-259">T.DIST.RT</span></span>|  
||<span data-ttu-id="18d1c-260">T.INV</span><span class="sxs-lookup"><span data-stu-id="18d1c-260">T.INV</span></span>|  
||<span data-ttu-id="18d1c-261">T.INV.2T</span><span class="sxs-lookup"><span data-stu-id="18d1c-261">T.INV.2T</span></span>|  
||<span data-ttu-id="18d1c-262">T.INV。RT</span><span class="sxs-lookup"><span data-stu-id="18d1c-262">T.INV.RT</span></span>|  
||<span data-ttu-id="18d1c-263">T.TEST</span><span class="sxs-lookup"><span data-stu-id="18d1c-263">T.TEST</span></span>|  
||<span data-ttu-id="18d1c-264">VAR。P</span><span class="sxs-lookup"><span data-stu-id="18d1c-264">VAR.P</span></span>|  
||<span data-ttu-id="18d1c-265">VAR。S</span><span class="sxs-lookup"><span data-stu-id="18d1c-265">VAR.S</span></span>|  
||<span data-ttu-id="18d1c-266">工作日</span><span class="sxs-lookup"><span data-stu-id="18d1c-266">WEEKDAY</span></span>|  
||<span data-ttu-id="18d1c-267">WEEKNUM</span><span class="sxs-lookup"><span data-stu-id="18d1c-267">WEEKNUM</span></span>|  
||<span data-ttu-id="18d1c-268">韦伯。DIST</span><span class="sxs-lookup"><span data-stu-id="18d1c-268">WEIBULL.DIST</span></span>|  
||<span data-ttu-id="18d1c-269">WORKDAY。INTL</span><span class="sxs-lookup"><span data-stu-id="18d1c-269">WORKDAY.INTL</span></span>|  
||<span data-ttu-id="18d1c-270">Z.TEST</span><span class="sxs-lookup"><span data-stu-id="18d1c-270">Z.TEST</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="18d1c-271">此属性将出现在 IntelliSense 中 Excel 2007 项目中面向[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="18d1c-271">This property appears in IntelliSense in Excel 2007 projects that target the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)].</span></span> <span data-ttu-id="18d1c-272">但是，此属性不能使用 Excel 2007 项目中。</span><span class="sxs-lookup"><span data-stu-id="18d1c-272">However, this property cannot be used in Excel 2007 projects.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MissingMemberException"><span data-ttu-id="18d1c-273">此属性用于 Excel 2007 项目。</span><span class="sxs-lookup"><span data-stu-id="18d1c-273">This property is used in an Excel 2007 project.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Activate">
      <MemberSignature Language="C#" Value="public void Activate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Activate() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.Activate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="18d1c-274">激活工作簿的第一个关联窗口。</span><span class="sxs-lookup"><span data-stu-id="18d1c-274">Activates the first window associated with the workbook.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-275">这不会运行可能附加到工作簿任何 Auto_Activate 或 Auto_Deactivate 宏 (使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.RunAutoMacros%2A>方法来运行这些宏)。</span><span class="sxs-lookup"><span data-stu-id="18d1c-275">This does not run any Auto_Activate or Auto_Deactivate macros that might be attached to the workbook (use the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.RunAutoMacros%2A> method to run those macros).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActivateEvent">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_ActivateEventHandler ActivateEvent;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_ActivateEventHandler ActivateEvent" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.ActivateEvent" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_ActivateEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-276">在激活工作簿时发生。</span><span class="sxs-lookup"><span data-stu-id="18d1c-276">Occurs when the workbook is activated.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-277">当显示同一工作簿的两个窗口之间切换<xref:Microsoft.Office.Tools.Excel.WorkbookBase.WindowActivate>发生事件时，但<xref:Microsoft.Office.Tools.Excel.WorkbookBase.ActivateEvent>工作簿的事件不会发生。</span><span class="sxs-lookup"><span data-stu-id="18d1c-277">When you switch between two windows showing the same workbook, the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.WindowActivate> event occurs, but the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.ActivateEvent> event for the workbook does not occur.</span></span>  
  
 <span data-ttu-id="18d1c-278">创建一个新的窗口时，不会不会发生此事件。</span><span class="sxs-lookup"><span data-stu-id="18d1c-278">This event does not occur when you create a new window.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18d1c-279">下面的代码示例演示了一个处理程序<xref:Microsoft.Office.Tools.Excel.WorkbookBase.ActivateEvent>事件。</span><span class="sxs-lookup"><span data-stu-id="18d1c-279">The following code example demonstrates a handler for the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.ActivateEvent> event.</span></span> <span data-ttu-id="18d1c-280">事件处理程序会显示工作表`Sheet1`时激活该工作簿。</span><span class="sxs-lookup"><span data-stu-id="18d1c-280">The event handler displays worksheet `Sheet1` when the workbook is activated.</span></span>  
  
 <span data-ttu-id="18d1c-281">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-281">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#200](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#200)]
 [!code-vb[Trin_ExcelWorkBook#200](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#200)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActiveChart">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Chart ActiveChart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Chart ActiveChart" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.ActiveChart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Chart</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-282">获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Chart" /> 对象，该对象表示活动图表（嵌入图表或图表工作表）。</span><span class="sxs-lookup"><span data-stu-id="18d1c-282">Gets a <see cref="T:Microsoft.Office.Interop.Excel.Chart" /> object that represents the active chart (either an embedded chart or a chart sheet).</span></span> <span data-ttu-id="18d1c-283">嵌入图表在选择或激活后被视为活动的。</span><span class="sxs-lookup"><span data-stu-id="18d1c-283">An embedded chart is considered active when it is either selected or activated.</span></span> <span data-ttu-id="18d1c-284">如果无活动图表，则此属性返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-284">When no chart is active, this property returns <see langword="null" />.</span></span></summary>
        <value><span data-ttu-id="18d1c-285"><see cref="T:Microsoft.Office.Interop.Excel.Chart" /> 对象，表示活动图表；如果无活动图表，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-285">A <see cref="T:Microsoft.Office.Interop.Excel.Chart" /> object that represents the active chart; <see langword="null" /> if no chart is active.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-286">下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.ActiveChart%2A>属性来获取当前工作簿活动图表，并将图表的标题不可见。</span><span class="sxs-lookup"><span data-stu-id="18d1c-286">The following code example uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.ActiveChart%2A> property to get the active chart for the current workbook and then makes the title of the chart invisible.</span></span>  
  
 <span data-ttu-id="18d1c-287">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-287">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#1](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#1)]
 [!code-vb[Trin_ExcelWorkBook#1](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActiveSheet">
      <MemberSignature Language="C#" Value="public object ActiveSheet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ActiveSheet" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.ActiveSheet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-288">获取活动工作表（最上层的工作表）。</span><span class="sxs-lookup"><span data-stu-id="18d1c-288">Gets the active sheet (the sheet on top).</span></span></summary>
        <value><span data-ttu-id="18d1c-289">活动工作表（最上层的工作表）；如果无活动工作表，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-289">The active sheet (the sheet on top); <see langword="null" /> if no sheet is active.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-290">如果工作簿将显示在多个窗口中，此属性可能在不同的 windows 中不同。</span><span class="sxs-lookup"><span data-stu-id="18d1c-290">If the workbook appears in more than one window, this property may be different in different windows.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18d1c-291">下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.ActiveSheet%2A>属性来显示活动工作表的名称。</span><span class="sxs-lookup"><span data-stu-id="18d1c-291">The following code example uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.ActiveSheet%2A> property to display the name of the active worksheet.</span></span>  
  
 <span data-ttu-id="18d1c-292">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-292">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#2](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#2)]
 [!code-vb[Trin_ExcelWorkBook#2](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActiveSlicer">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Slicer ActiveSlicer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Slicer ActiveSlicer" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.ActiveSlicer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Slicer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-293">获取一个对象，该对象表示活动工作簿或指定工作簿中的活动切片器。</span><span class="sxs-lookup"><span data-stu-id="18d1c-293">Gets an object that represents the active slicer in the active workbook or in the specified workbook.</span></span></summary>
        <value><span data-ttu-id="18d1c-294">一个 <see cref="T:Microsoft.Office.Interop.Excel.Slicer" />，表示活动工作簿或指定工作簿中的活动切片器。</span><span class="sxs-lookup"><span data-stu-id="18d1c-294">A <see cref="T:Microsoft.Office.Interop.Excel.Slicer" /> that represents the active slicer in the active workbook or in the specified workbook.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-295">如果不指定工作簿对象，此属性将返回在活动工作簿中的活动切片器。</span><span class="sxs-lookup"><span data-stu-id="18d1c-295">If you do not specify a Workbook object, this property returns the active slicer in the active workbook.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="18d1c-296">此属性将出现在 IntelliSense 中 Excel 2007 项目中面向[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="18d1c-296">This property appears in IntelliSense in Excel 2007 projects that target the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)].</span></span> <span data-ttu-id="18d1c-297">但是，此属性不能使用 Excel 2007 项目中。</span><span class="sxs-lookup"><span data-stu-id="18d1c-297">However, this property cannot be used in Excel 2007 projects.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MissingMemberException"><span data-ttu-id="18d1c-298">此属性用于 Excel 2007 项目。</span><span class="sxs-lookup"><span data-stu-id="18d1c-298">This property is used in an Excel 2007 project.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AddinInstall">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_AddinInstallEventHandler AddinInstall;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_AddinInstallEventHandler AddinInstall" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.AddinInstall" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_AddinInstallEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-299">在工作簿作为外接程序安装时发生。</span><span class="sxs-lookup"><span data-stu-id="18d1c-299">Occurs when the workbook is installed as an add-in.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-300">下面的代码示例演示了一个处理程序<xref:Microsoft.Office.Tools.Excel.WorkbookBase.AddinInstall>事件。</span><span class="sxs-lookup"><span data-stu-id="18d1c-300">The following code example demonstrates a handler for the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.AddinInstall> event.</span></span> <span data-ttu-id="18d1c-301">该工作簿作为外接程序安装时，事件处理程序最大化 Microsoft Office Excel。</span><span class="sxs-lookup"><span data-stu-id="18d1c-301">The event handler maximizes Microsoft Office Excel when the workbook is installed as an add-in.</span></span>  
  
 <span data-ttu-id="18d1c-302">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-302">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#201](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#201)]
 [!code-vb[Trin_ExcelWorkBook#201](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#201)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddinUninstall">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_AddinUninstallEventHandler AddinUninstall;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_AddinUninstallEventHandler AddinUninstall" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.AddinUninstall" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_AddinUninstallEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-303">在工作簿作为外接程序卸载时发生。</span><span class="sxs-lookup"><span data-stu-id="18d1c-303">Occurs when the workbook is uninstalled as an add-in.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-304">外接程序不会自动关闭时将其卸载。</span><span class="sxs-lookup"><span data-stu-id="18d1c-304">The add-in does not automatically close when it is uninstalled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18d1c-305">下面的代码示例演示了一个处理程序<xref:Microsoft.Office.Tools.Excel.WorkbookBase.AddinUninstall>事件。</span><span class="sxs-lookup"><span data-stu-id="18d1c-305">The following code example demonstrates a handler for the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.AddinUninstall> event.</span></span> <span data-ttu-id="18d1c-306">事件处理程序时工作簿作为外接程序卸载时，最小化 Microsoft Office Excel。</span><span class="sxs-lookup"><span data-stu-id="18d1c-306">The event handler minimizes Microsoft Office Excel when the workbook is uninstalled as an add-in.</span></span>  
  
 <span data-ttu-id="18d1c-307">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-307">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#202](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#202)]
 [!code-vb[Trin_ExcelWorkBook#202](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#202)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddToFavorites">
      <MemberSignature Language="C#" Value="public void AddToFavorites ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddToFavorites() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.AddToFavorites" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="18d1c-308">将工作簿的快捷方式添加到收藏夹文件夹。</span><span class="sxs-lookup"><span data-stu-id="18d1c-308">Adds a shortcut to the workbook to the Favorites folder.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AfterSave">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_AfterSaveEventHandler AfterSave;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_AfterSaveEventHandler AfterSave" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.AfterSave" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_AfterSaveEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-309">在保存工作簿后发生。</span><span class="sxs-lookup"><span data-stu-id="18d1c-309">Occurs after the workbook is saved.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-310">此事件将显示在 IntelliSense 中 Excel 2007 项目中面向[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="18d1c-310">This event appears in IntelliSense in Excel 2007 projects that target the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)].</span></span> <span data-ttu-id="18d1c-311">但是，不能在 Excel 2007 项目中使用此事件。</span><span class="sxs-lookup"><span data-stu-id="18d1c-311">However, this event cannot be used in Excel 2007 projects.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MissingMemberException"><span data-ttu-id="18d1c-312">此事件在 Excel 2007 项目中使用。</span><span class="sxs-lookup"><span data-stu-id="18d1c-312">This event is used in an Excel 2007 project.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AfterXmlExport">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_AfterXmlExportEventHandler AfterXmlExport;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_AfterXmlExportEventHandler AfterXmlExport" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.AfterXmlExport" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_AfterXmlExportEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-313">在 Microsoft Office Excel 保存工作簿的数据或将数据从工作簿导出到 XML 数据文件后发生。</span><span class="sxs-lookup"><span data-stu-id="18d1c-313">Occurs after Microsoft Office Excel saves or exports data from the workbook to an XML data file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-314">下面的代码示例演示如何从工作簿导出 XML 数据。</span><span class="sxs-lookup"><span data-stu-id="18d1c-314">The following code example demonstrates how to export XML data from a workbook.</span></span> <span data-ttu-id="18d1c-315">此示例导入的 XML 数据<xref:System.Data.DataSet>到<xref:Microsoft.Office.Interop.Excel.XmlMap>当前工作簿中。</span><span class="sxs-lookup"><span data-stu-id="18d1c-315">The example imports the XML data from a <xref:System.Data.DataSet> into a <xref:Microsoft.Office.Interop.Excel.XmlMap> in the current workbook.</span></span> <span data-ttu-id="18d1c-316">该示例然后调用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SaveAsXMLData%2A>方法将数据从导出<xref:Microsoft.Office.Interop.Excel.XmlMap>到一个 XML 文件。</span><span class="sxs-lookup"><span data-stu-id="18d1c-316">The example then calls the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.SaveAsXMLData%2A> method to export the data from the <xref:Microsoft.Office.Interop.Excel.XmlMap> into an XML file.</span></span> <span data-ttu-id="18d1c-317">当<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SaveAsXMLData%2A>调用方法时，<xref:Microsoft.Office.Tools.Excel.WorkbookBase.BeforeXmlExport>事件处理程序会报告 XML 所导出和<xref:Microsoft.Office.Tools.Excel.WorkbookBase.AfterXmlExport>事件处理程序会报告是否已成功导出 XML。</span><span class="sxs-lookup"><span data-stu-id="18d1c-317">When the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.SaveAsXMLData%2A> method is called, the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.BeforeXmlExport> event handler reports that the XML is being exported, and the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.AfterXmlExport> event handler reports whether the XML was successfully exported.</span></span>  
  
 <span data-ttu-id="18d1c-318">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-318">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#203](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#203)]
 [!code-vb[Trin_ExcelWorkBook#203](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#203)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AfterXmlImport">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_AfterXmlImportEventHandler AfterXmlImport;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_AfterXmlImportEventHandler AfterXmlImport" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.AfterXmlImport" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_AfterXmlImportEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-319">在刷新现有 XML 数据连接后或将新 XML 数据导入工作簿后发生。</span><span class="sxs-lookup"><span data-stu-id="18d1c-319">Occurs after an existing XML data connection is refreshed or after new XML data is imported into the workbook.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-320">下面的代码示例演示如何将 XML 数据导入工作簿。</span><span class="sxs-lookup"><span data-stu-id="18d1c-320">The following code example demonstrates how to import XML data into a workbook.</span></span> <span data-ttu-id="18d1c-321">该示例将创建<xref:System.Data.DataSet>的客户名称，并添加<xref:Microsoft.Office.Interop.Excel.XmlMap>基于的 XML 架构<xref:System.Data.DataSet>到<xref:Microsoft.Office.Tools.Excel.WorkbookBase.XmlMaps%2A>当前工作簿的集合。</span><span class="sxs-lookup"><span data-stu-id="18d1c-321">The example creates a <xref:System.Data.DataSet> of customer names and adds an <xref:Microsoft.Office.Interop.Excel.XmlMap> based on the XML schema for the <xref:System.Data.DataSet> to the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.XmlMaps%2A> collection of the current workbook.</span></span> <span data-ttu-id="18d1c-322">该示例然后调用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.XmlImportXml%2A>方法将数据导入到工作表`Sheet1`。</span><span class="sxs-lookup"><span data-stu-id="18d1c-322">The example then calls the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.XmlImportXml%2A> method to import the data into worksheet `Sheet1`.</span></span> <span data-ttu-id="18d1c-323">当<xref:Microsoft.Office.Tools.Excel.WorkbookBase.XmlImportXml%2A>调用方法时，<xref:Microsoft.Office.Tools.Excel.WorkbookBase.BeforeXmlImport>事件处理程序会提示用户继续或取消导入 XML 和<xref:Microsoft.Office.Tools.Excel.WorkbookBase.AfterXmlImport>事件处理程序报告是否已成功导入 XML。</span><span class="sxs-lookup"><span data-stu-id="18d1c-323">When the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.XmlImportXml%2A> method is called, the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.BeforeXmlImport> event handler prompts the user to either proceed with or cancel importing the XML, and the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.AfterXmlImport> event handler reports whether the XML was successfully imported.</span></span>  
  
 <span data-ttu-id="18d1c-324">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-324">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#204](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#204)]
 [!code-vb[Trin_ExcelWorkBook#204](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#204)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Application">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Application Application { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Application Application" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Application" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Application</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-325">获取表示工作簿创建者的 <see cref="T:Microsoft.Office.Interop.Excel.Application" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-325">Gets an <see cref="T:Microsoft.Office.Interop.Excel.Application" /> that represents the creator of the workbook.</span></span></summary>
        <value><span data-ttu-id="18d1c-326">一个表示工作簿的创建者的 <see cref="T:Microsoft.Office.Interop.Excel.Application" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-326">An <see cref="T:Microsoft.Office.Interop.Excel.Application" /> that represents the creator of the workbook.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-327">下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Application%2A>属性来显示当前工作簿创建的应用程序的名称。</span><span class="sxs-lookup"><span data-stu-id="18d1c-327">The following code example uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.Application%2A> property to display the name of the application that created the current workbook.</span></span>  
  
 <span data-ttu-id="18d1c-328">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-328">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#3](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#3)]
 [!code-vb[Trin_ExcelWorkBook#3](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyTheme">
      <MemberSignature Language="C#" Value="public void ApplyTheme (string filename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ApplyTheme(string filename) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.ApplyTheme(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename"><span data-ttu-id="18d1c-329">要应用的主题的完整文件路径。</span><span class="sxs-lookup"><span data-stu-id="18d1c-329">The full file path of the theme to apply.</span></span></param>
        <summary><span data-ttu-id="18d1c-330">对工作簿应用指定的主题。</span><span class="sxs-lookup"><span data-stu-id="18d1c-330">Applies the specified theme to the workbook.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-331">下面的代码示例会将工作簿主题切换到 Foundry 主题。</span><span class="sxs-lookup"><span data-stu-id="18d1c-331">The following code example switches the workbook theme to the Foundry theme.</span></span>  
  
 <span data-ttu-id="18d1c-332">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-332">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkbook_Additional#1](~/snippets/csharp/VS_Snippets_OfficeSP/trin_excelworkbook_additional/cs/ThisWorkbook.cs#1)]
 [!code-vb[Trin_ExcelWorkbook_Additional#1](~/snippets/visualbasic/VS_Snippets_OfficeSP/trin_excelworkbook_additional/vb/ThisWorkbook.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Author">
      <MemberSignature Language="C#" Value="public string Author { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Author" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Author" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoUpdateFrequency">
      <MemberSignature Language="C#" Value="public int AutoUpdateFrequency { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AutoUpdateFrequency" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.AutoUpdateFrequency" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-333">获取或设置自动更新共享工作簿的间隔分钟数。</span><span class="sxs-lookup"><span data-stu-id="18d1c-333">Gets or sets the number of minutes between automatic updates to the shared workbook.</span></span></summary>
        <value><span data-ttu-id="18d1c-334">自动更新共享工作簿的间隔分钟数。</span><span class="sxs-lookup"><span data-stu-id="18d1c-334">The number of minutes between automatic updates to the shared workbook.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-335">此属性必须设置为一个值，从 5 到 1440 此属性才会生效。</span><span class="sxs-lookup"><span data-stu-id="18d1c-335">This property must be set to a value from 5 to 1440 for this property to take effect.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoUpdateSaveChanges">
      <MemberSignature Language="C#" Value="public bool AutoUpdateSaveChanges { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoUpdateSaveChanges" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.AutoUpdateSaveChanges" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-336">获取或设置一个值，该值指示每当工作簿自动更新时，是否将对共享工作簿所做的当前更改发送到其他用户。</span><span class="sxs-lookup"><span data-stu-id="18d1c-336">Gets or sets a value that indicates whether current changes to the shared workbook are posted to other users whenever the workbook is automatically updated.</span></span></summary>
        <value><span data-ttu-id="18d1c-337">如果每当工作簿自动更新时，都将对共享工作簿所做的当前更改发送到其他用户，则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-337"><see langword="true" /> if current changes to the shared workbook are posted to other users whenever the workbook is automatically updated.</span></span> <span data-ttu-id="18d1c-338">如果不发送更改（此工作簿仍与其他用户所做更改保持同步），则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-338"><see langword="false" /> if changes are not posted (this workbook is still synchronized with changes made by other users).</span></span> <span data-ttu-id="18d1c-339">默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-339">The default value is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-340"><xref:Microsoft.Office.Tools.Excel.WorkbookBase.AutoUpdateFrequency%2A>属性必须设置为值从 5 到 1440 此属性才会生效。</span><span class="sxs-lookup"><span data-stu-id="18d1c-340">The <xref:Microsoft.Office.Tools.Excel.WorkbookBase.AutoUpdateFrequency%2A> property must be set to a value from 5 to 1440 for this property to take effect.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Base">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Tools.Excel.Workbook Base { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Tools.Excel.Workbook Base" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Base" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Tools.Excel.Workbook</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-341">获取此 <see cref="T:Microsoft.Office.Tools.Excel.Workbook" /> 对象扩展的 <see cref="T:Microsoft.Office.Tools.Excel.WorkbookBase" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="18d1c-341">Gets the <see cref="T:Microsoft.Office.Tools.Excel.Workbook" /> object that this <see cref="T:Microsoft.Office.Tools.Excel.WorkbookBase" /> object extends.</span></span></summary>
        <value><span data-ttu-id="18d1c-342">此 <see cref="T:Microsoft.Office.Tools.Excel.WorkbookBase" /> 对象扩展的对象。</span><span class="sxs-lookup"><span data-stu-id="18d1c-342">The object that this <see cref="T:Microsoft.Office.Tools.Excel.WorkbookBase" /> object extends.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-343"><xref:Microsoft.Office.Tools.Excel.WorkbookBase>类用于扩展<xref:Microsoft.Office.Tools.Excel.Workbook>通过实现对象<xref:Microsoft.Office.Tools.Excel.IWorkbookExtension>接口。</span><span class="sxs-lookup"><span data-stu-id="18d1c-343">The <xref:Microsoft.Office.Tools.Excel.WorkbookBase> class extends <xref:Microsoft.Office.Tools.Excel.Workbook> objects by implementing the <xref:Microsoft.Office.Tools.Excel.IWorkbookExtension> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeClose">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_BeforeCloseEventHandler BeforeClose;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_BeforeCloseEventHandler BeforeClose" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.BeforeClose" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_BeforeCloseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-344">在关闭工作簿前发生。</span><span class="sxs-lookup"><span data-stu-id="18d1c-344">Occurs before the workbook closes.</span></span> <span data-ttu-id="18d1c-345">如果工作簿已更改，则此事件在要求用户保存更改前发生。</span><span class="sxs-lookup"><span data-stu-id="18d1c-345">If the workbook has been changed, this event occurs before the user is asked to save changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-346">下面的代码示例演示了一个处理程序<xref:Microsoft.Office.Tools.Excel.WorkbookBase.BeforeClose>事件。</span><span class="sxs-lookup"><span data-stu-id="18d1c-346">The following code example demonstrates a handler for the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.BeforeClose> event.</span></span> <span data-ttu-id="18d1c-347">事件处理程序会提示用户要保存更改，不保存更改，还是取消关闭操作如果工作簿自上次保存以来进行了更改。</span><span class="sxs-lookup"><span data-stu-id="18d1c-347">The event handler prompts the user to either save changes, not save changes, or cancel the close operation if changes have been made to the workbook since it was last saved.</span></span> <span data-ttu-id="18d1c-348">如果用户不会保存更改，则<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Saved%2A>工作簿的属性设置为`true`，以便 Microsoft Office Excel 不会提示用户保存工作簿时继续执行关闭操作。</span><span class="sxs-lookup"><span data-stu-id="18d1c-348">If the user does not save changes, then the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.Saved%2A> property of the workbook is set to `true` so that Microsoft Office Excel does not prompt the user to save the workbook when the close operation continues.</span></span> <span data-ttu-id="18d1c-349">如果用户取消关闭操作，则`Cancel`的参数<xref:Microsoft.Office.Interop.Excel.WorkbookEvents_BeforeCloseEventHandler>事件处理程序设置为`true`，以便 Microsoft Office Excel 不会关闭该工作簿。</span><span class="sxs-lookup"><span data-stu-id="18d1c-349">If the user cancels the close operation, then the `Cancel` parameter of the <xref:Microsoft.Office.Interop.Excel.WorkbookEvents_BeforeCloseEventHandler> event handler is set to `true` so that Microsoft Office Excel does not close the workbook.</span></span>  
  
 <span data-ttu-id="18d1c-350">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-350">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#205](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#205)]
 [!code-vb[Trin_ExcelWorkBook#205](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#205)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforePrint">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_BeforePrintEventHandler BeforePrint;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_BeforePrintEventHandler BeforePrint" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.BeforePrint" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_BeforePrintEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-351">在打印工作簿（或其中任何内容）前发生。</span><span class="sxs-lookup"><span data-stu-id="18d1c-351">Occurs before the workbook (or anything in it) is printed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-352">下面的代码示例演示了一个处理程序<xref:Microsoft.Office.Tools.Excel.WorkbookBase.BeforePrint>事件。</span><span class="sxs-lookup"><span data-stu-id="18d1c-352">The following code example demonstrates a handler for the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.BeforePrint> event.</span></span> <span data-ttu-id="18d1c-353">事件处理程序会提示用户继续打印操作或取消它。</span><span class="sxs-lookup"><span data-stu-id="18d1c-353">The event handler prompts the user to either continue with the print operation or cancel it.</span></span> <span data-ttu-id="18d1c-354">如果用户取消打印操作，则`Cancel`的参数<xref:Microsoft.Office.Interop.Excel.WorkbookEvents_BeforePrintEventHandler>事件处理程序设置为`true`，以便 Microsoft Office Excel 无法打印该工作簿。</span><span class="sxs-lookup"><span data-stu-id="18d1c-354">If the user cancels the print operation, then the `Cancel` parameter of the <xref:Microsoft.Office.Interop.Excel.WorkbookEvents_BeforePrintEventHandler> event handler is set to `true` so that Microsoft Office Excel does not print the workbook.</span></span>  
  
 <span data-ttu-id="18d1c-355">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-355">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#206](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#206)]
 [!code-vb[Trin_ExcelWorkBook#206](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#206)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeSave">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_BeforeSaveEventHandler BeforeSave;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_BeforeSaveEventHandler BeforeSave" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.BeforeSave" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_BeforeSaveEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-356">在保存工作簿前发生。</span><span class="sxs-lookup"><span data-stu-id="18d1c-356">Occurs before the workbook is saved.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-357">下面的代码示例演示了一个处理程序<xref:Microsoft.Office.Tools.Excel.WorkbookBase.BeforeSave>事件。</span><span class="sxs-lookup"><span data-stu-id="18d1c-357">The following code example demonstrates a handler for the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.BeforeSave> event.</span></span> <span data-ttu-id="18d1c-358">事件处理程序会提示用户继续使用该存储操作或取消它。</span><span class="sxs-lookup"><span data-stu-id="18d1c-358">The event handler prompts the user to either continue with the save operation or cancel it.</span></span> <span data-ttu-id="18d1c-359">如果用户取消保存操作，则`Cancel`的参数<xref:Microsoft.Office.Interop.Excel.WorkbookEvents_BeforeSaveEventHandler>事件处理程序设置为`true`，以便 Microsoft Office Excel 不会保存该工作簿。</span><span class="sxs-lookup"><span data-stu-id="18d1c-359">If the user cancels the save operation, then the `Cancel` parameter of the <xref:Microsoft.Office.Interop.Excel.WorkbookEvents_BeforeSaveEventHandler> event handler is set to `true` so that Microsoft Office Excel does not save the workbook.</span></span>  
  
 <span data-ttu-id="18d1c-360">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-360">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#207](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#207)]
 [!code-vb[Trin_ExcelWorkBook#207](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#207)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeXmlExport">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_BeforeXmlExportEventHandler BeforeXmlExport;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_BeforeXmlExportEventHandler BeforeXmlExport" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.BeforeXmlExport" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_BeforeXmlExportEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-361">在 Microsoft Office Excel 保存工作簿的数据或将数据从工作簿导出到 XML 数据文件前发生。</span><span class="sxs-lookup"><span data-stu-id="18d1c-361">Occurs before Microsoft Office Excel saves or exports data from the workbook to an XML data file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-362">在将保存到 XML 电子表格文件格式，则不会发生此事件。</span><span class="sxs-lookup"><span data-stu-id="18d1c-362">This event will not occur when you are saving to the XML Spreadsheet file format.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18d1c-363">下面的代码示例演示如何从工作簿导出 XML 数据。</span><span class="sxs-lookup"><span data-stu-id="18d1c-363">The following code example demonstrates how to export XML data from a workbook.</span></span> <span data-ttu-id="18d1c-364">此示例导入的 XML 数据<xref:System.Data.DataSet>到<xref:Microsoft.Office.Interop.Excel.XmlMap>当前工作簿中。</span><span class="sxs-lookup"><span data-stu-id="18d1c-364">The example imports the XML data from a <xref:System.Data.DataSet> into a <xref:Microsoft.Office.Interop.Excel.XmlMap> in the current workbook.</span></span> <span data-ttu-id="18d1c-365">该示例然后调用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SaveAsXMLData%2A>方法将数据从导出<xref:Microsoft.Office.Interop.Excel.XmlMap>到一个 XML 文件。</span><span class="sxs-lookup"><span data-stu-id="18d1c-365">The example then calls the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.SaveAsXMLData%2A> method to export the data from the <xref:Microsoft.Office.Interop.Excel.XmlMap> into an XML file.</span></span> <span data-ttu-id="18d1c-366">当<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SaveAsXMLData%2A>调用方法时，<xref:Microsoft.Office.Tools.Excel.WorkbookBase.BeforeXmlExport>事件处理程序会报告 XML 所导出和<xref:Microsoft.Office.Tools.Excel.WorkbookBase.AfterXmlExport>事件处理程序会报告是否已成功导出 XML。</span><span class="sxs-lookup"><span data-stu-id="18d1c-366">When the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.SaveAsXMLData%2A> method is called, the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.BeforeXmlExport> event handler reports that the XML is being exported, and the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.AfterXmlExport> event handler reports whether the XML was successfully exported.</span></span>  
  
 <span data-ttu-id="18d1c-367">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-367">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#203](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#203)]
 [!code-vb[Trin_ExcelWorkBook#203](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#203)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeXmlImport">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_BeforeXmlImportEventHandler BeforeXmlImport;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_BeforeXmlImportEventHandler BeforeXmlImport" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.BeforeXmlImport" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_BeforeXmlImportEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-368">在刷新现有 XML 数据连接前或将新 XML 数据导入工作簿前发生。</span><span class="sxs-lookup"><span data-stu-id="18d1c-368">Occurs before an existing XML data connection is refreshed or before new XML data is imported into the workbook.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-369">下面的代码示例演示如何将 XML 数据导入工作簿。</span><span class="sxs-lookup"><span data-stu-id="18d1c-369">The following code example demonstrates how to import XML data into a workbook.</span></span> <span data-ttu-id="18d1c-370">该示例将创建<xref:System.Data.DataSet>的客户名称，并添加<xref:Microsoft.Office.Interop.Excel.XmlMap>基于的 XML 架构<xref:System.Data.DataSet>到<xref:Microsoft.Office.Tools.Excel.WorkbookBase.XmlMaps%2A>当前工作簿的集合。</span><span class="sxs-lookup"><span data-stu-id="18d1c-370">The example creates a <xref:System.Data.DataSet> of customer names and adds an <xref:Microsoft.Office.Interop.Excel.XmlMap> based on the XML schema for the <xref:System.Data.DataSet> to the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.XmlMaps%2A> collection of the current workbook.</span></span> <span data-ttu-id="18d1c-371">该示例然后调用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.XmlImportXml%2A>方法将数据导入到工作表`Sheet1`。</span><span class="sxs-lookup"><span data-stu-id="18d1c-371">The example then calls the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.XmlImportXml%2A> method to import the data into worksheet `Sheet1`.</span></span> <span data-ttu-id="18d1c-372">当<xref:Microsoft.Office.Tools.Excel.WorkbookBase.XmlImportXml%2A>调用方法时，<xref:Microsoft.Office.Tools.Excel.WorkbookBase.BeforeXmlImport>事件处理程序会提示用户继续或取消导入 XML 和<xref:Microsoft.Office.Tools.Excel.WorkbookBase.AfterXmlImport>事件处理程序报告是否已成功导入 XML。</span><span class="sxs-lookup"><span data-stu-id="18d1c-372">When the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.XmlImportXml%2A> method is called, the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.BeforeXmlImport> event handler prompts the user to either proceed with or cancel importing the XML, and the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.AfterXmlImport> event handler reports whether the XML was successfully imported.</span></span>  
  
 <span data-ttu-id="18d1c-373">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-373">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#204](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#204)]
 [!code-vb[Trin_ExcelWorkBook#204](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#204)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInit">
      <MemberSignature Language="C#" Value="public virtual void BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.BeginInit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingContext">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.BindingContext BindingContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.BindingContext BindingContext" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.BindingContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BindingContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingContextChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BindingContextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BindingContextChanged" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.BindingContextChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BreakLink">
      <MemberSignature Language="C#" Value="public void BreakLink (string name, Microsoft.Office.Interop.Excel.XlLinkType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BreakLink(string name, valuetype Microsoft.Office.Interop.Excel.XlLinkType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.BreakLink(System.String,Microsoft.Office.Interop.Excel.XlLinkType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="type" Type="Microsoft.Office.Interop.Excel.XlLinkType" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="18d1c-374">链接的名称。</span><span class="sxs-lookup"><span data-stu-id="18d1c-374">The name of the link.</span></span></param>
        <param name="type"><span data-ttu-id="18d1c-375"><see cref="T:Microsoft.Office.Interop.Excel.XlLinkType" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="18d1c-375">One of the <see cref="T:Microsoft.Office.Interop.Excel.XlLinkType" /> values.</span></span> <span data-ttu-id="18d1c-376">链接的类型。</span><span class="sxs-lookup"><span data-stu-id="18d1c-376">The type of link.</span></span></param>
        <summary><span data-ttu-id="18d1c-377">将链接到其他 Microsoft Office Excel 源或 OLE 源的公式转换为值。</span><span class="sxs-lookup"><span data-stu-id="18d1c-377">Converts formulas linked to other Microsoft Office Excel sources or OLE sources to values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-378">下面的代码示例创建一个链接到另一个 Excel 工作簿，然后会提示用户将该链接的链接目标的值替换为通过使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.BreakLink%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="18d1c-378">The following code example creates a link to another Excel workbook and then prompts the user to replace the link with the value of the link destination by using the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.BreakLink%2A> method.</span></span> <span data-ttu-id="18d1c-379">此示例假定 Book2.xlsx C 目录的根目录上存在该工作簿。</span><span class="sxs-lookup"><span data-stu-id="18d1c-379">This example assumes that workbook Book2.xlsx exists at the root of the C directory.</span></span>  
  
 <span data-ttu-id="18d1c-380">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-380">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#101](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#101)]
 [!code-vb[Trin_ExcelWorkBook#101](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#101)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BuiltinDocumentProperties">
      <MemberSignature Language="C#" Value="public object BuiltinDocumentProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object BuiltinDocumentProperties" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.BuiltinDocumentProperties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-381">获取一个 <c>Microsoft.Office.Core.DocumentProperties</c> 集合，该集合表示工作簿的所有内置文档属性。</span><span class="sxs-lookup"><span data-stu-id="18d1c-381">Gets a <c>Microsoft.Office.Core.DocumentProperties</c> collection that represents all the built-in document properties for the workbook.</span></span></summary>
        <value><span data-ttu-id="18d1c-382">一个<c>Microsoft.Office.Core.DocumentProperties</c>集合，表示工作簿的所有内置文档属性。</span><span class="sxs-lookup"><span data-stu-id="18d1c-382">A <c>Microsoft.Office.Core.DocumentProperties</c> collection that represents all the built-in document properties for the workbook.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-383">此属性返回内置文档属性的整个的集合。</span><span class="sxs-lookup"><span data-stu-id="18d1c-383">This property returns the entire collection of built-in document properties.</span></span> <span data-ttu-id="18d1c-384">使用`Microsoft.Office.Core.DocumentProperties.Item(System.Object)`属性以返回单个成员的集合 (`Microsoft.Office.Core.DocumentProperties`对象) 只需指定属性的名称或 （作为一个数字） 的集合索引。</span><span class="sxs-lookup"><span data-stu-id="18d1c-384">Use the `Microsoft.Office.Core.DocumentProperties.Item(System.Object)` property to return a single member of the collection (a `Microsoft.Office.Core.DocumentProperties` object) by specifying either the name of the property or the collection index (as a number).</span></span>  
  
 <span data-ttu-id="18d1c-385">按索引值或名称，可以引用文档属性。</span><span class="sxs-lookup"><span data-stu-id="18d1c-385">You can refer to document properties either by index value or by name.</span></span> <span data-ttu-id="18d1c-386">以下列表显示了可用的内置文档属性名称：</span><span class="sxs-lookup"><span data-stu-id="18d1c-386">The following list shows the available built-in document property names:</span></span>  
  
-   <span data-ttu-id="18d1c-387">标题</span><span class="sxs-lookup"><span data-stu-id="18d1c-387">Title</span></span>  
  
-   <span data-ttu-id="18d1c-388">Subject</span><span class="sxs-lookup"><span data-stu-id="18d1c-388">Subject</span></span>  
  
-   <span data-ttu-id="18d1c-389">作者</span><span class="sxs-lookup"><span data-stu-id="18d1c-389">Author</span></span>  
  
-   <span data-ttu-id="18d1c-390">关键字</span><span class="sxs-lookup"><span data-stu-id="18d1c-390">Keywords</span></span>  
  
-   <span data-ttu-id="18d1c-391">注释</span><span class="sxs-lookup"><span data-stu-id="18d1c-391">Comments</span></span>  
  
-   <span data-ttu-id="18d1c-392">模板</span><span class="sxs-lookup"><span data-stu-id="18d1c-392">Template</span></span>  
  
-   <span data-ttu-id="18d1c-393">最后的作者</span><span class="sxs-lookup"><span data-stu-id="18d1c-393">Last Author</span></span>  
  
-   <span data-ttu-id="18d1c-394">修订号</span><span class="sxs-lookup"><span data-stu-id="18d1c-394">Revision Number</span></span>  
  
-   <span data-ttu-id="18d1c-395">Application Name</span><span class="sxs-lookup"><span data-stu-id="18d1c-395">Application Name</span></span>  
  
-   <span data-ttu-id="18d1c-396">上次打印日期</span><span class="sxs-lookup"><span data-stu-id="18d1c-396">Last Print Date</span></span>  
  
-   <span data-ttu-id="18d1c-397">创建日期</span><span class="sxs-lookup"><span data-stu-id="18d1c-397">Creation Date</span></span>  
  
-   <span data-ttu-id="18d1c-398">上次保存时间</span><span class="sxs-lookup"><span data-stu-id="18d1c-398">Last Save Time</span></span>  
  
-   <span data-ttu-id="18d1c-399">编辑时间总计</span><span class="sxs-lookup"><span data-stu-id="18d1c-399">Total Editing Time</span></span>  
  
-   <span data-ttu-id="18d1c-400">页面数</span><span class="sxs-lookup"><span data-stu-id="18d1c-400">Number of Pages</span></span>  
  
-   <span data-ttu-id="18d1c-401">单词的数量</span><span class="sxs-lookup"><span data-stu-id="18d1c-401">Number of Words</span></span>  
  
-   <span data-ttu-id="18d1c-402">字符数</span><span class="sxs-lookup"><span data-stu-id="18d1c-402">Number of Characters</span></span>  
  
-   <span data-ttu-id="18d1c-403">安全性</span><span class="sxs-lookup"><span data-stu-id="18d1c-403">Security</span></span>  
  
-   <span data-ttu-id="18d1c-404">类别</span><span class="sxs-lookup"><span data-stu-id="18d1c-404">Category</span></span>  
  
-   <span data-ttu-id="18d1c-405">格式</span><span class="sxs-lookup"><span data-stu-id="18d1c-405">Format</span></span>  
  
-   <span data-ttu-id="18d1c-406">Manager</span><span class="sxs-lookup"><span data-stu-id="18d1c-406">Manager</span></span>  
  
-   <span data-ttu-id="18d1c-407">公司</span><span class="sxs-lookup"><span data-stu-id="18d1c-407">Company</span></span>  
  
-   <span data-ttu-id="18d1c-408">字节数</span><span class="sxs-lookup"><span data-stu-id="18d1c-408">Number of Bytes</span></span>  
  
-   <span data-ttu-id="18d1c-409">行数</span><span class="sxs-lookup"><span data-stu-id="18d1c-409">Number of Lines</span></span>  
  
-   <span data-ttu-id="18d1c-410">一些段落</span><span class="sxs-lookup"><span data-stu-id="18d1c-410">Number of Paragraphs</span></span>  
  
-   <span data-ttu-id="18d1c-411">幻灯片的数量</span><span class="sxs-lookup"><span data-stu-id="18d1c-411">Number of Slides</span></span>  
  
-   <span data-ttu-id="18d1c-412">说明的数量</span><span class="sxs-lookup"><span data-stu-id="18d1c-412">Number of Notes</span></span>  
  
-   <span data-ttu-id="18d1c-413">隐藏幻灯片的数量</span><span class="sxs-lookup"><span data-stu-id="18d1c-413">Number of Hidden Slides</span></span>  
  
-   <span data-ttu-id="18d1c-414">多媒体剪辑数</span><span class="sxs-lookup"><span data-stu-id="18d1c-414">Number of Multimedia Clips</span></span>  
  
-   <span data-ttu-id="18d1c-415">超链接基础</span><span class="sxs-lookup"><span data-stu-id="18d1c-415">Hyperlink Base</span></span>  
  
-   <span data-ttu-id="18d1c-416">（带空格） 的字符数</span><span class="sxs-lookup"><span data-stu-id="18d1c-416">Number of Characters (with spaces)</span></span>  
  
 <span data-ttu-id="18d1c-417">容器应用程序不需要定义每个内置文档属性的值。</span><span class="sxs-lookup"><span data-stu-id="18d1c-417">Container applications are not required to define values for every built-in document property.</span></span> <span data-ttu-id="18d1c-418">如果 Microsoft Office Excel 未定义的一个内置文档属性的值，读取`Microsoft.Office.Core.DocumentProperties.Value`该文档属性的属性引发异常。</span><span class="sxs-lookup"><span data-stu-id="18d1c-418">If Microsoft Office Excel does not define a value for one of the built-in document properties, reading the `Microsoft.Office.Core.DocumentProperties.Value` property for that document property throws an exception.</span></span>  
  
 <span data-ttu-id="18d1c-419">使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.CustomDocumentProperties%2A>属性返回的自定义文档属性的集合。</span><span class="sxs-lookup"><span data-stu-id="18d1c-419">Use the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.CustomDocumentProperties%2A> property to return the collection of custom document properties.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18d1c-420">下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.BuiltinDocumentProperties%2A>属性可以在工作表的 A 列中显示的所有内置文档属性的当前工作簿`Sheet1`。</span><span class="sxs-lookup"><span data-stu-id="18d1c-420">The following code example uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.BuiltinDocumentProperties%2A> property to display all of the built-in document properties of the current workbook in column A of worksheet `Sheet1`.</span></span>  
  
 <span data-ttu-id="18d1c-421">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-421">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#6](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#6)]
 [!code-vb[Trin_ExcelWorkBook#6](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CalculationVersion">
      <MemberSignature Language="C#" Value="public int CalculationVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CalculationVersion" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.CalculationVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-422">获取一个数字，该数字指示上次对工作簿进行完全重新计算的 Excel 的版本。</span><span class="sxs-lookup"><span data-stu-id="18d1c-422">Gets a number that indicates the version of Excel that the workbook was last fully recalculated by.</span></span> <span data-ttu-id="18d1c-423">最右边四位是计算引擎的次版本号，其他位（左边）是 Microsoft Office Excel 的主版本。</span><span class="sxs-lookup"><span data-stu-id="18d1c-423">The rightmost four digits are the minor calculation engine version number, and the other digits (on the left) are the major version of Microsoft Office Excel.</span></span></summary>
        <value><span data-ttu-id="18d1c-424">一个数字，该数字指示上次对工作簿进行完全重新计算的 Excel 的版本。</span><span class="sxs-lookup"><span data-stu-id="18d1c-424">A number that indicates the version of Excel that the workbook was last fully recalculated by.</span></span> <span data-ttu-id="18d1c-425">最右边四位是计算引擎的次版本号，其他位（左边）是 Microsoft Office Excel 的主版本。</span><span class="sxs-lookup"><span data-stu-id="18d1c-425">The rightmost four digits are the minor calculation engine version number, and the other digits (on the left) are the major version of Microsoft Office Excel.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-426">如果工作簿保存在早期版本的 Excel 和如果工作簿具有尚未完全重新计算，此属性将返回 0。</span><span class="sxs-lookup"><span data-stu-id="18d1c-426">If the workbook was saved in an earlier version of Excel and if the workbook has not been fully recalculated, then this property returns 0.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18d1c-427">下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.CalculationVersion%2A>属性显示在其中工作簿上次进行完全重新计算的 Excel 的版本。</span><span class="sxs-lookup"><span data-stu-id="18d1c-427">The following code example uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.CalculationVersion%2A> property to display the version of Excel in which the workbook was last fully recalculated.</span></span>  
  
 <span data-ttu-id="18d1c-428">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-428">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#7](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#7)]
 [!code-vb[Trin_ExcelWorkBook#7](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanCheckIn">
      <MemberSignature Language="C#" Value="public bool CanCheckIn ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanCheckIn() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.CanCheckIn" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="18d1c-429">获取一个值，该值指示 Microsoft Office Excel 是否可以将工作簿签入到服务器。</span><span class="sxs-lookup"><span data-stu-id="18d1c-429">Gets a value that indicates whether Microsoft Office Excel can check in the workbook to a server.</span></span></summary>
        <returns><span data-ttu-id="18d1c-430">如果 Microsoft Office Excel 可以将工作簿签入到服务器，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-430"><see langword="true" /> if Microsoft Office Excel can check in the workbook to a server; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-431">下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.CanCheckIn%2A>方法来确定 Microsoft Office Excel 可以签入到服务器的当前工作簿。</span><span class="sxs-lookup"><span data-stu-id="18d1c-431">The following code example uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.CanCheckIn%2A> method to determine whether Microsoft Office Excel can check in the current workbook to a server.</span></span> <span data-ttu-id="18d1c-432">如果可以签入工作簿，则该示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.CheckIn%2A>方法来保存修订并签入当前工作簿。</span><span class="sxs-lookup"><span data-stu-id="18d1c-432">If the workbook can be checked in, then the example uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.CheckIn%2A> method to save revisions and check in the current workbook.</span></span>  
  
 <span data-ttu-id="18d1c-433">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-433">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#104](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#104)]
 [!code-vb[Trin_ExcelWorkBook#104](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#104)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChangeFileAccess">
      <MemberSignature Language="C#" Value="public void ChangeFileAccess (Microsoft.Office.Interop.Excel.XlFileAccess mode, object writePassword, object notify);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ChangeFileAccess(valuetype Microsoft.Office.Interop.Excel.XlFileAccess mode, object writePassword, object notify) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.ChangeFileAccess(Microsoft.Office.Interop.Excel.XlFileAccess,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="Microsoft.Office.Interop.Excel.XlFileAccess" />
        <Parameter Name="writePassword" Type="System.Object" />
        <Parameter Name="notify" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="mode"><span data-ttu-id="18d1c-434"><see cref="T:Microsoft.Office.Interop.Excel.XlFileAccess" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="18d1c-434">One of the <see cref="T:Microsoft.Office.Interop.Excel.XlFileAccess" /> values.</span></span> <span data-ttu-id="18d1c-435">指定新的访问模式。</span><span class="sxs-lookup"><span data-stu-id="18d1c-435">Specifies the new access mode.</span></span></param>
        <param name="writePassword"><span data-ttu-id="18d1c-436">如果文件受写保护且 <c>Mode</c> 为 <see cref="F:Microsoft.Office.Interop.Excel.XlFileAccess.xlReadWrite" />，则指定写保护密码。</span><span class="sxs-lookup"><span data-stu-id="18d1c-436">Specifies the write-reserved password if the file is write reserved and <c>Mode</c> is <see cref="F:Microsoft.Office.Interop.Excel.XlFileAccess.xlReadWrite" />.</span></span> <span data-ttu-id="18d1c-437">如果没有文件密码或 <c>Mode</c> 为 <see cref="F:Microsoft.Office.Interop.Excel.XlFileAccess.xlReadOnly" />，则忽略。</span><span class="sxs-lookup"><span data-stu-id="18d1c-437">Ignored if there is no password for the file or if <c>Mode</c> is <see cref="F:Microsoft.Office.Interop.Excel.XlFileAccess.xlReadOnly" />.</span></span></param>
        <param name="notify"><span data-ttu-id="18d1c-438">如果为 <see langword="true" />，则在无法直接访问文件时通知用户。</span><span class="sxs-lookup"><span data-stu-id="18d1c-438"><see langword="true" /> to notify the user if the file cannot be immediately accessed.</span></span></param>
        <summary><span data-ttu-id="18d1c-439">更改工作簿的访问权限。</span><span class="sxs-lookup"><span data-stu-id="18d1c-439">Changes the access permissions for the workbook.</span></span> <span data-ttu-id="18d1c-440">这可能需要从磁盘加载更新版本。</span><span class="sxs-lookup"><span data-stu-id="18d1c-440">This might require an updated version to be loaded from the disk.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-441">如果必须在只读模式下打开的文件，是否不到文件具有独占访问权限。</span><span class="sxs-lookup"><span data-stu-id="18d1c-441">If you have a file open in read-only mode, you do not have exclusive access to the file.</span></span> <span data-ttu-id="18d1c-442">如果您将一个文件只读的为读/写，必须将 Microsoft Office Excel 加载的文件，确保新副本时您必须以只读方式打开该文件未不进行任何更改。</span><span class="sxs-lookup"><span data-stu-id="18d1c-442">If you change a file from read-only to read/write, Microsoft Office Excel must load a new copy of the file to ensure that no changes were made while you had the file open as read-only.</span></span>  
  
## <a name="optional-parameters"></a><span data-ttu-id="18d1c-443">可选参数</span><span class="sxs-lookup"><span data-stu-id="18d1c-443">Optional Parameters</span></span>  
 <span data-ttu-id="18d1c-444">可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。</span><span class="sxs-lookup"><span data-stu-id="18d1c-444">For information on optional parameters, see [Optional Parameters in Office Solutions](/visualstudio/vsto/optional-parameters-in-office-solutions).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18d1c-445">下面的代码示例显示一条消息，如果<xref:Microsoft.Office.Tools.Excel.WorkbookBase.ReadOnlyRecommended%2A>属性是`true`并<xref:Microsoft.Office.Tools.Excel.WorkbookBase.ReadOnly%2A>属性是`false`，然后会提示用户设置的文件访问权限为只读、 只通过调用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.ChangeFileAccess%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="18d1c-445">The following code example displays a message if the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.ReadOnlyRecommended%2A> property is `true` and the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.ReadOnly%2A> property is `false`, and then prompts the user to set the file access to read-only by calling the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.ChangeFileAccess%2A> method.</span></span>  
  
 <span data-ttu-id="18d1c-446">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-446">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#102](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#102)]
 [!code-vb[Trin_ExcelWorkBook#102](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#102)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChangeHistoryDuration">
      <MemberSignature Language="C#" Value="public int ChangeHistoryDuration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ChangeHistoryDuration" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.ChangeHistoryDuration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-447">获取或设置在共享工作簿的更改历史记录中显示的天数。</span><span class="sxs-lookup"><span data-stu-id="18d1c-447">Gets or sets the number of days shown in the shared workbook's change history.</span></span></summary>
        <value><span data-ttu-id="18d1c-448">在共享工作簿的更改历史记录中显示的天数。</span><span class="sxs-lookup"><span data-stu-id="18d1c-448">The number of days shown in the shared workbook's change history.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-449">关闭工作簿时，会删除早于设置此属性的更改历史记录中的任何更改。</span><span class="sxs-lookup"><span data-stu-id="18d1c-449">Any changes in the change history older than the setting for this property are removed when the workbook is closed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChangeLink">
      <MemberSignature Language="C#" Value="public void ChangeLink (string name, string newName, Microsoft.Office.Interop.Excel.XlLinkType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ChangeLink(string name, string newName, valuetype Microsoft.Office.Interop.Excel.XlLinkType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.ChangeLink(System.String,System.String,Microsoft.Office.Interop.Excel.XlLinkType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="newName" Type="System.String" />
        <Parameter Name="type" Type="Microsoft.Office.Interop.Excel.XlLinkType" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="18d1c-450">要更改的 Microsoft Office Excel 或 DDE/OLE 链接的名称（和从 <see cref="M:Microsoft.Office.Tools.Excel.WorkbookBase.LinkSources(System.Object)" /> 方法返回的一样）。</span><span class="sxs-lookup"><span data-stu-id="18d1c-450">The name of the Microsoft Office Excel or DDE/OLE link to be changed, as it was returned from the <see cref="M:Microsoft.Office.Tools.Excel.WorkbookBase.LinkSources(System.Object)" /> method.</span></span></param>
        <param name="newName"><span data-ttu-id="18d1c-451">链接的新名称。</span><span class="sxs-lookup"><span data-stu-id="18d1c-451">The new name of the link.</span></span></param>
        <param name="type"><span data-ttu-id="18d1c-452">指定链接类型的 <see cref="T:Microsoft.Office.Interop.Excel.XlLinkType" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="18d1c-452">One of the <see cref="T:Microsoft.Office.Interop.Excel.XlLinkType" /> values that specifies the link type.</span></span></param>
        <summary><span data-ttu-id="18d1c-453">将链接从一个文档更改为另一个文档。</span><span class="sxs-lookup"><span data-stu-id="18d1c-453">Changes a link from one document to another.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a><span data-ttu-id="18d1c-454">可选参数</span><span class="sxs-lookup"><span data-stu-id="18d1c-454">Optional Parameters</span></span>  
 <span data-ttu-id="18d1c-455">可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。</span><span class="sxs-lookup"><span data-stu-id="18d1c-455">For information on optional parameters, see [Optional Parameters in Office Solutions](/visualstudio/vsto/optional-parameters-in-office-solutions).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18d1c-456">下面的代码示例创建 Excel 工作簿的外部链接，然后使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.ChangeLink%2A>更改链接目标的方法。</span><span class="sxs-lookup"><span data-stu-id="18d1c-456">The following code example creates an external link to an Excel workbook and then uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.ChangeLink%2A> method to change the link destination.</span></span> <span data-ttu-id="18d1c-457">此示例假定 Book2.xlsx 和 Book3.xls 的工作簿位于 C 目录的根目录。</span><span class="sxs-lookup"><span data-stu-id="18d1c-457">This example assumes that workbooks Book2.xlsx and Book3.xls exist at the root of the C directory.</span></span>  
  
 <span data-ttu-id="18d1c-458">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-458">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#103](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#103)]
 [!code-vb[Trin_ExcelWorkBook#103](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#103)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Charts">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Sheets Charts { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Sheets Charts" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Charts" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Sheets</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-459">获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Sheets" /> 集合，该集合表示工作簿中的所有图表工作表。</span><span class="sxs-lookup"><span data-stu-id="18d1c-459">Gets a <see cref="T:Microsoft.Office.Interop.Excel.Sheets" /> collection that represents all the chart sheets in the workbook.</span></span></summary>
        <value><span data-ttu-id="18d1c-460"><see cref="T:Microsoft.Office.Interop.Excel.Sheets" /> 集合，表示工作簿中的所有图表工作表。</span><span class="sxs-lookup"><span data-stu-id="18d1c-460">A <see cref="T:Microsoft.Office.Interop.Excel.Sheets" /> collection that represents all the chart sheets in the workbook.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-461">下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Charts%2A>属性在当前工作簿中生成的所有图表工作表打印预览。</span><span class="sxs-lookup"><span data-stu-id="18d1c-461">The following code example uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.Charts%2A> property to generate a print preview of all the chart sheets in the current workbook.</span></span>  
  
 <span data-ttu-id="18d1c-462">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-462">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#9](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#9)]
 [!code-vb[Trin_ExcelWorkBook#9](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckCompatibility">
      <MemberSignature Language="C#" Value="public bool CheckCompatibility { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CheckCompatibility" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.CheckCompatibility" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-463">获取或设置一个值，该值指示在保存工作簿时是否自动运行兼容性检查器。</span><span class="sxs-lookup"><span data-stu-id="18d1c-463">Gets or sets a value that indicates whether to run the compatibility checker automatically when the workbook is saved.</span></span></summary>
        <value><span data-ttu-id="18d1c-464">如果在保存工作簿时应该自动运行兼容性检查器，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-464"><see langword="true" /> if the compatibility checker should be run automatically when the workbook is saved; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="18d1c-465">对于 Excel 97-2003 Binary (BIFF8) 工作簿，默认值为 <see langword="true" />；对于所有其他工作簿，默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-465">The default for Excel 97-2003 Binary (BIFF8) workbooks is <see langword="true" />; the default for all other workbooks is <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckIn">
      <MemberSignature Language="C#" Value="public void CheckIn (object saveChanges, object comments, object makePublic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CheckIn(object saveChanges, object comments, object makePublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.CheckIn(System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="saveChanges" Type="System.Object" />
        <Parameter Name="comments" Type="System.Object" />
        <Parameter Name="makePublic" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="saveChanges"><span data-ttu-id="18d1c-466">如果为 <see langword="true" />，则保存更改并签入文档；如果为 <see langword="false" />，则将文档返回到签入状态而不保存修订。</span><span class="sxs-lookup"><span data-stu-id="18d1c-466"><see langword="true" /> saves changes and checks in the document; <see langword="false" /> returns the document to a checked-in status without saving revisions.</span></span></param>
        <param name="comments"><span data-ttu-id="18d1c-467">允许用户为签入的工作簿的修订输入签入批注（仅当 <c>SaveChanges</c> 等于 <see langword="true" /> 时应用）。</span><span class="sxs-lookup"><span data-stu-id="18d1c-467">Allows the user to enter check-in comments for the revision of the workbook being checked in (applies only if <c>SaveChanges</c> equals <see langword="true" />).</span></span></param>
        <param name="makePublic"><span data-ttu-id="18d1c-468">如果为 <see langword="true" />，则允许用户在工作簿签入后发布该工作簿。</span><span class="sxs-lookup"><span data-stu-id="18d1c-468"><see langword="true" /> allows the user to publish the workbook after it has been checked in.</span></span> <span data-ttu-id="18d1c-469">这会提交工作簿供审批，审批过程最终会生成将发布给具有工作簿只读权限的用户的工作簿版本（仅当 <c>SaveChanges</c> 为 <see langword="true" /> 时才会如此）。</span><span class="sxs-lookup"><span data-stu-id="18d1c-469">This submits the workbook for the approval process, which can eventually result in a version of the workbook being published to users with read-only rights to the workbook (applies only if <c>SaveChanges</c> equals <see langword="true" />).</span></span></param>
        <summary><span data-ttu-id="18d1c-470">将本地计算机的工作簿返回到服务器，并将本地工作簿设置为只读，以使它不能进行本地编辑。</span><span class="sxs-lookup"><span data-stu-id="18d1c-470">Returns a workbook from a local computer to a server, and sets the local workbook to read-only so that it cannot be edited locally.</span></span> <span data-ttu-id="18d1c-471">调用此方法会关闭工作簿。</span><span class="sxs-lookup"><span data-stu-id="18d1c-471">Calling this method closes the workbook.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a><span data-ttu-id="18d1c-472">可选参数</span><span class="sxs-lookup"><span data-stu-id="18d1c-472">Optional Parameters</span></span>  
 <span data-ttu-id="18d1c-473">可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。</span><span class="sxs-lookup"><span data-stu-id="18d1c-473">For information on optional parameters, see [Optional Parameters in Office Solutions](/visualstudio/vsto/optional-parameters-in-office-solutions).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18d1c-474">下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.CanCheckIn%2A>方法来确定 Microsoft Office Excel 可以签入到服务器的当前工作簿。</span><span class="sxs-lookup"><span data-stu-id="18d1c-474">The following code example uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.CanCheckIn%2A> method to determine whether Microsoft Office Excel can check in the current workbook to a server.</span></span> <span data-ttu-id="18d1c-475">如果可以签入工作簿，则该示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.CheckIn%2A>方法来保存修订并签入当前工作簿。</span><span class="sxs-lookup"><span data-stu-id="18d1c-475">If the workbook can be checked in, then the example uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.CheckIn%2A> method to save revisions and check in the current workbook.</span></span>  
  
 <span data-ttu-id="18d1c-476">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-476">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#104](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#104)]
 [!code-vb[Trin_ExcelWorkBook#104](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#104)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckInWithVersion">
      <MemberSignature Language="C#" Value="public void CheckInWithVersion (object saveChanges, object comments, object makePublic, object versionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CheckInWithVersion(object saveChanges, object comments, object makePublic, object versionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.CheckInWithVersion(System.Object,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="saveChanges" Type="System.Object" />
        <Parameter Name="comments" Type="System.Object" />
        <Parameter Name="makePublic" Type="System.Object" />
        <Parameter Name="versionType" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="saveChanges"><span data-ttu-id="18d1c-477">如果为 <see langword="true" />，则保存更改并签入文档；如果为 <see langword="false" />，则使文档恢复签入状态而不保存修订。</span><span class="sxs-lookup"><span data-stu-id="18d1c-477"><see langword="true" /> to save changes and check in the document; <see langword="false" /> to return the document to a checked-in state without saving revisions.</span></span></param>
        <param name="comments"><span data-ttu-id="18d1c-478">如果为 <see langword="true" />，则启用签入注释；如果为 false，则在签入工作簿时丢弃注释。</span><span class="sxs-lookup"><span data-stu-id="18d1c-478"><see langword="true" /> to enable check-in comments; false to check in the workbook without comments.</span></span> <span data-ttu-id="18d1c-479">此参数仅当 <c>SaveChanges</c> 为 <see langword="true" /> 时才应用。</span><span class="sxs-lookup"><span data-stu-id="18d1c-479">This parameter applies only if <c>SaveChanges</c> is <see langword="true" />.</span></span></param>
        <param name="makePublic"><span data-ttu-id="18d1c-480">如果为 <see langword="true" />，则允许用户在工作簿签入后发布该工作簿。</span><span class="sxs-lookup"><span data-stu-id="18d1c-480"><see langword="true" /> to enable the user to publish the workbook after it has been checked in.</span></span> <span data-ttu-id="18d1c-481">这会提交工作簿供审批，审批过程最终会生成将发布给具有工作簿只读权限的用户的工作簿版本（仅当 <c>SaveChanges</c> 为 <see langword="true" /> 时才会如此）。</span><span class="sxs-lookup"><span data-stu-id="18d1c-481">This submits the workbook for the approval process, which can eventually result in a version of the workbook being published to users with read-only rights to the workbook (applies only if <c>SaveChanges</c> equals <see langword="true" />).</span></span></param>
        <param name="versionType"><span data-ttu-id="18d1c-482">指定文档的版本信息。</span><span class="sxs-lookup"><span data-stu-id="18d1c-482">Specifies versioning information for the document.</span></span></param>
        <summary><span data-ttu-id="18d1c-483">将本地计算机中的工作簿发送到服务器，并将本地工作簿设置为只读，以使它不能进行本地编辑。</span><span class="sxs-lookup"><span data-stu-id="18d1c-483">Sends the workbook from the local computer to a server, and sets the local workbook to read-only so that it cannot be edited locally.</span></span> <span data-ttu-id="18d1c-484">调用此方法会关闭工作簿。</span><span class="sxs-lookup"><span data-stu-id="18d1c-484">Calling this method closes the workbook.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a><span data-ttu-id="18d1c-485">可选参数</span><span class="sxs-lookup"><span data-stu-id="18d1c-485">Optional Parameters</span></span>  
 <span data-ttu-id="18d1c-486">可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。</span><span class="sxs-lookup"><span data-stu-id="18d1c-486">For information on optional parameters, see [Optional Parameters in Office Solutions](/visualstudio/vsto/optional-parameters-in-office-solutions).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18d1c-487">下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.CanCheckIn%2A>方法，以确定是否已在 Microsoft Office SharePoint Portal Server 上存储的文档。</span><span class="sxs-lookup"><span data-stu-id="18d1c-487">The following code example uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.CanCheckIn%2A> method to determine whether the document has been stored on a Microsoft Office SharePoint Portal Server.</span></span> <span data-ttu-id="18d1c-488">如果已在服务器上存储的文档，该示例将调用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.CheckInWithVersion%2A>方法来检查指定的注释和版本号，以及文档中将更改保存到的服务器位置，并提交审批过程的文档。</span><span class="sxs-lookup"><span data-stu-id="18d1c-488">If the document has been stored on a server, the example calls the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.CheckInWithVersion%2A> method to check in the document along with the specified comments and version number, save changes to the server location, and submit the document for the approval process.</span></span>  
  
 <span data-ttu-id="18d1c-489">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-489">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkbook_Additional#2](~/snippets/csharp/VS_Snippets_OfficeSP/trin_excelworkbook_additional/cs/ThisWorkbook.cs#2)]
 [!code-vb[Trin_ExcelWorkbook_Additional#2](~/snippets/visualbasic/VS_Snippets_OfficeSP/trin_excelworkbook_additional/vb/ThisWorkbook.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close (object saveChanges, object filename, object routeWorkbook);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close(object saveChanges, object filename, object routeWorkbook) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.Close(System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="saveChanges" Type="System.Object" />
        <Parameter Name="filename" Type="System.Object" />
        <Parameter Name="routeWorkbook" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="saveChanges"><span data-ttu-id="18d1c-490">如果没有对工作簿进行更改，则忽略此参数。</span><span class="sxs-lookup"><span data-stu-id="18d1c-490">If there are no changes to the workbook, this argument is ignored.</span></span> <span data-ttu-id="18d1c-491">如果对工作簿进行了更改且工作簿显示在其他打开的窗口中，则忽略此参数。</span><span class="sxs-lookup"><span data-stu-id="18d1c-491">If there are changes to the workbook and the workbook appears in other open windows, this argument is ignored.</span></span> <span data-ttu-id="18d1c-492">如果对工作簿进行了更改，但工作簿没有显示在任何其他打开的窗口中，则此参数指定更改是否应保存（如下面的列表所示）。</span><span class="sxs-lookup"><span data-stu-id="18d1c-492">If there are changes to the workbook but the workbook does not appear in any other open windows, this argument specifies whether changes should be saved, as shown in the following list.</span></span>  
  
 <span data-ttu-id="18d1c-493"><see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-493"><see langword="true" />.</span></span> <span data-ttu-id="18d1c-494">保存对工作簿所做的更改。</span><span class="sxs-lookup"><span data-stu-id="18d1c-494">Saves the changes to the workbook.</span></span> <span data-ttu-id="18d1c-495">如果工作簿还没有关联文件名，则使用 <c>FileName</c>。</span><span class="sxs-lookup"><span data-stu-id="18d1c-495">If there is not yet a file name associated with the workbook, then <c>FileName</c> is used.</span></span> <span data-ttu-id="18d1c-496">如果省略了 <c>FileName</c>，则要求用户提供文件名。</span><span class="sxs-lookup"><span data-stu-id="18d1c-496">If <c>FileName</c> is omitted, the user is asked to supply a file name.</span></span>  
  
 <span data-ttu-id="18d1c-497"><see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-497"><see langword="false" />.</span></span> <span data-ttu-id="18d1c-498">不保存对工作簿所做的更改。</span><span class="sxs-lookup"><span data-stu-id="18d1c-498">Does not save the changes to the workbook.</span></span>  
  
<span data-ttu-id="18d1c-499">省略。</span><span class="sxs-lookup"><span data-stu-id="18d1c-499">Omitted.</span></span> <span data-ttu-id="18d1c-500">显示一个对话框，询问用户是否保存更改。</span><span class="sxs-lookup"><span data-stu-id="18d1c-500">Displays a dialog box asking the user whether or not to save changes.</span></span></param>
        <param name="filename"><span data-ttu-id="18d1c-501">使用此文件名保存更改。</span><span class="sxs-lookup"><span data-stu-id="18d1c-501">Save changes under this file name.</span></span></param>
        <param name="routeWorkbook"><span data-ttu-id="18d1c-502">如果工作簿不需要传送给下一个收件人（如果该工作簿没有传送名单或已传送），则忽略此参数。</span><span class="sxs-lookup"><span data-stu-id="18d1c-502">If the workbook does not need to be routed to the next recipient (if it has no routing slip or has already been routed), this argument is ignored.</span></span> <span data-ttu-id="18d1c-503">否则，Microsoft Office Excel 传送工作簿，如下面的列表所示。</span><span class="sxs-lookup"><span data-stu-id="18d1c-503">Otherwise, Microsoft Office Excel routes the workbook as shown in the following list.</span></span>  
  
 <span data-ttu-id="18d1c-504"><see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-504"><see langword="true" />.</span></span> <span data-ttu-id="18d1c-505">将工作簿发送给下一个收件人。</span><span class="sxs-lookup"><span data-stu-id="18d1c-505">Sends the workbook to the next recipient.</span></span>  
  
 <span data-ttu-id="18d1c-506"><see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-506"><see langword="false" />.</span></span> <span data-ttu-id="18d1c-507">不发送工作簿。</span><span class="sxs-lookup"><span data-stu-id="18d1c-507">Does not send the workbook.</span></span>  
  
<span data-ttu-id="18d1c-508">省略。</span><span class="sxs-lookup"><span data-stu-id="18d1c-508">Omitted.</span></span> <span data-ttu-id="18d1c-509">显示一个对话框，询问用户是否应发送工作簿。</span><span class="sxs-lookup"><span data-stu-id="18d1c-509">Displays a dialog box asking the user whether the workbook should be sent.</span></span></param>
        <summary><span data-ttu-id="18d1c-510">关闭工作簿。</span><span class="sxs-lookup"><span data-stu-id="18d1c-510">Closes the workbook.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-511">关闭工作簿使用此方法不在工作簿中运行任何 Auto_Close 宏。</span><span class="sxs-lookup"><span data-stu-id="18d1c-511">Closing a workbook using this method does not run any Auto_Close macros in the workbook.</span></span> <span data-ttu-id="18d1c-512">使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.RunAutoMacros%2A>方法来运行宏。</span><span class="sxs-lookup"><span data-stu-id="18d1c-512">Use the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.RunAutoMacros%2A> method to run the macros.</span></span>  
  
## <a name="optional-parameters"></a><span data-ttu-id="18d1c-513">可选参数</span><span class="sxs-lookup"><span data-stu-id="18d1c-513">Optional Parameters</span></span>  
 <span data-ttu-id="18d1c-514">可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。</span><span class="sxs-lookup"><span data-stu-id="18d1c-514">For information on optional parameters, see [Optional Parameters in Office Solutions](/visualstudio/vsto/optional-parameters-in-office-solutions).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18d1c-515">下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Close%2A>方法关闭当前工作簿而不保存任何更改。</span><span class="sxs-lookup"><span data-stu-id="18d1c-515">The following code example uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.Close%2A> method to close the current workbook without saving any changes.</span></span>  
  
 <span data-ttu-id="18d1c-516">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-516">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#105](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#105)]
 [!code-vb[Trin_ExcelWorkBook#105](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#105)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CodeName">
      <MemberSignature Language="C#" Value="public string CodeName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CodeName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.CodeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Colors">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Tools.Excel.Workbook_ColorsType Colors { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Tools.Excel.Workbook_ColorsType Colors" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Colors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Tools.Excel.Workbook_ColorsType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-517">获取或设置工作簿的调色板中的颜色。</span><span class="sxs-lookup"><span data-stu-id="18d1c-517">Gets or sets colors in the palette for the workbook.</span></span></summary>
        <value><span data-ttu-id="18d1c-518">工作簿的调色板中的一个 RGB 颜色值，或一个包含工作簿调色板中所有 56 个 RGB 颜色值的数组。</span><span class="sxs-lookup"><span data-stu-id="18d1c-518">An RGB color value in the color palette for the workbook, or an array that contains all 56 RGB color values in the color palette for the workbook.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-519"><xref:Microsoft.Office.Tools.Excel.WorkbookBase.Colors%2A>属性可用于以下参数。</span><span class="sxs-lookup"><span data-stu-id="18d1c-519">The <xref:Microsoft.Office.Tools.Excel.WorkbookBase.Colors%2A> property can be used with the following parameter.</span></span>  
  
|<span data-ttu-id="18d1c-520">参数</span><span class="sxs-lookup"><span data-stu-id="18d1c-520">Parameter</span></span>|<span data-ttu-id="18d1c-521">描述</span><span class="sxs-lookup"><span data-stu-id="18d1c-521">Description</span></span>|  
|---------------|-----------------|  
|`Index`|<span data-ttu-id="18d1c-522">索引数 （从 1 到 56) 工作簿调色板中的颜色。</span><span class="sxs-lookup"><span data-stu-id="18d1c-522">The index number of a color in the workbook color palette (from 1 to 56).</span></span> <span data-ttu-id="18d1c-523">如果未指定此参数，此属性将返回包含所有 56 种颜色调色板中的数组。</span><span class="sxs-lookup"><span data-stu-id="18d1c-523">If this argument is not specified, this property returns an array that contains all 56 of the colors in the palette.</span></span>|  
  
 <span data-ttu-id="18d1c-524">如果尝试使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Colors%2A>而无需指定任何参数，<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Colors%2A>将获取<xref:Microsoft.Office.Tools.Excel.Workbook_ColorsType>对象属于的 Office 开发 Visual Studio 基础结构中的工具，但不可在代码中直接使用。</span><span class="sxs-lookup"><span data-stu-id="18d1c-524">If you attempt to use <xref:Microsoft.Office.Tools.Excel.WorkbookBase.Colors%2A> without specifying any parameters, <xref:Microsoft.Office.Tools.Excel.WorkbookBase.Colors%2A> will get a <xref:Microsoft.Office.Tools.Excel.Workbook_ColorsType> object that is part of the Office development tools in Visual Studio infrastructure and is not intended to be used directly from your code.</span></span>  
  
 <span data-ttu-id="18d1c-525">工作簿调色板有 56 条目，每个所表示的 RGB 值。</span><span class="sxs-lookup"><span data-stu-id="18d1c-525">The workbook palette has 56 entries, each represented by an RGB value.</span></span>  
  
## <a name="optional-parameters"></a><span data-ttu-id="18d1c-526">可选参数</span><span class="sxs-lookup"><span data-stu-id="18d1c-526">Optional Parameters</span></span>  
 <span data-ttu-id="18d1c-527">可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。</span><span class="sxs-lookup"><span data-stu-id="18d1c-527">For information on optional parameters, see [Optional Parameters in Office Solutions](/visualstudio/vsto/optional-parameters-in-office-solutions).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18d1c-528">下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Colors%2A>属性设置在工作簿的调色板中为蓝色，第一种颜色，然后以编程方式显示 Microsoft Office Excel**调色板**对话框以验证此已更改。</span><span class="sxs-lookup"><span data-stu-id="18d1c-528">The following code example uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.Colors%2A> property to set the first color in the workbook's color palette to blue, and then programmatically displays the Microsoft Office Excel **Color Palette** dialog to verify that this change was made.</span></span>  
  
 <span data-ttu-id="18d1c-529">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-529">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#11](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#11)]
 [!code-vb[Trin_ExcelWorkBook#11](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandBars">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Core.CommandBars CommandBars { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Core.CommandBars CommandBars" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.CommandBars" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Core.CommandBars</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-530">获取一个 <c>Microsoft.Office.Core.CommandBars</c> 对象，该对象表示 Microsoft Office Excel 命令栏。</span><span class="sxs-lookup"><span data-stu-id="18d1c-530">Gets a <c>Microsoft.Office.Core.CommandBars</c> object that represents the Microsoft Office Excel command bars.</span></span></summary>
        <value><span data-ttu-id="18d1c-531">一个<c>Microsoft.Office.Core.CommandBars</c>对象，表示 Microsoft Office Excel 命令栏。</span><span class="sxs-lookup"><span data-stu-id="18d1c-531">A <c>Microsoft.Office.Core.CommandBars</c> object that represents the Microsoft Office Excel command bars.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-532">当一个工作簿是嵌入到另一个应用程序和由用户激活通过双击该工作簿时，使用与工作簿对象的属性返回 Excel 命令栏中其他应用程序可用的集。</span><span class="sxs-lookup"><span data-stu-id="18d1c-532">When a workbook is embedded in another application and activated by the user by double-clicking the workbook, using the property with a Workbook object returns the set of Excel command bars available within the other application.</span></span> <span data-ttu-id="18d1c-533">在所有其他情况下，使用此属性的工作簿对象返回`null`。</span><span class="sxs-lookup"><span data-stu-id="18d1c-533">At all other times, using this property with a Workbook object returns `null`.</span></span> <span data-ttu-id="18d1c-534">没有返回附加到工作簿的命令栏组无法通过编程方式。</span><span class="sxs-lookup"><span data-stu-id="18d1c-534">There is no programmatic way to return the set of command bars attached to a workbook.</span></span> <span data-ttu-id="18d1c-535">命令栏是与应用程序并不是工作簿相关联。</span><span class="sxs-lookup"><span data-stu-id="18d1c-535">Command bars are associated with the application and not the workbook.</span></span> <span data-ttu-id="18d1c-536">此属性存在针对该工作簿，以便 Excel 不是应用程序时，可以访问 Excel 应用程序命令栏。</span><span class="sxs-lookup"><span data-stu-id="18d1c-536">This property exists on the workbook so you can access Excel application command bars when Excel is not the application.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18d1c-537">下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.CommandBars%2A>要删除所有自定义命令栏不可见的属性。</span><span class="sxs-lookup"><span data-stu-id="18d1c-537">The following code example uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.CommandBars%2A> property to delete all custom command bars that are not visible.</span></span> <span data-ttu-id="18d1c-538">此示例假定当前工作簿嵌入到另一个应用程序。</span><span class="sxs-lookup"><span data-stu-id="18d1c-538">This example assumes that the current workbook is embedded in another application.</span></span>  
  
 <span data-ttu-id="18d1c-539">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-539">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#12](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#12)]
 [!code-vb[Trin_ExcelWorkBook#12](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Comments">
      <MemberSignature Language="C#" Value="public string Comments { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Comments" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Comments" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConflictResolution">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlSaveConflictResolution ConflictResolution { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlSaveConflictResolution ConflictResolution" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.ConflictResolution" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlSaveConflictResolution</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-540">获取或设置每次更新共享工作簿时解决冲突的方式。</span><span class="sxs-lookup"><span data-stu-id="18d1c-540">Gets or sets the way conflicts are to be resolved whenever a shared workbook is updated.</span></span></summary>
        <value><span data-ttu-id="18d1c-541"><see cref="T:Microsoft.Office.Interop.Excel.XlSaveConflictResolution" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="18d1c-541">One of the <see cref="T:Microsoft.Office.Interop.Excel.XlSaveConflictResolution" /> values.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Connections">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Connections Connections { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Connections Connections" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Connections" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Connections</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-542">获取工作簿和数据源之间的连接的集合。</span><span class="sxs-lookup"><span data-stu-id="18d1c-542">Gets the collection of connections between the workbook and a data source.</span></span></summary>
        <value><span data-ttu-id="18d1c-543">一个<c>Microsoft.Office.Interop.Excel.Connections</c>集合，其中包含工作簿和数据源之间的连接。</span><span class="sxs-lookup"><span data-stu-id="18d1c-543">A <c>Microsoft.Office.Interop.Excel.Connections</c> collection that contains the connections between the workbook and a data source.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-544">下面的代码示例将新的数据连接添加到指定的 CSV 文件。</span><span class="sxs-lookup"><span data-stu-id="18d1c-544">The following code example adds a new data connection to the specified CSV file.</span></span> <span data-ttu-id="18d1c-545">接下来，示例循环访问工作簿中存在的所有连接，并显示名称、 类型和每个连接的说明。</span><span class="sxs-lookup"><span data-stu-id="18d1c-545">Next, the example iterates through all connections that exist in the workbook and displays the name, type, and description of each connection.</span></span> <span data-ttu-id="18d1c-546">此示例需要名 SalesData.csv 为驱动器 c。 根处的 CSV 文件CSV 文件应包含逗号分隔的数据。</span><span class="sxs-lookup"><span data-stu-id="18d1c-546">This example requires a CSV file named SalesData.csv at the root of drive C. The CSV file should contain comma-separated data.</span></span> <span data-ttu-id="18d1c-547">当您运行此示例中时，启动 Excel**文本导入向导**; 按照此向导创建数据连接到 CSV 文件中的步骤。</span><span class="sxs-lookup"><span data-stu-id="18d1c-547">When you run this example, Excel starts the **Text Import Wizard**; follow the steps in this wizard to create the data connection to the CSV file.</span></span>  
  
 <span data-ttu-id="18d1c-548">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-548">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_Excelworkbook_Additional#24](~/snippets/csharp/VS_Snippets_OfficeSP/trin_excelworkbook_additional/cs/ThisWorkbook.cs#24)]
 [!code-vb[Trin_Excelworkbook_Additional#24](~/snippets/visualbasic/VS_Snippets_OfficeSP/trin_excelworkbook_additional/vb/ThisWorkbook.vb#24)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConnectionsDisabled">
      <MemberSignature Language="C#" Value="public bool ConnectionsDisabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ConnectionsDisabled" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.ConnectionsDisabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-549">获取一个值，该值指示是否在工作簿中禁用外部连接或链接。</span><span class="sxs-lookup"><span data-stu-id="18d1c-549">Gets a value that indicates whether to disable the external connections or links in the workbook.</span></span></summary>
        <value><span data-ttu-id="18d1c-550"><see langword="true" /> 指示在工作簿中禁用外部连接或链接；<see langword="false" /> 指示不禁用。</span><span class="sxs-lookup"><span data-stu-id="18d1c-550"><see langword="true" /> to disable the external connections or links in the workbook; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Container">
      <MemberSignature Language="C#" Value="public object Container { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Container" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Container" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-551">获取表示工作簿的容器应用程序的对象。</span><span class="sxs-lookup"><span data-stu-id="18d1c-551">Gets the object that represents the container application for the workbook.</span></span></summary>
        <value><span data-ttu-id="18d1c-552">表示工作簿的容器应用程序的对象。</span><span class="sxs-lookup"><span data-stu-id="18d1c-552">The object that represents the container application for the workbook.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-553">此属性提供了一种方法访问容器应用程序的对象模型，如果主机应用程序如 Microsoft Internet Explorer 中打开的 Excel 工作簿。</span><span class="sxs-lookup"><span data-stu-id="18d1c-553">This property provides a way to access the object model of the container application if an Excel workbook is opened within a host application such as Microsoft Internet Explorer.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentTypeProperties">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Core.MetaProperties ContentTypeProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Core.MetaProperties ContentTypeProperties" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.ContentTypeProperties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Core.MetaProperties</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-554">获取描述工作簿中存储的元数据的属性的集合。</span><span class="sxs-lookup"><span data-stu-id="18d1c-554">Gets a collection of properties that describe metadata that is stored in the workbook.</span></span></summary>
        <value><span data-ttu-id="18d1c-555">一个<c>Microsoft.Office.Core.MetaProperties</c>集合，其中包含描述存储在工作簿的元数据的属性。</span><span class="sxs-lookup"><span data-stu-id="18d1c-555">A <c>Microsoft.Office.Core.MetaProperties</c> collection that contains properties that describe metadata that is stored in the workbook.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-556">下面的代码示例检索与当前工作簿关联的元数据。</span><span class="sxs-lookup"><span data-stu-id="18d1c-556">The following code example retrieves the metadata that is associated with the current workbook.</span></span> <span data-ttu-id="18d1c-557">该示例显示了跟的名称和每个属性的值找到的元数据属性的总数。</span><span class="sxs-lookup"><span data-stu-id="18d1c-557">The example shows the total number of metadata properties found followed by the name and value of each property.</span></span> <span data-ttu-id="18d1c-558">若要运行此示例中，必须将该工作簿发布到 Microsoft Office SharePoint Server 文档库，并为此工作簿提供自定义元数据属性。</span><span class="sxs-lookup"><span data-stu-id="18d1c-558">To run this example, you must publish the workbook to a Microsoft Office SharePoint Server document library and provide a custom metadata property for this workbook.</span></span> <span data-ttu-id="18d1c-559">例如，您可以在其中发布工作簿的文档库中添加列。</span><span class="sxs-lookup"><span data-stu-id="18d1c-559">For example, you can add a column in the document library where the workbook is published.</span></span> <span data-ttu-id="18d1c-560">有关内容类型属性的详细信息，请参阅 Microsoft Office SharePoint Server 文档。</span><span class="sxs-lookup"><span data-stu-id="18d1c-560">For more information about content type properties, please refer to the Microsoft Office SharePoint Server documentation.</span></span>  
  
 <span data-ttu-id="18d1c-561">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-561">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_Excelworkbook_Additional#25](~/snippets/csharp/VS_Snippets_OfficeSP/trin_excelworkbook_additional/cs/ThisWorkbook.cs#25)]
 [!code-vb[Trin_Excelworkbook_Additional#25](~/snippets/visualbasic/VS_Snippets_OfficeSP/trin_excelworkbook_additional/vb/ThisWorkbook.vb#25)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateBackup">
      <MemberSignature Language="C#" Value="public bool CreateBackup { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CreateBackup" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.CreateBackup" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-562">获取一个值，该值指示保存此文件时是否创建备份文件。</span><span class="sxs-lookup"><span data-stu-id="18d1c-562">Gets a value that indicates whether a backup file is created when this file is saved.</span></span></summary>
        <value><span data-ttu-id="18d1c-563">如果保存此文件时创建备份文件，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-563"><see langword="true" /> if a backup file is created when this file is saved; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRibbonExtensibilityObject">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.Office.Core.IRibbonExtensibility CreateRibbonExtensibilityObject ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.Office.Core.IRibbonExtensibility CreateRibbonExtensibilityObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.CreateRibbonExtensibilityObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Core.IRibbonExtensibility</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="18d1c-564">返回实现 <c>Microsoft.Office.Core.IRibbonExtensibility</c> 接口的对象。</span><span class="sxs-lookup"><span data-stu-id="18d1c-564">Returns an object that implements the <c>Microsoft.Office.Core.IRibbonExtensibility</c> interface.</span></span></summary>
        <returns><span data-ttu-id="18d1c-565">实现 <c>Microsoft.Office.Core.IRibbonExtensibility</c> 接口的对象。</span><span class="sxs-lookup"><span data-stu-id="18d1c-565">An object that implements the <c>Microsoft.Office.Core.IRibbonExtensibility</c> interface.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-566">重写此方法返回的实现`Microsoft.Office.Core.IRibbonExtensibility`接口。</span><span class="sxs-lookup"><span data-stu-id="18d1c-566">Override this method to return an implementation of the `Microsoft.Office.Core.IRibbonExtensibility` interface.</span></span> <span data-ttu-id="18d1c-567">如果你的项目中有多个功能区，可以指定运行时功能区上显示。</span><span class="sxs-lookup"><span data-stu-id="18d1c-567">If you have multiple Ribbons in your project, you can specify which Ribbons to display at run time.</span></span>  
  
 <span data-ttu-id="18d1c-568">无需重写此方法返回通过使用添加到项目的功能区**功能区 （可视化设计器）** 项模板。</span><span class="sxs-lookup"><span data-stu-id="18d1c-568">You do not have to override this method to return Ribbons that you add to the project by using the **Ribbon (Visual Designer)** item template.</span></span> <span data-ttu-id="18d1c-569">默认情况下，此方法返回<xref:Microsoft.Office.Tools.Ribbon.RibbonManager>对象，表示所有**功能区 （可视化设计器）** 项目中的项。</span><span class="sxs-lookup"><span data-stu-id="18d1c-569">By default, this method returns a <xref:Microsoft.Office.Tools.Ribbon.RibbonManager> object that represents all **Ribbon (Visual Designer)** items in the project.</span></span> <span data-ttu-id="18d1c-570">有关详细信息，请参阅[功能区概述](/visualstudio/vsto/ribbon-overview)。</span><span class="sxs-lookup"><span data-stu-id="18d1c-570">For more information, see [Ribbon Overview](/visualstudio/vsto/ribbon-overview).</span></span>  
  
 <span data-ttu-id="18d1c-571">必须重写<xref:Microsoft.Office.Tools.Excel.WorkbookBase.CreateRibbonExtensibilityObject%2A>或<xref:Microsoft.Office.Tools.Excel.WorkbookBase.RequestService%2A>方法来返回功能区中的项目中使用添加**功能区 (XML)** 项模板。</span><span class="sxs-lookup"><span data-stu-id="18d1c-571">You must override the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.CreateRibbonExtensibilityObject%2A> or <xref:Microsoft.Office.Tools.Excel.WorkbookBase.RequestService%2A> method to return Ribbons in your project that you add by using the **Ribbon (XML)** item template.</span></span> <span data-ttu-id="18d1c-572">详细了解如何重写<xref:Microsoft.Office.Tools.Excel.WorkbookBase.CreateRibbonExtensibilityObject%2A>方法，请参阅[功能区 XML](/visualstudio/vsto/ribbon-xml)。</span><span class="sxs-lookup"><span data-stu-id="18d1c-572">For more information about how to override the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.CreateRibbonExtensibilityObject%2A> method, see [Ribbon XML](/visualstudio/vsto/ribbon-xml).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRibbonObjects">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.Office.Tools.Ribbon.IRibbonExtension[] CreateRibbonObjects ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.Office.Tools.Ribbon.IRibbonExtension[] CreateRibbonObjects() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.CreateRibbonObjects" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Tools.Ribbon.IRibbonExtension[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="18d1c-573">将 <see cref="T:Microsoft.Office.Tools.Ribbon.OfficeRibbon" /> 对象的数组返回给 <see cref="M:Microsoft.Office.Tools.Excel.WorkbookBase.CreateRibbonExtensibilityObject" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="18d1c-573">Returns an array of <see cref="T:Microsoft.Office.Tools.Ribbon.OfficeRibbon" /> objects to the <see cref="M:Microsoft.Office.Tools.Excel.WorkbookBase.CreateRibbonExtensibilityObject" /> method.</span></span></summary>
        <returns><span data-ttu-id="18d1c-574">一个 <see cref="T:Microsoft.Office.Tools.Ribbon.OfficeRibbon" /> 对象数组。</span><span class="sxs-lookup"><span data-stu-id="18d1c-574">An array of <see cref="T:Microsoft.Office.Tools.Ribbon.OfficeRibbon" /> objects.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-575">默认实现调用此方法<xref:Microsoft.Office.Tools.Excel.WorkbookBase.CreateRibbonExtensibilityObject%2A>方法<xref:Microsoft.Office.Tools.Excel.WorkbookBase>类时该项目包含**功能区 （可视化设计器）** 项。</span><span class="sxs-lookup"><span data-stu-id="18d1c-575">This method is called by the default implementation of the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.CreateRibbonExtensibilityObject%2A> method of the <xref:Microsoft.Office.Tools.Excel.WorkbookBase> class when the project contains **Ribbon (Visual Designer)** items.</span></span>  
  
 <span data-ttu-id="18d1c-576">如果你想要指定功能区显示在运行时，重写此方法。</span><span class="sxs-lookup"><span data-stu-id="18d1c-576">Override this method if you want to specify which Ribbons to display at run time.</span></span>  
  
 <span data-ttu-id="18d1c-577">此外可以重写<xref:Microsoft.Office.Tools.Excel.WorkbookBase.CreateRibbonExtensibilityObject%2A>方法，以指定运行时功能区上显示。</span><span class="sxs-lookup"><span data-stu-id="18d1c-577">You can also override the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.CreateRibbonExtensibilityObject%2A> method to specify which Ribbons to display at run time.</span></span> <span data-ttu-id="18d1c-578">有关详细信息，请参阅[功能区概述](/visualstudio/vsto/ribbon-overview)。</span><span class="sxs-lookup"><span data-stu-id="18d1c-578">For more information, see [Ribbon Overview](/visualstudio/vsto/ribbon-overview).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Creator">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlCreator Creator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlCreator Creator" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Creator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlCreator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-579">获取在其中创建工作簿的应用程序。</span><span class="sxs-lookup"><span data-stu-id="18d1c-579">Gets the application in which the workbook was created.</span></span></summary>
        <value><span data-ttu-id="18d1c-580"><see cref="T:Microsoft.Office.Interop.Excel.XlCreator" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="18d1c-580">One of the <see cref="T:Microsoft.Office.Interop.Excel.XlCreator" /> values.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-581">如果在 Microsoft Office Excel 中创建对象时，此属性返回字符串 XCEL，这与十六进制数 5843454c。</span><span class="sxs-lookup"><span data-stu-id="18d1c-581">If the object was created in Microsoft Office Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C.</span></span>  
  
 <span data-ttu-id="18d1c-582">此属性用于在 Excel 中使用的 Macintosh 上，其中每个应用程序具有四个字符创建者代码。</span><span class="sxs-lookup"><span data-stu-id="18d1c-582">This property is designed to be used in Excel for the Macintosh, where each application has a four-character creator code.</span></span> <span data-ttu-id="18d1c-583">例如，Excel 具有 XCEL 的创建者代码。</span><span class="sxs-lookup"><span data-stu-id="18d1c-583">For example, Excel has the creator code XCEL.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18d1c-584">下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Creator%2A>属性来显示是否在 Microsoft Office Excel 中创建的当前工作簿。</span><span class="sxs-lookup"><span data-stu-id="18d1c-584">The following code example uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.Creator%2A> property to display whether the current workbook was created in Microsoft Office Excel.</span></span>  
  
 <span data-ttu-id="18d1c-585">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-585">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#16](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#16)]
 [!code-vb[Trin_ExcelWorkBook#16](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#16)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomDocumentProperties">
      <MemberSignature Language="C#" Value="public object CustomDocumentProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object CustomDocumentProperties" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.CustomDocumentProperties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-586">获取一个 <c>Microsoft.Office.Core.DocumentProperties</c> 集合，该集合表示工作簿的所有自定义文档属性。</span><span class="sxs-lookup"><span data-stu-id="18d1c-586">Gets a <c>Microsoft.Office.Core.DocumentProperties</c> collection that represents all the custom document properties for the workbook.</span></span></summary>
        <value><span data-ttu-id="18d1c-587">一个<c>Microsoft.Office.Core.DocumentProperties</c>集合，表示工作簿的所有自定义文档属性。</span><span class="sxs-lookup"><span data-stu-id="18d1c-587">A <c>Microsoft.Office.Core.DocumentProperties</c> collection that represents all the custom document properties for the workbook.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-588">此属性返回自定义文档属性的整个的集合。</span><span class="sxs-lookup"><span data-stu-id="18d1c-588">This property returns the entire collection of custom document properties.</span></span> <span data-ttu-id="18d1c-589">使用`Microsoft.Office.Core.DocumentProperties.Item(System.Object)`属性以返回单个成员的集合 (`Microsoft.Office.Core.DocumentProperties`对象) 只需指定属性的名称或 （作为一个数字） 的集合索引。</span><span class="sxs-lookup"><span data-stu-id="18d1c-589">Use the `Microsoft.Office.Core.DocumentProperties.Item(System.Object)` property to return a single member of the collection (a `Microsoft.Office.Core.DocumentProperties` object) by specifying either the name of the property or the collection index (as a number).</span></span>  
  
 <span data-ttu-id="18d1c-590">使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.BuiltinDocumentProperties%2A>属性返回的内置文档属性的集合。</span><span class="sxs-lookup"><span data-stu-id="18d1c-590">Use the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.BuiltinDocumentProperties%2A> property to return the collection of built-in document properties.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18d1c-591">下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.CustomDocumentProperties%2A>属性来显示所有当前工作簿的自定义文档属性中的 A 列`Sheet1`。</span><span class="sxs-lookup"><span data-stu-id="18d1c-591">The following code example uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.CustomDocumentProperties%2A> property to display all of the custom document properties for the current workbook in column A of worksheet `Sheet1`.</span></span>  
  
 <span data-ttu-id="18d1c-592">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-592">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#17](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#17)]
 [!code-vb[Trin_ExcelWorkBook#17](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomViews">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.CustomViews CustomViews { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.CustomViews CustomViews" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.CustomViews" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.CustomViews</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-593">获取一个 <see cref="T:Microsoft.Office.Interop.Excel.CustomViews" /> 集合，该集合表示工作簿的所有自定义视图。</span><span class="sxs-lookup"><span data-stu-id="18d1c-593">Gets a <see cref="T:Microsoft.Office.Interop.Excel.CustomViews" /> collection that represents all the custom views for the workbook.</span></span></summary>
        <value><span data-ttu-id="18d1c-594"><see cref="T:Microsoft.Office.Interop.Excel.CustomViews" /> 集合，表示工作簿的所有自定义视图。</span><span class="sxs-lookup"><span data-stu-id="18d1c-594">A <see cref="T:Microsoft.Office.Interop.Excel.CustomViews" /> collection that represents all the custom views for the workbook.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-595">下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.CustomViews%2A>若要添加自定义视图的属性名称当前工作簿的"摘要"，然后以编程方式显示**自定义视图**对话框，以说明新的自定义视图的创建.</span><span class="sxs-lookup"><span data-stu-id="18d1c-595">The following code example uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.CustomViews%2A> property to add a custom view named "Summary" to the current workbook, and then programmatically displays the **Custom Views** dialog to demonstrate that the new custom view was created.</span></span>  
  
 <span data-ttu-id="18d1c-596">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-596">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#18](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#18)]
 [!code-vb[Trin_ExcelWorkBook#18](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#18)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomXMLParts">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Core.CustomXMLParts CustomXMLParts { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Core.CustomXMLParts CustomXMLParts" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.CustomXMLParts" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Core.CustomXMLParts</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-597">获取工作簿中的自定义 XML 部件的集合。</span><span class="sxs-lookup"><span data-stu-id="18d1c-597">Gets the collection of custom XML parts in the workbook.</span></span></summary>
        <value><span data-ttu-id="18d1c-598">一个<c>Microsoft.Office.Core.CustomXMLParts</c>集合，包含自定义 XML 部件在工作簿中。</span><span class="sxs-lookup"><span data-stu-id="18d1c-598">A <c>Microsoft.Office.Core.CustomXMLParts</c> collection that contains the custom XML parts in the workbook.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-599">有关自定义 XML 部件的详细信息，请参阅[自定义 XML 部件概述](/visualstudio/vsto/custom-xml-parts-overview)。</span><span class="sxs-lookup"><span data-stu-id="18d1c-599">For more information about custom XML parts, see [Custom XML Parts Overview](/visualstudio/vsto/custom-xml-parts-overview).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18d1c-600">下面的代码示例中将员工数据添加到文档的方法是插入一个新`Microsoft.Office.Core.CustomXMLPart`在`Microsoft.Office.Core.CustomXMLParts`集合。</span><span class="sxs-lookup"><span data-stu-id="18d1c-600">The following code example adds employee data to the document by inserting a new `Microsoft.Office.Core.CustomXMLPart` in the `Microsoft.Office.Core.CustomXMLParts` collection.</span></span> <span data-ttu-id="18d1c-601">该示例然后 XML 部件中检索员工数据，并显示员工姓名和雇用日期`Sheet1`。</span><span class="sxs-lookup"><span data-stu-id="18d1c-601">The example then retrieves employee data from the XML part and displays the employee name and hire date on `Sheet1`.</span></span>  
  
 <span data-ttu-id="18d1c-602">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-602">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_Excelworkbook_Additional#26](~/snippets/csharp/VS_Snippets_OfficeSP/trin_excelworkbook_additional/cs/ThisWorkbook.cs#26)]
 [!code-vb[Trin_Excelworkbook_Additional#26](~/snippets/visualbasic/VS_Snippets_OfficeSP/trin_excelworkbook_additional/vb/ThisWorkbook.vb#26)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataBindings">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ControlBindingsCollection DataBindings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ControlBindingsCollection DataBindings" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.DataBindings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlBindingsCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataHost">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Tools.ICachedDataProvider DataHost { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Tools.ICachedDataProvider DataHost" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.DataHost" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Tools.ICachedDataProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Date1904">
      <MemberSignature Language="C#" Value="public bool Date1904 { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Date1904" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Date1904" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-603">获取或设置一个值，该值指示工作簿是否使用 1904 日期系统。</span><span class="sxs-lookup"><span data-stu-id="18d1c-603">Gets or sets a value that indicates whether the workbook uses the 1904 date system.</span></span></summary>
        <value><span data-ttu-id="18d1c-604">如果工作簿使用 1904 日期系统，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-604"><see langword="true" /> if the workbook uses the 1904 date system; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Deactivate">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_DeactivateEventHandler Deactivate;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_DeactivateEventHandler Deactivate" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.Deactivate" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_DeactivateEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-605">在停用工作簿时发生。</span><span class="sxs-lookup"><span data-stu-id="18d1c-605">Occurs when the workbook is deactivated.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-606">下面的代码示例演示了一个处理程序<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Deactivate>事件。</span><span class="sxs-lookup"><span data-stu-id="18d1c-606">The following code example demonstrates a handler for the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.Deactivate> event.</span></span> <span data-ttu-id="18d1c-607">停用该工作簿后，事件处理程序平铺所有打开的 Microsoft Office Excel 窗口。</span><span class="sxs-lookup"><span data-stu-id="18d1c-607">The event handler tiles all open Microsoft Office Excel windows when the workbook is deactivated.</span></span>  
  
 <span data-ttu-id="18d1c-608">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-608">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#208](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#208)]
 [!code-vb[Trin_ExcelWorkBook#208](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#208)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultPivotTableStyle">
      <MemberSignature Language="C#" Value="public object DefaultPivotTableStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DefaultPivotTableStyle" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.DefaultPivotTableStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-609">获取或设置 <see cref="P:Microsoft.Office.Tools.Excel.WorkbookBase.TableStyles" /> 属性中的表样式，该样式用作工作簿中的数据透视表的默认样式。</span><span class="sxs-lookup"><span data-stu-id="18d1c-609">Gets or sets the table style from the <see cref="P:Microsoft.Office.Tools.Excel.WorkbookBase.TableStyles" /> property that is used as the default style for PivotTable reports in the workbook.</span></span></summary>
        <value><span data-ttu-id="18d1c-610"><see cref="P:Microsoft.Office.Tools.Excel.WorkbookBase.TableStyles" /> 属性中的表样式，该样式用作工作簿中的数据透视表的默认样式。</span><span class="sxs-lookup"><span data-stu-id="18d1c-610">The table style from the <see cref="P:Microsoft.Office.Tools.Excel.WorkbookBase.TableStyles" /> property that is used as the default style for PivotTable reports in the workbook.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-611">下面的代码示例设置到的数据透视表的默认样式**数据透视表样式中等 3**，这是一个在 Excel 中的样式**设计**选项卡中**数据透视表样式**组时选择的数据透视表。</span><span class="sxs-lookup"><span data-stu-id="18d1c-611">The following code example sets the default style of pivot tables to **Pivot Style Medium 3**, which is a style that is available in Excel on the **Design** tab in the **PivotTable Styles** group when a pivot table is selected.</span></span>  
  
 <span data-ttu-id="18d1c-612">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-612">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_Excelworkbook_Additional#34](~/snippets/csharp/VS_Snippets_OfficeSP/trin_excelworkbook_additional/cs/ThisWorkbook.cs#34)]
 [!code-vb[Trin_Excelworkbook_Additional#34](~/snippets/visualbasic/VS_Snippets_OfficeSP/trin_excelworkbook_additional/vb/ThisWorkbook.vb#34)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultSlicerStyle">
      <MemberSignature Language="C#" Value="public object DefaultSlicerStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DefaultSlicerStyle" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.DefaultSlicerStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultTableStyle">
      <MemberSignature Language="C#" Value="public object DefaultTableStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DefaultTableStyle" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.DefaultTableStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-613">获取或设置 <see cref="P:Microsoft.Office.Tools.Excel.WorkbookBase.TableStyles" /> 属性中的表样式，该样式用作工作簿中的表的默认样式。</span><span class="sxs-lookup"><span data-stu-id="18d1c-613">Gets or sets the table style from the <see cref="P:Microsoft.Office.Tools.Excel.WorkbookBase.TableStyles" /> property that is used as the default style for tables in the workbook.</span></span></summary>
        <value><span data-ttu-id="18d1c-614"><see cref="P:Microsoft.Office.Tools.Excel.WorkbookBase.TableStyles" /> 属性中的表样式，该样式用作工作簿中的表的默认样式。</span><span class="sxs-lookup"><span data-stu-id="18d1c-614">The table style from the <see cref="P:Microsoft.Office.Tools.Excel.WorkbookBase.TableStyles" /> property that is used as the default style for tables in the workbook.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-615">下面的代码示例设置到的表的默认样式**表样式深色 11**，这是一个在 Excel 中的样式**设计**选项卡中**表样式**当选择某个表组。</span><span class="sxs-lookup"><span data-stu-id="18d1c-615">The following code example sets the default style of tables to **Table Style Dark 11**, which is a style that is available in Excel on the **Design** tab in the **Table Styles** group when a table is selected.</span></span> <span data-ttu-id="18d1c-616">然后，该示例添加一个表以验证新的表样式。</span><span class="sxs-lookup"><span data-stu-id="18d1c-616">The example then adds a table to verify the new table style.</span></span>  
  
 <span data-ttu-id="18d1c-617">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-617">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_Excelworkbook_Additional#35](~/snippets/csharp/VS_Snippets_OfficeSP/trin_excelworkbook_additional/cs/ThisWorkbook.cs#35)]
 [!code-vb[Trin_Excelworkbook_Additional#35](~/snippets/visualbasic/VS_Snippets_OfficeSP/trin_excelworkbook_additional/vb/ThisWorkbook.vb#35)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteNumberFormat">
      <MemberSignature Language="C#" Value="public void DeleteNumberFormat (string numberFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteNumberFormat(string numberFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.DeleteNumberFormat(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="numberFormat" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="numberFormat"><span data-ttu-id="18d1c-618">指定要删除的数字格式。</span><span class="sxs-lookup"><span data-stu-id="18d1c-618">Names the number format to be deleted.</span></span></param>
        <summary><span data-ttu-id="18d1c-619">从工作簿中删除自定义数字格式。</span><span class="sxs-lookup"><span data-stu-id="18d1c-619">Deletes a custom number format from the workbook.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-620">下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.DeleteNumberFormat%2A>方法来删除自定义数字格式"#.# # #，# #"从当前工作簿。</span><span class="sxs-lookup"><span data-stu-id="18d1c-620">The following code example uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.DeleteNumberFormat%2A> method to delete the custom number format "#.###,##" from the current workbook.</span></span>  
  
 <span data-ttu-id="18d1c-621">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-621">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#106](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#106)]
 [!code-vb[Trin_ExcelWorkBook#106](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#106)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DialogSheets">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Sheets DialogSheets { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Sheets DialogSheets" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.DialogSheets" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Sheets</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayDrawingObjects">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlDisplayDrawingObjects DisplayDrawingObjects { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlDisplayDrawingObjects DisplayDrawingObjects" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.DisplayDrawingObjects" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlDisplayDrawingObjects</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-622">获取或设置形状的显示方式。</span><span class="sxs-lookup"><span data-stu-id="18d1c-622">Gets or sets how shapes are displayed.</span></span></summary>
        <value><span data-ttu-id="18d1c-623">以下 <see cref="T:Microsoft.Office.Interop.Excel.XlDisplayDrawingObjects" /> 值之一：<see cref="F:Microsoft.Office.Interop.Excel.XlDisplayDrawingObjects.xlDisplayShapes" />、<see cref="F:Microsoft.Office.Interop.Excel.XlDisplayDrawingObjects.xlPlaceholders" /> 或 <see cref="F:Microsoft.Office.Interop.Excel.XlDisplayDrawingObjects.xlHide" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-623">One of the following <see cref="T:Microsoft.Office.Interop.Excel.XlDisplayDrawingObjects" /> values: <see cref="F:Microsoft.Office.Interop.Excel.XlDisplayDrawingObjects.xlDisplayShapes" />, <see cref="F:Microsoft.Office.Interop.Excel.XlDisplayDrawingObjects.xlPlaceholders" />, or <see cref="F:Microsoft.Office.Interop.Excel.XlDisplayDrawingObjects.xlHide" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-624">下面的代码示例将圆环图形状添加到工作表`Sheet1`当前工作簿，然后提示用户隐藏绘图对象使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.DisplayDrawingObjects%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="18d1c-624">The following code example adds a doughnut shape to worksheet `Sheet1` of the current workbook, and then prompts the user to hide drawing objects by using the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.DisplayDrawingObjects%2A> property.</span></span> <span data-ttu-id="18d1c-625">如果用户隐藏绘图对象，则圆环图形状将不可见;否则，圆环图形状将可见。</span><span class="sxs-lookup"><span data-stu-id="18d1c-625">If the user hides drawing objects, then the doughnut shape will be invisible; otherwise, the doughnut shape will be visible.</span></span>  
  
 <span data-ttu-id="18d1c-626">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-626">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#18](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#18)]
 [!code-vb[Trin_ExcelWorkBook#18](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#18)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayInkComments">
      <MemberSignature Language="C#" Value="public bool DisplayInkComments { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DisplayInkComments" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.DisplayInkComments" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-627">获取或设置一个值，该值指示工作簿中是否显示墨迹注释。</span><span class="sxs-lookup"><span data-stu-id="18d1c-627">Gets or sets a value that indicates whether ink comments are displayed in the workbook.</span></span></summary>
        <value><span data-ttu-id="18d1c-628">如果工作簿中显示墨迹批注，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-628"><see langword="true" /> if ink comments are displayed in the workbook; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="18d1c-629">释放 <see cref="T:Microsoft.Office.Tools.Excel.WorkbookBase" /> 类的当前实例所使用的所有资源。</span><span class="sxs-lookup"><span data-stu-id="18d1c-629">Releases all resources used by the current instance of the <see cref="T:Microsoft.Office.Tools.Excel.WorkbookBase" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-630">不要调用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Dispose%2A>方法自己。</span><span class="sxs-lookup"><span data-stu-id="18d1c-630">Do not call the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.Dispose%2A> method yourself.</span></span> <span data-ttu-id="18d1c-631">关闭文档级自定义项中的文档时，[!INCLUDE[vsto_runtime](~/includes/vsto-runtime-md.md)]清理使用自定义项的所有资源。</span><span class="sxs-lookup"><span data-stu-id="18d1c-631">When the document in a document-level customization is closed, the [!INCLUDE[vsto_runtime](~/includes/vsto-runtime-md.md)] cleans up all resources used by the customization.</span></span>  
  
 <span data-ttu-id="18d1c-632">有关详细信息<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Dispose%2A>方法，请参阅[清理了非托管资源](http://msdn.microsoft.com/library/a17b0066-71c2-4ba4-9822-8e19332fc213)。</span><span class="sxs-lookup"><span data-stu-id="18d1c-632">For more information about the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.Dispose%2A> method, see [Cleaning Up Unmanaged Resources](http://msdn.microsoft.com/library/a17b0066-71c2-4ba4-9822-8e19332fc213).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Disposed">
      <MemberSignature Language="C#" Value="public event EventHandler Disposed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Disposed" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.Disposed" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DocumentInspectors">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Core.DocumentInspectors DocumentInspectors { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Core.DocumentInspectors DocumentInspectors" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.DocumentInspectors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Core.DocumentInspectors</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-633">获取工作簿的文档检查器模块的集合。</span><span class="sxs-lookup"><span data-stu-id="18d1c-633">Gets the collection of Document Inspector modules for the workbook.</span></span></summary>
        <value><span data-ttu-id="18d1c-634">一个<c>Microsoft.Office.Core.DocumentInspectors</c>集合，其中包含工作簿的文档检查器模块。</span><span class="sxs-lookup"><span data-stu-id="18d1c-634">A <c>Microsoft.Office.Core.DocumentInspectors</c> collection that contains the Document Inspector modules for the workbook.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-635">下面的代码示例循环访问该工作簿中的检查器。</span><span class="sxs-lookup"><span data-stu-id="18d1c-635">The following code example iterates through the inspectors in the workbook.</span></span> <span data-ttu-id="18d1c-636">该代码会检查每个，然后显示一个消息框，显示该检查器的状态和检查结果的名称。</span><span class="sxs-lookup"><span data-stu-id="18d1c-636">The code inspects each one and shows a message box that displays the name of the inspector, and the status and results of the inspection.</span></span>  
  
 <span data-ttu-id="18d1c-637">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-637">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_Excelworkbook_Additional#27](~/snippets/csharp/VS_Snippets_OfficeSP/trin_excelworkbook_additional/cs/ThisWorkbook.cs#27)]
 [!code-vb[Trin_Excelworkbook_Additional#27](~/snippets/visualbasic/VS_Snippets_OfficeSP/trin_excelworkbook_additional/vb/ThisWorkbook.vb#27)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DocumentLibraryVersions">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Core.DocumentLibraryVersions DocumentLibraryVersions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Core.DocumentLibraryVersions DocumentLibraryVersions" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.DocumentLibraryVersions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Core.DocumentLibraryVersions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-638">获取一个 <c>Microsoft.Office.Core.DocumentLibraryVersions</c> 集合，该集合表示共享工作簿（启用了版本控制并存储在服务器上的文档库中）的版本集合。</span><span class="sxs-lookup"><span data-stu-id="18d1c-638">Gets a <c>Microsoft.Office.Core.DocumentLibraryVersions</c> collection that represents the collection of versions of a shared workbook that has versioning enabled and that is stored in a document library on a server.</span></span></summary>
        <value><span data-ttu-id="18d1c-639">一个<c>Microsoft.Office.Core.DocumentLibraryVersions</c>集合，表示共享工作簿的启用了版本控制并存储在文档库中的服务器上的版本集合。</span><span class="sxs-lookup"><span data-stu-id="18d1c-639">A <c>Microsoft.Office.Core.DocumentLibraryVersions</c> collection that represents the collection of versions of a shared workbook that has versioning enabled and that is stored in a document library on a server.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DoNotPromptForConvert">
      <MemberSignature Language="C#" Value="public bool DoNotPromptForConvert { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DoNotPromptForConvert" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.DoNotPromptForConvert" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-640">获取或设置一个值，该值指示在工作簿包含 Excel 2007 之前的 Excel 版本不支持的功能的情况下，是否提示用户转换工作簿。</span><span class="sxs-lookup"><span data-stu-id="18d1c-640">Gets or sets a value that indicates whether to prompt the user to convert the workbook if it contains features that are not supported by versions of Excel earlier than Excel 2007.</span></span></summary>
        <value><span data-ttu-id="18d1c-641"><see langword="true" /> 表示提示用户转换工作簿；<see langword="false" /> 表示不提示。</span><span class="sxs-lookup"><span data-stu-id="18d1c-641"><see langword="true" /> to prompt the user to convert the workbook; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableAutoRecover">
      <MemberSignature Language="C#" Value="public bool EnableAutoRecover { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableAutoRecover" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.EnableAutoRecover" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-642">获取或设置一个值，该值指示 Microsoft Office Excel 是否按时间间隔保存更改后的文件（所有格式）。</span><span class="sxs-lookup"><span data-stu-id="18d1c-642">Gets or sets a value that indicates whether Microsoft Office Excel saves changed files, of all formats, on a timed interval.</span></span></summary>
        <value><span data-ttu-id="18d1c-643">如果 Excel 按时间间隔保存更改后的文件，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-643"><see langword="true" /> if Excel saves changed files on a timed interval; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-644">如果 Excel 失败，系统出现故障，或如果系统未正确关闭 （不允许 Excel 保存已更改的文件），打开的备份的文件和用户有机会保存更改，否则可能已丢失。</span><span class="sxs-lookup"><span data-stu-id="18d1c-644">If Excel fails, the system fails, or if the system is improperly shut down (not allowing Excel to save the changed files), the backed up files are opened and the user has an opportunity to save changes that otherwise would have been lost.</span></span> <span data-ttu-id="18d1c-645">当用户重新启动 Excel 时，将打开文档恢复窗口，为用户提供一个选项来恢复他们的文件。</span><span class="sxs-lookup"><span data-stu-id="18d1c-645">When the user restarts Excel, a document recovery window opens, giving the user an option to recover the files they were working on.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableConnections">
      <MemberSignature Language="C#" Value="public void EnableConnections ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnableConnections() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.EnableConnections" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="18d1c-646">启用工作簿内的数据连接。</span><span class="sxs-lookup"><span data-stu-id="18d1c-646">Enables data connections within the workbook.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-647">下面的代码示例调用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.EnableConnections%2A>方法以启用工作簿中的数据连接并取消显示现有数据连接的任何安全警告。</span><span class="sxs-lookup"><span data-stu-id="18d1c-647">The following code example calls the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.EnableConnections%2A> method to enable data connections in the workbook and suppress any security warnings for existing data connections.</span></span>  
  
 <span data-ttu-id="18d1c-648">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-648">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkbook_Additional#40](~/snippets/csharp/VS_Snippets_OfficeSP/trin_excelworkbook_additional/cs/ThisWorkbook.cs#40)]
 [!code-vb[Trin_ExcelWorkbook_Additional#40](~/snippets/visualbasic/VS_Snippets_OfficeSP/trin_excelworkbook_additional/vb/ThisWorkbook.vb#40)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EncryptionProvider">
      <MemberSignature Language="C#" Value="public string EncryptionProvider { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EncryptionProvider" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.EncryptionProvider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-649">获取 Microsoft Office Excel 用来加密工作簿密码的算法加密提供程序的名称。</span><span class="sxs-lookup"><span data-stu-id="18d1c-649">Gets the name of the algorithm encryption provider that Microsoft Office Excel uses when encrypting passwords for the workbook.</span></span></summary>
        <value><span data-ttu-id="18d1c-650">Excel 用来加密工作簿密码的算法加密提供程序的名称。</span><span class="sxs-lookup"><span data-stu-id="18d1c-650">The name of the algorithm encryption provider that Excel uses when encrypting passwords for the workbook.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-651">下面的代码示例检查的值<xref:Microsoft.Office.Tools.Excel.WorkbookBase.HasPassword%2A>属性来确定工作簿是否受密码保护。</span><span class="sxs-lookup"><span data-stu-id="18d1c-651">The following code example checks the value of the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.HasPassword%2A> property to determine whether the workbook is password protected.</span></span> <span data-ttu-id="18d1c-652">如果工作簿不受密码保护，然后该示例设置<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Password%2A>属性设置为密码获取用户输入，然后调用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SetPasswordEncryptionOptions%2A>方法设置的加密算法、 密钥长度设置、 设置的加密提供程序名称并启用加密文件属性。</span><span class="sxs-lookup"><span data-stu-id="18d1c-652">If the workbook is not password protected, then the example sets the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.Password%2A> property to a password obtained from user input, and then calls the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.SetPasswordEncryptionOptions%2A> method to set the encryption algorithm, set the key length, set the name of the encryption provider, and enable file property encryption.</span></span> <span data-ttu-id="18d1c-653">然后，该示例显示的值<xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionProvider%2A>， <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionAlgorithm%2A>， <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionKeyLength%2A>，和<xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionFileProperties%2A>工作表中的属性`Sheet1`。</span><span class="sxs-lookup"><span data-stu-id="18d1c-653">The example then displays the values of the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionProvider%2A>, <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionAlgorithm%2A>, <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionKeyLength%2A>, and <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionFileProperties%2A> properties in worksheet `Sheet1`.</span></span> <span data-ttu-id="18d1c-654">此示例假定方法`GetPasswordFromUserInput`其他位置定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-654">This example assumes that the method `GetPasswordFromUserInput` is defined elsewhere.</span></span>  
  
 <span data-ttu-id="18d1c-655">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-655">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#131](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#131)]
 [!code-vb[Trin_ExcelWorkBook#131](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#131)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndInit">
      <MemberSignature Language="C#" Value="public virtual void EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.EndInit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndReview">
      <MemberSignature Language="C#" Value="public void EndReview ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndReview() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.EndReview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="18d1c-656">使用 <see cref="M:Microsoft.Office.Tools.Excel.WorkbookBase.SendForReview(System.Object,System.Object,System.Object,System.Object)" /> 方法终止对发送审阅的文件的审阅。</span><span class="sxs-lookup"><span data-stu-id="18d1c-656">Terminates a review of a file that has been sent for review using the <see cref="M:Microsoft.Office.Tools.Excel.WorkbookBase.SendForReview(System.Object,System.Object,System.Object,System.Object)" /> method.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnvelopeVisible">
      <MemberSignature Language="C#" Value="public bool EnvelopeVisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnvelopeVisible" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.EnvelopeVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-657">获取或设置一个值，该值指示电子邮件撰写标题和信封工具栏是否都可见。</span><span class="sxs-lookup"><span data-stu-id="18d1c-657">Gets or sets a value that indicates whether the e-mail composition header and the envelope toolbar are both visible.</span></span></summary>
        <value><span data-ttu-id="18d1c-658">如果电子邮件撰写标题和信封工具栏都可见，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-658"><see langword="true" /> if the e-mail composition header and the envelope toolbar are both visible; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Excel4IntlMacroSheets">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Sheets Excel4IntlMacroSheets { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Sheets Excel4IntlMacroSheets" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Excel4IntlMacroSheets" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Sheets</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-659">获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Sheets" /> 集合，该集合表示工作簿中的所有 Microsoft Office Excel 4.0 国际宏表。</span><span class="sxs-lookup"><span data-stu-id="18d1c-659">Gets a <see cref="T:Microsoft.Office.Interop.Excel.Sheets" /> collection that represents all the Microsoft Office Excel 4.0 international macro sheets in the workbook.</span></span></summary>
        <value><span data-ttu-id="18d1c-660"><see cref="T:Microsoft.Office.Interop.Excel.Sheets" /> 集合，表示工作簿中的所有 Microsoft Office Excel 4.0 国际宏表。</span><span class="sxs-lookup"><span data-stu-id="18d1c-660">A <see cref="T:Microsoft.Office.Interop.Excel.Sheets" /> collection that represents all the Microsoft Office Excel 4.0 international macro sheets in the workbook.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-661">下面的代码示例循环访问每个<xref:Microsoft.Office.Interop.Excel.Worksheet?displayProperty=fullName>返回的<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Excel4IntlMacroSheets%2A>属性和写入输出到调试每个工作表的代码名称。</span><span class="sxs-lookup"><span data-stu-id="18d1c-661">The following code example iterates through every <xref:Microsoft.Office.Interop.Excel.Worksheet?displayProperty=fullName> returned by the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.Excel4IntlMacroSheets%2A> property and writes the code name of each worksheet to the debug output.</span></span>  
  
 <span data-ttu-id="18d1c-662">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-662">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#21](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#21)]
 [!code-vb[Trin_ExcelWorkBook#21](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Excel4MacroSheets">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Sheets Excel4MacroSheets { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Sheets Excel4MacroSheets" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Excel4MacroSheets" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Sheets</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-663">获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Sheets" /> 集合，该集合表示工作簿中的所有 Microsoft Office Excel 4.0 宏表。</span><span class="sxs-lookup"><span data-stu-id="18d1c-663">Gets a <see cref="T:Microsoft.Office.Interop.Excel.Sheets" /> collection that represents all the Microsoft Office Excel 4.0 macro sheets in the workbook.</span></span></summary>
        <value><span data-ttu-id="18d1c-664"><see cref="T:Microsoft.Office.Interop.Excel.Sheets" /> 集合，表示工作簿中的所有 Microsoft Office Excel 4.0 宏表。</span><span class="sxs-lookup"><span data-stu-id="18d1c-664">A <see cref="T:Microsoft.Office.Interop.Excel.Sheets" /> collection that represents all the Microsoft Office Excel 4.0 macro sheets in the workbook.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-665">下面的代码示例循环访问每个<xref:Microsoft.Office.Interop.Excel.Worksheet?displayProperty=fullName>返回的<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Excel4MacroSheets%2A>属性和写入输出到调试每个工作表的代码名称。</span><span class="sxs-lookup"><span data-stu-id="18d1c-665">The following code example iterates through every <xref:Microsoft.Office.Interop.Excel.Worksheet?displayProperty=fullName> returned by the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.Excel4MacroSheets%2A> property and writes the code name of each worksheet to the debug output.</span></span>  
  
 <span data-ttu-id="18d1c-666">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-666">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#22](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#22)]
 [!code-vb[Trin_ExcelWorkBook#22](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Excel8CompatibilityMode">
      <MemberSignature Language="C#" Value="public bool Excel8CompatibilityMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Excel8CompatibilityMode" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Excel8CompatibilityMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-667">获取一个值，该值指示工作簿是否处于兼容模式。</span><span class="sxs-lookup"><span data-stu-id="18d1c-667">Gets a value that indicates whether the workbook is in compatibility mode.</span></span></summary>
        <value><span data-ttu-id="18d1c-668">如果工作簿处于兼容模式，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-668"><see langword="true" /> if the workbook is in compatibility mode; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-669">在兼容性模式下，某些功能被禁用或函数以不同的方式。</span><span class="sxs-lookup"><span data-stu-id="18d1c-669">In compatibility mode, certain functionality is disabled or functions differently.</span></span> <span data-ttu-id="18d1c-670">例如，在兼容模式下的 Excel 2007 工作簿仅限于相同数量的行和 Excel 的早期版本中可用的列。</span><span class="sxs-lookup"><span data-stu-id="18d1c-670">For example, Excel 2007 workbooks in compatibility mode are restricted to the same number of rows and columns that are available in earlier versions of Excel.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveAccess">
      <MemberSignature Language="C#" Value="public bool ExclusiveAccess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ExclusiveAccess() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.ExclusiveAccess" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="18d1c-671">向当前用户分配作为共享列表打开的工作簿的独占访问权限。</span><span class="sxs-lookup"><span data-stu-id="18d1c-671">Assigns the current user exclusive access to the workbook that is open as a shared list.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-672">此方法将保存到工作簿所做的任何更改，并要求具有该工作簿的其他用户打开以将其更改保存到一个不同的文件。</span><span class="sxs-lookup"><span data-stu-id="18d1c-672">This method saves any changes made to the workbook and requires other users who have the workbook open to save their changes to a different file.</span></span>  
  
 <span data-ttu-id="18d1c-673">如果工作簿作为共享列表打开，此方法将失败。</span><span class="sxs-lookup"><span data-stu-id="18d1c-673">If the workbook is not open as a shared list, this method fails.</span></span> <span data-ttu-id="18d1c-674">若要确定是否已作为共享列表打开工作簿，请使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.MultiUserEditing%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="18d1c-674">To determine whether a workbook is open as a shared list, use the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.MultiUserEditing%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExportAsFixedFormat">
      <MemberSignature Language="C#" Value="public void ExportAsFixedFormat (Microsoft.Office.Interop.Excel.XlFixedFormatType type, object filename, object quality, object includeDocProperties, object ignorePrintAreas, object from, object to, object openAfterPublish, object fixedFormatExtClassPtr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExportAsFixedFormat(valuetype Microsoft.Office.Interop.Excel.XlFixedFormatType type, object filename, object quality, object includeDocProperties, object ignorePrintAreas, object from, object to, object openAfterPublish, object fixedFormatExtClassPtr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.ExportAsFixedFormat(Microsoft.Office.Interop.Excel.XlFixedFormatType,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.Office.Interop.Excel.XlFixedFormatType" />
        <Parameter Name="filename" Type="System.Object" />
        <Parameter Name="quality" Type="System.Object" />
        <Parameter Name="includeDocProperties" Type="System.Object" />
        <Parameter Name="ignorePrintAreas" Type="System.Object" />
        <Parameter Name="from" Type="System.Object" />
        <Parameter Name="to" Type="System.Object" />
        <Parameter Name="openAfterPublish" Type="System.Object" />
        <Parameter Name="fixedFormatExtClassPtr" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="18d1c-675">其中一个 <see langword="Microsoft.Office.Interop.Excel.XlFixedFormatType" /> 值，该值指定是否要将工作簿保存为 PDF 或 XPS 格式。</span><span class="sxs-lookup"><span data-stu-id="18d1c-675">One of the <see langword="Microsoft.Office.Interop.Excel.XlFixedFormatType" /> values that specifies whether to save the workbook in PDF or XPS format.</span></span></param>
        <param name="filename"><span data-ttu-id="18d1c-676">新 PDF 或 XPS 文件的完整路径。</span><span class="sxs-lookup"><span data-stu-id="18d1c-676">The full path of the new PDF or XPS file.</span></span> <span data-ttu-id="18d1c-677">如果省略此参数，Excel 会将文件保存在当前文件夹中。</span><span class="sxs-lookup"><span data-stu-id="18d1c-677">If you omit this parameter, Excel saves the file in the current folder.</span></span></param>
        <param name="quality"><span data-ttu-id="18d1c-678">其中一个 <see langword="Microsoft.Office.Interop.Excel.XlFixedFormatQuality" /> 值，该值指定导出文件的质量。</span><span class="sxs-lookup"><span data-stu-id="18d1c-678">One of the <see langword="Microsoft.Office.Interop.Excel.XlFixedFormatQuality" /> values that specifies the quality of the exported file.</span></span></param>
        <param name="includeDocProperties"><span data-ttu-id="18d1c-679">如果要在导出的文件中包含文档属性，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-679"><see langword="true" /> to include document properties in the exported file; otherwise, <see langword="false" />.</span></span></param>
        <param name="ignorePrintAreas"><span data-ttu-id="18d1c-680">若要在导出时忽略任何打印区域设置，请使用 <see langword="true" />；否则使用 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-680"><see langword="true" /> to ignore any print areas set when exporting; otherwise, <see langword="false" />.</span></span></param>
        <param name="from"><span data-ttu-id="18d1c-681">要从其处开始导出的页码。</span><span class="sxs-lookup"><span data-stu-id="18d1c-681">The number of the page at which to start exporting.</span></span> <span data-ttu-id="18d1c-682">如果省略此参数，则从第一页开始导出。</span><span class="sxs-lookup"><span data-stu-id="18d1c-682">If this parameter is omitted, exporting starts at the beginning.</span></span></param>
        <param name="to"><span data-ttu-id="18d1c-683">要导出的最后一页的页码。</span><span class="sxs-lookup"><span data-stu-id="18d1c-683">The number of the last page to export.</span></span> <span data-ttu-id="18d1c-684">如果省略此参数，则导出完最后一页后停止导出。</span><span class="sxs-lookup"><span data-stu-id="18d1c-684">If this parameter is omitted, exporting ends with the last page.</span></span></param>
        <param name="openAfterPublish"><span data-ttu-id="18d1c-685">如果要在导出工作簿后打开新文件，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-685"><see langword="true" /> to open the new file after exporting the workbook; otherwise, <see langword="false" />.</span></span></param>
        <param name="fixedFormatExtClassPtr"><span data-ttu-id="18d1c-686">一个指向 <see langword="IMsoDocExporter" /> 接口的实现的指针，可使工作簿保存为另一种固定格式。</span><span class="sxs-lookup"><span data-stu-id="18d1c-686">A pointer to an implementation of the <see langword="IMsoDocExporter" /> interface that enables the workbook to be saved in a different fixed format.</span></span> <span data-ttu-id="18d1c-687">有关详细信息，请参阅“扩展 Office (2007) 固定格式导出功能”。</span><span class="sxs-lookup"><span data-stu-id="18d1c-687">For more information, see Extending the Office (2007) Fixed-Format Export Feature.</span></span></param>
        <summary><span data-ttu-id="18d1c-688">以 PDF 或 XPS 格式保存工作簿。</span><span class="sxs-lookup"><span data-stu-id="18d1c-688">Saves a workbook in PDF or XPS format.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-689">您可以将保存为 PDF 或 XPS 文件从 Microsoft Office Excel 才提供此功能的外接程序安装。</span><span class="sxs-lookup"><span data-stu-id="18d1c-689">You can save as a PDF or XPS file from Microsoft Office Excel only after you install an add-in that provides this feature.</span></span> <span data-ttu-id="18d1c-690">有关详细信息，搜索"启用支持其他文件格式，如 PDF 和 XPS"Office Online 上。</span><span class="sxs-lookup"><span data-stu-id="18d1c-690">For more information, search for "Enable support for other file formats, such as PDF and XPS" on Office Online.</span></span>  
  
## <a name="optional-parameters"></a><span data-ttu-id="18d1c-691">可选参数</span><span class="sxs-lookup"><span data-stu-id="18d1c-691">Optional Parameters</span></span>  
 <span data-ttu-id="18d1c-692">可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。</span><span class="sxs-lookup"><span data-stu-id="18d1c-692">For information on optional parameters, see [Optional Parameters in Office Solutions](/visualstudio/vsto/optional-parameters-in-office-solutions).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18d1c-693">下面的代码示例将在指定的文件路径中使用高品质的分辨率为 PDF 格式保存工作簿的第一页。</span><span class="sxs-lookup"><span data-stu-id="18d1c-693">The following code example saves the first page of the workbook in PDF format to the specified file path using high-quality resolution.</span></span>  
  
 <span data-ttu-id="18d1c-694">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-694">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkbook_Additional#3](~/snippets/csharp/VS_Snippets_OfficeSP/trin_excelworkbook_additional/cs/ThisWorkbook.cs#3)]
 [!code-vb[Trin_ExcelWorkbook_Additional#3](~/snippets/visualbasic/VS_Snippets_OfficeSP/trin_excelworkbook_additional/vb/ThisWorkbook.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FileFormat">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlFileFormat FileFormat { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlFileFormat FileFormat" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.FileFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlFileFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-695">获取工作簿的文件格式和类型。</span><span class="sxs-lookup"><span data-stu-id="18d1c-695">Gets the file format and type of the workbook.</span></span></summary>
        <value><span data-ttu-id="18d1c-696"><see cref="T:Microsoft.Office.Interop.Excel.XlFileFormat" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="18d1c-696">One of the <see cref="T:Microsoft.Office.Interop.Excel.XlFileFormat" /> values.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-697">下面的代码示例检查的值<xref:Microsoft.Office.Tools.Excel.WorkbookBase.FileFormat%2A>属性来确定工作簿是否正常工作簿。</span><span class="sxs-lookup"><span data-stu-id="18d1c-697">The following code example checks the value of the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.FileFormat%2A> property to determine whether the workbook is a normal workbook.</span></span> <span data-ttu-id="18d1c-698">该工作簿是否正常工作簿，然后该示例调用<xref:Microsoft.Office.Tools.Excel.Worksheet.SaveAs%2A>方法以将该工作簿重新保存为具有名称的 XML 电子表格`XMLCopy.xlsx`中指定的路径<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Path%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="18d1c-698">If the workbook is a normal workbook, then the example calls the <xref:Microsoft.Office.Tools.Excel.Worksheet.SaveAs%2A> method to resave the workbook as an XML spreadsheet with the name `XMLCopy.xlsx` in the path specified by the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.Path%2A> property.</span></span>  
  
 <span data-ttu-id="18d1c-699">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-699">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#125](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#125)]
 [!code-vb[Trin_ExcelWorkBook#125](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#125)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Final">
      <MemberSignature Language="C#" Value="public bool Final { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Final" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Final" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-700">获取或设置一个值，该值指示工作簿是否处于最终状态。</span><span class="sxs-lookup"><span data-stu-id="18d1c-700">Gets or sets a value that indicates whether the workbook is final.</span></span></summary>
        <value><span data-ttu-id="18d1c-701">如果工作簿处于最终状态，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-701"><see langword="true" /> if the workbook is final; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-702">此属性设置为`true`、 通知收件人的工作簿处于最终状态，和工作簿设置为只读。</span><span class="sxs-lookup"><span data-stu-id="18d1c-702">When you set this property to `true`, recipients are notified that the workbook is final, and the workbook is set to read-only.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FinishInitialization">
      <MemberSignature Language="C#" Value="protected virtual void FinishInitialization ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void FinishInitialization() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.FinishInitialization" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FollowHyperlink">
      <MemberSignature Language="C#" Value="public void FollowHyperlink (string address, object subAddress, object newWindow, object addHistory, object extraInfo, object method, object headerInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FollowHyperlink(string address, object subAddress, object newWindow, object addHistory, object extraInfo, object method, object headerInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.FollowHyperlink(System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="subAddress" Type="System.Object" />
        <Parameter Name="newWindow" Type="System.Object" />
        <Parameter Name="addHistory" Type="System.Object" />
        <Parameter Name="extraInfo" Type="System.Object" />
        <Parameter Name="method" Type="System.Object" />
        <Parameter Name="headerInfo" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="18d1c-703">目标文档的地址。</span><span class="sxs-lookup"><span data-stu-id="18d1c-703">The address of the target document.</span></span></param>
        <param name="subAddress"><span data-ttu-id="18d1c-704">目标文档中的位置。</span><span class="sxs-lookup"><span data-stu-id="18d1c-704">The location within the target document.</span></span> <span data-ttu-id="18d1c-705">默认值为空字符串。</span><span class="sxs-lookup"><span data-stu-id="18d1c-705">The default value is the empty string.</span></span></param>
        <param name="newWindow"><span data-ttu-id="18d1c-706">如果为 <see langword="true" />，则在新窗口中显示目标应用程序。</span><span class="sxs-lookup"><span data-stu-id="18d1c-706"><see langword="true" /> to display the target application in a new window.</span></span> <span data-ttu-id="18d1c-707">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-707">The default value is <see langword="false" />.</span></span></param>
        <param name="addHistory"><span data-ttu-id="18d1c-708">未使用。</span><span class="sxs-lookup"><span data-stu-id="18d1c-708">Not used.</span></span> <span data-ttu-id="18d1c-709">留待将来使用。</span><span class="sxs-lookup"><span data-stu-id="18d1c-709">Reserved for future use.</span></span></param>
        <param name="extraInfo"><span data-ttu-id="18d1c-710">一个字符串或字节数组，指定用于解析超链接的有关 HTTP 的其他信息。</span><span class="sxs-lookup"><span data-stu-id="18d1c-710">A string or byte array that specifies additional information for HTTP to use to resolve the hyperlink.</span></span> <span data-ttu-id="18d1c-711">例如，可以使用 <c>ExtraInfo</c> 指定图像映射的坐标、窗体的内容或 FAT 文件名。</span><span class="sxs-lookup"><span data-stu-id="18d1c-711">For example, you can use <c>ExtraInfo</c> to specify the coordinates of an image map, the contents of a form, or a FAT file name.</span></span></param>
        <param name="method"><span data-ttu-id="18d1c-712">指定附加 <c>ExtraInfo</c> 的方式。</span><span class="sxs-lookup"><span data-stu-id="18d1c-712">Specifies the way <c>ExtraInfo</c> is attached.</span></span> <span data-ttu-id="18d1c-713">可以是下列 <see langword="Microsoft.Office.Core.MsoExtraInfoMethod" /> 常数之一：<see langword="Microsoft.Office.Core.MsoExtraInfoMethod.msoMethodGet" /> 或 <see langword="Microsoft.Office.Core.MsoExtraInfoMethod.msoMethodPost" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-713">Can be one of the following <see langword="Microsoft.Office.Core.MsoExtraInfoMethod" /> constants: <see langword="Microsoft.Office.Core.MsoExtraInfoMethod.msoMethodGet" /> or <see langword="Microsoft.Office.Core.MsoExtraInfoMethod.msoMethodPost" />.</span></span></param>
        <param name="headerInfo"><span data-ttu-id="18d1c-714">一个字符串，指定 HTTP 请求的标头信息。</span><span class="sxs-lookup"><span data-stu-id="18d1c-714">A string that specifies header information for the HTTP request.</span></span> <span data-ttu-id="18d1c-715">默认值为一个空字符串。</span><span class="sxs-lookup"><span data-stu-id="18d1c-715">The default value is an empty string.</span></span></param>
        <summary><span data-ttu-id="18d1c-716">如果文档已下载，则显示缓存文档。</span><span class="sxs-lookup"><span data-stu-id="18d1c-716">Displays a cached document, if it has already been downloaded.</span></span> <span data-ttu-id="18d1c-717">否则，此方法解析超链接，下载目标文档并在适当的应用程序中显示此文档。</span><span class="sxs-lookup"><span data-stu-id="18d1c-717">Otherwise, this method resolves the hyperlink, downloads the target document, and displays the document in the appropriate application.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a><span data-ttu-id="18d1c-718">可选参数</span><span class="sxs-lookup"><span data-stu-id="18d1c-718">Optional Parameters</span></span>  
 <span data-ttu-id="18d1c-719">可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。</span><span class="sxs-lookup"><span data-stu-id="18d1c-719">For information on optional parameters, see [Optional Parameters in Office Solutions](/visualstudio/vsto/optional-parameters-in-office-solutions).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18d1c-720">下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.FollowHyperlink%2A>方法来显示在新窗口中的指定地址处的文档。</span><span class="sxs-lookup"><span data-stu-id="18d1c-720">The following code example uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.FollowHyperlink%2A> method to display the document at a specified address in a new window.</span></span>  
  
 <span data-ttu-id="18d1c-721">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-721">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#108](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#108)]
 [!code-vb[Trin_ExcelWorkBook#108](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#108)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ForceFullCalculation">
      <MemberSignature Language="C#" Value="public bool ForceFullCalculation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ForceFullCalculation" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.ForceFullCalculation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-722">获取或设置一个值，该值指示是否强制对工作簿进行完全计算。</span><span class="sxs-lookup"><span data-stu-id="18d1c-722">Gets or sets a value that indicates whether to force a full calculation of a workbook.</span></span></summary>
        <value><span data-ttu-id="18d1c-723">如果强制对工作簿进行完全计算，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-723"><see langword="true" /> to force a full calculation of a workbook; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForwardMailer">
      <MemberSignature Language="C#" Value="public void ForwardMailer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ForwardMailer() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.ForwardMailer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FullName">
      <MemberSignature Language="C#" Value="public string FullName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.FullName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-724">获取对象的名称，包括其磁盘路径。</span><span class="sxs-lookup"><span data-stu-id="18d1c-724">Gets the name of the object, including its path on disk.</span></span></summary>
        <value><span data-ttu-id="18d1c-725">对象的名称，包括其磁盘路径。</span><span class="sxs-lookup"><span data-stu-id="18d1c-725">The name of the object, including its path on disk.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-726">此属性等效于<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Path%2A>属性后, 跟当前文件系统的分隔符后, 跟<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Name%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="18d1c-726">This property is equivalent to the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.Path%2A> property, followed by the current file system separator, followed by the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.Name%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18d1c-727">下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.FullName%2A>属性来显示工作簿，包括其路径的完整名称。</span><span class="sxs-lookup"><span data-stu-id="18d1c-727">The following code example uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.FullName%2A> property to display the full name of the workbook, including its path.</span></span>  
  
 <span data-ttu-id="18d1c-728">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-728">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#23](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#23)]
 [!code-vb[Trin_ExcelWorkBook#23](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FullNameURLEncoded">
      <MemberSignature Language="C#" Value="public string FullNameURLEncoded { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullNameURLEncoded" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.FullNameURLEncoded" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-729">获取对象的名称，包括其磁盘路径。</span><span class="sxs-lookup"><span data-stu-id="18d1c-729">Gets the name of the object, including its path on disk.</span></span></summary>
        <value><span data-ttu-id="18d1c-730">对象的名称，包括其磁盘路径。</span><span class="sxs-lookup"><span data-stu-id="18d1c-730">The name of the object, including its path on disk.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-731">下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.FullNameURLEncoded%2A>属性来显示工作簿，包括其路径，编码为 URL 的完整名称。</span><span class="sxs-lookup"><span data-stu-id="18d1c-731">The following code example uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.FullNameURLEncoded%2A> property to display the full name of the workbook, including its path, encoded as a URL.</span></span>  
  
 <span data-ttu-id="18d1c-732">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-732">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#24](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#24)]
 [!code-vb[Trin_ExcelWorkBook#24](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#24)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAutomationObject">
      <MemberSignature Language="C#" Value="protected virtual object GetAutomationObject ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object GetAutomationObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.GetAutomationObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="18d1c-733">由 [!INCLUDE[vsto_runtime](~/includes/vsto-runtime-md.md)] 调用，用于获取可由工作簿中的 VBA 代码使用的对象。</span><span class="sxs-lookup"><span data-stu-id="18d1c-733">Called by the [!INCLUDE[vsto_runtime](~/includes/vsto-runtime-md.md)] to get an object that can be used by VBA code in the workbook.</span></span></summary>
        <returns><span data-ttu-id="18d1c-734">文档级自定义项中的一个对象，可由工作簿中的 VBA 代码使用。</span><span class="sxs-lookup"><span data-stu-id="18d1c-734">An object in a document-level customization that can be used by VBA code in the workbook.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-735">重写此方法以返回到工作簿中的 VBA 代码的已公开的类的实例。</span><span class="sxs-lookup"><span data-stu-id="18d1c-735">Override this method to return an instance of a class that you have exposed to VBA code in the workbook.</span></span> <span data-ttu-id="18d1c-736">有关详细信息，请参阅[调用中从 VBA 的文档级自定义的代码](http://msdn.microsoft.com/en-us/aa99527b-eb50-4ac9-9855-92b913e75906)。</span><span class="sxs-lookup"><span data-stu-id="18d1c-736">For more information, see [Calling Code in Document-Level Customizations from VBA](http://msdn.microsoft.com/en-us/aa99527b-eb50-4ac9-9855-92b913e75906).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHostItem&lt;T&gt;">
      <MemberSignature Language="C#" Value="protected T GetHostItem&lt;T&gt; (Type type, string cookie) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance !!T GetHostItem&lt;class T&gt;(class System.Type type, string cookie) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.GetHostItem``1(System.Type,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="cookie" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="type">To be added.</param>
        <param name="cookie">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWorkflowTasks">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Core.WorkflowTasks GetWorkflowTasks ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Office.Core.WorkflowTasks GetWorkflowTasks() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.GetWorkflowTasks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Core.WorkflowTasks</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="18d1c-737">返回工作簿的工作流任务的集合。</span><span class="sxs-lookup"><span data-stu-id="18d1c-737">Returns the collection of workflow tasks for the workbook.</span></span></summary>
        <returns><span data-ttu-id="18d1c-738">一个 <c>Microsoft.Office.Core.WorkflowTasks</c> 集合，包含工作簿的工作流任务。</span><span class="sxs-lookup"><span data-stu-id="18d1c-738">A <c>Microsoft.Office.Core.WorkflowTasks</c> collection that contains the workflow tasks for the workbook.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-739">下面的代码示例显示当前与该工作簿关联的工作流任务数。</span><span class="sxs-lookup"><span data-stu-id="18d1c-739">The following code example displays the number of workflow tasks that are currently associated with the workbook.</span></span> <span data-ttu-id="18d1c-740">该示例然后循环访问每个工作流任务，如果有，并在消息框中显示所选的任务的一些属性。</span><span class="sxs-lookup"><span data-stu-id="18d1c-740">The example then iterates through each workflow task, if any, and shows some selected task properties in a message box.</span></span>  
  
 <span data-ttu-id="18d1c-741">若要将工作流任务添加到您的工作簿，必须将该工作簿发布到 Office Sharepoint Server 站点。</span><span class="sxs-lookup"><span data-stu-id="18d1c-741">To add workflow tasks to your workbook, you must publish the workbook to an Office Sharepoint Server site.</span></span>  
  
 <span data-ttu-id="18d1c-742">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-742">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkbook_Additional#4](~/snippets/csharp/VS_Snippets_OfficeSP/trin_excelworkbook_additional/cs/ThisWorkbook.cs#4)]
 [!code-vb[Trin_ExcelWorkbook_Additional#4](~/snippets/visualbasic/VS_Snippets_OfficeSP/trin_excelworkbook_additional/vb/ThisWorkbook.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWorkflowTemplates">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Core.WorkflowTemplates GetWorkflowTemplates ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Office.Core.WorkflowTemplates GetWorkflowTemplates() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.GetWorkflowTemplates" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Core.WorkflowTemplates</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="18d1c-743">返回工作簿的工作流模板的集合。</span><span class="sxs-lookup"><span data-stu-id="18d1c-743">Returns the collection of workflow templates for the workbook.</span></span></summary>
        <returns><span data-ttu-id="18d1c-744">一个 <c>Microsoft.Office.Core.WorkflowTemplates</c> 集合，包含工作簿的工作流模板。</span><span class="sxs-lookup"><span data-stu-id="18d1c-744">A <c>Microsoft.Office.Core.WorkflowTemplates</c> collection that contains the workflow templates for the workbook.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-745">下面的代码示例显示的工作流模板可供工作簿的数量。</span><span class="sxs-lookup"><span data-stu-id="18d1c-745">The following code example displays the number of workflow templates that are available for the workbook.</span></span> <span data-ttu-id="18d1c-746">如果存在一个或多个工作流模板，该示例显示的名称和每个模板的说明。</span><span class="sxs-lookup"><span data-stu-id="18d1c-746">If one or more workflow templates exist, the example displays the name and description of each template.</span></span>  
  
 <span data-ttu-id="18d1c-747">若要运行此代码示例，必须将该工作簿发布到 Office SharePoint Server 站点。</span><span class="sxs-lookup"><span data-stu-id="18d1c-747">To run this code example, you must publish the workbook to an Office SharePoint Server site.</span></span>  
  
 <span data-ttu-id="18d1c-748">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-748">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkbook_Additional#5](~/snippets/csharp/VS_Snippets_OfficeSP/trin_excelworkbook_additional/cs/ThisWorkbook.cs#5)]
 [!code-vb[Trin_ExcelWorkbook_Additional#5](~/snippets/visualbasic/VS_Snippets_OfficeSP/trin_excelworkbook_additional/vb/ThisWorkbook.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasMailer">
      <MemberSignature Language="C#" Value="public bool HasMailer { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasMailer" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.HasMailer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasPassword">
      <MemberSignature Language="C#" Value="public bool HasPassword { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasPassword" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.HasPassword" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-749">获取一个值，该值指示工作簿是否具有保护密码。</span><span class="sxs-lookup"><span data-stu-id="18d1c-749">Gets a value that indicates whether the workbook has a protection password.</span></span></summary>
        <value><span data-ttu-id="18d1c-750">如果工作簿具有保护密码，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-750"><see langword="true" /> if the workbook has a protection password; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-751">下面的代码示例检查的值<xref:Microsoft.Office.Tools.Excel.WorkbookBase.HasPassword%2A>属性来确定工作簿是否受密码保护。</span><span class="sxs-lookup"><span data-stu-id="18d1c-751">The following code example checks the value of the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.HasPassword%2A> property to determine whether the workbook is password protected.</span></span> <span data-ttu-id="18d1c-752">如果工作簿不受密码保护，然后该示例设置<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Password%2A>属性设置为密码获取用户输入，然后调用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SetPasswordEncryptionOptions%2A>方法设置的加密算法、 密钥长度设置、 设置的加密提供程序名称并启用加密文件属性。</span><span class="sxs-lookup"><span data-stu-id="18d1c-752">If the workbook is not password protected, then the example sets the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.Password%2A> property to a password obtained from user input, and then calls the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.SetPasswordEncryptionOptions%2A> method to set the encryption algorithm, set the key length, set the name of the encryption provider, and enable file property encryption.</span></span> <span data-ttu-id="18d1c-753">然后，该示例显示的值<xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionProvider%2A>， <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionAlgorithm%2A>， <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionKeyLength%2A>，和<xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionFileProperties%2A>工作表中的属性`Sheet1`。</span><span class="sxs-lookup"><span data-stu-id="18d1c-753">The example then displays the values of the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionProvider%2A>, <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionAlgorithm%2A>, <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionKeyLength%2A>, and <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionFileProperties%2A> properties in worksheet `Sheet1`.</span></span> <span data-ttu-id="18d1c-754">此示例假定名为方法的存在使得`GetPasswordFromUserInput`，获取用户输入一个强密码。</span><span class="sxs-lookup"><span data-stu-id="18d1c-754">This example assumes the existence of a method named `GetPasswordFromUserInput` that obtains a strong password from user input.</span></span>  
  
 <span data-ttu-id="18d1c-755">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-755">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#131](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#131)]
 [!code-vb[Trin_ExcelWorkBook#131](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#131)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasRoutingSlip">
      <MemberSignature Language="C#" Value="public bool HasRoutingSlip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasRoutingSlip" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.HasRoutingSlip" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasVBProject">
      <MemberSignature Language="C#" Value="public bool HasVBProject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasVBProject" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.HasVBProject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-756">获取一个值，该值指示工作簿是否具有附加的 Microsoft Visual Basic for Applications (VBA) 项目。</span><span class="sxs-lookup"><span data-stu-id="18d1c-756">Gets a value that indicates whether a workbook has an attached Microsoft Visual Basic for Applications (VBA) project.</span></span></summary>
        <value><span data-ttu-id="18d1c-757">如果工作簿具有附加的 VBA 项目，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-757"><see langword="true" /> if the workbook has an attached VBA project; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HighlightChangesOnScreen">
      <MemberSignature Language="C#" Value="public bool HighlightChangesOnScreen { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HighlightChangesOnScreen" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.HighlightChangesOnScreen" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-758">获取或设置一个值，该值指示是否在屏幕上突出显示对共享工作簿所做的更改。</span><span class="sxs-lookup"><span data-stu-id="18d1c-758">Gets or sets a value that indicates whether changes to the shared workbook are highlighted on screen.</span></span></summary>
        <value><span data-ttu-id="18d1c-759">如果在屏幕上突出显示对共享工作簿所做的更改，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-759"><see langword="true" /> if changes to the shared workbook are highlighted on screen; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HighlightChangesOptions">
      <MemberSignature Language="C#" Value="public void HighlightChangesOptions (object when, object who, object where);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void HighlightChangesOptions(object when, object who, object where) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.HighlightChangesOptions(System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="when" Type="System.Object" />
        <Parameter Name="who" Type="System.Object" />
        <Parameter Name="where" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="when"><span data-ttu-id="18d1c-760">显示的更改。</span><span class="sxs-lookup"><span data-stu-id="18d1c-760">The changes that are shown.</span></span> <span data-ttu-id="18d1c-761">可以为以下 <see cref="T:Microsoft.Office.Interop.Excel.XlHighlightChangesTime" /> 常数之一：<see cref="F:Microsoft.Office.Interop.Excel.XlHighlightChangesTime.xlSinceMyLastSave" />、<see cref="F:Microsoft.Office.Interop.Excel.XlHighlightChangesTime.xlAllChanges" /> 或 <see cref="F:Microsoft.Office.Interop.Excel.XlHighlightChangesTime.xlNotYetReviewed" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-761">Can be one of the following <see cref="T:Microsoft.Office.Interop.Excel.XlHighlightChangesTime" /> constants: <see cref="F:Microsoft.Office.Interop.Excel.XlHighlightChangesTime.xlSinceMyLastSave" />, <see cref="F:Microsoft.Office.Interop.Excel.XlHighlightChangesTime.xlAllChanges" />, or <see cref="F:Microsoft.Office.Interop.Excel.XlHighlightChangesTime.xlNotYetReviewed" />.</span></span></param>
        <param name="who"><span data-ttu-id="18d1c-762">显示其更改的用户。</span><span class="sxs-lookup"><span data-stu-id="18d1c-762">The user or users whose changes are shown.</span></span> <span data-ttu-id="18d1c-763">可以是“Everyone”、“Everyone but Me”或共享工作簿的用户名之一。</span><span class="sxs-lookup"><span data-stu-id="18d1c-763">Can be "Everyone", "Everyone but Me", or the name of one of the users of the shared workbook.</span></span></param>
        <param name="where"><span data-ttu-id="18d1c-764">一个 A1 样式范围引用，指定要检查更改的区域。</span><span class="sxs-lookup"><span data-stu-id="18d1c-764">An A1-style range reference that specifies the area to check for changes.</span></span></param>
        <summary><span data-ttu-id="18d1c-765">控制在共享工作簿中显示更改的方式。</span><span class="sxs-lookup"><span data-stu-id="18d1c-765">Controls how changes are shown in a shared workbook.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a><span data-ttu-id="18d1c-766">可选参数</span><span class="sxs-lookup"><span data-stu-id="18d1c-766">Optional Parameters</span></span>  
 <span data-ttu-id="18d1c-767">可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。</span><span class="sxs-lookup"><span data-stu-id="18d1c-767">For information on optional parameters, see [Optional Parameters in Office Solutions](/visualstudio/vsto/optional-parameters-in-office-solutions).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HostContext">
      <MemberSignature Language="C#" Value="public IServiceProvider HostContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IServiceProvider HostContext" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.HostContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IServiceProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HTMLProject">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Core.HTMLProject HTMLProject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Core.HTMLProject HTMLProject" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.HTMLProject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Core.HTMLProject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IconSets">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.IconSets IconSets { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.IconSets IconSets" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.IconSets" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.IconSets</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-768">获取内置图标集的集合，这些图标集可用于对工作簿中的范围应用条件格式规则。</span><span class="sxs-lookup"><span data-stu-id="18d1c-768">Gets the collection of built-in icon sets that can be used to apply a conditional formatting rule to a range in the workbook.</span></span></summary>
        <value><span data-ttu-id="18d1c-769">一个<c>Microsoft.Office.Interop.Excel.IconSets</c>集合，其中包含的内置图标集可用于将条件格式设置规则应用于一定范围的对象。</span><span class="sxs-lookup"><span data-stu-id="18d1c-769">A <c>Microsoft.Office.Interop.Excel.IconSets</c> collection that contains the built-in icon set objects that can be used to apply a conditional formatting rule to a range.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-770">可以使用设置为范围的数据分成阈值由分隔的三到五个类别的图标。</span><span class="sxs-lookup"><span data-stu-id="18d1c-770">You can use an icon set to classify range data into three to five categories separated by threshold values.</span></span> <span data-ttu-id="18d1c-771">每个图标表示一系列值。</span><span class="sxs-lookup"><span data-stu-id="18d1c-771">Each icon represents a range of values.</span></span> <span data-ttu-id="18d1c-772">例如，在`Microsoft.Office.Interop.Excel.XlIconSet.xl3Arrows`图标集，红色向上箭头表示较高的值、 黄色横向箭头表示中间值和绿色向下箭头表示较低的值。</span><span class="sxs-lookup"><span data-stu-id="18d1c-772">For example, in the `Microsoft.Office.Interop.Excel.XlIconSet.xl3Arrows` icon set, the red up arrow represents higher values, the yellow sideways arrow represents middle values, and the green down arrow represents lower values.</span></span>  
  
 <span data-ttu-id="18d1c-773">若要应用基于图标集条件格式设置规则，请创建一个新`Microsoft.Office.Interop.Excel.IconSetCondition`通过使用`Microsoft.Office.Interop.Excel.FormatConditions.AddIconSetCondition`方法<xref:Microsoft.Office.Interop.Excel.Range.FormatConditions%2A>属性的范围，或<xref:Microsoft.Office.Tools.Excel.NamedRange.FormatConditions%2A>命名范围的属性。</span><span class="sxs-lookup"><span data-stu-id="18d1c-773">To apply a conditional formatting rule based on an icon set, create a new `Microsoft.Office.Interop.Excel.IconSetCondition` by using the `Microsoft.Office.Interop.Excel.FormatConditions.AddIconSetCondition` method of the <xref:Microsoft.Office.Interop.Excel.Range.FormatConditions%2A> property of a range, or the <xref:Microsoft.Office.Tools.Excel.NamedRange.FormatConditions%2A> property of a named range.</span></span> <span data-ttu-id="18d1c-774">然后，设置`Microsoft.Office.Interop.Excel.IconSetCondition.IconSet`属性设置为`Microsoft.Office.Interop.Excel.IconSet`从检索的对象<xref:Microsoft.Office.Tools.Excel.WorkbookBase.IconSets%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="18d1c-774">Then, set the `Microsoft.Office.Interop.Excel.IconSetCondition.IconSet` property to an `Microsoft.Office.Interop.Excel.IconSet` object that you retrieve from the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.IconSets%2A> property.</span></span> <span data-ttu-id="18d1c-775">若要指定`Microsoft.Office.Interop.Excel.IconSet`对象，你想要检索，则传递之一`Microsoft.Office.Interop.Excel.XlIconSet`枚举值的索引<xref:Microsoft.Office.Tools.Excel.WorkbookBase.IconSets%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="18d1c-775">To specify the `Microsoft.Office.Interop.Excel.IconSet` object that you want to retrieve, pass in one of the `Microsoft.Office.Interop.Excel.XlIconSet` enumeration values as an index to the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.IconSets%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18d1c-776">下面的代码示例上填充的一个范围`Sheet1`值从 1 到 6。</span><span class="sxs-lookup"><span data-stu-id="18d1c-776">The following code example populates a range on `Sheet1` with values from 1 to 6.</span></span> <span data-ttu-id="18d1c-777">然后该示例添加一个图标将条件设置为范围 a1: a6 与`Microsoft.Office.Interop.Excel.XlIconSet.xl3Arrows`图标集。</span><span class="sxs-lookup"><span data-stu-id="18d1c-777">The example then adds an icon set condition to the range A1:A6 with the `Microsoft.Office.Interop.Excel.XlIconSet.xl3Arrows` icon set.</span></span>  
  
 <span data-ttu-id="18d1c-778">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-778">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_Excelworkbook_Additional#36](~/snippets/csharp/VS_Snippets_OfficeSP/trin_excelworkbook_additional/cs/ThisWorkbook.cs#36)]
 [!code-vb[Trin_Excelworkbook_Additional#36](~/snippets/visualbasic/VS_Snippets_OfficeSP/trin_excelworkbook_additional/vb/ThisWorkbook.vb#36)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InactiveListBorderVisible">
      <MemberSignature Language="C#" Value="public bool InactiveListBorderVisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InactiveListBorderVisible" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.InactiveListBorderVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-779">获取或设置一个值，该值指示列表不活动时列表边框是否可见。</span><span class="sxs-lookup"><span data-stu-id="18d1c-779">Gets or sets a value that indicates whether list borders are visible when a list is not active.</span></span></summary>
        <value><span data-ttu-id="18d1c-780">如果边框可见，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-780"><see langword="true" /> if the border is visible; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="protected virtual void Initialize ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Initialize() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.Initialize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeDataBindings">
      <MemberSignature Language="C#" Value="protected virtual void InitializeDataBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InitializeDataBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.InitializeDataBindings" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InnerObject">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Workbook InnerObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Workbook InnerObject" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.InnerObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Workbook</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-781">获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Workbook" />，表示 <see cref="T:Microsoft.Office.Tools.Excel.WorkbookBase" /> 的基础本机对象。</span><span class="sxs-lookup"><span data-stu-id="18d1c-781">Gets a <see cref="T:Microsoft.Office.Interop.Excel.Workbook" /> that represents the underlying native object for the <see cref="T:Microsoft.Office.Tools.Excel.WorkbookBase" />.</span></span></summary>
        <value><span data-ttu-id="18d1c-782">一个 <see cref="T:Microsoft.Office.Interop.Excel.Workbook" />，表示 <see cref="T:Microsoft.Office.Tools.Excel.WorkbookBase" /> 的基础本机对象。</span><span class="sxs-lookup"><span data-stu-id="18d1c-782">A <see cref="T:Microsoft.Office.Interop.Excel.Workbook" /> that represents the underlying native object for the <see cref="T:Microsoft.Office.Tools.Excel.WorkbookBase" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAddin">
      <MemberSignature Language="C#" Value="public bool IsAddin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAddin" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.IsAddin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-783">获取或设置一个值，该值指示工作簿是否作为外接程序运行。</span><span class="sxs-lookup"><span data-stu-id="18d1c-783">Gets or sets a value that indicates whether the workbook is running as an add-in.</span></span></summary>
        <value><span data-ttu-id="18d1c-784">如果工作簿作为外接程序运行，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-784"><see langword="true" /> if the workbook is running as an add-in; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-785">此属性设置为`true`，工作簿具有以下特征：</span><span class="sxs-lookup"><span data-stu-id="18d1c-785">When you set this property to `true`, the workbook has the following characteristics:</span></span>  
  
-   <span data-ttu-id="18d1c-786">不会提示保存该工作簿，如果工作簿处于打开状态时进行更改。</span><span class="sxs-lookup"><span data-stu-id="18d1c-786">You are not prompted to save the workbook if changes are made while the workbook is open.</span></span>  
  
-   <span data-ttu-id="18d1c-787">工作簿窗口不可见。</span><span class="sxs-lookup"><span data-stu-id="18d1c-787">The workbook window is not visible.</span></span>  
  
-   <span data-ttu-id="18d1c-788">该工作簿中的任何宏中不可见**宏**对话框 (通过指向显示**宏**上**工具**菜单并单击**宏**).</span><span class="sxs-lookup"><span data-stu-id="18d1c-788">Any macros in the workbook are not visible in the **Macro** dialog box (displayed by pointing to **Macro** on the **Tools** menu and clicking **Macros**).</span></span>  
  
-   <span data-ttu-id="18d1c-789">仍可以从运行该工作簿中的宏**宏**对话框，即使它们是不可见。</span><span class="sxs-lookup"><span data-stu-id="18d1c-789">Macros in the workbook can still be run from the **Macro** dialog box even though they are not visible.</span></span> <span data-ttu-id="18d1c-790">此外，宏名称不需要使用工作簿名称限定。</span><span class="sxs-lookup"><span data-stu-id="18d1c-790">In addition, macro names do not need to be qualified with the workbook name.</span></span>  
  
-   <span data-ttu-id="18d1c-791">打开工作簿时按住 SHIFT 键不起作用。</span><span class="sxs-lookup"><span data-stu-id="18d1c-791">Holding down the SHIFT key when you open the workbook has no effect.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInplace">
      <MemberSignature Language="C#" Value="public bool IsInplace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInplace" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.IsInplace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-792">获取一个值，该值指示指定的工作簿是否正在就地编辑</span><span class="sxs-lookup"><span data-stu-id="18d1c-792">Gets a value that indicates whether the specified workbook is being edited in place</span></span></summary>
        <value><span data-ttu-id="18d1c-793">如果指定的工作簿正在就地编辑，则为 <see langword="true" />；如果工作簿已在 Microsoft Office Excel 中打开进行编辑，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-793"><see langword="true" /> if the specified workbook is being edited in place; <see langword="false" /> if the workbook has been opened in Microsoft Office Excel for editing.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemProvider">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Tools.IHostItemProvider ItemProvider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Tools.IHostItemProvider ItemProvider" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.ItemProvider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Tools.IHostItemProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeepChangeHistory">
      <MemberSignature Language="C#" Value="public bool KeepChangeHistory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool KeepChangeHistory" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.KeepChangeHistory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-794">获取或设置一个值，该值指示共享工作簿是否启用了更改跟踪。</span><span class="sxs-lookup"><span data-stu-id="18d1c-794">Gets or sets a value that indicates whether change tracking is enabled for the shared workbook.</span></span></summary>
        <value><span data-ttu-id="18d1c-795">如果共享工作簿启用了更改跟踪，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-795"><see langword="true" /> if change tracking is enabled for the shared workbook; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Keywords">
      <MemberSignature Language="C#" Value="public string Keywords { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Keywords" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Keywords" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LinkInfo">
      <MemberSignature Language="C#" Value="public object LinkInfo (string name, Microsoft.Office.Interop.Excel.XlLinkInfo linkInfoArgument, object type, object editionRef);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object LinkInfo(string name, valuetype Microsoft.Office.Interop.Excel.XlLinkInfo linkInfoArgument, object type, object editionRef) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.LinkInfo(System.String,Microsoft.Office.Interop.Excel.XlLinkInfo,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="linkInfoArgument" Type="Microsoft.Office.Interop.Excel.XlLinkInfo" />
        <Parameter Name="type" Type="System.Object" />
        <Parameter Name="editionRef" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="18d1c-796">链接的名称。</span><span class="sxs-lookup"><span data-stu-id="18d1c-796">The name of the link.</span></span></param>
        <param name="linkInfoArgument"><span data-ttu-id="18d1c-797"><see cref="T:Microsoft.Office.Interop.Excel.XlLinkInfo" /> 值之一，指定要返回的信息的类型。</span><span class="sxs-lookup"><span data-stu-id="18d1c-797">One of the <see cref="T:Microsoft.Office.Interop.Excel.XlLinkInfo" /> values that specifies the type of information to return.</span></span></param>
        <param name="type"><span data-ttu-id="18d1c-798"><see cref="T:Microsoft.Office.Interop.Excel.XlLinkInfoType" /> 值之一，指定要为之返回信息的链接的类型。</span><span class="sxs-lookup"><span data-stu-id="18d1c-798">One of the <see cref="T:Microsoft.Office.Interop.Excel.XlLinkInfoType" /> values that specifies the type of link to return information for.</span></span></param>
        <param name="editionRef"><span data-ttu-id="18d1c-799">如果链接为版本，则此参数将版本引用指定为 R1C1 样式的字符串。</span><span class="sxs-lookup"><span data-stu-id="18d1c-799">If the link is an edition, this parameter specifies the edition reference as a string in R1C1 style.</span></span> <span data-ttu-id="18d1c-800">如果工作簿中有多个同名的发布者或订阅者，则需要 <c>EditionRef</c>。</span><span class="sxs-lookup"><span data-stu-id="18d1c-800"><c>EditionRef</c> is required if there is more than one publisher or subscriber with the same name in the workbook.</span></span></param>
        <summary><span data-ttu-id="18d1c-801">获取链接日期和更新状态。</span><span class="sxs-lookup"><span data-stu-id="18d1c-801">Gets the link date and update status.</span></span></summary>
        <returns><span data-ttu-id="18d1c-802">指示关于链接的信息的值。</span><span class="sxs-lookup"><span data-stu-id="18d1c-802">A value that indicates information about the link.</span></span> <span data-ttu-id="18d1c-803">如果 <paramref name="LinkInfoArgument" /> 为 <see cref="F:Microsoft.Office.Interop.Excel.XlLinkInfo.xlUpdateState" />，则此方法返回 1（如果链接自动更新）或 2（如果链接必须手动更新）。</span><span class="sxs-lookup"><span data-stu-id="18d1c-803">If <paramref name="LinkInfoArgument" /> is <see cref="F:Microsoft.Office.Interop.Excel.XlLinkInfo.xlUpdateState" />, this method returns 1 if the link updates automatically, or 2 if the link must be updated manually.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a><span data-ttu-id="18d1c-804">可选参数</span><span class="sxs-lookup"><span data-stu-id="18d1c-804">Optional Parameters</span></span>  
 <span data-ttu-id="18d1c-805">可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。</span><span class="sxs-lookup"><span data-stu-id="18d1c-805">For information on optional parameters, see [Optional Parameters in Office Solutions](/visualstudio/vsto/optional-parameters-in-office-solutions).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18d1c-806">下面的代码示例使用的获取的 DDE/OLE 集合中当前工作簿的链接，然后使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.LinkInfo%2A>方法，以确定是否每个 DDE/OLE 链接更新自动或手动。</span><span class="sxs-lookup"><span data-stu-id="18d1c-806">The following code example uses gets the collection of DDE/OLE links in the current workbook, and then uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.LinkInfo%2A> method to determine whether or not each DDE/OLE link updates automatically or manually.</span></span>  
  
 <span data-ttu-id="18d1c-807">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-807">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#110](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#110)]
 [!code-vb[Trin_ExcelWorkBook#110](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#110)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LinkSources">
      <MemberSignature Language="C#" Value="public object LinkSources (object type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object LinkSources(object type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.LinkSources(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="18d1c-808"><see cref="T:Microsoft.Office.Interop.Excel.XlLink" /> 值之一，指定要返回的链接的类型。</span><span class="sxs-lookup"><span data-stu-id="18d1c-808">One of the <see cref="T:Microsoft.Office.Interop.Excel.XlLink" /> values specifying the type of links to return.</span></span></param>
        <summary><span data-ttu-id="18d1c-809">返回工作簿中的链接的 <see cref="T:System.Array" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-809">Returns an <see cref="T:System.Array" /> of links in the workbook.</span></span></summary>
        <returns><span data-ttu-id="18d1c-810">工作簿中的链接名称的 <see cref="T:System.Array" />；如果工作簿不包含指定的 <paramref name="Type" /> 的任何链接，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-810">An <see cref="T:System.Array" /> of link names in the workbook; <see langword="null" /> if the workbook does not contain any links of the specified <paramref name="Type" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-811">在返回名称<xref:System.Array>是链接的文档、 版本或 DDE 或 OLE 服务器的名称。</span><span class="sxs-lookup"><span data-stu-id="18d1c-811">The names in the returned <xref:System.Array> are the names of the linked documents, editions, or DDE or OLE servers.</span></span> <span data-ttu-id="18d1c-812">数组的格式是一维数组的所有类型，但发布服务器和订阅服务器。</span><span class="sxs-lookup"><span data-stu-id="18d1c-812">The format of the array is a one-dimensional array for all types but publisher and subscriber.</span></span> <span data-ttu-id="18d1c-813">返回的字符串包含中的链接类型的相应表示法的链接源的名称。</span><span class="sxs-lookup"><span data-stu-id="18d1c-813">The returned strings contain the name of the link source, in the appropriate notation for the link type.</span></span> <span data-ttu-id="18d1c-814">例如，DDE 链接使用"服务器&#124;文档 ！项"语法。</span><span class="sxs-lookup"><span data-stu-id="18d1c-814">For example, DDE links use the "Server&#124;Document!Item" syntax.</span></span>  
  
 <span data-ttu-id="18d1c-815">有关发布服务器和订阅服务器上的链接，则返回的数组为二维图表。</span><span class="sxs-lookup"><span data-stu-id="18d1c-815">For publisher and subscriber links, the returned array is two-dimensional.</span></span> <span data-ttu-id="18d1c-816">数组的第一列包含的某一版本的名称，第二个列作为文本包含的各个版本的引用。</span><span class="sxs-lookup"><span data-stu-id="18d1c-816">The first column of the array contains the names of the edition, and the second column contains the references of the editions as text.</span></span>  
  
## <a name="optional-parameters"></a><span data-ttu-id="18d1c-817">可选参数</span><span class="sxs-lookup"><span data-stu-id="18d1c-817">Optional Parameters</span></span>  
 <span data-ttu-id="18d1c-818">可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。</span><span class="sxs-lookup"><span data-stu-id="18d1c-818">For information on optional parameters, see [Optional Parameters in Office Solutions](/visualstudio/vsto/optional-parameters-in-office-solutions).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18d1c-819">下面的代码示例将外部 Excel 链接添加到当前工作簿，并使用工作簿中获取所有 Excel 链接的名称的数组<xref:Microsoft.Office.Tools.Excel.WorkbookBase.LinkSources%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="18d1c-819">The following code example adds an external Excel link to the current workbook and gets an array of the names of all Excel links in the workbook by using the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.LinkSources%2A> method.</span></span> <span data-ttu-id="18d1c-820">该示例然后使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.OpenLinks%2A>方法打开每个链接的工作簿为只读的。</span><span class="sxs-lookup"><span data-stu-id="18d1c-820">The example then uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.OpenLinks%2A> method to open each linked workbook as read-only.</span></span>  
  
 <span data-ttu-id="18d1c-821">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-821">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#111](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#111)]
 [!code-vb[Trin_ExcelWorkBook#111](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#111)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ListChangesOnNewSheet">
      <MemberSignature Language="C#" Value="public bool ListChangesOnNewSheet { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ListChangesOnNewSheet" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.ListChangesOnNewSheet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-822">获取或设置一个值，该值指示对共享工作簿所做的更改是否显示在单独的工作表上。</span><span class="sxs-lookup"><span data-stu-id="18d1c-822">Gets or sets a value that indicates whether changes to the shared workbook are shown on a separate worksheet.</span></span></summary>
        <value><span data-ttu-id="18d1c-823">如果对共享工作簿所做的更改显示在单独的工作表上，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-823"><see langword="true" /> if changes to the shared workbook are shown on a separate worksheet; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LockServerFile">
      <MemberSignature Language="C#" Value="public void LockServerFile ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LockServerFile() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.LockServerFile" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="18d1c-824">锁定服务器上的工作簿以防止修改。</span><span class="sxs-lookup"><span data-stu-id="18d1c-824">Locks the workbook on the server to prevent modification.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Mailer">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Mailer Mailer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Mailer Mailer" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Mailer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Mailer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MergeWorkbook">
      <MemberSignature Language="C#" Value="public void MergeWorkbook (object filename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MergeWorkbook(object filename) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.MergeWorkbook(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="filename"><span data-ttu-id="18d1c-825">包含要合并到打开的工作簿中的更改的工作簿的文件名。</span><span class="sxs-lookup"><span data-stu-id="18d1c-825">The file name of the workbook that contains the changes to be merged into the open workbook.</span></span></param>
        <summary><span data-ttu-id="18d1c-826">将更改从一个工作簿合并到一个打开的共享工作簿中。</span><span class="sxs-lookup"><span data-stu-id="18d1c-826">Merges changes from one workbook into an open shared workbook.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Office.Tools.EntryPoint.BeginInit">
      <MemberSignature Language="C#" Value="void EntryPoint.BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.Office.Tools.EntryPoint.BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.Microsoft#Office#Tools#EntryPoint#BeginInit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Office.Tools.EntryPoint.EndInit">
      <MemberSignature Language="C#" Value="void EntryPoint.EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.Office.Tools.EntryPoint.EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.Microsoft#Office#Tools#EntryPoint#EndInit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Office.Tools.EntryPoint.FinishInitialization">
      <MemberSignature Language="C#" Value="void EntryPoint.FinishInitialization ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.Office.Tools.EntryPoint.FinishInitialization() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.Microsoft#Office#Tools#EntryPoint#FinishInitialization" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Office.Tools.EntryPoint.Initialize">
      <MemberSignature Language="C#" Value="void EntryPoint.Initialize ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.Office.Tools.EntryPoint.Initialize() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.Microsoft#Office#Tools#EntryPoint#Initialize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Office.Tools.EntryPoint.InitializeDataBindings">
      <MemberSignature Language="C#" Value="void EntryPoint.InitializeDataBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.Office.Tools.EntryPoint.InitializeDataBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.Microsoft#Office#Tools#EntryPoint#InitializeDataBindings" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Office.Tools.EntryPoint.OnShutdown">
      <MemberSignature Language="C#" Value="void EntryPoint.OnShutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.Office.Tools.EntryPoint.OnShutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.Microsoft#Office#Tools#EntryPoint#OnShutdown" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Office.Tools.EntryPoint.OnStartup">
      <MemberSignature Language="C#" Value="void EntryPoint.OnStartup ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.Office.Tools.EntryPoint.OnStartup() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.Microsoft#Office#Tools#EntryPoint#OnStartup" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Office.Tools.Excel.IWorkbookExtension.CreateRibbonExtensibilityObject">
      <MemberSignature Language="C#" Value="Microsoft.Office.Core.IRibbonExtensibility IWorkbookExtension.CreateRibbonExtensibilityObject ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.Office.Core.IRibbonExtensibility Microsoft.Office.Tools.Excel.IWorkbookExtension.CreateRibbonExtensibilityObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.Microsoft#Office#Tools#Excel#IWorkbookExtension#CreateRibbonExtensibilityObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Core.IRibbonExtensibility</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Office.Tools.Excel.IWorkbookExtension.CreateRibbonObjects">
      <MemberSignature Language="C#" Value="Microsoft.Office.Tools.Ribbon.IRibbonExtension[] IWorkbookExtension.CreateRibbonObjects ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.Office.Tools.Ribbon.IRibbonExtension[] Microsoft.Office.Tools.Excel.IWorkbookExtension.CreateRibbonObjects() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.Microsoft#Office#Tools#Excel#IWorkbookExtension#CreateRibbonObjects" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Tools.Ribbon.IRibbonExtension[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Office.Tools.Excel.IWorkbookExtension.GetAutomationObject">
      <MemberSignature Language="C#" Value="object IWorkbookExtension.GetAutomationObject ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object Microsoft.Office.Tools.Excel.IWorkbookExtension.GetAutomationObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.Microsoft#Office#Tools#Excel#IWorkbookExtension#GetAutomationObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Office.Tools.Excel.IWorkbookExtension.ProtectDocument">
      <MemberSignature Language="C#" Value="void IWorkbookExtension.ProtectDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.Office.Tools.Excel.IWorkbookExtension.ProtectDocument() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.Microsoft#Office#Tools#Excel#IWorkbookExtension#ProtectDocument" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Office.Tools.Excel.IWorkbookExtension.RequestService">
      <MemberSignature Language="C#" Value="object IWorkbookExtension.RequestService (Guid serviceGuid);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object Microsoft.Office.Tools.Excel.IWorkbookExtension.RequestService(valuetype System.Guid serviceGuid) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.Microsoft#Office#Tools#Excel#IWorkbookExtension#RequestService(System.Guid)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceGuid" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="serviceGuid">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Office.Tools.Excel.IWorkbookExtension.UnprotectDocument">
      <MemberSignature Language="C#" Value="void IWorkbookExtension.UnprotectDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.Office.Tools.Excel.IWorkbookExtension.UnprotectDocument() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.Microsoft#Office#Tools#Excel#IWorkbookExtension#UnprotectDocument" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Office.Tools.ICachedDataPersistanceCallback.OnAfterSave">
      <MemberSignature Language="C#" Value="void ICachedDataPersistanceCallback.OnAfterSave ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.Office.Tools.ICachedDataPersistanceCallback.OnAfterSave() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.Microsoft#Office#Tools#ICachedDataPersistanceCallback#OnAfterSave" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Office.Tools.ICachedDataPersistanceCallback.OnBeforeSave">
      <MemberSignature Language="C#" Value="void ICachedDataPersistanceCallback.OnBeforeSave ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.Office.Tools.ICachedDataPersistanceCallback.OnBeforeSave() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.Microsoft#Office#Tools#ICachedDataPersistanceCallback#OnBeforeSave" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Office.Tools.IExtension.ExtensionBase">
      <MemberSignature Language="C#" Value="object Microsoft.Office.Tools.IExtension.ExtensionBase { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Microsoft.Office.Tools.IExtension.ExtensionBase" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Microsoft#Office#Tools#IExtension#ExtensionBase" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Modules">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Sheets Modules { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Sheets Modules" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Modules" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Sheets</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiUserEditing">
      <MemberSignature Language="C#" Value="public bool MultiUserEditing { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MultiUserEditing" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.MultiUserEditing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-827">获取一个值，该值指示工作簿是否作为共享列表打开。</span><span class="sxs-lookup"><span data-stu-id="18d1c-827">Gets a value that indicates whether the workbook is open as a shared list.</span></span></summary>
        <value><span data-ttu-id="18d1c-828">如果工作簿作为共享列表打开，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-828"><see langword="true" /> if the workbook is open as a shared list; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-829">Visual Studio 不支持共享工作簿。</span><span class="sxs-lookup"><span data-stu-id="18d1c-829">Visual Studio does not support shared workbooks.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-830">获取工作簿的名称。</span><span class="sxs-lookup"><span data-stu-id="18d1c-830">Gets the name of the workbook.</span></span></summary>
        <value><span data-ttu-id="18d1c-831">工作簿的名称。</span><span class="sxs-lookup"><span data-stu-id="18d1c-831">The name of the workbook.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-832">下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Name%2A>属性来显示当前工作簿的名称。</span><span class="sxs-lookup"><span data-stu-id="18d1c-832">The following code example uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.Name%2A> property to display the name of the current workbook.</span></span>  
  
 <span data-ttu-id="18d1c-833">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-833">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#26](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#26)]
 [!code-vb[Trin_ExcelWorkBook#26](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#26)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Names">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Names Names { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Names Names" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Names" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Names</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-834">获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Names" /> 集合，该集合表示工作簿中的所有名称（包括所有工作表特定的名称）。</span><span class="sxs-lookup"><span data-stu-id="18d1c-834">Gets a <see cref="T:Microsoft.Office.Interop.Excel.Names" /> collection that represents all the names in the workbook (including all worksheet-specific names).</span></span></summary>
        <value><span data-ttu-id="18d1c-835"><see cref="T:Microsoft.Office.Interop.Excel.Names" /> 集合，表示工作簿中的所有名称（包括所有工作表特定的名称）。</span><span class="sxs-lookup"><span data-stu-id="18d1c-835">A <see cref="T:Microsoft.Office.Interop.Excel.Names" /> collection that represents all the names in the workbook (including all worksheet-specific names).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-836">下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Names%2A>属性创建了三个<xref:Microsoft.Office.Interop.Excel.Name?displayProperty=fullName>引用工作表上的不同范围的对象`Sheet1`。</span><span class="sxs-lookup"><span data-stu-id="18d1c-836">The following code example uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.Names%2A> property to create three <xref:Microsoft.Office.Interop.Excel.Name?displayProperty=fullName> objects that refer to different ranges on worksheet `Sheet1`.</span></span> <span data-ttu-id="18d1c-837">该示例然后循环访问每个<xref:Microsoft.Office.Interop.Excel.Name?displayProperty=fullName>中的工作簿和工作表的 A 列中的名称显示`Sheet1`。</span><span class="sxs-lookup"><span data-stu-id="18d1c-837">The example then iterates through every <xref:Microsoft.Office.Interop.Excel.Name?displayProperty=fullName> in the workbook and displays the names in column A of worksheet `Sheet1`.</span></span>  
  
 <span data-ttu-id="18d1c-838">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-838">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#27](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#27)]
 [!code-vb[Trin_ExcelWorkBook#27](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#27)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="New">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Tools.Excel.WorkbookEvents_NewEventHandler New;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Tools.Excel.WorkbookEvents_NewEventHandler New" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.New" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Tools.Excel.WorkbookEvents_NewEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-839">在创建新工作簿时发生。</span><span class="sxs-lookup"><span data-stu-id="18d1c-839">Occurs when a new workbook is created.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-840">下面的代码示例演示了一个处理程序<xref:Microsoft.Office.Tools.Excel.WorkbookBase.New>事件。</span><span class="sxs-lookup"><span data-stu-id="18d1c-840">The following code example demonstrates a handler for the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.New> event.</span></span> <span data-ttu-id="18d1c-841">事件处理程序创建新的工作簿时 Microsoft Office Excel 应用程序窗口最大化。</span><span class="sxs-lookup"><span data-stu-id="18d1c-841">The event handler maximizes the Microsoft Office Excel application window when a new workbook is created.</span></span>  
  
 <span data-ttu-id="18d1c-842">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-842">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#209](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#209)]
 [!code-vb[Trin_ExcelWorkBook#209](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#209)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewChart">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_NewChartEventHandler NewChart;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_NewChartEventHandler NewChart" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.NewChart" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_NewChartEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-843">在工作簿中创建新图表时发生。</span><span class="sxs-lookup"><span data-stu-id="18d1c-843">Occurs when a new chart is created in the workbook.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NewSheet">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_NewSheetEventHandler NewSheet;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_NewSheetEventHandler NewSheet" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.NewSheet" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_NewSheetEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-844">在工作簿中创建新工作表时发生。</span><span class="sxs-lookup"><span data-stu-id="18d1c-844">Occurs when a new sheet is created in the workbook.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-845">下面的代码示例演示了一个处理程序<xref:Microsoft.Office.Tools.Excel.WorkbookBase.NewSheet>事件。</span><span class="sxs-lookup"><span data-stu-id="18d1c-845">The following code example demonstrates a handler for the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.NewSheet> event.</span></span> <span data-ttu-id="18d1c-846">创建一个新工作表时，事件处理程序将新工作表移动到工作簿中的最后一个位置。</span><span class="sxs-lookup"><span data-stu-id="18d1c-846">The event handler moves the new worksheet to the last position in the workbook when a new worksheet is created.</span></span>  
  
 <span data-ttu-id="18d1c-847">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-847">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#210](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#210)]
 [!code-vb[Trin_ExcelWorkBook#210](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#210)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewWindow">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Window NewWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Office.Interop.Excel.Window NewWindow() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.NewWindow" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Window</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="18d1c-848">创建一个新窗口。</span><span class="sxs-lookup"><span data-stu-id="18d1c-848">Creates a new window.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-849">下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.NewWindow%2A>方法来创建新的 Excel 应用程序窗口具有标题"这是一个新窗口"，但没有网格线。</span><span class="sxs-lookup"><span data-stu-id="18d1c-849">The following code example uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.NewWindow%2A> method to create a new Excel application window that has the caption "This is a new window" and does not have gridlines.</span></span>  
  
 <span data-ttu-id="18d1c-850">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-850">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#113](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#113)]
 [!code-vb[Trin_ExcelWorkBook#113](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#113)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSave">
      <MemberSignature Language="C#" Value="public string OnSave { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OnSave" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.OnSave" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSheetActivate">
      <MemberSignature Language="C#" Value="public string OnSheetActivate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OnSheetActivate" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.OnSheetActivate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSheetDeactivate">
      <MemberSignature Language="C#" Value="public string OnSheetDeactivate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OnSheetDeactivate" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.OnSheetDeactivate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnShutdown">
      <MemberSignature Language="C#" Value="protected virtual void OnShutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnShutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.OnShutdown" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnStartup">
      <MemberSignature Language="C#" Value="protected virtual void OnStartup ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStartup() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.OnStartup" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_OpenEventHandler Open;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_OpenEventHandler Open" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.Open" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_OpenEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-851">在打开工作簿时发生。</span><span class="sxs-lookup"><span data-stu-id="18d1c-851">Occurs when the workbook is opened.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-852">下面的代码示例演示了一个处理程序<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Open>事件。</span><span class="sxs-lookup"><span data-stu-id="18d1c-852">The following code example demonstrates a handler for the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.Open> event.</span></span> <span data-ttu-id="18d1c-853">当前工作簿打开时，事件处理程序会使 Microsoft Office Excel 应用程序窗口最大化。</span><span class="sxs-lookup"><span data-stu-id="18d1c-853">The event handler maximizes the Microsoft Office Excel application window when the current workbook is opened.</span></span>  
  
 <span data-ttu-id="18d1c-854">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-854">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#211](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#211)]
 [!code-vb[Trin_ExcelWorkBook#211](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#211)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenLinks">
      <MemberSignature Language="C#" Value="public void OpenLinks (string name, object readOnly, object type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OpenLinks(string name, object readOnly, object type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.OpenLinks(System.String,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="readOnly" Type="System.Object" />
        <Parameter Name="type" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="18d1c-855">Microsoft Office Excel 或 DDE/OLE 链接的名称（和从 <see cref="M:Microsoft.Office.Tools.Excel.WorkbookBase.LinkSources(System.Object)" /> 方法返回的一样）。</span><span class="sxs-lookup"><span data-stu-id="18d1c-855">The name of the Microsoft Office Excel or DDE/OLE link, as returned from the <see cref="M:Microsoft.Office.Tools.Excel.WorkbookBase.LinkSources(System.Object)" /> method.</span></span></param>
        <param name="readOnly"><span data-ttu-id="18d1c-856">如果为 <see langword="true" />，则以只读方式打开文档。</span><span class="sxs-lookup"><span data-stu-id="18d1c-856"><see langword="true" /> to open documents as read-only.</span></span> <span data-ttu-id="18d1c-857">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-857">The default value is <see langword="false" />.</span></span></param>
        <param name="type"><span data-ttu-id="18d1c-858"><see cref="T:Microsoft.Office.Interop.Excel.XlLink" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="18d1c-858">One of the <see cref="T:Microsoft.Office.Interop.Excel.XlLink" /> values.</span></span> <span data-ttu-id="18d1c-859">链接类型。</span><span class="sxs-lookup"><span data-stu-id="18d1c-859">The link type.</span></span></param>
        <summary><span data-ttu-id="18d1c-860">打开一个或多个链接的支持文档。</span><span class="sxs-lookup"><span data-stu-id="18d1c-860">Opens the supporting documents for a link or links.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a><span data-ttu-id="18d1c-861">可选参数</span><span class="sxs-lookup"><span data-stu-id="18d1c-861">Optional Parameters</span></span>  
 <span data-ttu-id="18d1c-862">可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。</span><span class="sxs-lookup"><span data-stu-id="18d1c-862">For information on optional parameters, see [Optional Parameters in Office Solutions](/visualstudio/vsto/optional-parameters-in-office-solutions).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18d1c-863">下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.LinkSources%2A>方法在当前工作簿中获取所有 Excel 链接的名称的数组。</span><span class="sxs-lookup"><span data-stu-id="18d1c-863">The following code example uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.LinkSources%2A> method to get an array of the names of all Excel links in the current workbook.</span></span> <span data-ttu-id="18d1c-864">该示例然后使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.OpenLinks%2A>方法打开每个文档为只读的。</span><span class="sxs-lookup"><span data-stu-id="18d1c-864">The example then uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.OpenLinks%2A> method to open each document as read-only.</span></span>  
  
 <span data-ttu-id="18d1c-865">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-865">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#111](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#111)]
 [!code-vb[Trin_ExcelWorkBook#111](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#111)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public object Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Parent" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-866">获取工作簿的父对象。</span><span class="sxs-lookup"><span data-stu-id="18d1c-866">Gets the parent object for the workbook.</span></span></summary>
        <value><span data-ttu-id="18d1c-867">工作簿的父对象。</span><span class="sxs-lookup"><span data-stu-id="18d1c-867">The parent object for the workbook.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-868">下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Parent%2A>属性来显示当前工作簿的父项的名称。</span><span class="sxs-lookup"><span data-stu-id="18d1c-868">The following code example uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.Parent%2A> property to display the name of the parent of the current workbook.</span></span>  
  
 <span data-ttu-id="18d1c-869">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-869">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#28](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#28)]
 [!code-vb[Trin_ExcelWorkBook#28](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#28)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Password">
      <MemberSignature Language="C#" Value="public string Password { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Password" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Password" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-870">获取或设置打开工作簿时必须提供的密码。</span><span class="sxs-lookup"><span data-stu-id="18d1c-870">Gets or sets the password that must be supplied to open the workbook.</span></span></summary>
        <value><span data-ttu-id="18d1c-871">打开工作簿时必须提供的密码。</span><span class="sxs-lookup"><span data-stu-id="18d1c-871">The password that must be supplied to open the workbook.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-872">使用强密码的组合大写和小写字母、 数字和符号。</span><span class="sxs-lookup"><span data-stu-id="18d1c-872">Use strong passwords that combine uppercase and lowercase letters, numbers, and symbols.</span></span> <span data-ttu-id="18d1c-873">弱密码不混合使用这些元素。</span><span class="sxs-lookup"><span data-stu-id="18d1c-873">Weak passwords do not mix these elements.</span></span> <span data-ttu-id="18d1c-874">强密码： Y6dh ！ et5。</span><span class="sxs-lookup"><span data-stu-id="18d1c-874">Strong password: Y6dh!et5.</span></span> <span data-ttu-id="18d1c-875">弱密码： House27。</span><span class="sxs-lookup"><span data-stu-id="18d1c-875">Weak password: House27.</span></span> <span data-ttu-id="18d1c-876">使用，以便无需将其记下可以记住的强密码。</span><span class="sxs-lookup"><span data-stu-id="18d1c-876">Use a strong password that you can remember so that you do not have to write it down.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18d1c-877">下面的代码示例检查的值<xref:Microsoft.Office.Tools.Excel.WorkbookBase.HasPassword%2A>属性来确定工作簿是否受密码保护。</span><span class="sxs-lookup"><span data-stu-id="18d1c-877">The following code example checks the value of the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.HasPassword%2A> property to determine whether the workbook is password protected.</span></span> <span data-ttu-id="18d1c-878">如果工作簿不受密码保护，然后该示例设置<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Password%2A>属性设置为密码获取用户输入，然后调用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SetPasswordEncryptionOptions%2A>方法设置的加密算法、 密钥长度设置、 设置的加密提供程序名称并启用加密文件属性。</span><span class="sxs-lookup"><span data-stu-id="18d1c-878">If the workbook is not password protected, then the example sets the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.Password%2A> property to a password obtained from user input, and then calls the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.SetPasswordEncryptionOptions%2A> method to set the encryption algorithm, set the key length, set the name of the encryption provider, and enable file property encryption.</span></span> <span data-ttu-id="18d1c-879">然后，该示例显示的值<xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionProvider%2A>， <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionAlgorithm%2A>， <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionKeyLength%2A>，和<xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionFileProperties%2A>工作表中的属性`Sheet1`。</span><span class="sxs-lookup"><span data-stu-id="18d1c-879">The example then displays the values of the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionProvider%2A>, <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionAlgorithm%2A>, <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionKeyLength%2A>, and <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionFileProperties%2A> properties in worksheet `Sheet1`.</span></span> <span data-ttu-id="18d1c-880">此示例假定方法`GetPasswordFromUserInput`其他位置定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-880">This example assumes that the method `GetPasswordFromUserInput` is defined elsewhere.</span></span>  
  
 <span data-ttu-id="18d1c-881">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-881">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#131](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#131)]
 [!code-vb[Trin_ExcelWorkBook#131](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#131)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PasswordEncryptionAlgorithm">
      <MemberSignature Language="C#" Value="public string PasswordEncryptionAlgorithm { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PasswordEncryptionAlgorithm" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionAlgorithm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-882">获取 Microsoft Office Excel 用来加密工作簿密码的算法。</span><span class="sxs-lookup"><span data-stu-id="18d1c-882">Gets the algorithm that Microsoft Office Excel uses to encrypt passwords for the workbook.</span></span></summary>
        <value><span data-ttu-id="18d1c-883">Excel 用来加密工作簿密码的算法。</span><span class="sxs-lookup"><span data-stu-id="18d1c-883">The algorithm that Excel uses to encrypt passwords for the workbook.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-884">使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SetPasswordEncryptionOptions%2A>方法，以指定 Excel 是否对受密码保护工作簿的文件属性进行加密。</span><span class="sxs-lookup"><span data-stu-id="18d1c-884">Use the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.SetPasswordEncryptionOptions%2A> method to specify whether Excel encrypts file properties for password-protected workbooks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18d1c-885">下面的代码示例检查的值<xref:Microsoft.Office.Tools.Excel.WorkbookBase.HasPassword%2A>属性来确定工作簿是否受密码保护。</span><span class="sxs-lookup"><span data-stu-id="18d1c-885">The following code example checks the value of the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.HasPassword%2A> property to determine whether the workbook is password protected.</span></span> <span data-ttu-id="18d1c-886">如果工作簿不受密码保护，然后该示例设置<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Password%2A>属性设置为密码获取用户输入，然后调用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SetPasswordEncryptionOptions%2A>方法设置的加密算法、 密钥长度设置、 设置的加密提供程序名称并启用加密文件属性。</span><span class="sxs-lookup"><span data-stu-id="18d1c-886">If the workbook is not password protected, then the example sets the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.Password%2A> property to a password obtained from user input, and then calls the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.SetPasswordEncryptionOptions%2A> method to set the encryption algorithm, set the key length, set the name of the encryption provider, and enable file property encryption.</span></span> <span data-ttu-id="18d1c-887">然后，该示例显示的值<xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionProvider%2A>， <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionAlgorithm%2A>， <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionKeyLength%2A>，和<xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionFileProperties%2A>工作表中的属性`Sheet1`。</span><span class="sxs-lookup"><span data-stu-id="18d1c-887">The example then displays the values of the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionProvider%2A>, <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionAlgorithm%2A>, <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionKeyLength%2A>, and <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionFileProperties%2A> properties in worksheet `Sheet1`.</span></span> <span data-ttu-id="18d1c-888">此示例假定方法`GetPasswordFromUserInput`其他位置定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-888">This example assumes that the method `GetPasswordFromUserInput` is defined elsewhere.</span></span>  
  
 <span data-ttu-id="18d1c-889">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-889">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#131](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#131)]
 [!code-vb[Trin_ExcelWorkBook#131](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#131)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PasswordEncryptionFileProperties">
      <MemberSignature Language="C#" Value="public bool PasswordEncryptionFileProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PasswordEncryptionFileProperties" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionFileProperties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-890">获取一个值，该值指示 Microsoft Office Excel 是否对受密码保护的指定工作簿的文件属性进行加密。</span><span class="sxs-lookup"><span data-stu-id="18d1c-890">Gets a value that indicates whether Microsoft Office Excel encrypts file properties for the specified password-protected workbook.</span></span></summary>
        <value><span data-ttu-id="18d1c-891">如果 Excel 对受密码保护的指定工作簿的文件属性进行加密，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-891"><see langword="true" /> if Excel encrypts file properties for the specified password-protected workbook; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-892">使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SetPasswordEncryptionOptions%2A>方法，以指定 Excel 是否对指定的受密码保护的工作簿的文件属性进行加密。</span><span class="sxs-lookup"><span data-stu-id="18d1c-892">Use the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.SetPasswordEncryptionOptions%2A> method to specify whether Excel encrypts file properties for the specified password-protected workbook.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18d1c-893">下面的代码示例检查的值<xref:Microsoft.Office.Tools.Excel.WorkbookBase.HasPassword%2A>属性来确定工作簿是否受密码保护。</span><span class="sxs-lookup"><span data-stu-id="18d1c-893">The following code example checks the value of the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.HasPassword%2A> property to determine whether the workbook is password protected.</span></span> <span data-ttu-id="18d1c-894">如果工作簿不受密码保护，然后该示例设置<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Password%2A>属性设置为密码获取用户输入，然后调用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SetPasswordEncryptionOptions%2A>方法设置的加密算法、 密钥长度设置、 设置的加密提供程序名称并启用加密文件属性。</span><span class="sxs-lookup"><span data-stu-id="18d1c-894">If the workbook is not password protected, then the example sets the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.Password%2A> property to a password obtained from user input, and then calls the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.SetPasswordEncryptionOptions%2A> method to set the encryption algorithm, set the key length, set the name of the encryption provider, and enable file property encryption.</span></span> <span data-ttu-id="18d1c-895">然后，该示例显示的值<xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionProvider%2A>， <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionAlgorithm%2A>， <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionKeyLength%2A>，和<xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionFileProperties%2A>工作表中的属性`Sheet1`。</span><span class="sxs-lookup"><span data-stu-id="18d1c-895">The example then displays the values of the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionProvider%2A>, <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionAlgorithm%2A>, <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionKeyLength%2A>, and <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionFileProperties%2A> properties in worksheet `Sheet1`.</span></span> <span data-ttu-id="18d1c-896">此示例假定方法`GetPasswordFromUserInput`其他位置定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-896">This example assumes that the method `GetPasswordFromUserInput` is defined elsewhere.</span></span>  
  
 <span data-ttu-id="18d1c-897">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-897">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#131](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#131)]
 [!code-vb[Trin_ExcelWorkBook#131](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#131)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PasswordEncryptionKeyLength">
      <MemberSignature Language="C#" Value="public int PasswordEncryptionKeyLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PasswordEncryptionKeyLength" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionKeyLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-898">获取 Microsoft Office Excel 用来加密工作簿密码的算法的密钥长度。</span><span class="sxs-lookup"><span data-stu-id="18d1c-898">Gets the key length of the algorithm that Microsoft Office Excel uses when encrypting passwords for the workbook.</span></span></summary>
        <value><span data-ttu-id="18d1c-899">Excel 用来加密工作簿密码的算法的密钥长度。</span><span class="sxs-lookup"><span data-stu-id="18d1c-899">The key length of the algorithm that Excel uses when encrypting passwords for the workbook.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-900">使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SetPasswordEncryptionOptions%2A>方法，以指定 Excel 是否对指定的受密码保护的工作簿的文件属性进行加密。</span><span class="sxs-lookup"><span data-stu-id="18d1c-900">Use the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.SetPasswordEncryptionOptions%2A> method to specify whether Excel encrypts file properties for the specified password-protected workbook.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18d1c-901">下面的代码示例检查的值<xref:Microsoft.Office.Tools.Excel.WorkbookBase.HasPassword%2A>属性来确定工作簿是否受密码保护。</span><span class="sxs-lookup"><span data-stu-id="18d1c-901">The following code example checks the value of the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.HasPassword%2A> property to determine whether the workbook is password protected.</span></span> <span data-ttu-id="18d1c-902">如果工作簿不受密码保护，然后该示例设置<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Password%2A>属性设置为密码获取用户输入，然后调用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SetPasswordEncryptionOptions%2A>方法设置的加密算法、 密钥长度设置、 设置的加密提供程序名称并启用加密文件属性。</span><span class="sxs-lookup"><span data-stu-id="18d1c-902">If the workbook is not password protected, then the example sets the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.Password%2A> property to a password obtained from user input, and then calls the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.SetPasswordEncryptionOptions%2A> method to set the encryption algorithm, set the key length, set the name of the encryption provider, and enable file property encryption.</span></span> <span data-ttu-id="18d1c-903">然后，该示例显示的值<xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionProvider%2A>， <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionAlgorithm%2A>， <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionKeyLength%2A>，和<xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionFileProperties%2A>工作表中的属性`Sheet1`。</span><span class="sxs-lookup"><span data-stu-id="18d1c-903">The example then displays the values of the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionProvider%2A>, <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionAlgorithm%2A>, <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionKeyLength%2A>, and <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionFileProperties%2A> properties in worksheet `Sheet1`.</span></span> <span data-ttu-id="18d1c-904">此示例假定方法`GetPasswordFromUserInput`其他位置定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-904">This example assumes that the method `GetPasswordFromUserInput` is defined elsewhere.</span></span>  
  
 <span data-ttu-id="18d1c-905">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-905">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#131](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#131)]
 [!code-vb[Trin_ExcelWorkBook#131](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#131)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PasswordEncryptionProvider">
      <MemberSignature Language="C#" Value="public string PasswordEncryptionProvider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PasswordEncryptionProvider" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionProvider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-906">获取 Microsoft Office Excel 用来加密工作簿密码的算法加密提供程序的名称。</span><span class="sxs-lookup"><span data-stu-id="18d1c-906">Gets the name of the algorithm encryption provider that Microsoft Office Excel uses when encrypting passwords for the workbook.</span></span></summary>
        <value><span data-ttu-id="18d1c-907">Excel 用来加密工作簿密码的算法加密提供程序的名称。</span><span class="sxs-lookup"><span data-stu-id="18d1c-907">The name of the algorithm encryption provider that Excel uses when encrypting passwords for the workbook.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-908">下面的代码示例检查的值<xref:Microsoft.Office.Tools.Excel.WorkbookBase.HasPassword%2A>属性来确定工作簿是否受密码保护。</span><span class="sxs-lookup"><span data-stu-id="18d1c-908">The following code example checks the value of the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.HasPassword%2A> property to determine whether the workbook is password protected.</span></span> <span data-ttu-id="18d1c-909">如果工作簿不受密码保护，然后该示例设置<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Password%2A>属性设置为密码获取用户输入，然后调用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SetPasswordEncryptionOptions%2A>方法设置的加密算法、 密钥长度设置、 设置的加密提供程序名称并启用加密文件属性。</span><span class="sxs-lookup"><span data-stu-id="18d1c-909">If the workbook is not password protected, then the example sets the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.Password%2A> property to a password obtained from user input, and then calls the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.SetPasswordEncryptionOptions%2A> method to set the encryption algorithm, set the key length, set the name of the encryption provider, and enable file property encryption.</span></span> <span data-ttu-id="18d1c-910">然后，该示例显示的值<xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionProvider%2A>， <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionAlgorithm%2A>， <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionKeyLength%2A>，和<xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionFileProperties%2A>工作表中的属性`Sheet1`。</span><span class="sxs-lookup"><span data-stu-id="18d1c-910">The example then displays the values of the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionProvider%2A>, <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionAlgorithm%2A>, <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionKeyLength%2A>, and <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionFileProperties%2A> properties in worksheet `Sheet1`.</span></span> <span data-ttu-id="18d1c-911">此示例假定方法`GetPasswordFromUserInput`其他位置定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-911">This example assumes that the method `GetPasswordFromUserInput` is defined elsewhere.</span></span>  
  
 <span data-ttu-id="18d1c-912">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-912">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#131](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#131)]
 [!code-vb[Trin_ExcelWorkBook#131](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#131)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Path">
      <MemberSignature Language="C#" Value="public string Path { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Path" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Path" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-913">获取应用程序的完整路径，不包括最后的分隔符和应用程序的名称。</span><span class="sxs-lookup"><span data-stu-id="18d1c-913">Gets the complete path to the application, excluding the final separator and name of the application.</span></span></summary>
        <value><span data-ttu-id="18d1c-914">应用程序的完整路径，不包括最后的分隔符和应用程序的名称。</span><span class="sxs-lookup"><span data-stu-id="18d1c-914">The complete path to the application, excluding the final separator and name of the application.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-915">下面的代码示例检查的值<xref:Microsoft.Office.Tools.Excel.WorkbookBase.FileFormat%2A>属性来确定工作簿是否正常工作簿。</span><span class="sxs-lookup"><span data-stu-id="18d1c-915">The following code example checks the value of the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.FileFormat%2A> property to determine whether the workbook is a normal workbook.</span></span> <span data-ttu-id="18d1c-916">该工作簿是否正常工作簿，然后该示例调用<xref:Microsoft.Office.Tools.Excel.Worksheet.SaveAs%2A>方法以将该工作簿重新保存为具有名称的 XML 电子表格`XMLCopy.xlsx`中指定的路径<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Path%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="18d1c-916">If the workbook is a normal workbook, then the example calls the <xref:Microsoft.Office.Tools.Excel.Worksheet.SaveAs%2A> method to resave the workbook as an XML spreadsheet with the name `XMLCopy.xlsx` in the path specified by the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.Path%2A> property.</span></span>  
  
 <span data-ttu-id="18d1c-917">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-917">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#125](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#125)]
 [!code-vb[Trin_ExcelWorkBook#125](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#125)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Permission">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Core.Permission Permission { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Core.Permission Permission" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Permission" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Core.Permission</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-918">获取一个 <c>Microsoft.Office.Core.Permission</c> 对象，该对象表示工作簿中的权限设置。</span><span class="sxs-lookup"><span data-stu-id="18d1c-918">Gets a <c>Microsoft.Office.Core.Permission</c> object that represents the permission settings in the workbook.</span></span></summary>
        <value><span data-ttu-id="18d1c-919">一个<c>Microsoft.Office.Core.Permission</c>表示工作簿中的权限设置的对象。</span><span class="sxs-lookup"><span data-stu-id="18d1c-919">A <c>Microsoft.Office.Core.Permission</c> object that represents the permission settings in the workbook.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-920">下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Permission%2A>属性来显示一条消息，如果不在当前工作簿中启用权限。</span><span class="sxs-lookup"><span data-stu-id="18d1c-920">The following code example uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.Permission%2A> property to display a message if permissions are not enabled on the current workbook.</span></span>  
  
 <span data-ttu-id="18d1c-921">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-921">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#29](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#29)]
 [!code-vb[Trin_ExcelWorkBook#29](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#29)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PersonalViewListSettings">
      <MemberSignature Language="C#" Value="public bool PersonalViewListSettings { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PersonalViewListSettings" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.PersonalViewListSettings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-922">获取或设置一个值，该值指示列表的筛选器设置和排序设置是否包括在共享工作簿的用户个人视图中。</span><span class="sxs-lookup"><span data-stu-id="18d1c-922">Gets or sets a value that indicates whether filter and sort settings for lists are included in the user's personal view of the shared workbook.</span></span></summary>
        <value><span data-ttu-id="18d1c-923">如果列表的筛选器设置和排序设置包括在共享工作簿的用户个人视图中，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-923"><see langword="true" /> if filter and sort settings for lists are included in the user's personal view of the shared workbook; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PersonalViewPrintSettings">
      <MemberSignature Language="C#" Value="public bool PersonalViewPrintSettings { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PersonalViewPrintSettings" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.PersonalViewPrintSettings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-924">获取或设置一个值，该值指示打印设置是否包括在共享工作簿的用户个人视图中。</span><span class="sxs-lookup"><span data-stu-id="18d1c-924">Gets or sets a value that indicates whether print settings are included in the user's personal view of the shared workbook.</span></span></summary>
        <value><span data-ttu-id="18d1c-925">如果打印设置包括在共享工作簿的用户个人视图中，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-925"><see langword="true" /> if print settings are included in the user's personal view of the shared workbook; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PivotCaches">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.PivotCaches PivotCaches ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Office.Interop.Excel.PivotCaches PivotCaches() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.PivotCaches" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.PivotCaches</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="18d1c-926">获取一个 <see cref="T:Microsoft.Office.Interop.Excel.PivotCaches" /> 集合，该集合表示指定工作簿中的所有数据透视表缓存。</span><span class="sxs-lookup"><span data-stu-id="18d1c-926">Gets a <see cref="T:Microsoft.Office.Interop.Excel.PivotCaches" /> collection that represents all the PivotTable caches in the specified workbook.</span></span></summary>
        <returns><span data-ttu-id="18d1c-927"><see cref="T:Microsoft.Office.Interop.Excel.PivotCaches" /> 集合，表示指定工作簿中的所有数据透视表缓存。</span><span class="sxs-lookup"><span data-stu-id="18d1c-927">A <see cref="T:Microsoft.Office.Interop.Excel.PivotCaches" /> collection that represents all the PivotTable caches in the specified workbook.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-928">下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.PivotCaches%2A>方法以设置每个<xref:Microsoft.Office.Interop.Excel.PivotCache?displayProperty=fullName>当前工作簿自动更新每个时间中打开工作簿。</span><span class="sxs-lookup"><span data-stu-id="18d1c-928">The following code example uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PivotCaches%2A> method to set each <xref:Microsoft.Office.Interop.Excel.PivotCache?displayProperty=fullName> in the current workbook to update automatically each time the workbook is opened.</span></span>  
  
 <span data-ttu-id="18d1c-929">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-929">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#114](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#114)]
 [!code-vb[Trin_ExcelWorkBook#114](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#114)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PivotTableCloseConnection">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_PivotTableCloseConnectionEventHandler PivotTableCloseConnection;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_PivotTableCloseConnectionEventHandler PivotTableCloseConnection" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.PivotTableCloseConnection" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_PivotTableCloseConnectionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-930">在数据透视表关闭到其数据源的连接后发生。</span><span class="sxs-lookup"><span data-stu-id="18d1c-930">Occurs after a PivotTable report closes the connection to its data source.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-931">下面的代码示例演示了一个处理程序<xref:Microsoft.Office.Tools.Excel.WorkbookBase.PivotTableCloseConnection>事件。</span><span class="sxs-lookup"><span data-stu-id="18d1c-931">The following code example demonstrates a handler for the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PivotTableCloseConnection> event.</span></span> <span data-ttu-id="18d1c-932">数据透视表关闭到其数据源连接时，事件处理程序将显示一条消息。</span><span class="sxs-lookup"><span data-stu-id="18d1c-932">The event handler displays a message when a PivotTable report closes the connection to its data source.</span></span>  
  
 <span data-ttu-id="18d1c-933">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-933">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#212](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#212)]
 [!code-vb[Trin_ExcelWorkBook#212](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#212)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PivotTableOpenConnection">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_PivotTableOpenConnectionEventHandler PivotTableOpenConnection;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_PivotTableOpenConnectionEventHandler PivotTableOpenConnection" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.PivotTableOpenConnection" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_PivotTableOpenConnectionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-934">在数据透视表打开到其数据源的连接后发生。</span><span class="sxs-lookup"><span data-stu-id="18d1c-934">Occurs after a PivotTable report opens the connection to its data source.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-935">下面的代码示例演示了一个处理程序<xref:Microsoft.Office.Tools.Excel.WorkbookBase.PivotTableOpenConnection>事件。</span><span class="sxs-lookup"><span data-stu-id="18d1c-935">The following code example demonstrates a handler for the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PivotTableOpenConnection> event.</span></span> <span data-ttu-id="18d1c-936">数据透视表打开到其数据源连接时，事件处理程序将显示一条消息。</span><span class="sxs-lookup"><span data-stu-id="18d1c-936">The event handler displays a message when a PivotTable report opens the connection to its data source.</span></span>  
  
 <span data-ttu-id="18d1c-937">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-937">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#213](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#213)]
 [!code-vb[Trin_ExcelWorkBook#213](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#213)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PivotTableWizard">
      <MemberSignature Language="C#" Value="public void PivotTableWizard (object sourceType, object sourceData, object tableDestination, object tableName, object rowGrand, object columnGrand, object saveData, object hasAutoFormat, object autoPage, object reserved, object backgroundQuery, object optimizeCache, object pageFieldOrder, object pageFieldWrapCount, object readData, object connection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PivotTableWizard(object sourceType, object sourceData, object tableDestination, object tableName, object rowGrand, object columnGrand, object saveData, object hasAutoFormat, object autoPage, object reserved, object backgroundQuery, object optimizeCache, object pageFieldOrder, object pageFieldWrapCount, object readData, object connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.PivotTableWizard(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceType" Type="System.Object" />
        <Parameter Name="sourceData" Type="System.Object" />
        <Parameter Name="tableDestination" Type="System.Object" />
        <Parameter Name="tableName" Type="System.Object" />
        <Parameter Name="rowGrand" Type="System.Object" />
        <Parameter Name="columnGrand" Type="System.Object" />
        <Parameter Name="saveData" Type="System.Object" />
        <Parameter Name="hasAutoFormat" Type="System.Object" />
        <Parameter Name="autoPage" Type="System.Object" />
        <Parameter Name="reserved" Type="System.Object" />
        <Parameter Name="backgroundQuery" Type="System.Object" />
        <Parameter Name="optimizeCache" Type="System.Object" />
        <Parameter Name="pageFieldOrder" Type="System.Object" />
        <Parameter Name="pageFieldWrapCount" Type="System.Object" />
        <Parameter Name="readData" Type="System.Object" />
        <Parameter Name="connection" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="sourceType">To be added.</param>
        <param name="sourceData">To be added.</param>
        <param name="tableDestination">To be added.</param>
        <param name="tableName">To be added.</param>
        <param name="rowGrand">To be added.</param>
        <param name="columnGrand">To be added.</param>
        <param name="saveData">To be added.</param>
        <param name="hasAutoFormat">To be added.</param>
        <param name="autoPage">To be added.</param>
        <param name="reserved">To be added.</param>
        <param name="backgroundQuery">To be added.</param>
        <param name="optimizeCache">To be added.</param>
        <param name="pageFieldOrder">To be added.</param>
        <param name="pageFieldWrapCount">To be added.</param>
        <param name="readData">To be added.</param>
        <param name="connection">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Post">
      <MemberSignature Language="C#" Value="public void Post (object destName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Post(object destName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.Post(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="destName"><span data-ttu-id="18d1c-938">此参数忽略。</span><span class="sxs-lookup"><span data-stu-id="18d1c-938">This argument is ignored.</span></span> <span data-ttu-id="18d1c-939"><see cref="M:Microsoft.Office.Tools.Excel.WorkbookBase.Post(System.Object)" /> 方法提示用户指定工作簿的目标。</span><span class="sxs-lookup"><span data-stu-id="18d1c-939">The <see cref="M:Microsoft.Office.Tools.Excel.WorkbookBase.Post(System.Object)" /> method prompts the user to specify the destination for the workbook.</span></span></param>
        <summary><span data-ttu-id="18d1c-940">将工作簿发送到公共文件夹。</span><span class="sxs-lookup"><span data-stu-id="18d1c-940">Posts the workbook to a public folder.</span></span> <span data-ttu-id="18d1c-941">此方法仅用于连接到 Microsoft Exchange 服务器的 Microsoft Exchange 客户端。</span><span class="sxs-lookup"><span data-stu-id="18d1c-941">This method works only with a Microsoft Exchange client connected to a Microsoft Exchange server.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a><span data-ttu-id="18d1c-942">可选参数</span><span class="sxs-lookup"><span data-stu-id="18d1c-942">Optional Parameters</span></span>  
 <span data-ttu-id="18d1c-943">可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。</span><span class="sxs-lookup"><span data-stu-id="18d1c-943">For information on optional parameters, see [Optional Parameters in Office Solutions](/visualstudio/vsto/optional-parameters-in-office-solutions).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PrecisionAsDisplayed">
      <MemberSignature Language="C#" Value="public bool PrecisionAsDisplayed { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PrecisionAsDisplayed" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.PrecisionAsDisplayed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-944">获取或设置一个值，该值指示是否仅使用数字所显示的精度来完成工作簿中的计算。</span><span class="sxs-lookup"><span data-stu-id="18d1c-944">Gets or sets a value that indicates whether calculations in this workbook will be done using only the precision of the numbers as they are displayed.</span></span></summary>
        <value><span data-ttu-id="18d1c-945">如果仅使用数字所显示的精度来完成工作簿中的计算，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-945"><see langword="true" /> if calculations in this workbook will be done using only the precision of the numbers as they are displayed; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrintOut">
      <MemberSignature Language="C#" Value="public void PrintOut (object from, object to, object copies, object preview, object activePrinter, object printToFile, object collate, object prToFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PrintOut(object from, object to, object copies, object preview, object activePrinter, object printToFile, object collate, object prToFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.PrintOut(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="from" Type="System.Object" />
        <Parameter Name="to" Type="System.Object" />
        <Parameter Name="copies" Type="System.Object" />
        <Parameter Name="preview" Type="System.Object" />
        <Parameter Name="activePrinter" Type="System.Object" />
        <Parameter Name="printToFile" Type="System.Object" />
        <Parameter Name="collate" Type="System.Object" />
        <Parameter Name="prToFileName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="from">To be added.</param>
        <param name="to">To be added.</param>
        <param name="copies">To be added.</param>
        <param name="preview">To be added.</param>
        <param name="activePrinter">To be added.</param>
        <param name="printToFile">To be added.</param>
        <param name="collate">To be added.</param>
        <param name="prToFileName">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrintOutEx">
      <MemberSignature Language="C#" Value="public void PrintOutEx (object from, object to, object copies, object preview, object activePrinter, object printToFile, object collate, object prToFileName, object ignorePrintAreas);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PrintOutEx(object from, object to, object copies, object preview, object activePrinter, object printToFile, object collate, object prToFileName, object ignorePrintAreas) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.PrintOutEx(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="from" Type="System.Object" />
        <Parameter Name="to" Type="System.Object" />
        <Parameter Name="copies" Type="System.Object" />
        <Parameter Name="preview" Type="System.Object" />
        <Parameter Name="activePrinter" Type="System.Object" />
        <Parameter Name="printToFile" Type="System.Object" />
        <Parameter Name="collate" Type="System.Object" />
        <Parameter Name="prToFileName" Type="System.Object" />
        <Parameter Name="ignorePrintAreas" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="from"><span data-ttu-id="18d1c-946">要从其处开始打印的页码。</span><span class="sxs-lookup"><span data-stu-id="18d1c-946">The number of the page at which to start printing.</span></span> <span data-ttu-id="18d1c-947">如果省略此参数，则打印从第一页开始。</span><span class="sxs-lookup"><span data-stu-id="18d1c-947">If this argument is omitted, printing starts at the beginning.</span></span></param>
        <param name="to"><span data-ttu-id="18d1c-948">要打印的最后一页的页码。</span><span class="sxs-lookup"><span data-stu-id="18d1c-948">The number of the last page to print.</span></span> <span data-ttu-id="18d1c-949">若忽略此参数，则打印至最后一页。</span><span class="sxs-lookup"><span data-stu-id="18d1c-949">If this argument is omitted, printing ends with the last page.</span></span></param>
        <param name="copies"><span data-ttu-id="18d1c-950">要打印的份数。</span><span class="sxs-lookup"><span data-stu-id="18d1c-950">The number of copies to print.</span></span> <span data-ttu-id="18d1c-951">如果忽略此参数，则打印一份。</span><span class="sxs-lookup"><span data-stu-id="18d1c-951">If this argument is omitted, one copy is printed.</span></span></param>
        <param name="preview"><span data-ttu-id="18d1c-952">若要在打印对象前让 Microsoft Office Excel 调用打印预览，请使用 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-952"><see langword="true" /> to have Microsoft Office Excel invoke print preview before printing the object.</span></span> <span data-ttu-id="18d1c-953">若要立即打印对象，请使用 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-953"><see langword="false" /> to print the object immediately.</span></span></param>
        <param name="activePrinter"><span data-ttu-id="18d1c-954">设置活动打印机的名称。</span><span class="sxs-lookup"><span data-stu-id="18d1c-954">Sets the name of the active printer.</span></span></param>
        <param name="printToFile"><span data-ttu-id="18d1c-955">若要打印到文件，请使用 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-955"><see langword="true" /> to print to a file.</span></span> <span data-ttu-id="18d1c-956">若未指定 <c>PrToFileName</c>，则 Excel 会提示用户输入输出文件的名称。</span><span class="sxs-lookup"><span data-stu-id="18d1c-956">If <c>PrToFileName</c> is not specified, Excel prompts the user to enter the name of the output file.</span></span></param>
        <param name="collate"><span data-ttu-id="18d1c-957">若逐份打印多个副本，请使用 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-957"><see langword="true" /> to collate multiple copies.</span></span></param>
        <param name="prToFileName"><span data-ttu-id="18d1c-958">如果 <c>PrintToFile</c> 设为 <see langword="true" />，则此参数指定要打印到的文件的名称。</span><span class="sxs-lookup"><span data-stu-id="18d1c-958">If <c>PrintToFile</c> is set to <see langword="true" />, this argument specifies the name of the file you want to print to.</span></span></param>
        <param name="ignorePrintAreas"><span data-ttu-id="18d1c-959">如果要忽略打印区域并打印整个工作簿，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-959"><see langword="true" /> to ignore print areas and print the entire workbook; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="18d1c-960">打印工作簿。</span><span class="sxs-lookup"><span data-stu-id="18d1c-960">Prints the workbook.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-961">"页"中的说明`From`和`To`指打印的页面，不适用于表或工作簿中的所有页。</span><span class="sxs-lookup"><span data-stu-id="18d1c-961">"Pages" in the descriptions of `From` and `To` refers to printed pages, not to overall pages in the sheet or workbook.</span></span>  
  
## <a name="optional-parameters"></a><span data-ttu-id="18d1c-962">可选参数</span><span class="sxs-lookup"><span data-stu-id="18d1c-962">Optional Parameters</span></span>  
 <span data-ttu-id="18d1c-963">可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。</span><span class="sxs-lookup"><span data-stu-id="18d1c-963">For information on optional parameters, see [Optional Parameters in Office Solutions](/visualstudio/vsto/optional-parameters-in-office-solutions).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18d1c-964">下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.PrintOutEx%2A>方法打印到默认打印机工作簿的前两个打印页面的两个已设置排序规则的副本。</span><span class="sxs-lookup"><span data-stu-id="18d1c-964">The following code example uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PrintOutEx%2A> method to print two collated copies of the first two printed pages of the workbook to the default printer.</span></span>  
  
 <span data-ttu-id="18d1c-965">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-965">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook_Additional#7](~/snippets/csharp/VS_Snippets_OfficeSP/trin_excelworkbook_additional/cs/ThisWorkbook.cs#7)]
 [!code-vb[Trin_ExcelWorkBook_Additional#7](~/snippets/visualbasic/VS_Snippets_OfficeSP/trin_excelworkbook_additional/vb/ThisWorkbook.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PrintPreview">
      <MemberSignature Language="C#" Value="public void PrintPreview (object enableChanges);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PrintPreview(object enableChanges) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.PrintPreview(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enableChanges" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="enableChanges"><span data-ttu-id="18d1c-966">如果为 <see langword="true" />，则允许在显示打印预览时更改边距和页面设置；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-966"><see langword="true" /> to allow changes to the margins and page setup while displaying the print preview; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="18d1c-967">显示与打印效果相同的对象的预览。</span><span class="sxs-lookup"><span data-stu-id="18d1c-967">Shows a preview of the object as it would look when printed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a><span data-ttu-id="18d1c-968">可选参数</span><span class="sxs-lookup"><span data-stu-id="18d1c-968">Optional Parameters</span></span>  
 <span data-ttu-id="18d1c-969">可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。</span><span class="sxs-lookup"><span data-stu-id="18d1c-969">For information on optional parameters, see [Optional Parameters in Office Solutions](/visualstudio/vsto/optional-parameters-in-office-solutions).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18d1c-970">下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.PrintPreview%2A>方法来显示当前工作簿的打印预览。</span><span class="sxs-lookup"><span data-stu-id="18d1c-970">The following code example uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PrintPreview%2A> method to show a print preview of the current workbook.</span></span>  
  
 <span data-ttu-id="18d1c-971">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-971">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#117](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#117)]
 [!code-vb[Trin_ExcelWorkBook#117](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#117)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Protect">
      <MemberSignature Language="C#" Value="public void Protect (object password, object structure, object windows);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Protect(object password, object structure, object windows) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.Protect(System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="password" Type="System.Object" />
        <Parameter Name="structure" Type="System.Object" />
        <Parameter Name="windows" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="password"><span data-ttu-id="18d1c-972">工作簿的密码，区分大小写。</span><span class="sxs-lookup"><span data-stu-id="18d1c-972">A case-sensitive password for the workbook.</span></span> <span data-ttu-id="18d1c-973">如果省略此参数，则无需使用密码即可取消保护工作簿。</span><span class="sxs-lookup"><span data-stu-id="18d1c-973">If this argument is omitted, you can unprotect the workbook without using a password.</span></span> <span data-ttu-id="18d1c-974">否则，必须指定密码才能取消保护工作簿。</span><span class="sxs-lookup"><span data-stu-id="18d1c-974">Otherwise, you must specify the password to unprotect the workbook.</span></span></param>
        <param name="structure"><span data-ttu-id="18d1c-975">如果为 <see langword="true" />，则保护工作簿的结构（工作表的相对位置）。</span><span class="sxs-lookup"><span data-stu-id="18d1c-975"><see langword="true" /> to protect the structure of the workbook (the relative position of the sheets).</span></span> <span data-ttu-id="18d1c-976">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-976">The default value is <see langword="false" />.</span></span></param>
        <param name="windows"><span data-ttu-id="18d1c-977">如果为 <see langword="true" />，则保护工作簿窗口。</span><span class="sxs-lookup"><span data-stu-id="18d1c-977"><see langword="true" /> to protect the workbook windows.</span></span> <span data-ttu-id="18d1c-978">如果省略此参数，则窗口不受保护。</span><span class="sxs-lookup"><span data-stu-id="18d1c-978">If this argument is omitted, the windows are not protected.</span></span></param>
        <summary><span data-ttu-id="18d1c-979">保护工作簿使其无法修改。</span><span class="sxs-lookup"><span data-stu-id="18d1c-979">Protects a workbook so that it cannot be modified.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-980">使用强密码的组合大写和小写字母、 数字和符号。</span><span class="sxs-lookup"><span data-stu-id="18d1c-980">Use strong passwords that combine uppercase and lowercase letters, numbers, and symbols.</span></span> <span data-ttu-id="18d1c-981">弱密码不混合使用这些元素。</span><span class="sxs-lookup"><span data-stu-id="18d1c-981">Weak passwords do not mix these elements.</span></span> <span data-ttu-id="18d1c-982">例如，"Y6dh ！ et5"强密码，但"House27"是弱密码。</span><span class="sxs-lookup"><span data-stu-id="18d1c-982">For example, "Y6dh!et5" is a strong password, but "House27" is a weak password.</span></span> <span data-ttu-id="18d1c-983">使用，以便无需将其记下可以记住的强密码。</span><span class="sxs-lookup"><span data-stu-id="18d1c-983">Use a strong password that you can remember so that you do not have to write it down.</span></span>  
  
## <a name="optional-parameters"></a><span data-ttu-id="18d1c-984">可选参数</span><span class="sxs-lookup"><span data-stu-id="18d1c-984">Optional Parameters</span></span>  
 <span data-ttu-id="18d1c-985">可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。</span><span class="sxs-lookup"><span data-stu-id="18d1c-985">For information on optional parameters, see [Optional Parameters in Office Solutions](/visualstudio/vsto/optional-parameters-in-office-solutions).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18d1c-986">下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Protect%2A>方法来保护工作簿和工作簿窗口，而无需指定密码保护的结构。</span><span class="sxs-lookup"><span data-stu-id="18d1c-986">The following code example uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.Protect%2A> method to protect the structure of the workbook and workbook windows, but without specifying password protection.</span></span> <span data-ttu-id="18d1c-987">该示例然后检查的值<xref:Microsoft.Office.Tools.Excel.WorkbookBase.ProtectStructure%2A>和<xref:Microsoft.Office.Tools.Excel.WorkbookBase.ProtectWindows%2A>属性，以验证是否设置了此保护。</span><span class="sxs-lookup"><span data-stu-id="18d1c-987">The example then checks the values of the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.ProtectStructure%2A> and <xref:Microsoft.Office.Tools.Excel.WorkbookBase.ProtectWindows%2A> properties to verify that this protection is set.</span></span>  
  
 <span data-ttu-id="18d1c-988">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-988">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#30](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#30)]
 [!code-vb[Trin_ExcelWorkBook#30](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#30)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectDocument">
      <MemberSignature Language="C#" Value="protected virtual void ProtectDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ProtectDocument() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.ProtectDocument" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="18d1c-989">由 [!INCLUDE[vsto_runtime](~/includes/vsto-runtime-md.md)] 调用，以便可在保存缓存数据后，重新对工作簿应用密码保护。</span><span class="sxs-lookup"><span data-stu-id="18d1c-989">Called by the [!INCLUDE[vsto_runtime](~/includes/vsto-runtime-md.md)] so that you can reapply password protection to the workbook after the cached data has been saved.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-990">如果您的工作簿受密码保护，并且它包含的缓存的数据，可能会在运行时更改 Excel 重写此方法在文档级项目中。</span><span class="sxs-lookup"><span data-stu-id="18d1c-990">Override this method in a document-level project for Excel if your workbook is protected by using a password, and it contains cached data that might be changed at run time.</span></span> <span data-ttu-id="18d1c-991">在此方法的实现中，使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Protect%2A>方法来保护工作簿。</span><span class="sxs-lookup"><span data-stu-id="18d1c-991">In your implementation of this method, use the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.Protect%2A> method to protect the workbook.</span></span>  
  
 <span data-ttu-id="18d1c-992">默认情况下，对受密码保护的工作簿中的缓存数据的更改不会保留时保存工作簿。</span><span class="sxs-lookup"><span data-stu-id="18d1c-992">By default, changes to cached data in a password-protected workbook are not persisted when the workbook is saved.</span></span> <span data-ttu-id="18d1c-993">若要将更改保存到缓存的数据，必须在你的项目中重写以下方法：</span><span class="sxs-lookup"><span data-stu-id="18d1c-993">To save changes to the cached data, you must override the following methods in your project:</span></span>  
  
-   <span data-ttu-id="18d1c-994"><xref:Microsoft.Office.Tools.Excel.WorkbookBase.UnprotectDocument%2A>。</span><span class="sxs-lookup"><span data-stu-id="18d1c-994"><xref:Microsoft.Office.Tools.Excel.WorkbookBase.UnprotectDocument%2A>.</span></span> <span data-ttu-id="18d1c-995">保存该工作簿后，[!INCLUDE[vsto_runtime](~/includes/vsto-runtime-md.md)]调用此方法。</span><span class="sxs-lookup"><span data-stu-id="18d1c-995">When the workbook is saved, the [!INCLUDE[vsto_runtime](~/includes/vsto-runtime-md.md)] calls this method.</span></span> <span data-ttu-id="18d1c-996">将代码添加到此方法可暂时取消保护工作簿。</span><span class="sxs-lookup"><span data-stu-id="18d1c-996">Add code to this method that temporarily unprotects the workbook.</span></span> <span data-ttu-id="18d1c-997">这允许缓存的数据要保存更改。</span><span class="sxs-lookup"><span data-stu-id="18d1c-997">This enables changes to the cached data to be saved.</span></span>  
  
-   <span data-ttu-id="18d1c-998"><xref:Microsoft.Office.Tools.Excel.WorkbookBase.ProtectDocument%2A>。</span><span class="sxs-lookup"><span data-stu-id="18d1c-998"><xref:Microsoft.Office.Tools.Excel.WorkbookBase.ProtectDocument%2A>.</span></span> <span data-ttu-id="18d1c-999">保存工作簿后，[!INCLUDE[vsto_runtime](~/includes/vsto-runtime-md.md)]调用此方法。</span><span class="sxs-lookup"><span data-stu-id="18d1c-999">After the workbook is saved, the [!INCLUDE[vsto_runtime](~/includes/vsto-runtime-md.md)] calls this method.</span></span> <span data-ttu-id="18d1c-1000">将代码添加到此方法的重新应用到工作簿的保护。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1000">Add code to this method that reapplies protection to the workbook.</span></span>  
  
 <span data-ttu-id="18d1c-1001">有关详细信息，请参阅[如何： Password-Protected 文档中的缓存数据](/visualstudio/vsto/how-to-cache-data-in-a-password-protected-document)。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1001">For more information, see [How to: Cache Data in a Password-Protected Document](/visualstudio/vsto/how-to-cache-data-in-a-password-protected-document).</span></span>  
  
 <span data-ttu-id="18d1c-1002">[!INCLUDE[vsto_runtime](~/includes/vsto-runtime-md.md)]调用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.ProtectDocument%2A>方法，即使由于某种错误与密码保护，无法保存缓存的数据。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1002">The [!INCLUDE[vsto_runtime](~/includes/vsto-runtime-md.md)] calls the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.ProtectDocument%2A> method even if the cached data could not be saved because of some error that is unrelated to the password protection.</span></span> <span data-ttu-id="18d1c-1003">例如，如果您实现<xref:Microsoft.VisualStudio.Tools.Applications.Runtime.ICachedType>接口可自定义缓存的数据的方式存储在文档中，<xref:Microsoft.Office.Tools.Excel.WorkbookBase.ProtectDocument%2A>调用方法即使你<xref:Microsoft.VisualStudio.Tools.Applications.Runtime.ICachedType>实现将引发异常，以防止保存缓存的数据。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1003">For example, if you implement the <xref:Microsoft.VisualStudio.Tools.Applications.Runtime.ICachedType> interface to customize how cached data is stored in the document, the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.ProtectDocument%2A> method is called even if your <xref:Microsoft.VisualStudio.Tools.Applications.Runtime.ICachedType> implementation throws an exception that prevents the cached data from being saved.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18d1c-1004">下面的代码示例演示如何重写<xref:Microsoft.Office.Tools.Excel.WorkbookBase.ProtectDocument%2A>方法重新应用已删除通过重写保护<xref:Microsoft.Office.Tools.Excel.WorkbookBase.UnprotectDocument%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1004">The following code example demonstrates how to override the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.ProtectDocument%2A> method to reapply protection that was removed by overriding the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.UnprotectDocument%2A> method.</span></span> <span data-ttu-id="18d1c-1005">若要使用此代码，运行从`ThisWorkbook`Excel 的文档级项目中的类。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1005">To use this code, run it from the `ThisWorkbook` class in a document-level project for Excel.</span></span> <span data-ttu-id="18d1c-1006">该密码存储在名为的字段中的代码假定`securelyStoredPassword`。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1006">The code assumes that the password is stored in a field named `securelyStoredPassword`.</span></span>  
  
 [!code-csharp[Trin_CachedDataProtectedWorkbook#1](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_CachedDataProtectedWorkbook/CS/ThisWorkbook.cs#1)]
 [!code-vb[Trin_CachedDataProtectedWorkbook#1](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_CachedDataProtectedWorkbook/VB/ThisWorkbook.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectSharing">
      <MemberSignature Language="C#" Value="public void ProtectSharing (object filename, object password, object writeResPassword, object readOnlyRecommended, object createBackup, object sharingPassword);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ProtectSharing(object filename, object password, object writeResPassword, object readOnlyRecommended, object createBackup, object sharingPassword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.ProtectSharing(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.Object" />
        <Parameter Name="password" Type="System.Object" />
        <Parameter Name="writeResPassword" Type="System.Object" />
        <Parameter Name="readOnlyRecommended" Type="System.Object" />
        <Parameter Name="createBackup" Type="System.Object" />
        <Parameter Name="sharingPassword" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="filename">To be added.</param>
        <param name="password">To be added.</param>
        <param name="writeResPassword">To be added.</param>
        <param name="readOnlyRecommended">To be added.</param>
        <param name="createBackup">To be added.</param>
        <param name="sharingPassword">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectSharingEx">
      <MemberSignature Language="C#" Value="public void ProtectSharingEx (object filename, object password, object writeResPassword, object readOnlyRecommended, object createBackup, object sharingPassword, object fileFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ProtectSharingEx(object filename, object password, object writeResPassword, object readOnlyRecommended, object createBackup, object sharingPassword, object fileFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.ProtectSharingEx(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.Object" />
        <Parameter Name="password" Type="System.Object" />
        <Parameter Name="writeResPassword" Type="System.Object" />
        <Parameter Name="readOnlyRecommended" Type="System.Object" />
        <Parameter Name="createBackup" Type="System.Object" />
        <Parameter Name="sharingPassword" Type="System.Object" />
        <Parameter Name="fileFormat" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="filename"><span data-ttu-id="18d1c-1007">保存的文件的名称。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1007">The name of the saved file.</span></span> <span data-ttu-id="18d1c-1008">可以包含完整路径；否则，Microsoft Office Excel 将文件保存在当前文件夹中。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1008">You can include a full path; if you do not, Microsoft Office Excel saves the file in the current folder.</span></span></param>
        <param name="password"><span data-ttu-id="18d1c-1009">工作簿的密码，区分大小写。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1009">A case-sensitive password for the workbook.</span></span> <span data-ttu-id="18d1c-1010">如果省略此参数，则无需使用密码即可取消保护工作簿。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1010">If this argument is omitted, you can unprotect the workbook without using a password.</span></span> <span data-ttu-id="18d1c-1011">否则，必须指定密码才能取消保护工作簿。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1011">Otherwise, you must specify the password to unprotect the workbook.</span></span></param>
        <param name="writeResPassword"><span data-ttu-id="18d1c-1012">文件的写保护密码。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1012">The write-reservation password for this file.</span></span> <span data-ttu-id="18d1c-1013">如果保存文件时指定了密码，但打开文件时没有提供密码，则该文件以只读方式打开。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1013">If a file is saved with the password and the password is not supplied when the file is opened, the file is opened read-only.</span></span></param>
        <param name="readOnlyRecommended"><span data-ttu-id="18d1c-1014">如果为 <see langword="true" />，则在打开该文件时显示一条消息，建议以只读方式打开该文件。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1014"><see langword="true" /> to display a message when the file is opened, recommending that the file be opened read-only.</span></span></param>
        <param name="createBackup"><span data-ttu-id="18d1c-1015">如果为 <see langword="true" />，则创建备份文件。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1015"><see langword="true" /> to create a backup file.</span></span></param>
        <param name="sharingPassword"><span data-ttu-id="18d1c-1016">要用来保护文件共享的密码。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1016">The password to be used to protect the file for sharing.</span></span></param>
        <param name="fileFormat"><span data-ttu-id="18d1c-1017">一个指示文件格式的字符串。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1017">A string that indicates the file format.</span></span></param>
        <summary><span data-ttu-id="18d1c-1018">保存工作簿，并进行共享保护。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1018">Saves the workbook and protects it for sharing.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-1019">使用强密码的组合大写和小写字母、 数字和符号。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1019">Use strong passwords that combine uppercase and lowercase letters, numbers, and symbols.</span></span> <span data-ttu-id="18d1c-1020">弱密码不混合使用这些元素。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1020">Weak passwords do not mix these elements.</span></span> <span data-ttu-id="18d1c-1021">例如，"Y6dh ！ et5"强密码，但"House27"是弱密码。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1021">For example, "Y6dh!et5" is a strong password, but "House27" is a weak password.</span></span> <span data-ttu-id="18d1c-1022">使用，以便无需将其记下可以记住的强密码。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1022">Use a strong password that you can remember so that you do not have to write it down.</span></span>  
  
## <a name="optional-parameters"></a><span data-ttu-id="18d1c-1023">可选参数</span><span class="sxs-lookup"><span data-stu-id="18d1c-1023">Optional Parameters</span></span>  
 <span data-ttu-id="18d1c-1024">可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1024">For information on optional parameters, see [Optional Parameters in Office Solutions](/visualstudio/vsto/optional-parameters-in-office-solutions).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectStructure">
      <MemberSignature Language="C#" Value="public bool ProtectStructure { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ProtectStructure" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.ProtectStructure" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-1025">获取一个值，该值指示工作簿中的表的顺序是否受保护。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1025">Gets a value that indicates whether the order of the sheets in the workbook is protected.</span></span></summary>
        <value><span data-ttu-id="18d1c-1026">如果工作簿中的表的顺序受保护，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1026"><see langword="true" /> if the order of the sheets in the workbook is protected; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-1027">下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Protect%2A>方法来保护工作簿和工作簿窗口，而无需指定密码保护的结构。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1027">The following code example uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.Protect%2A> method to protect the structure of the workbook and workbook windows, but without specifying password protection.</span></span> <span data-ttu-id="18d1c-1028">该示例然后检查的值<xref:Microsoft.Office.Tools.Excel.WorkbookBase.ProtectStructure%2A>和<xref:Microsoft.Office.Tools.Excel.WorkbookBase.ProtectWindows%2A>属性，以验证是否设置了此保护。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1028">The example then checks the values of the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.ProtectStructure%2A> and <xref:Microsoft.Office.Tools.Excel.WorkbookBase.ProtectWindows%2A> properties to verify that this protection is set.</span></span>  
  
 <span data-ttu-id="18d1c-1029">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1029">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#30](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#30)]
 [!code-vb[Trin_ExcelWorkBook#30](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#30)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectWindows">
      <MemberSignature Language="C#" Value="public bool ProtectWindows { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ProtectWindows" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.ProtectWindows" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-1030">获取一个值，该值指示工作簿窗口是否受保护。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1030">Gets a value that indicates whether the windows of the workbook are protected.</span></span></summary>
        <value><span data-ttu-id="18d1c-1031">如果工作簿窗口受保护，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1031"><see langword="true" /> if the windows of the workbook are protected; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-1032">下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Protect%2A>方法来保护工作簿和工作簿窗口，而无需指定密码保护的结构。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1032">The following code example uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.Protect%2A> method to protect the structure of the workbook and workbook windows, but without specifying password protection.</span></span> <span data-ttu-id="18d1c-1033">该示例然后检查的值<xref:Microsoft.Office.Tools.Excel.WorkbookBase.ProtectStructure%2A>和<xref:Microsoft.Office.Tools.Excel.WorkbookBase.ProtectWindows%2A>属性，以验证是否设置了此保护。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1033">The example then checks the values of the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.ProtectStructure%2A> and <xref:Microsoft.Office.Tools.Excel.WorkbookBase.ProtectWindows%2A> properties to verify that this protection is set.</span></span>  
  
 <span data-ttu-id="18d1c-1034">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1034">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#30](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#30)]
 [!code-vb[Trin_ExcelWorkBook#30](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#30)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PublishObjects">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.PublishObjects PublishObjects { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.PublishObjects PublishObjects" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.PublishObjects" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.PublishObjects</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-1035">获取 <see cref="T:Microsoft.Office.Interop.Excel.PublishObjects" /> 集合。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1035">Gets the <see cref="T:Microsoft.Office.Interop.Excel.PublishObjects" /> collection.</span></span></summary>
        <value><span data-ttu-id="18d1c-1036"><see cref="T:Microsoft.Office.Interop.Excel.PublishObjects" /> 集合。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1036">The <see cref="T:Microsoft.Office.Interop.Excel.PublishObjects" /> collection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-1037">下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.PublishObjects%2A>属性将发布所有静态<xref:Microsoft.Office.Interop.Excel.PublishObject?displayProperty=fullName>到网页的活动工作簿中的项。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1037">The following code example uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PublishObjects%2A> property to publish all static <xref:Microsoft.Office.Interop.Excel.PublishObject?displayProperty=fullName> items in the active workbook to the Web page.</span></span>  
  
 <span data-ttu-id="18d1c-1038">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1038">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#31](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#31)]
 [!code-vb[Trin_ExcelWorkBook#31](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#31)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PurgeChangeHistoryNow">
      <MemberSignature Language="C#" Value="public void PurgeChangeHistoryNow (int days, object sharingPassword);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PurgeChangeHistoryNow(int32 days, object sharingPassword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.PurgeChangeHistoryNow(System.Int32,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="days" Type="System.Int32" />
        <Parameter Name="sharingPassword" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="days"><span data-ttu-id="18d1c-1039">更改日志中的更改要保留的天数。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1039">The number of days that changes in the change log are to be retained.</span></span></param>
        <param name="sharingPassword"><span data-ttu-id="18d1c-1040">取消对工作簿的共享保护的密码。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1040">The password that unprotects the workbook for sharing.</span></span> <span data-ttu-id="18d1c-1041">如果工作簿的共享保护使用了密码，但省略了此参数，则会提示用户输入密码。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1041">If the workbook is protected for sharing with a password and this argument is omitted, the user is prompted for the password.</span></span></param>
        <summary><span data-ttu-id="18d1c-1042">从工作簿的更改日志中移除项。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1042">Removes entries from the change log for the workbook.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a><span data-ttu-id="18d1c-1043">可选参数</span><span class="sxs-lookup"><span data-stu-id="18d1c-1043">Optional Parameters</span></span>  
 <span data-ttu-id="18d1c-1044">可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1044">For information on optional parameters, see [Optional Parameters in Office Solutions](/visualstudio/vsto/optional-parameters-in-office-solutions).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public bool ReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReadOnly" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.ReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-1045">获取一个值，该值指示是否已用只读方式打开工作簿。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1045">Gets a value that indicates whether the workbook has been opened as read-only.</span></span></summary>
        <value><span data-ttu-id="18d1c-1046">如果已用只读方式打开工作簿，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1046"><see langword="true" /> if the workbook has been opened as read-only; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-1047">此属性仅用于链接到 SharePoint 站点的列表。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1047">This property is used only for lists that are linked to a SharePoint site.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18d1c-1048">下面的代码示例显示一条消息，如果<xref:Microsoft.Office.Tools.Excel.WorkbookBase.ReadOnlyRecommended%2A>属性是`true`并<xref:Microsoft.Office.Tools.Excel.WorkbookBase.ReadOnly%2A>属性是`false`，然后会提示用户设置的文件访问权限为只读、 只通过调用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.ChangeFileAccess%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1048">The following code example displays a message if the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.ReadOnlyRecommended%2A> property is `true` and the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.ReadOnly%2A> property is `false`, and then prompts the user to set the file access to read-only by calling the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.ChangeFileAccess%2A> method.</span></span>  
  
 <span data-ttu-id="18d1c-1049">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1049">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#102](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#102)]
 [!code-vb[Trin_ExcelWorkBook#102](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#102)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadOnlyRecommended">
      <MemberSignature Language="C#" Value="public bool ReadOnlyRecommended { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReadOnlyRecommended" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.ReadOnlyRecommended" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-1050">获取或设置一个值，该值指示工作簿是否保存为建议的只读方式。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1050">Gets or sets a value that indicates whether the workbook was saved as read-only recommended.</span></span></summary>
        <value><span data-ttu-id="18d1c-1051">如果工作簿保存为建议的只读方式，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1051"><see langword="true" /> if the workbook was saved as read-only recommended; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-1052">为只读的已保存建议的工作簿打开时，Microsoft Office Excel 将显示一条消息，建议您打开工作簿作为只读的。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1052">When you open a workbook that was saved as read-only recommended, Microsoft Office Excel displays a message recommending that you open the workbook as read-only.</span></span>  
  
 <span data-ttu-id="18d1c-1053">使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SaveAs%2A>方法来更改此属性。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1053">Use the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.SaveAs%2A> method to change this property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18d1c-1054">下面的代码示例显示一个消息框，如果<xref:Microsoft.Office.Tools.Excel.WorkbookBase.ReadOnlyRecommended%2A>属性是`true`并<xref:Microsoft.Office.Tools.Excel.WorkbookBase.ReadOnly%2A>属性是`false`，然后会提示用户设置的文件访问权限为只读、 只通过调用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.ChangeFileAccess%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1054">The following code example displays a message box if the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.ReadOnlyRecommended%2A> property is `true` and the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.ReadOnly%2A> property is `false`, and then prompts the user to set the file access to read-only by calling the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.ChangeFileAccess%2A> method.</span></span>  
  
 <span data-ttu-id="18d1c-1055">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1055">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#102](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#102)]
 [!code-vb[Trin_ExcelWorkBook#102](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#102)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RecheckSmartTags">
      <MemberSignature Language="C#" Value="public void RecheckSmartTags ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RecheckSmartTags() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.RecheckSmartTags" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RefreshAll">
      <MemberSignature Language="C#" Value="public void RefreshAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RefreshAll() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.RefreshAll" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="18d1c-1056">刷新工作簿中的所有外部数据范围和数据透视表。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1056">Refreshes all external data ranges and PivotTable reports in the workbook.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-1057">对象具有<xref:Microsoft.Office.Interop.Excel.PivotCache.BackgroundQuery%2A>属性设置为`true`在后台刷新一次。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1057">Objects that have the <xref:Microsoft.Office.Interop.Excel.PivotCache.BackgroundQuery%2A> property set to `true` are refreshed in the background.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RejectAllChanges">
      <MemberSignature Language="C#" Value="public void RejectAllChanges (object when, object who, object where);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RejectAllChanges(object when, object who, object where) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.RejectAllChanges(System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="when" Type="System.Object" />
        <Parameter Name="who" Type="System.Object" />
        <Parameter Name="where" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="when"><span data-ttu-id="18d1c-1058"><see cref="T:Microsoft.Office.Interop.Excel.XlHighlightChangesTime" /> 值中的一个，指定要拒绝的更改是在何时进行的。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1058">One of the <see cref="T:Microsoft.Office.Interop.Excel.XlHighlightChangesTime" /> values that specifies when the changes to be rejected were made.</span></span></param>
        <param name="who"><span data-ttu-id="18d1c-1059">一个标识进行要拒绝的更改的人的字符串。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1059">A string that identifies who made the changes to be rejected.</span></span> <span data-ttu-id="18d1c-1060">可以是“Everyone”、“Everyone but Me”或共享工作簿的用户名之一。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1060">Can be "Everyone", "Everyone but Me", or the name of one of the users of the shared workbook.</span></span></param>
        <param name="where"><span data-ttu-id="18d1c-1061">指定要拒绝的更改的位置的 A1 样式范围引用。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1061">An A1-style range reference that specifies the location of the changes to be rejected.</span></span></param>
        <summary><span data-ttu-id="18d1c-1062">拒绝共享工作簿中的所有更改。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1062">Rejects all changes in the shared workbook.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a><span data-ttu-id="18d1c-1063">可选参数</span><span class="sxs-lookup"><span data-stu-id="18d1c-1063">Optional Parameters</span></span>  
 <span data-ttu-id="18d1c-1064">可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1064">For information on optional parameters, see [Optional Parameters in Office Solutions](/visualstudio/vsto/optional-parameters-in-office-solutions).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReloadAs">
      <MemberSignature Language="C#" Value="public void ReloadAs (Microsoft.Office.Core.MsoEncoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReloadAs(valuetype Microsoft.Office.Core.MsoEncoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.ReloadAs(Microsoft.Office.Core.MsoEncoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encoding" Type="Microsoft.Office.Core.MsoEncoding" />
      </Parameters>
      <Docs>
        <param name="encoding"><span data-ttu-id="18d1c-1065"><see langword="Microsoft.Office.Core.MsoEncoding" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1065">One of the <see langword="Microsoft.Office.Core.MsoEncoding" /> values.</span></span> <span data-ttu-id="18d1c-1066">要应用于工作簿的编码。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1066">The encoding that is to be applied to the workbook.</span></span></param>
        <summary><span data-ttu-id="18d1c-1067">使用指定文档编码重新加载基于 HTML 文档的工作簿。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1067">Reloads a workbook based on an HTML document, using the specified document encoding.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-1068">下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.ReloadAs%2A>方法来重新加载工作簿使用西方文档的编码。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1068">The following code example uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.ReloadAs%2A> method to reload the workbook using the Western document encoding.</span></span> <span data-ttu-id="18d1c-1069">此示例假定当前工作簿基于 HTML 文档。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1069">This example assumes that the current workbook is based on an HTML document.</span></span>  
  
 <span data-ttu-id="18d1c-1070">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1070">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#121](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#121)]
 [!code-vb[Trin_ExcelWorkBook#121](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#121)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveCustomization">
      <MemberSignature Language="C#" Value="public void RemoveCustomization ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveCustomization() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.RemoveCustomization" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="18d1c-1071">从工作簿移除使用 Visual Studio 的 Office 开发工具创建的自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1071">Removes the customization that was created by using Office development tools in Visual Studio from the workbook.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-1072">此方法通过执行以下任务来删除自定义项：</span><span class="sxs-lookup"><span data-stu-id="18d1c-1072">This method removes the customization by performing the following tasks:</span></span>  
  
-   <span data-ttu-id="18d1c-1073">它将删除`_AssemblyName`和`_AssemblyLocation`工作簿中的自定义属性。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1073">It deletes the `_AssemblyName` and `_AssemblyLocation` custom properties from the workbook.</span></span> <span data-ttu-id="18d1c-1074">有关详细信息，请参阅[自定义文档属性概述](/visualstudio/vsto/custom-document-properties-overview)。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1074">For more information, see [Custom Document Properties Overview](/visualstudio/vsto/custom-document-properties-overview).</span></span>  
  
-   <span data-ttu-id="18d1c-1075">它从工作簿中删除缓存的数据。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1075">It deletes the cached data from the workbook.</span></span> <span data-ttu-id="18d1c-1076">有关缓存数据的详细信息，请参阅[缓存数据](/visualstudio/vsto/caching-data)。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1076">For more information about cached data, see [Caching Data](/visualstudio/vsto/caching-data).</span></span>  
  
 <span data-ttu-id="18d1c-1077">此方法可能会引发<xref:System.UnauthorizedAccessException>如果受保护工作簿。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1077">This method might throw an <xref:System.UnauthorizedAccessException> if the workbook is protected.</span></span> <span data-ttu-id="18d1c-1078">调用此方法之前，应从工作簿删除任何保护。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1078">You should remove any protection from the workbook before calling this method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:Microsoft.Office.Tools.CannotRemoveCustomizationException"><span data-ttu-id="18d1c-1079">无法从工作簿移除自定义文档属性或缓存数据。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1079">The custom document properties or the cached data could not be removed from the workbook.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="18d1c-1080">文档是受保护的。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1080">The document is protected.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveDocumentInformation">
      <MemberSignature Language="C#" Value="public void RemoveDocumentInformation (Microsoft.Office.Interop.Excel.XlRemoveDocInfoType removeDocInfoType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveDocumentInformation(valuetype Microsoft.Office.Interop.Excel.XlRemoveDocInfoType removeDocInfoType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.RemoveDocumentInformation(Microsoft.Office.Interop.Excel.XlRemoveDocInfoType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="removeDocInfoType" Type="Microsoft.Office.Interop.Excel.XlRemoveDocInfoType" />
      </Parameters>
      <Docs>
        <param name="removeDocInfoType"><span data-ttu-id="18d1c-1081"><see langword="Microsoft.Office.Interop.Excel.XlRemoveDocInfoType" /> 值之一，指定要移除的信息的类型。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1081">One of the <see langword="Microsoft.Office.Interop.Excel.XlRemoveDocInfoType" /> values that specifies the type of information to be removed.</span></span></param>
        <summary><span data-ttu-id="18d1c-1082">从工作簿中移除指定类型的所有信息。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1082">Removes all information of the specified type from the workbook.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-1083">下面的代码示例将删除当前工作簿的所有工作簿属性。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1083">The following code example removes all the workbook properties of the current workbook.</span></span>  
  
 <span data-ttu-id="18d1c-1084">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1084">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkbook_Additional#6](~/snippets/csharp/VS_Snippets_OfficeSP/trin_excelworkbook_additional/cs/ThisWorkbook.cs#6)]
 [!code-vb[Trin_ExcelWorkbook_Additional#6](~/snippets/visualbasic/VS_Snippets_OfficeSP/trin_excelworkbook_additional/vb/ThisWorkbook.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemovePersonalInformation">
      <MemberSignature Language="C#" Value="public bool RemovePersonalInformation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RemovePersonalInformation" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.RemovePersonalInformation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-1085">获取或设置一个值，该值指示个人信息是否可从工作簿中移除。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1085">Gets or sets a value that indicates whether personal information can be removed from the workbook.</span></span></summary>
        <value><span data-ttu-id="18d1c-1086">如果个人信息可从工作簿中移除，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1086"><see langword="true" /> if personal information can be removed from the workbook; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="18d1c-1087">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1087">The default value is <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveUser">
      <MemberSignature Language="C#" Value="public void RemoveUser (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveUser(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.RemoveUser(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="18d1c-1088">用户索引。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1088">The user index.</span></span></param>
        <summary><span data-ttu-id="18d1c-1089">从共享工作簿断开指定用户的连接。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1089">Disconnects the specified user from the shared workbook.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reply">
      <MemberSignature Language="C#" Value="public void Reply ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reply() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.Reply" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplyAll">
      <MemberSignature Language="C#" Value="public void ReplyAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReplyAll() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.ReplyAll" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplyWithChanges">
      <MemberSignature Language="C#" Value="public void ReplyWithChanges (object showMessage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReplyWithChanges(object showMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.ReplyWithChanges(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="showMessage" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="showMessage"><span data-ttu-id="18d1c-1090">如果为 <see langword="true" />，则显示该邮件；如果为 <see langword="false" />，则不显示该邮件。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1090"><see langword="true" /> to display the message; <see langword="false" /> to not display the message.</span></span></param>
        <summary><span data-ttu-id="18d1c-1091">向已发送审阅的工作簿的作者发送电子邮件，通知他或她审阅者已完成对该工作簿的审阅。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1091">Sends an e-mail message to the author of a workbook that has been sent out for review, notifying him or her that a reviewer has completed review of the workbook.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-1092">使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SendForReview%2A>方法以启动工作簿的协作审阅。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1092">Use the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.SendForReview%2A> method to start a collaborative review of a workbook.</span></span> <span data-ttu-id="18d1c-1093">如果<xref:Microsoft.Office.Tools.Excel.WorkbookBase.ReplyWithChanges%2A>方法上的工作簿的不是联合审阅周期的一部分执行，则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1093">If the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.ReplyWithChanges%2A> method is executed on a workbook that is not part of a collaborative review cycle, an exception is thrown.</span></span>  
  
## <a name="optional-parameters"></a><span data-ttu-id="18d1c-1094">可选参数</span><span class="sxs-lookup"><span data-stu-id="18d1c-1094">Optional Parameters</span></span>  
 <span data-ttu-id="18d1c-1095">可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1095">For information on optional parameters, see [Optional Parameters in Office Solutions](/visualstudio/vsto/optional-parameters-in-office-solutions).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18d1c-1096">下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.ReplyWithChanges%2A>方法将通知发送给作者查看工作簿的审阅者已完成的评审后显示的电子邮件消息。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1096">The following code example uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.ReplyWithChanges%2A> method to send a notification to the author of a review workbook that a reviewer has completed a review, after displaying the e-mail message.</span></span> <span data-ttu-id="18d1c-1097">此示例假定活动工作簿是协作审阅周期的一部分。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1097">This example assumes that the active workbook is part of a collaborative review cycle.</span></span>  
  
 <span data-ttu-id="18d1c-1098">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1098">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#123](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#123)]
 [!code-vb[Trin_ExcelWorkBook#123](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#123)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RequestService">
      <MemberSignature Language="C#" Value="protected virtual object RequestService (Guid serviceGuid);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object RequestService(valuetype System.Guid serviceGuid) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.RequestService(System.Guid)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceGuid" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="serviceGuid"><span data-ttu-id="18d1c-1099">一个标识 <see langword="Microsoft.Office.Core.IRibbonExtensibility" /> 接口的 <see cref="T:System.Guid" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1099">A <see cref="T:System.Guid" /> that identifies the <see langword="Microsoft.Office.Core.IRibbonExtensibility" /> interface.</span></span></param>
        <summary><span data-ttu-id="18d1c-1100">返回在文档级自定义项中实现 <c>Microsoft.Office.Core.IRibbonExtensibility</c> 接口的对象。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1100">Returns an object that implements the <c>Microsoft.Office.Core.IRibbonExtensibility</c> interface in a document-level customization.</span></span></summary>
        <returns><span data-ttu-id="18d1c-1101">文档级自定义项中实现 <c>Microsoft.Office.Core.IRibbonExtensibility</c> 接口的对象。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1101">An object in your document-level customization that implements the <c>Microsoft.Office.Core.IRibbonExtensibility</c> interface.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-1102">重写此方法，如果通过创建您自己的实现的自定义功能区的工作簿`Microsoft.Office.Core.IRibbonExtensibility`接口或通过添加**功能区 (XML)** 到你的项目项。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1102">Override this method if you are customizing the Ribbon of the workbook by creating your own implementation of the `Microsoft.Office.Core.IRibbonExtensibility` interface or by adding a **Ribbon (XML)** item to your project.</span></span>  
  
 <span data-ttu-id="18d1c-1103">如果通过添加自定义功能区**功能区 （可视化设计器）** 项到项目中，Visual Studio 将为您替代此方法。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1103">If you customize the Ribbon by adding a **Ribbon (Visual Designer)** item to your project, Visual Studio overrides this method for you.</span></span> <span data-ttu-id="18d1c-1104">有关详细信息，请参阅[功能区概述](/visualstudio/vsto/ribbon-overview)并[功能区设计器](/visualstudio/vsto/ribbon-designer)。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1104">For more information, see [Ribbon Overview](/visualstudio/vsto/ribbon-overview) and [Ribbon Designer](/visualstudio/vsto/ribbon-designer).</span></span>  
  
 <span data-ttu-id="18d1c-1105">如果重写此方法，检查的值`serviceGuid`参数，以确定是否`Microsoft.Office.Core.IRibbonExtensibility`接口，请求，然后返回实现该接口的对象。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1105">If you override this method, check the value of the `serviceGuid` parameter to determine whether the `Microsoft.Office.Core.IRibbonExtensibility` interface is being requested, and then return an object that implements the interface.</span></span> <span data-ttu-id="18d1c-1106">打开您的工作簿时，[!INCLUDE[vsto_runtime](~/includes/vsto-runtime-md.md)]调用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.RequestService%2A>，并返回值发送到 Microsoft Office Excel。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1106">When your workbook is opened, the [!INCLUDE[vsto_runtime](~/includes/vsto-runtime-md.md)] calls <xref:Microsoft.Office.Tools.Excel.WorkbookBase.RequestService%2A>, and it sends the return value to Microsoft Office Excel.</span></span> <span data-ttu-id="18d1c-1107">有关详细信息`Microsoft.Office.Core.IRibbonExtensibility`接口，请参阅[IRibbonExtensibility 对象](HV10096517)Microsoft Office 文档中。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1107">For more information about the `Microsoft.Office.Core.IRibbonExtensibility` interface, see [IRibbonExtensibility Object](HV10096517) in the Microsoft Office documentation.</span></span>  
  
 <span data-ttu-id="18d1c-1108">或者可以重写<xref:Microsoft.Office.Tools.Excel.WorkbookBase.CreateRibbonExtensibilityObject%2A>方法而不是替代<xref:Microsoft.Office.Tools.Excel.WorkbookBase.RequestService%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1108">You can alternatively override the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.CreateRibbonExtensibilityObject%2A> method instead of overriding the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.RequestService%2A> method.</span></span> <span data-ttu-id="18d1c-1109">有关详细信息，请参阅[功能区 XML](/visualstudio/vsto/ribbon-xml)。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1109">For more information, see [Ribbon XML](/visualstudio/vsto/ribbon-xml).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="18d1c-1110">`Microsoft.Office.Core.IRibbonExtensibility` 是的多个界面之一 (也称为*扩展性接口*) 提供的 Microsoft Office。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1110">`Microsoft.Office.Core.IRibbonExtensibility` is one of several interfaces (also named *extensibility interfaces*) that are provided by Microsoft Office.</span></span> <span data-ttu-id="18d1c-1111">但是，这是可以在 Excel 文档级自定义项中实现的唯一接口。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1111">However, this is the only interface that you can implement in a document-level customization for Excel.</span></span> <span data-ttu-id="18d1c-1112">在应用程序级外接程序，可以实现其他一些扩展性接口。有关详细信息，请参阅[自定义 UI 功能 By Using Extensibility Interfaces](/visualstudio/vsto/customizing-ui-features-by-using-extensibility-interfaces)。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1112">You can implement other extensibility interfaces in application-level add-ins. For more information, see [Customizing UI Features By Using Extensibility Interfaces](/visualstudio/vsto/customizing-ui-features-by-using-extensibility-interfaces).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Research">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Research Research { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Research Research" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Research" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Research</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-1113">获取一个表示工作簿的信息检索服务的对象。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1113">Gets an object that represents the research service for the workbook.</span></span></summary>
        <value><span data-ttu-id="18d1c-1114">一个<c>Microsoft.Office.Interop.Excel.Research</c>对象，表示工作簿的信息检索服务。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1114">A <c>Microsoft.Office.Interop.Excel.Research</c> object that represents the research service for the workbook.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-1115">下面的代码示例访问`Microsoft.Office.Interop.Word.Research`要使用的默认语言对在服务中设置翻译的文档的对象。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1115">The following code example accesses the `Microsoft.Office.Interop.Word.Research` object of the document to set the default language pair that is used in the translation service.</span></span> <span data-ttu-id="18d1c-1116">它会设置日语作为语言，将转换为文本的源文本，用于将翻译的语言为英语 （美国）。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1116">It sets English (US) as the language of the source text to translate from and Japanese as the language to translate the text to.</span></span> <span data-ttu-id="18d1c-1117">默认的翻译语言显示在**研究**在 Excel 中的窗格**翻译**部分。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1117">The default translation languages appear in the **Research** pane in Excel under the **Translation** section.</span></span>  
  
 <span data-ttu-id="18d1c-1118">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1118">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_Excelworkbook_Additional#28](~/snippets/csharp/VS_Snippets_OfficeSP/trin_excelworkbook_additional/cs/ThisWorkbook.cs#28)]
 [!code-vb[Trin_Excelworkbook_Additional#28](~/snippets/visualbasic/VS_Snippets_OfficeSP/trin_excelworkbook_additional/vb/ThisWorkbook.vb#28)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetColors">
      <MemberSignature Language="C#" Value="public void ResetColors ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetColors() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.ResetColors" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="18d1c-1119">将调色板重置为默认颜色。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1119">Resets the color palette to the default colors.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RevisionNumber">
      <MemberSignature Language="C#" Value="public int RevisionNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RevisionNumber" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.RevisionNumber" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-1120">获取工作簿作为共享列表打开期间的保存次数。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1120">Gets the number of times the workbook has been saved while open as a shared list.</span></span> <span data-ttu-id="18d1c-1121">如果工作簿以独占模式打开，则此属性返回 0（零）。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1121">If the workbook is open in exclusive mode, this property returns 0 (zero).</span></span></summary>
        <value><span data-ttu-id="18d1c-1122">工作簿作为共享列表打开期间的保存次数。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1122">The number of times the workbook has been saved while open as a shared list.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-1123">仅当远程副本保存时不保存该工作簿的本地副本时，都会更新此属性。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1123">This property is updated only when the local copy of the workbook is saved, not when remote copies are saved.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Route">
      <MemberSignature Language="C#" Value="public void Route ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Route() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.Route" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Routed">
      <MemberSignature Language="C#" Value="public bool Routed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Routed" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Routed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RoutingSlip">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.RoutingSlip RoutingSlip { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.RoutingSlip RoutingSlip" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.RoutingSlip" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.RoutingSlip</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RowsetComplete">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_RowsetCompleteEventHandler RowsetComplete;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_RowsetCompleteEventHandler RowsetComplete" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.RowsetComplete" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_RowsetCompleteEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-1124">当用户在记录集中导航或对 OLAP 数据透视表调用行集合操作时发生。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1124">Occurs when the user navigates through the recordset or invokes the rowset action on an OLAP PivotTable.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RunAutoMacros">
      <MemberSignature Language="C#" Value="public void RunAutoMacros (Microsoft.Office.Interop.Excel.XlRunAutoMacro which);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RunAutoMacros(valuetype Microsoft.Office.Interop.Excel.XlRunAutoMacro which) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.RunAutoMacros(Microsoft.Office.Interop.Excel.XlRunAutoMacro)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="which" Type="Microsoft.Office.Interop.Excel.XlRunAutoMacro" />
      </Parameters>
      <Docs>
        <param name="which"><span data-ttu-id="18d1c-1125"><see cref="T:Microsoft.Office.Interop.Excel.XlRunAutoMacro" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1125">One of the <see cref="T:Microsoft.Office.Interop.Excel.XlRunAutoMacro" /> values.</span></span></param>
        <summary><span data-ttu-id="18d1c-1126">运行附加到工作簿的 Auto_Open、Auto_Close、Auto_Activate 或 Auto_Deactivate 宏。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1126">Runs the Auto_Open, Auto_Close, Auto_Activate, or Auto_Deactivate macro attached to the workbook.</span></span> <span data-ttu-id="18d1c-1127">包含此方法是为了向后兼容。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1127">This method is included for backward compatibility.</span></span> <span data-ttu-id="18d1c-1128">应使用 Open、Close、Activate 和 Deactivate 事件代替这些宏。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1128">You should use the Open, Close, Activate and Deactivate events instead of these macros.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-1129">下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.RunAutoMacros%2A>要运行的方法。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1129">The following code example uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.RunAutoMacros%2A> method to run the Auto_Activate macro.</span></span>  
  
 <span data-ttu-id="18d1c-1130">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1130">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#124](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#124)]
 [!code-vb[Trin_ExcelWorkBook#124](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#124)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.Save" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="18d1c-1131">保存对工作簿所做的更改。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1131">Saves changes to the workbook.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-1132">第一次保存工作簿，使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SaveAs%2A>方法，以指定文件的名称。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1132">The first time you save a workbook, use the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.SaveAs%2A> method to specify a name for the file.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveAs">
      <MemberSignature Language="C#" Value="public void SaveAs (object filename, object fileFormat, object password, object writeResPassword, object readOnlyRecommended, object createBackup, Microsoft.Office.Interop.Excel.XlSaveAsAccessMode accessMode, object conflictResolution, object addToMru, object textCodepage, object textVisualLayout, object local);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SaveAs(object filename, object fileFormat, object password, object writeResPassword, object readOnlyRecommended, object createBackup, valuetype Microsoft.Office.Interop.Excel.XlSaveAsAccessMode accessMode, object conflictResolution, object addToMru, object textCodepage, object textVisualLayout, object local) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.SaveAs(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,Microsoft.Office.Interop.Excel.XlSaveAsAccessMode,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.Object" />
        <Parameter Name="fileFormat" Type="System.Object" />
        <Parameter Name="password" Type="System.Object" />
        <Parameter Name="writeResPassword" Type="System.Object" />
        <Parameter Name="readOnlyRecommended" Type="System.Object" />
        <Parameter Name="createBackup" Type="System.Object" />
        <Parameter Name="accessMode" Type="Microsoft.Office.Interop.Excel.XlSaveAsAccessMode" />
        <Parameter Name="conflictResolution" Type="System.Object" />
        <Parameter Name="addToMru" Type="System.Object" />
        <Parameter Name="textCodepage" Type="System.Object" />
        <Parameter Name="textVisualLayout" Type="System.Object" />
        <Parameter Name="local" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="filename"><span data-ttu-id="18d1c-1133">要保存的文件的名称。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1133">The name of the file to be saved.</span></span> <span data-ttu-id="18d1c-1134">可以包含完整路径；否则，Microsoft Office Excel 将文件保存在当前文件夹中。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1134">You can include a full path; if you do not, Microsoft Office Excel saves the file in the current folder.</span></span></param>
        <param name="fileFormat"><span data-ttu-id="18d1c-1135"><see cref="T:Microsoft.Office.Interop.Excel.XlFileFormat" /> 值之一，指定保存文件时要使用的文件格式。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1135">One of the <see cref="T:Microsoft.Office.Interop.Excel.XlFileFormat" /> values that specifies the file format to use when you save the file.</span></span> <span data-ttu-id="18d1c-1136">对于现有文件，默认格式为最后一种指定文件格式；对于新文件，默认格式为所用 Excel 版本的格式。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1136">For an existing file, the default format is the last file format specified; for a new file, the default is the format of the version of Excel being used.</span></span></param>
        <param name="password"><span data-ttu-id="18d1c-1137">一个区分大小写的字符串（不超过 15 个字符），指示为文件指定的保护密码。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1137">A case-sensitive string (no more than 15 characters) that indicates the protection password to be given to the file.</span></span></param>
        <param name="writeResPassword"><span data-ttu-id="18d1c-1138">文件的写保护密码。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1138">The write-reservation password for this file.</span></span> <span data-ttu-id="18d1c-1139">如果保存文件时指定了密码，但打开文件时没有提供密码，则该文件以只读方式打开。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1139">If a file is saved with the password and the password is not supplied when the file is opened, the file is opened as read-only.</span></span></param>
        <param name="readOnlyRecommended"><span data-ttu-id="18d1c-1140">如果为 <see langword="true" />，则在打开该文件时显示一条消息，建议以只读方式打开该文件。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1140"><see langword="true" /> to display a message when the file is opened, recommending that the file be opened as read-only.</span></span></param>
        <param name="createBackup"><span data-ttu-id="18d1c-1141">如果为 <see langword="true" />，则创建备份文件。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1141"><see langword="true" /> to create a backup file.</span></span></param>
        <param name="accessMode"><span data-ttu-id="18d1c-1142"><see cref="T:Microsoft.Office.Interop.Excel.XlSaveAsAccessMode" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1142">One of the <see cref="T:Microsoft.Office.Interop.Excel.XlSaveAsAccessMode" /> values.</span></span></param>
        <param name="conflictResolution"><span data-ttu-id="18d1c-1143"><see cref="T:Microsoft.Office.Interop.Excel.XlSaveConflictResolution" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1143">One of the <see cref="T:Microsoft.Office.Interop.Excel.XlSaveConflictResolution" /> values.</span></span></param>
        <param name="addToMru"><span data-ttu-id="18d1c-1144">如果为 <see langword="true" />，则将工作簿添加到最近使用的文件列表中。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1144"><see langword="true" /> to add this workbook to the list of recently used files.</span></span> <span data-ttu-id="18d1c-1145">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1145">The default value is <see langword="false" />.</span></span></param>
        <param name="textCodepage"><span data-ttu-id="18d1c-1146">不在美国使用英语 Excel。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1146">Not used in U.S. English Excel.</span></span></param>
        <param name="textVisualLayout"><span data-ttu-id="18d1c-1147">不在美国使用英语 Excel。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1147">Not used in U.S. English Excel.</span></span></param>
        <param name="local"><span data-ttu-id="18d1c-1148">如果为 <see langword="true" />，则按照 Excel（包括控制面板设置）的语言保存文件。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1148"><see langword="true" /> saves files against the language of Excel (including control panel settings).</span></span> <span data-ttu-id="18d1c-1149">如果为 <see langword="false" />（默认值），则按照 Visual Basic for Applications (VBA) 的语言保存文件。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1149"><see langword="false" /> (default) saves files against the language of Visual Basic for Applications (VBA).</span></span></param>
        <summary><span data-ttu-id="18d1c-1150">在另一个文件中保存对工作簿所做的更改。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1150">Saves changes to the workbook in a different file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-1151">Visual Studio 不支持将工作簿保存为共享工作簿。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1151">Visual Studio does not support saving a workbook as a shared workbook.</span></span>  
  
## <a name="optional-parameters"></a><span data-ttu-id="18d1c-1152">可选参数</span><span class="sxs-lookup"><span data-stu-id="18d1c-1152">Optional Parameters</span></span>  
 <span data-ttu-id="18d1c-1153">可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1153">For information on optional parameters, see [Optional Parameters in Office Solutions](/visualstudio/vsto/optional-parameters-in-office-solutions).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18d1c-1154">下面的代码示例检查的值<xref:Microsoft.Office.Tools.Excel.WorkbookBase.FileFormat%2A>属性来确定工作簿是否正常工作簿。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1154">The following code example checks the value of the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.FileFormat%2A> property to determine whether the workbook is a normal workbook.</span></span> <span data-ttu-id="18d1c-1155">该工作簿是否正常工作簿，然后该示例调用<xref:Microsoft.Office.Tools.Excel.Worksheet.SaveAs%2A>方法以将该工作簿重新保存为具有名称的 XML 电子表格`XMLCopy.xlsx`中指定的路径<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Path%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1155">If the workbook is a normal workbook, then the example calls the <xref:Microsoft.Office.Tools.Excel.Worksheet.SaveAs%2A> method to resave the workbook as an XML spreadsheet with the name `XMLCopy.xlsx` in the path specified by the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.Path%2A> property.</span></span>  
  
 <span data-ttu-id="18d1c-1156">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1156">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#125](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#125)]
 [!code-vb[Trin_ExcelWorkBook#125](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#125)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveAsXMLData">
      <MemberSignature Language="C#" Value="public void SaveAsXMLData (string filename, Microsoft.Office.Interop.Excel.XmlMap map);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SaveAsXMLData(string filename, class Microsoft.Office.Interop.Excel.XmlMap map) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.SaveAsXMLData(System.String,Microsoft.Office.Interop.Excel.XmlMap)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
        <Parameter Name="map" Type="Microsoft.Office.Interop.Excel.XmlMap" />
      </Parameters>
      <Docs>
        <param name="filename"><span data-ttu-id="18d1c-1157">要保存的文件的名称。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1157">The name of the file to be saved.</span></span> <span data-ttu-id="18d1c-1158">可以包含完整路径；否则，Microsoft Office Excel 将文件保存在当前文件夹中。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1158">You can include a full path; if you do not, Microsoft Office Excel saves the file in the current folder.</span></span></param>
        <param name="map"><span data-ttu-id="18d1c-1159"><see cref="T:Microsoft.Office.Interop.Excel.XmlMap" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1159"><see cref="T:Microsoft.Office.Interop.Excel.XmlMap" /> object.</span></span> <span data-ttu-id="18d1c-1160">要应用于数据的架构映射。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1160">The schema map to apply to the data.</span></span></param>
        <summary><span data-ttu-id="18d1c-1161">将映射到指定 XML 架构映射的数据导出到 XML 数据文件。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1161">Exports the data that has been mapped to the specified XML schema map to an XML data file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-1162">如果 Excel 无法导出与指定的架构映射的数据，此方法将导致运行时错误。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1162">This method will result in a run-time error if Excel cannot export data with the specified schema map.</span></span> <span data-ttu-id="18d1c-1163">若要检查 Excel 是否可以使用指定的架构映射将数据导出，请使用<xref:Microsoft.Office.Interop.Excel.XmlMap.IsExportable%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1163">To check whether Excel can use the specified schema map to export data, use the <xref:Microsoft.Office.Interop.Excel.XmlMap.IsExportable%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18d1c-1164">下面的代码示例演示如何从工作簿导出 XML 数据。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1164">The following code example demonstrates how to export XML data from a workbook.</span></span> <span data-ttu-id="18d1c-1165">此示例导入的 XML 数据<xref:System.Data.DataSet>到<xref:Microsoft.Office.Interop.Excel.XmlMap>当前工作簿中。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1165">The example imports the XML data from a <xref:System.Data.DataSet> into a <xref:Microsoft.Office.Interop.Excel.XmlMap> in the current workbook.</span></span> <span data-ttu-id="18d1c-1166">该示例然后调用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SaveAsXMLData%2A>方法将数据从导出<xref:Microsoft.Office.Interop.Excel.XmlMap>到一个 XML 文件。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1166">The example then calls the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.SaveAsXMLData%2A> method to export the data from the <xref:Microsoft.Office.Interop.Excel.XmlMap> into an XML file.</span></span> <span data-ttu-id="18d1c-1167">当<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SaveAsXMLData%2A>调用方法时，<xref:Microsoft.Office.Tools.Excel.WorkbookBase.BeforeXmlExport>事件处理程序会报告 XML 所导出和<xref:Microsoft.Office.Tools.Excel.WorkbookBase.AfterXmlExport>事件处理程序会报告是否已成功导出 XML。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1167">When the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.SaveAsXMLData%2A> method is called, the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.BeforeXmlExport> event handler reports that the XML is being exported, and the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.AfterXmlExport> event handler reports whether the XML was successfully exported.</span></span>  
  
 <span data-ttu-id="18d1c-1168">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1168">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#203](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#203)]
 [!code-vb[Trin_ExcelWorkBook#203](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#203)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveCopyAs">
      <MemberSignature Language="C#" Value="public void SaveCopyAs (object filename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SaveCopyAs(object filename) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.SaveCopyAs(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="filename"><span data-ttu-id="18d1c-1169">指定副本的文件名。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1169">Specifies the file name for the copy.</span></span></param>
        <summary><span data-ttu-id="18d1c-1170">将工作簿的副本保存到文件中，但不修改内存中打开的工作簿。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1170">Saves a copy of the workbook to a file but does not modify the open workbook in memory.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a><span data-ttu-id="18d1c-1171">可选参数</span><span class="sxs-lookup"><span data-stu-id="18d1c-1171">Optional Parameters</span></span>  
 <span data-ttu-id="18d1c-1172">可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1172">For information on optional parameters, see [Optional Parameters in Office Solutions](/visualstudio/vsto/optional-parameters-in-office-solutions).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18d1c-1173">下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SaveCopyAs%2A>方法来保存当前工作簿的副本。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1173">The following code example uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.SaveCopyAs%2A> method to save a copy of the current workbook.</span></span>  
  
 <span data-ttu-id="18d1c-1174">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1174">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#126](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#126)]
 [!code-vb[Trin_ExcelWorkBook#126](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#126)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Saved">
      <MemberSignature Language="C#" Value="public bool Saved { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Saved" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Saved" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-1175">获取或设置一个值，该值指示工作簿自上次保存以来是否进行了更改。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1175">Gets or sets a value that indicates whether no changes have been made to the workbook since it was last saved.</span></span></summary>
        <value><span data-ttu-id="18d1c-1176">如果工作簿自上次保存以来进行了更改，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1176"><see langword="true" /> if no changes have been made to the workbook since it was last saved; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-1177">如果从未保存过工作簿，其<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Path%2A>属性将返回空字符串 ("")。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1177">If a workbook has never been saved, its <xref:Microsoft.Office.Tools.Excel.WorkbookBase.Path%2A> property returns an empty string ("").</span></span>  
  
 <span data-ttu-id="18d1c-1178">可以将此属性设置为`true`如果你想要关闭修改后的工作簿而不保存或不被提示将其保存。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1178">You can set this property to `true` if you want to close a modified workbook without either saving it or being prompted to save it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18d1c-1179">下面的代码示例演示了一个处理程序<xref:Microsoft.Office.Tools.Excel.WorkbookBase.BeforeClose>会提示用户要保存更改，不保存更改，还是取消关闭操作如果工作簿自上次保存以来进行了更改的事件。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1179">The following code example demonstrates a handler for the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.BeforeClose> event that prompts the user to either save changes, not save changes, or cancel the close operation if changes have been made to the workbook since it was last saved.</span></span> <span data-ttu-id="18d1c-1180">如果用户不会保存更改，则<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Saved%2A>工作簿的属性设置为`true`，以便 Microsoft Office Excel 不会提示用户保存工作簿时继续执行关闭操作。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1180">If the user does not save changes, then the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.Saved%2A> property of the workbook is set to `true` so that Microsoft Office Excel does not prompt the user to save the workbook when the close operation continues.</span></span> <span data-ttu-id="18d1c-1181">如果用户取消关闭操作，则`Cancel`的参数<xref:Microsoft.Office.Interop.Excel.WorkbookEvents_BeforeCloseEventHandler>事件处理程序设置为`true`，以便 Microsoft Office Excel 不会关闭该工作簿。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1181">If the user cancels the close operation, then the `Cancel` parameter of the <xref:Microsoft.Office.Interop.Excel.WorkbookEvents_BeforeCloseEventHandler> event handler is set to `true` so that Microsoft Office Excel does not close the workbook.</span></span>  
  
 <span data-ttu-id="18d1c-1182">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1182">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#205](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#205)]
 [!code-vb[Trin_ExcelWorkBook#205](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#205)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveLinkValues">
      <MemberSignature Language="C#" Value="public bool SaveLinkValues { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SaveLinkValues" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.SaveLinkValues" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-1183">获取或设置一个值，该值指示 Microsoft Office Excel 是否将外部链接值与工作簿一起保存。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1183">Gets or sets a value that indicates whether Microsoft Office Excel saves external link values with the workbook.</span></span></summary>
        <value><span data-ttu-id="18d1c-1184">如果 Excel 将外部链接值与工作簿一起保存，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1184"><see langword="true" /> if Excel saves external link values with the workbook; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="sblt">
      <MemberSignature Language="C#" Value="public void sblt (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void sblt(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.sblt(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SendFaxOverInternet">
      <MemberSignature Language="C#" Value="public void SendFaxOverInternet (object recipients, object subject, object showMessage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendFaxOverInternet(object recipients, object subject, object showMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.SendFaxOverInternet(System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="recipients" Type="System.Object" />
        <Parameter Name="subject" Type="System.Object" />
        <Parameter Name="showMessage" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="recipients"><span data-ttu-id="18d1c-1185">要向其发送传真的收件人的传真号码和电子邮件地址。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1185">The fax numbers and e-mail addresses of the people to whom the fax will be sent.</span></span> <span data-ttu-id="18d1c-1186">用分号分隔多个收件人。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1186">Separate multiple recipients with a semicolon.</span></span></param>
        <param name="subject"><span data-ttu-id="18d1c-1187">传真文档的主题行。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1187">The subject line for the faxed document.</span></span></param>
        <param name="showMessage"><span data-ttu-id="18d1c-1188">如果为 <see langword="true" />，则在发送传真邮件前显示该邮件；如果为 <see langword="false" />，则发送传真但不显示传真邮件。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1188"><see langword="true" /> displays the fax message before sending it; <see langword="false" /> sends the fax without displaying the fax message.</span></span></param>
        <summary><span data-ttu-id="18d1c-1189">将工作簿中的活动工作表作为传真发送给指定收件人。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1189">Sends the active sheet in the workbook as a fax to the specified recipients.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-1190">使用此方法要求用户的计算机上启用了传真服务。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1190">Using this method requires that the fax service is enabled on a user's computer.</span></span>  
  
 <span data-ttu-id="18d1c-1191">用于指定中的传真号码的格式`Recipients`参数可以是`recipientsfaxnumber@usersfaxprovider`或`recipientsname@recipientsfaxnumber`。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1191">The format used for specifying fax numbers in the `Recipients` parameter is either `recipientsfaxnumber@usersfaxprovider` or `recipientsname@recipientsfaxnumber`.</span></span> <span data-ttu-id="18d1c-1192">您可以访问用户的传真提供程序信息使用以下注册表路径：</span><span class="sxs-lookup"><span data-stu-id="18d1c-1192">You can access the user's fax provider information using the following registry path:</span></span>  
  
 `HKEY_CURRENT_USER\Software\Microsoft\Office\11.0\Common\Services\Fax`  
  
 <span data-ttu-id="18d1c-1193">在此注册表路径中使用 FaxAddress 键的值来确定要使用接收方的格式。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1193">Use the value of the FaxAddress key at this registry path to determine the format to use for a recipient.</span></span>  
  
## <a name="optional-parameters"></a><span data-ttu-id="18d1c-1194">可选参数</span><span class="sxs-lookup"><span data-stu-id="18d1c-1194">Optional Parameters</span></span>  
 <span data-ttu-id="18d1c-1195">可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1195">For information on optional parameters, see [Optional Parameters in Office Solutions](/visualstudio/vsto/optional-parameters-in-office-solutions).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18d1c-1196">下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SendFaxOverInternet%2A>方法来作为传真发送当前工作簿并将其发送之前显示传真邮件。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1196">The following code example uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.SendFaxOverInternet%2A> method to send the current workbook as a fax and display the fax message before sending it.</span></span>  
  
 <span data-ttu-id="18d1c-1197">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1197">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#127](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#127)]
 [!code-vb[Trin_ExcelWorkBook#127](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#127)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendForReview">
      <MemberSignature Language="C#" Value="public void SendForReview (object recipients, object subject, object showMessage, object includeAttachment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendForReview(object recipients, object subject, object showMessage, object includeAttachment) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.SendForReview(System.Object,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="recipients" Type="System.Object" />
        <Parameter Name="subject" Type="System.Object" />
        <Parameter Name="showMessage" Type="System.Object" />
        <Parameter Name="includeAttachment" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="recipients"><span data-ttu-id="18d1c-1198">邮件收件人。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1198">The people to whom to send the message.</span></span> <span data-ttu-id="18d1c-1199">这些收件人可以是电子邮件电话簿中未解析的名称和别名，或完整的电子邮件地址。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1199">These can be unresolved names and aliases in an e-mail phone book or full e-mail addresses.</span></span> <span data-ttu-id="18d1c-1200">用分号 (;) 分隔多个收件人。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1200">Separate multiple recipients with a semicolon (;).</span></span> <span data-ttu-id="18d1c-1201">如果留空且 <c>ShowMessage</c> 为 <see langword="false" />，则会接收一条错误消息，且不会发送邮件。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1201">If left blank and <c>ShowMessage</c> is <see langword="false" />, you will receive an error message, and the message will not be sent.</span></span></param>
        <param name="subject"><span data-ttu-id="18d1c-1202">邮件的主题。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1202">The subject of the message.</span></span> <span data-ttu-id="18d1c-1203">如果留为空白，则主题将为：请查看“<c>filename</c>”。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1203">If left blank, the subject will be: Please review "<c>filename</c> ".</span></span></param>
        <param name="showMessage"><span data-ttu-id="18d1c-1204">一个值，指示该方法执行时是否应显示邮件。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1204">A value that indicates whether the message should be displayed when the method is executed.</span></span> <span data-ttu-id="18d1c-1205">默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1205">The default value is <see langword="true" />.</span></span> <span data-ttu-id="18d1c-1206">如果设置为 <see langword="false" />，则邮件会自动发送给收件人，而不首先向发件人显示邮件。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1206">If set to <see langword="false" />, the message is automatically sent to the recipients without first showing the message to the sender.</span></span></param>
        <param name="includeAttachment"><span data-ttu-id="18d1c-1207">一个值，指示邮件是否应包含附件或到服务器位置的链接。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1207">A value that indicates whether the message should include an attachment or a link to a server location.</span></span> <span data-ttu-id="18d1c-1208">默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1208">The default value is <see langword="true" />.</span></span> <span data-ttu-id="18d1c-1209">如果设置为 <see langword="false" />，则必须将文档存储在共享位置。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1209">If set to <see langword="false" />, the document must be stored at a shared location.</span></span></param>
        <summary><span data-ttu-id="18d1c-1210">在电子邮件中将工作簿发送给指定收件人进行审阅。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1210">Sends a workbook in an e-mail message for review to the specified recipients.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-1211">此方法启动协作审核周期。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1211">This method starts a collaborative review cycle.</span></span> <span data-ttu-id="18d1c-1212">使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.EndReview%2A>方法来结束审核周期。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1212">Use the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.EndReview%2A> method to end a review cycle.</span></span>  
  
## <a name="optional-parameters"></a><span data-ttu-id="18d1c-1213">可选参数</span><span class="sxs-lookup"><span data-stu-id="18d1c-1213">Optional Parameters</span></span>  
 <span data-ttu-id="18d1c-1214">可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1214">For information on optional parameters, see [Optional Parameters in Office Solutions](/visualstudio/vsto/optional-parameters-in-office-solutions).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18d1c-1215">下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SendForReview%2A>方法以将该工作簿中一封电子邮件发送到两个收件人。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1215">The following code example uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.SendForReview%2A> method to send the workbook in an e-mail to two recipients.</span></span> <span data-ttu-id="18d1c-1216">电子邮件将具有默认主题行，并且将包含工作簿作为附件。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1216">The e-mail will have the default subject line and will include the workbook as an attachment.</span></span> <span data-ttu-id="18d1c-1217">此示例假定收件人的名称解析为有效的电子邮件地址。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1217">This example assumes that the recipient names resolve to valid e-mail addresses.</span></span>  
  
 <span data-ttu-id="18d1c-1218">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1218">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#128](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#128)]
 [!code-vb[Trin_ExcelWorkBook#128](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#128)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendMail">
      <MemberSignature Language="C#" Value="public void SendMail (object recipients, object subject, object returnReceipt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendMail(object recipients, object subject, object returnReceipt) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.SendMail(System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="recipients" Type="System.Object" />
        <Parameter Name="subject" Type="System.Object" />
        <Parameter Name="returnReceipt" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="recipients"><span data-ttu-id="18d1c-1219">以文本格式指定收件人姓名，或以文本字符串数组的格式指定收件人（如果有多个）。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1219">Specifies the name of the recipient as text, or as an array of text strings if there are multiple recipients.</span></span> <span data-ttu-id="18d1c-1220">必须至少指定一个收件人，所有收件人都以“To recipient”的格式添加。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1220">At least one recipient must be specified, and all recipients are added as To recipients.</span></span></param>
        <param name="subject"><span data-ttu-id="18d1c-1221">指定邮件的主题。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1221">Specifies the subject of the message.</span></span> <span data-ttu-id="18d1c-1222">如果省略此参数，则使用文档名称。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1222">If this argument is omitted, the document name is used.</span></span></param>
        <param name="returnReceipt"><span data-ttu-id="18d1c-1223">如果为 <see langword="true" />，则请求回执。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1223"><see langword="true" /> to request a return receipt.</span></span> <span data-ttu-id="18d1c-1224">如果为 <see langword="false" />，则不请求回执。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1224"><see langword="false" /> to not request a return receipt.</span></span> <span data-ttu-id="18d1c-1225">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1225">The default value is <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="18d1c-1226">使用安装的邮件系统发送工作簿。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1226">Sends the workbook by using the installed mail system.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a><span data-ttu-id="18d1c-1227">可选参数</span><span class="sxs-lookup"><span data-stu-id="18d1c-1227">Optional Parameters</span></span>  
 <span data-ttu-id="18d1c-1228">可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1228">For information on optional parameters, see [Optional Parameters in Office Solutions](/visualstudio/vsto/optional-parameters-in-office-solutions).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18d1c-1229">下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SendMail%2A>方法以向单个收件人发送一封电子邮件中的工作簿。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1229">The following code example uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.SendMail%2A> method to send the workbook in an e-mail to a single recipient.</span></span> <span data-ttu-id="18d1c-1230">电子邮件将具有使用者"请查看"，并且不会请求回执。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1230">The e-mail will have the subject "Please review" and will not request a return receipt.</span></span>  
  
 <span data-ttu-id="18d1c-1231">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1231">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#129](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#129)]
 [!code-vb[Trin_ExcelWorkBook#129](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#129)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendMailer">
      <MemberSignature Language="C#" Value="public void SendMailer (object fileFormat, Microsoft.Office.Interop.Excel.XlPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendMailer(object fileFormat, valuetype Microsoft.Office.Interop.Excel.XlPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.SendMailer(System.Object,Microsoft.Office.Interop.Excel.XlPriority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileFormat" Type="System.Object" />
        <Parameter Name="priority" Type="Microsoft.Office.Interop.Excel.XlPriority" />
      </Parameters>
      <Docs>
        <param name="fileFormat">To be added.</param>
        <param name="priority">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ServerPolicy">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Core.ServerPolicy ServerPolicy { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Core.ServerPolicy ServerPolicy" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.ServerPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Core.ServerPolicy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-1232">获取一个对象，该对象表示为运行 Microsoft Office SharePoint Server 的服务器上存储的工作簿指定的策略。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1232">Gets an object that represents a policy specified for a workbook that is stored on a server running Microsoft Office SharePoint Server.</span></span></summary>
        <value><span data-ttu-id="18d1c-1233">一个<c>Microsoft.Office.Core.ServerPolicy</c>表示策略存储在运行 SharePoint Server 的服务器的工作簿指定的对象。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1233">A <c>Microsoft.Office.Core.ServerPolicy</c> object that represents a policy specified for a workbook that is stored on a server running SharePoint Server.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-1234">下面的代码示例检索与当前工作簿关联的信息管理策略，并显示策略名称、 说明和语句。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1234">The following code example retrieves the information management policy associated with the current workbook and displays the policy name, description, and statement.</span></span> <span data-ttu-id="18d1c-1235">若要运行此示例中，必须将该工作簿发布到 Microsoft Office Sharepoint Server 站点，并在站点定义信息管理策略。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1235">To run this example, you must publish the workbook to a Microsoft Office Sharepoint Server site and define an information management policy in the site.</span></span>  
  
 <span data-ttu-id="18d1c-1236">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1236">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_Excelworkbook_Additional#29](~/snippets/csharp/VS_Snippets_OfficeSP/trin_excelworkbook_additional/cs/ThisWorkbook.cs#29)]
 [!code-vb[Trin_Excelworkbook_Additional#29](~/snippets/visualbasic/VS_Snippets_OfficeSP/trin_excelworkbook_additional/vb/ThisWorkbook.vb#29)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ServerViewableItems">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.ServerViewableItems ServerViewableItems { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.ServerViewableItems ServerViewableItems" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.ServerViewableItems" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.ServerViewableItems</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-1237">获取一个对象，该对象可用于与 Microsoft Office SharePoint Server 服务器上显示的工作簿中的已发布对象列表进行交互。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1237">Gets an object that you can use to interact with the list of published objects in the workbook that are shown on a Microsoft Office SharePoint Server server.</span></span></summary>
        <value><span data-ttu-id="18d1c-1238">一个<c>Microsoft.Office.Interop.Excel.ServerViewableItems</c>可用来与列表进行交互的对象发布服务器显示的工作簿中的对象。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1238">A <c>Microsoft.Office.Interop.Excel.ServerViewableItems</c> object that you can use to interact with the list of published objects in the workbook that are shown on the server.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-1239">你可以发布到 Excel Services 在工作簿中，此属性返回的项的集合。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1239">This property returns a collection of the items in the workbook that you can publish to Excel Services.</span></span> <span data-ttu-id="18d1c-1240">仅在此集合中的对象将在服务器上所示。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1240">Only objects in this collection will be shown on the server.</span></span> <span data-ttu-id="18d1c-1241">默认情况下，显示整个工作簿 （包括所有工作表）。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1241">By default, the entire workbook (including all worksheets) is shown.</span></span>  
  
 <span data-ttu-id="18d1c-1242">只有一个<xref:Microsoft.Office.Interop.Excel.ServerViewableItems?displayProperty=fullName>对象可以存在每个工作簿。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1242">Only one <xref:Microsoft.Office.Interop.Excel.ServerViewableItems?displayProperty=fullName> object can exist per workbook.</span></span> <span data-ttu-id="18d1c-1243">因为对象被标记为可查看在服务器上的名称都是唯一不能保证，名称，不能将此集合编制索引。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1243">This collection cannot be indexed by name, because there is no guarantee that the names of objects that are marked as viewable on the server are unique.</span></span>  
  
 <span data-ttu-id="18d1c-1244">在 Excel 用户界面中，可以查看标记为可查看在服务器上的对象的集合**Excel Services 选项**对话框。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1244">In the Excel user interface, you can view the collection of objects that are marked as viewable on the server in the **Excel Services Options** dialog box.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLinkOnData">
      <MemberSignature Language="C#" Value="public void SetLinkOnData (string name, object procedure);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetLinkOnData(string name, object procedure) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.SetLinkOnData(System.String,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="procedure" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="18d1c-1245">DDE/OLE 链接的名称（和从 <see cref="M:Microsoft.Office.Tools.Excel.WorkbookBase.LinkSources(System.Object)" /> 方法返回的一样）。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1245">The name of the DDE/OLE link, as returned from the <see cref="M:Microsoft.Office.Tools.Excel.WorkbookBase.LinkSources(System.Object)" /> method.</span></span></param>
        <param name="procedure"><span data-ttu-id="18d1c-1246">更新链接时要运行的过程的名称。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1246">The name of the procedure to be run when the link is updated.</span></span> <span data-ttu-id="18d1c-1247">这可以是 Microsoft Office Excel 4.0 宏或 Visual Basic 过程。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1247">This can be either a Microsoft Office Excel 4.0 macro or a Visual Basic procedure.</span></span> <span data-ttu-id="18d1c-1248">将此参数设置为空字符串 ("") 可指示在更新链接时不应运行任何过程。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1248">Set this argument to an empty string ("") to indicate that no procedure should run when the link is updated.</span></span></param>
        <summary><span data-ttu-id="18d1c-1249">设置每次更新 DDE 链接时运行的过程的名称。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1249">Sets the name of a procedure that runs whenever a DDE link is updated.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a><span data-ttu-id="18d1c-1250">可选参数</span><span class="sxs-lookup"><span data-stu-id="18d1c-1250">Optional Parameters</span></span>  
 <span data-ttu-id="18d1c-1251">可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1251">For information on optional parameters, see [Optional Parameters in Office Solutions](/visualstudio/vsto/optional-parameters-in-office-solutions).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18d1c-1252">下面的代码示例获取当前工作簿中所有 DDE 链接的集合，然后使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SetLinkOnData%2A>方法来运行一个名为宏`UPDATE_MACRO`每当更新其中一个链接。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1252">The following code example gets the collection of all DDE links in the current workbook and then uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.SetLinkOnData%2A> method to run a macro named `UPDATE_MACRO` whenever one of the links is updated.</span></span>  
  
 <span data-ttu-id="18d1c-1253">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1253">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#130](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#130)]
 [!code-vb[Trin_ExcelWorkBook#130](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#130)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPasswordEncryptionOptions">
      <MemberSignature Language="C#" Value="public void SetPasswordEncryptionOptions (object passwordEncryptionProvider, object passwordEncryptionAlgorithm, object passwordEncryptionKeyLength, object passwordEncryptionFileProperties);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetPasswordEncryptionOptions(object passwordEncryptionProvider, object passwordEncryptionAlgorithm, object passwordEncryptionKeyLength, object passwordEncryptionFileProperties) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.SetPasswordEncryptionOptions(System.Object,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="passwordEncryptionProvider" Type="System.Object" />
        <Parameter Name="passwordEncryptionAlgorithm" Type="System.Object" />
        <Parameter Name="passwordEncryptionKeyLength" Type="System.Object" />
        <Parameter Name="passwordEncryptionFileProperties" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="passwordEncryptionProvider"><span data-ttu-id="18d1c-1254">加密提供程序的字符串，区分大小写。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1254">A case sensitive string of the encryption provider.</span></span></param>
        <param name="passwordEncryptionAlgorithm"><span data-ttu-id="18d1c-1255">算法短名称的区分大小写的字符串（例如“RC4”）。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1255">A case sensitive string of the algorithmic short name (i.e. "RC4").</span></span></param>
        <param name="passwordEncryptionKeyLength"><span data-ttu-id="18d1c-1256">加密密钥长度，为 8 的倍数（40 或更大）。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1256">The encryption key length, which is a multiple of 8 (40 or greater).</span></span></param>
        <param name="passwordEncryptionFileProperties"><span data-ttu-id="18d1c-1257">如果为 <see langword="true" />（默认值），则加密文件属性。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1257"><see langword="true" /> (default) to encrypt file properties.</span></span></param>
        <summary><span data-ttu-id="18d1c-1258">设置使用密码加密工作簿的选项。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1258">Sets the options for encrypting the workbook using a password.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-1259">`PasswordEncryptionProvider`， `PasswordEncryptionAlgorithm`，和`PasswordEncryptionKeyLength`参数不是相互独立。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1259">The `PasswordEncryptionProvider`, `PasswordEncryptionAlgorithm`, and `PasswordEncryptionKeyLength` parameters are not independent of each other.</span></span> <span data-ttu-id="18d1c-1260">所选的加密提供程序限制算法和密钥长度，可以选择的组。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1260">A selected encryption provider limits the set of algorithms and key length that can be chosen.</span></span>  
  
 <span data-ttu-id="18d1c-1261">有关`PasswordEncryptionKeyLength`有参数是密钥长度的范围没有固有限制。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1261">For the `PasswordEncryptionKeyLength` parameter there is no inherent limit on the range of the key length.</span></span> <span data-ttu-id="18d1c-1262">此外可以确定的加密算法的加密服务提供程序确定范围。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1262">The range is determined by the Cryptographic Service Provider which also determines the cryptographic algorithm.</span></span>  
  
## <a name="optional-parameters"></a><span data-ttu-id="18d1c-1263">可选参数</span><span class="sxs-lookup"><span data-stu-id="18d1c-1263">Optional Parameters</span></span>  
 <span data-ttu-id="18d1c-1264">可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1264">For information on optional parameters, see [Optional Parameters in Office Solutions](/visualstudio/vsto/optional-parameters-in-office-solutions).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18d1c-1265">下面的代码示例检查的值<xref:Microsoft.Office.Tools.Excel.WorkbookBase.HasPassword%2A>属性来确定工作簿是否受密码保护。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1265">The following code example checks the value of the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.HasPassword%2A> property to determine whether the workbook is password protected.</span></span> <span data-ttu-id="18d1c-1266">如果工作簿不受密码保护，然后该示例设置<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Password%2A>属性设置为密码获取用户输入，然后调用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SetPasswordEncryptionOptions%2A>方法设置的加密算法、 密钥长度设置、 设置的加密提供程序名称并启用加密文件属性。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1266">If the workbook is not password protected, then the example sets the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.Password%2A> property to a password obtained from user input, and then calls the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.SetPasswordEncryptionOptions%2A> method to set the encryption algorithm, set the key length, set the name of the encryption provider, and enable file property encryption.</span></span> <span data-ttu-id="18d1c-1267">然后，该示例显示的值<xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionProvider%2A>， <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionAlgorithm%2A>， <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionKeyLength%2A>，和<xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionFileProperties%2A>工作表中的属性`Sheet1`。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1267">The example then displays the values of the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionProvider%2A>, <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionAlgorithm%2A>, <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionKeyLength%2A>, and <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionFileProperties%2A> properties in worksheet `Sheet1`.</span></span> <span data-ttu-id="18d1c-1268">此示例假定方法`GetPasswordFromUserInput`其他位置定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1268">This example assumes that the method `GetPasswordFromUserInput` is defined elsewhere.</span></span>  
  
 <span data-ttu-id="18d1c-1269">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1269">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#131](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#131)]
 [!code-vb[Trin_ExcelWorkBook#131](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#131)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SharedWorkspace">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Core.SharedWorkspace SharedWorkspace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Core.SharedWorkspace SharedWorkspace" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.SharedWorkspace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Core.SharedWorkspace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-1270">获取一个 <c>Microsoft.Office.Core.SharedWorkspace</c>，它表示工作簿所在的文档工作区。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1270">Gets a <c>Microsoft.Office.Core.SharedWorkspace</c> that represents the Document Workspace in which the workbook is located.</span></span></summary>
        <value><span data-ttu-id="18d1c-1271">一个<c>Microsoft.Office.Core.SharedWorkspace</c> ，表示工作簿所在的文档工作区。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1271">A <c>Microsoft.Office.Core.SharedWorkspace</c> that represents the Document Workspace in which the workbook is located.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-1272">下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SharedWorkspace%2A>属性来确定当前的工作簿是否属于文档工作区。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1272">The following code example uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.SharedWorkspace%2A> property to determine whether the current workbook is part of a Document Workspace.</span></span> <span data-ttu-id="18d1c-1273">如果工作簿属于文档工作区，则该示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Sync%2A>属性来显示用户上次更改该文档。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1273">If the workbook is part of a Document Workspace, then the example uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.Sync%2A> property to display the user who last changed the document.</span></span>  
  
 <span data-ttu-id="18d1c-1274">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1274">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#38](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#38)]
 [!code-vb[Trin_ExcelWorkBook#38](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#38)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SheetActivate">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_SheetActivateEventHandler SheetActivate;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_SheetActivateEventHandler SheetActivate" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.SheetActivate" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_SheetActivateEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-1275">包含它仅为了向后兼容。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1275">Included for backwards compatibility only.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SheetBeforeDoubleClick">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_SheetBeforeDoubleClickEventHandler SheetBeforeDoubleClick;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_SheetBeforeDoubleClickEventHandler SheetBeforeDoubleClick" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.SheetBeforeDoubleClick" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_SheetBeforeDoubleClickEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-1276">在双击任意工作表之后，默认的双击操作之前发生。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1276">Occurs when any worksheet is double-clicked, before the default double-click action.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-1277">图表工作表上不会发生此事件。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1277">This event does not occur on chart sheets.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18d1c-1278">下面的代码示例演示了一个处理程序<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SheetBeforeDoubleClick>事件。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1278">The following code example demonstrates a handler for the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.SheetBeforeDoubleClick> event.</span></span> <span data-ttu-id="18d1c-1279">事件处理程序会通知用户双击不允许对工作表，然后设置`Cancel`的参数<xref:Microsoft.Office.Interop.Excel.WorkbookEvents_SheetBeforeDoubleClickEventHandler>事件处理程序`true`，以便 Microsoft Office Excel 取消双击操作。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1279">The event handler informs the user that double-clicking is not allowed for the worksheet, and then sets the `Cancel` parameter of the <xref:Microsoft.Office.Interop.Excel.WorkbookEvents_SheetBeforeDoubleClickEventHandler> event handler to `true` so that Microsoft Office Excel cancels the double-click action.</span></span>  
  
 <span data-ttu-id="18d1c-1280">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1280">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#215](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#215)]
 [!code-vb[Trin_ExcelWorkBook#215](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#215)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SheetBeforeRightClick">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_SheetBeforeRightClickEventHandler SheetBeforeRightClick;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_SheetBeforeRightClickEventHandler SheetBeforeRightClick" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.SheetBeforeRightClick" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_SheetBeforeRightClickEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-1281">在右击任意工作表之后，默认的右击操作之前发生。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1281">Occurs when any worksheet is right-clicked, before the default right-click action.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-1282">图表工作表上不会发生此事件。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1282">This event does not occur on chart sheets.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18d1c-1283">下面的代码示例演示了一个处理程序<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SheetBeforeRightClick>事件。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1283">The following code example demonstrates a handler for the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.SheetBeforeRightClick> event.</span></span> <span data-ttu-id="18d1c-1284">事件处理程序将通知用户，右键单击不允许对工作表，然后设置`Cancel`的参数<xref:Microsoft.Office.Interop.Excel.WorkbookEvents_SheetBeforeRightClickEventHandler>事件处理程序`true`，以便 Microsoft Office Excel 取消右键单击操作。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1284">The event handler informs the user that right-clicking is not allowed for the worksheet, and then sets the `Cancel` parameter of the <xref:Microsoft.Office.Interop.Excel.WorkbookEvents_SheetBeforeRightClickEventHandler> event handler to `true` so that Microsoft Office Excel cancels the right-click action.</span></span>  
  
 <span data-ttu-id="18d1c-1285">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1285">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#216](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#216)]
 [!code-vb[Trin_ExcelWorkBook#216](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#216)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SheetCalculate">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_SheetCalculateEventHandler SheetCalculate;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_SheetCalculateEventHandler SheetCalculate" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.SheetCalculate" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_SheetCalculateEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-1286">在重新计算任何工作表后或将任何更改的数据绘制在图表上后发生。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1286">Occurs after any worksheet is recalculated or after any changed data is plotted on a chart.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-1287">下面的代码示例演示了一个处理程序<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SheetCalculate>事件。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1287">The following code example demonstrates a handler for the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.SheetCalculate> event.</span></span> <span data-ttu-id="18d1c-1288">事件处理程序会显示正在计算的工作表的名称。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1288">The event handler displays the name of the worksheet that is being calculated.</span></span>  
  
 <span data-ttu-id="18d1c-1289">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1289">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#217](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#217)]
 [!code-vb[Trin_ExcelWorkBook#217](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#217)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SheetChange">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_SheetChangeEventHandler SheetChange;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_SheetChangeEventHandler SheetChange" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.SheetChange" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_SheetChangeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-1290">在用户或外部链接更改任何工作表中的单元格时发生。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1290">Occurs when cells in any worksheet are changed by the user or by an external link.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-1291">图表工作表上不会发生此事件。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1291">This event does not occur on chart sheets.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18d1c-1292">下面的代码示例演示了一个处理程序<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SheetChange>事件。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1292">The following code example demonstrates a handler for the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.SheetChange> event.</span></span> <span data-ttu-id="18d1c-1293">事件处理程序会显示工作表的名称已更改的单元格的范围。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1293">The event handler displays the name of the worksheet and the range of cells that were changed.</span></span>  
  
 <span data-ttu-id="18d1c-1294">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1294">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#218](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#218)]
 [!code-vb[Trin_ExcelWorkBook#218](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#218)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SheetDeactivate">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_SheetDeactivateEventHandler SheetDeactivate;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_SheetDeactivateEventHandler SheetDeactivate" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.SheetDeactivate" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_SheetDeactivateEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-1295">包含它仅为了向后兼容。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1295">Included for backwards compatibility only.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SheetFollowHyperlink">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_SheetFollowHyperlinkEventHandler SheetFollowHyperlink;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_SheetFollowHyperlinkEventHandler SheetFollowHyperlink" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.SheetFollowHyperlink" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_SheetFollowHyperlinkEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-1296">在单击工作簿中的任何超链接时发生。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1296">Occurs when you click any hyperlink in a workbook.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-1297">下面的代码示例演示了一个处理程序<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SheetFollowHyperlink>事件。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1297">The following code example demonstrates a handler for the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.SheetFollowHyperlink> event.</span></span> <span data-ttu-id="18d1c-1298">事件处理程序，则保留已单击当前工作簿以及工作表中包含这些超链接的名称中的所有超链接列表<xref:System.Windows.Forms.ListBox>控件。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1298">The event handler keeps a list of all the hyperlinks in the current workbook that have been clicked, plus the names of the worksheets that contain these hyperlinks, in a <xref:System.Windows.Forms.ListBox> control.</span></span>  
  
 <span data-ttu-id="18d1c-1299">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1299">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#220](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#220)]
 [!code-vb[Trin_ExcelWorkBook#220](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#220)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SheetPivotTableAfterValueChange">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_SheetPivotTableAfterValueChangeEventHandler SheetPivotTableAfterValueChange;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_SheetPivotTableAfterValueChangeEventHandler SheetPivotTableAfterValueChange" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.SheetPivotTableAfterValueChange" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_SheetPivotTableAfterValueChangeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-1300">在对数据透视表内的单元格或单元格范围进行编辑或重新计算（针对包含公式的单元格）后发生。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1300">Occurs after a cell or range of cells inside a PivotTable are edited or recalculated (for cells that contain formulas).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-1301"><xref:Microsoft.Office.Tools.Excel.Workbook.SheetPivotTableAfterValueChange>事件编辑或重新计算的单元格以外的任何条件下不会出现。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1301">The <xref:Microsoft.Office.Tools.Excel.Workbook.SheetPivotTableAfterValueChange> event does not occur under any conditions other than editing or recalculating cells.</span></span> <span data-ttu-id="18d1c-1302">例如，它不会在数据透视表进行刷新、 排序、 筛选，或向下钻取，即使这些操作移动单元格，并可能从 OLAP 数据源中检索新值。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1302">For example, it will not occur when the PivotTable is refreshed, sorted, filtered, or drilled down on, even though those operations move cells and potentially retrieve new values from the OLAP data source.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="18d1c-1303">此事件将显示在 IntelliSense 中 Excel 2007 项目中面向[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1303">This event appears in IntelliSense in Excel 2007 projects that target the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)].</span></span> <span data-ttu-id="18d1c-1304">但是，不能在 Excel 2007 项目中使用此事件。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1304">However, this event cannot be used in Excel 2007 projects.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MissingMemberException"><span data-ttu-id="18d1c-1305">此事件在 Excel 2007 项目中使用。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1305">This event is used in an Excel 2007 project.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SheetPivotTableBeforeAllocateChanges">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_SheetPivotTableBeforeAllocateChangesEventHandler SheetPivotTableBeforeAllocateChanges;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_SheetPivotTableBeforeAllocateChangesEventHandler SheetPivotTableBeforeAllocateChanges" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.SheetPivotTableBeforeAllocateChanges" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_SheetPivotTableBeforeAllocateChangesEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-1306">在将更改应用于数据透视表之前发生。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1306">Occurs before changes are applied to a PivotTable.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-1307"><xref:Microsoft.Office.Tools.Excel.WorkbookBase.SheetPivotTableBeforeAllocateChanges> Excel 立即执行 UPDATE CUBE 语句以应用到数据透视表的 OLAP 数据源，所有更改之前，用户已选择要都应用的用户界面中的更改后立即发生的事件。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1307">The <xref:Microsoft.Office.Tools.Excel.WorkbookBase.SheetPivotTableBeforeAllocateChanges> event occurs immediately before Excel executes an UPDATE CUBE statement to apply all changes to the PivotTable's OLAP data source, and immediately after the user has chosen to apply changes in the user interface.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="18d1c-1308">此事件将显示在 IntelliSense 中 Excel 2007 项目中面向[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1308">This event appears in IntelliSense in Excel 2007 projects that target the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)].</span></span> <span data-ttu-id="18d1c-1309">但是，不能在 Excel 2007 项目中使用此事件。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1309">However, this event cannot be used in Excel 2007 projects.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MissingMemberException"><span data-ttu-id="18d1c-1310">此事件在 Excel 2007 项目中使用。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1310">This event is used in an Excel 2007 project.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SheetPivotTableBeforeCommitChanges">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_SheetPivotTableBeforeCommitChangesEventHandler SheetPivotTableBeforeCommitChanges;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_SheetPivotTableBeforeCommitChangesEventHandler SheetPivotTableBeforeCommitChanges" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.SheetPivotTableBeforeCommitChanges" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_SheetPivotTableBeforeCommitChangesEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-1311">在针对 OLAP 数据源提交数据透视表的更改之前发生。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1311">Occurs before changes are committed against the OLAP data source for a PivotTable.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-1312"><xref:Microsoft.Office.Tools.Excel.WorkbookBase.SheetPivotTableBeforeCommitChanges> Excel 立即执行 COMMIT TRANSACTION 对数据透视表的 OLAP 数据源之前，用户已选择为整个数据透视表中保存更改后立即发生的事件。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1312">The <xref:Microsoft.Office.Tools.Excel.WorkbookBase.SheetPivotTableBeforeCommitChanges> event occurs immediately before Excel executes a COMMIT TRANSACTION against the PivotTable's OLAP data source, and immediately after the user has chosen to save changes for the whole PivotTable.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="18d1c-1313">此事件将显示在 IntelliSense 中 Excel 2007 项目中面向[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1313">This event appears in IntelliSense in Excel 2007 projects that target the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)].</span></span> <span data-ttu-id="18d1c-1314">但是，不能在 Excel 2007 项目中使用此事件。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1314">However, this event cannot be used in Excel 2007 projects.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MissingMemberException"><span data-ttu-id="18d1c-1315">此事件在 Excel 2007 项目中使用。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1315">This event is used in an Excel 2007 project.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SheetPivotTableBeforeDiscardChanges">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_SheetPivotTableBeforeDiscardChangesEventHandler SheetPivotTableBeforeDiscardChanges;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_SheetPivotTableBeforeDiscardChangesEventHandler SheetPivotTableBeforeDiscardChanges" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.SheetPivotTableBeforeDiscardChanges" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_SheetPivotTableBeforeDiscardChangesEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-1316">在放弃对数据透视表的更改之前发生。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1316">Occurs before changes to a PivotTable are discarded.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-1317">Excel 执行 ROLLBACK TRANSACTION 语句，在针对 OLAP 数据源，如果事务仍处于活动状态，并且后用户已选择放弃更改，然后放弃该数据透视表中的所有已编辑的值之前立即发生此事件。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1317">This event occurs immediately before Excel executes a ROLLBACK TRANSACTION statement against the OLAP data source, if a transaction is still active, and then discards all edited values in the PivotTable, after the user has chosen to discard changes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="18d1c-1318">此事件将显示在 IntelliSense 中 Excel 2007 项目中面向[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1318">This event appears in IntelliSense in Excel 2007 projects that target the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)].</span></span> <span data-ttu-id="18d1c-1319">但是，不能在 Excel 2007 项目中使用此事件。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1319">However, this event cannot be used in Excel 2007 projects.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MissingMemberException"><span data-ttu-id="18d1c-1320">此事件在 Excel 2007 项目中使用。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1320">This event is used in an Excel 2007 project.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SheetPivotTableChangeSync">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_SheetPivotTableChangeSyncEventHandler SheetPivotTableChangeSync;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_SheetPivotTableChangeSyncEventHandler SheetPivotTableChangeSync" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.SheetPivotTableChangeSync" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_SheetPivotTableChangeSyncEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-1321">在对数据透视表进行更改后发生。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1321">Occurs after changes to a PivotTable.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-1322"><xref:Microsoft.Office.Tools.Excel.WorkbookBase.SheetPivotTableChangeSync>过程中发生的大多数更改在数据透视表，以便您可以编写代码来响应用户操作，例如清除、 分组或刷新数据透视表中的项。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1322">The <xref:Microsoft.Office.Tools.Excel.WorkbookBase.SheetPivotTableChangeSync> occurs during most changes to a PivotTable, so that you can write code to respond to user actions, such as clearing, grouping, or refreshing items in the PivotTable.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="18d1c-1323">此事件将显示在 IntelliSense 中 Excel 2007 项目中面向[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1323">This event appears in IntelliSense in Excel 2007 projects that target the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)].</span></span> <span data-ttu-id="18d1c-1324">但是，不能在 Excel 2007 项目中使用此事件。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1324">However, this event cannot be used in Excel 2007 projects.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MissingMemberException"><span data-ttu-id="18d1c-1325">此事件在 Excel 2007 项目中使用。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1325">This event is used in an Excel 2007 project.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SheetPivotTableUpdate">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_SheetPivotTableUpdateEventHandler SheetPivotTableUpdate;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_SheetPivotTableUpdateEventHandler SheetPivotTableUpdate" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.SheetPivotTableUpdate" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_SheetPivotTableUpdateEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-1326">在更新数据透视表的工作表后发生。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1326">Occurs after the sheet of a PivotTable report has been updated.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-1327">下面的代码示例演示了一个处理程序<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SheetPivotTableUpdate>事件。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1327">The following code example demonstrates a handler for the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.SheetPivotTableUpdate> event.</span></span> <span data-ttu-id="18d1c-1328">已更新的数据透视表时，事件处理程序将显示一条消息。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1328">The event handler displays a message when the sheet of a PivotTable report has been updated.</span></span>  
  
 <span data-ttu-id="18d1c-1329">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1329">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#221](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#221)]
 [!code-vb[Trin_ExcelWorkBook#221](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#221)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sheets">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Sheets Sheets { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Sheets Sheets" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Sheets" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Sheets</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-1330">获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Sheets" /> 集合，该集合表示工作簿中的所有工作表。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1330">Gets a <see cref="T:Microsoft.Office.Interop.Excel.Sheets" /> collection that represents all the sheets in the workbook.</span></span></summary>
        <value><span data-ttu-id="18d1c-1331"><see cref="T:Microsoft.Office.Interop.Excel.Sheets" /> 集合，表示工作簿中的所有工作表。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1331">A <see cref="T:Microsoft.Office.Interop.Excel.Sheets" /> collection that represents all the sheets in the workbook.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-1332">该集合包括工作簿中工作表、 图表、 对话框工作表和宏工作表。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1332">The collection includes worksheets, charts, dialog sheets and macro sheets in the workbook.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18d1c-1333">下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Sheets%2A>属性来显示工作簿中的表数。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1333">The following code example uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.Sheets%2A> property to display the number of sheets in the workbook.</span></span>  
  
 <span data-ttu-id="18d1c-1334">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1334">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#34](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#34)]
 [!code-vb[Trin_ExcelWorkBook#34](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#34)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SheetSelectionChange">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_SheetSelectionChangeEventHandler SheetSelectionChange;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_SheetSelectionChangeEventHandler SheetSelectionChange" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.SheetSelectionChange" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_SheetSelectionChangeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-1335">所选内容在任何工作表上更改时发生。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1335">Occurs when the selection changes on any worksheet.</span></span> <span data-ttu-id="18d1c-1336">如果所选内容位于图表工作表上，则不发生。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1336">Does not occur if the selection is on a chart sheet.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-1337">下面的代码示例演示了一个处理程序<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SheetSelectionChange>事件。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1337">The following code example demonstrates a handler for the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.SheetSelectionChange> event.</span></span> <span data-ttu-id="18d1c-1338">事件处理程序在状态栏中显示的工作表名称和所选范围的地址。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1338">The event handler displays the sheet name and address of the selected range in the status bar.</span></span>  
  
 <span data-ttu-id="18d1c-1339">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1339">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#222](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#222)]
 [!code-vb[Trin_ExcelWorkBook#222](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#222)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowConflictHistory">
      <MemberSignature Language="C#" Value="public bool ShowConflictHistory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowConflictHistory" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.ShowConflictHistory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-1340">获取或设置一个值，该值指示冲突历史记录工作表在作为共享列表打开的工作簿中是否可见。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1340">Gets or sets a value that indicates whether the Conflict History worksheet is visible in the workbook that is open as a shared list.</span></span></summary>
        <value><span data-ttu-id="18d1c-1341">如果冲突历史记录工作表在作为共享列表打开的工作簿中可见，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1341"><see langword="true" /> if the Conflict History worksheet is visible in the workbook that is open as a shared list; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-1342">如果工作簿作为共享列表打开，该属性无效。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1342">If the workbook is not open as a shared list, this property fails.</span></span> <span data-ttu-id="18d1c-1343">若要确定是否已作为共享列表打开工作簿，请使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.MultiUserEditing%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1343">To determine whether a workbook is open as a shared list, use the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.MultiUserEditing%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowPivotChartActiveFields">
      <MemberSignature Language="C#" Value="public bool ShowPivotChartActiveFields { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowPivotChartActiveFields" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.ShowPivotChartActiveFields" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-1344">获取或设置一个值，该值指示数据透视图筛选窗格是否可见。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1344">Gets or sets a value that indicates whether the PivotChart Filter Pane is visible.</span></span></summary>
        <value><span data-ttu-id="18d1c-1345">如果数据透视图筛选窗格可见，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1345"><see langword="true" /> if the PivotChart Filter Pane is visible; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-1346">若要显示数据透视图筛选窗格，请选择一个数据透视图对象。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1346">To display the PivotChart Filter Pane, select a PivotChart object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowPivotTableFieldList">
      <MemberSignature Language="C#" Value="public bool ShowPivotTableFieldList { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowPivotTableFieldList" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.ShowPivotTableFieldList" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-1347">获取或设置一个值，该值指示数据透视表字段列表是否能够显示。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1347">Gets or sets a value that indicates whether the PivotTable field list can be shown.</span></span></summary>
        <value><span data-ttu-id="18d1c-1348">如果数据透视表字段列表能够显示，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1348"><see langword="true" /> if the PivotTable field list can be shown; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="18d1c-1349">默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1349">The default is <see langword="true" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Shutdown">
      <MemberSignature Language="C#" Value="public event EventHandler Shutdown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Shutdown" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.Shutdown" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-1350">在工作簿宿主项关闭时发生。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1350">Occurs when the workbook host item shuts down.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-1351">这是要在中调用的最后一个事件<xref:Microsoft.Office.Tools.Excel.WorkbookBase>声明为类<xref:Microsoft.Office.Tools.Excel.WorkbookBase>类卸载。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1351">This is the last event to be called in the <xref:Microsoft.Office.Tools.Excel.WorkbookBase> class as the <xref:Microsoft.Office.Tools.Excel.WorkbookBase> class unloads.</span></span> <span data-ttu-id="18d1c-1352">使用此事件的任何其他清理过程。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1352">Use this event for any additional clean up.</span></span>  
  
 <span data-ttu-id="18d1c-1353">文档级自定义项，该程序集的应用程序域卸载时工作簿宿主项关闭。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1353">In a document-level customization, the application domain for the assembly unloads when the workbook host item shuts down.</span></span>  
  
 <span data-ttu-id="18d1c-1354">在应用程序级外接程序，应用程序域不会卸载的工作簿宿主项关闭时。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1354">In an application-level add-in, the application domain does not unload when the workbook host item shuts down.</span></span> <span data-ttu-id="18d1c-1355">此外，基础工作簿对象将不再可用。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1355">Also, the underlying workbook object is no more available.</span></span> <span data-ttu-id="18d1c-1356">若要关闭使用之前访问的工作簿<xref:Microsoft.Office.Tools.Excel.WorkbookBase.BeforeClose>相反。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1356">To access the workbook before it shuts down use <xref:Microsoft.Office.Tools.Excel.WorkbookBase.BeforeClose> instead.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18d1c-1357">下面的代码示例演示了一个处理程序<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Shutdown>事件。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1357">The following code example demonstrates a handler for the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.Shutdown> event.</span></span> <span data-ttu-id="18d1c-1358">事件处理程序会显示一条消息时<xref:Microsoft.Office.Tools.Excel.WorkbookBase>类卸载。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1358">The event handler displays a message when the <xref:Microsoft.Office.Tools.Excel.WorkbookBase> class unloads.</span></span>  
  
 <span data-ttu-id="18d1c-1359">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1359">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#223](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#223)]
 [!code-vb[Trin_ExcelWorkBook#223](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#223)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Signatures">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Core.SignatureSet Signatures { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Core.SignatureSet Signatures" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Signatures" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Core.SignatureSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-1360">获取工作簿的数字签名的集合。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1360">Gets the collection of digital signatures for the workbook.</span></span></summary>
        <value><span data-ttu-id="18d1c-1361">一个<c>Microsoft.Office.Core.SignatureSet</c>集合，其中包含工作簿的数字签名。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1361">A <c>Microsoft.Office.Core.SignatureSet</c> collection that contains the digital signatures for the workbook.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-1362">若要进行数字签名的 Excel 工作簿和验证其他中它们的签名，需要 Microsoft CryptoAPI 和唯一的数字签名证书。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1362">To digitally sign Excel workbooks and verify other signatures in them, you need the Microsoft CryptoAPI and a unique digital signature certificate.</span></span> <span data-ttu-id="18d1c-1363">CryptoAPI 被安装 Microsoft Internet Explorer 4.01 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1363">The CryptoAPI is installed with Microsoft Internet Explorer 4.01 or later.</span></span> <span data-ttu-id="18d1c-1364">您可以从证书颁发机构获取数字签名证书。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1364">You can obtain a digital signature certificate from a certification authority.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18d1c-1365">下面的代码示例获取签名，附加到当前工作簿并为用户显示相应的消息的数量。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1365">The following code example gets the number of signatures that are attached to the current workbook and displays an appropriate message to the user.</span></span>  
  
 <span data-ttu-id="18d1c-1366">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1366">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_Excelworkbook_Additional#39](~/snippets/csharp/VS_Snippets_OfficeSP/trin_excelworkbook_additional/cs/ThisWorkbook.cs#39)]
 [!code-vb[Trin_Excelworkbook_Additional#39](~/snippets/visualbasic/VS_Snippets_OfficeSP/trin_excelworkbook_additional/vb/ThisWorkbook.vb#39)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Site">
      <MemberSignature Language="C#" Value="public System.ComponentModel.ISite Site { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISite Site" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Site" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SlicerCaches">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.SlicerCaches SlicerCaches { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.SlicerCaches SlicerCaches" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.SlicerCaches" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.SlicerCaches</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-1367">获取与工作簿关联的 <see cref="T:Microsoft.Office.Interop.Excel.SlicerCaches" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1367">Gets the <see cref="T:Microsoft.Office.Interop.Excel.SlicerCaches" /> object associated with the workbook.</span></span></summary>
        <value><span data-ttu-id="18d1c-1368">与工作簿关联的 <see cref="T:Microsoft.Office.Interop.Excel.SlicerCaches" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1368">A <see cref="T:Microsoft.Office.Interop.Excel.SlicerCaches" /> object associated with the workbook.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-1369">此属性将出现在 IntelliSense 中 Excel 2007 项目中面向[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1369">This property appears in IntelliSense in Excel 2007 projects that target the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)].</span></span> <span data-ttu-id="18d1c-1370">但是，此属性不能使用 Excel 2007 项目中。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1370">However, this property cannot be used in Excel 2007 projects.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MissingMemberException"><span data-ttu-id="18d1c-1371">此属性用于 Excel 2007 项目。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1371">This property is used in an Excel 2007 project.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SmartDocument">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Core.SmartDocument SmartDocument { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Core.SmartDocument SmartDocument" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.SmartDocument" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Core.SmartDocument</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-1372">获取一个表示智能文档解决方案的设置的 <c>Microsoft.Office.Core.SmartDocument</c>。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1372">Gets a <c>Microsoft.Office.Core.SmartDocument</c> that represents the settings for a smart document solution.</span></span></summary>
        <value><span data-ttu-id="18d1c-1373">一个<c>Microsoft.Office.Core.SmartDocument</c>表示智能文档解决方案的设置。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1373">A <c>Microsoft.Office.Core.SmartDocument</c> that represents the settings for a smart document solution.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-1374">下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SmartDocument%2A>属性来显示一个对话框，允许用户选择要附加到文档的 XML 扩展包。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1374">The following code example uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.SmartDocument%2A> property to display a dialog box that allows the user to pick an XML expansion pack to attach to the document.</span></span>  
  
 <span data-ttu-id="18d1c-1375">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1375">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#35](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#35)]
 [!code-vb[Trin_ExcelWorkBook#35](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#35)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SmartTagOptions">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.SmartTagOptions SmartTagOptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.SmartTagOptions SmartTagOptions" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.SmartTagOptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.SmartTagOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Startup">
      <MemberSignature Language="C#" Value="public event EventHandler Startup;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Startup" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.Startup" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Styles">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Styles Styles { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Styles Styles" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Styles" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Styles</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-1376">获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Styles" /> 集合，该集合表示工作簿中的所有样式。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1376">Gets a <see cref="T:Microsoft.Office.Interop.Excel.Styles" /> collection that represents all the styles in the workbook.</span></span></summary>
        <value><span data-ttu-id="18d1c-1377"><see cref="T:Microsoft.Office.Interop.Excel.Styles" /> 集合，表示工作簿中的所有样式。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1377">A <see cref="T:Microsoft.Office.Interop.Excel.Styles" /> collection that represents all the styles in the workbook.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-1378">下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Styles%2A>属性来调整每个属性的一些<xref:Microsoft.Office.Interop.Excel.Style?displayProperty=fullName>中工作簿，其中包括文本换行、 垂直和水平对齐方式和隐藏公式。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1378">The following code example uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.Styles%2A> property to adjust some of the properties of each <xref:Microsoft.Office.Interop.Excel.Style?displayProperty=fullName> in the workbook, including text wrapping, vertical and horizontal alignment, and hiding formulas.</span></span>  
  
 <span data-ttu-id="18d1c-1379">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1379">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#37](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#37)]
 [!code-vb[Trin_ExcelWorkBook#37](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#37)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Subject">
      <MemberSignature Language="C#" Value="public string Subject { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Subject" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Subject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sync">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Core.Sync Sync { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Core.Sync Sync" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Sync" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Core.Sync</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-1380">获取一个 <c>Microsoft.Office.Core.Sync</c> 对象，该对象提供对属于文档工作区的文档的方法和属性的访问。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1380">Gets a <c>Microsoft.Office.Core.Sync</c> object that provides access to the methods and properties of documents that are part of a Document Workspace.</span></span></summary>
        <value><span data-ttu-id="18d1c-1381">一个<c>Microsoft.Office.Core.Sync</c>对象，它提供对方法和属性属于文档工作区的文档的访问。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1381">A <c>Microsoft.Office.Core.Sync</c> object that provides access to the methods and properties of documents that are part of a Document Workspace.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-1382">下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SharedWorkspace%2A>属性来确定当前的工作簿是否属于文档工作区。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1382">The following code example uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.SharedWorkspace%2A> property to determine whether the current workbook is part of a Document Workspace.</span></span> <span data-ttu-id="18d1c-1383">如果工作簿属于文档工作区，则该示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Sync%2A>属性来显示用户上次更改该文档。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1383">If the workbook is part of a Document Workspace, then the example uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.Sync%2A> property to display the user who last changed the document.</span></span>  
  
 <span data-ttu-id="18d1c-1384">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1384">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#38](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#38)]
 [!code-vb[Trin_ExcelWorkBook#38](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#38)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SyncEvent">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_SyncEventHandler SyncEvent;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_SyncEventHandler SyncEvent" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.SyncEvent" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_SyncEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-1385">在属于文档工作区的工作表的本地副本与服务器上的副本进行同步时发生。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1385">Occurs when the local copy of a worksheet that is part of a Document Workspace is synchronized with the copy on the server.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-1386">下面的代码示例演示了一个处理程序<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SyncEvent>事件。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1386">The following code example demonstrates a handler for the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.SyncEvent> event.</span></span> <span data-ttu-id="18d1c-1387">如果文档工作区中的工作表同步失败，事件处理程序将显示一条消息。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1387">The event handler displays a message if the synchronization of a worksheet in a Document Workspace fails.</span></span>  
  
 <span data-ttu-id="18d1c-1388">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1388">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#225](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#225)]
 [!code-vb[Trin_ExcelWorkBook#225](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#225)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TableStyles">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.TableStyles TableStyles { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.TableStyles TableStyles" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.TableStyles" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.TableStyles</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-1389">获取工作簿中使用的表样式的集合。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1389">Gets the collection of table styles that are used in the workbook.</span></span></summary>
        <value><span data-ttu-id="18d1c-1390">一个<c>Microsoft.Office.Interop.Excel.TableStyles</c>集合，其中包含工作簿中使用的表样式。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1390">A <c>Microsoft.Office.Interop.Excel.TableStyles</c> collection that contains the table styles that are used in the workbook.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-1391">下面的代码示例设置到的表的默认样式`TableStyleDark11`，这是一种样式中提供<xref:Microsoft.Office.Tools.Excel.WorkbookBase.TableStyles%2A>集合。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1391">The following code example sets the default style of tables to `TableStyleDark11`, which is a style available in the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.TableStyles%2A> collection.</span></span> <span data-ttu-id="18d1c-1392">然后，该示例添加一个表以验证新的表样式。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1392">The example then adds a table to verify the new table style.</span></span>  
  
 <span data-ttu-id="18d1c-1393">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1393">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_Excelworkbook_Additional#35](~/snippets/csharp/VS_Snippets_OfficeSP/trin_excelworkbook_additional/cs/ThisWorkbook.cs#35)]
 [!code-vb[Trin_Excelworkbook_Additional#35](~/snippets/visualbasic/VS_Snippets_OfficeSP/trin_excelworkbook_additional/vb/ThisWorkbook.vb#35)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-1394">获取或设置包含有关工作簿的数据的对象。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1394">Gets or sets the object that contains data about the workbook.</span></span></summary>
        <value><span data-ttu-id="18d1c-1395">一个对象，包含有关工作簿的数据。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1395">An object that contains data about the workbook.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-1396">一个常见用途<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Tag%2A>属性是用于存储与工作簿密切关联的数据。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1396">A common use for the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.Tag%2A> property is to store data that is closely associated with the workbook.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TemplateRemoveExtData">
      <MemberSignature Language="C#" Value="public bool TemplateRemoveExtData { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TemplateRemoveExtData" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.TemplateRemoveExtData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-1397">获取或设置一个值，该值指示在将工作簿保存为模板时是否移除外部数据引用。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1397">Gets or sets a value that indicates whether external data references are removed when the workbook is saved as a template.</span></span></summary>
        <value><span data-ttu-id="18d1c-1398">如果在将工作簿保存为模板时移除外部数据引用，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1398"><see langword="true" /> if external data references are removed when the workbook is saved as a template; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Theme">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Core.OfficeTheme Theme { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Core.OfficeTheme Theme" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Theme" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Core.OfficeTheme</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-1399">获取应用于工作簿的主题。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1399">Gets the theme that is applied to the workbook.</span></span></summary>
        <value><span data-ttu-id="18d1c-1400">一个<c>Microsoft.Office.Core.OfficeTheme</c> ，表示应用于工作簿的主题。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1400">A <c>Microsoft.Office.Core.OfficeTheme</c> that represents the theme that is applied to the workbook.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-1401">下面的代码示例检索当前工作簿的主题。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1401">The following code example retrieves the theme of the current workbook.</span></span> <span data-ttu-id="18d1c-1402">此示例然后显示主要字体和字体方案的工作簿主题中找到的次要字体的名称。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1402">The example then displays the names of the major font and minor font found in the font scheme of the workbook theme.</span></span>  
  
 <span data-ttu-id="18d1c-1403">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1403">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_Excelworkbook_Additional#30](~/snippets/csharp/VS_Snippets_OfficeSP/trin_excelworkbook_additional/cs/ThisWorkbook.cs#30)]
 [!code-vb[Trin_Excelworkbook_Additional#30](~/snippets/visualbasic/VS_Snippets_OfficeSP/trin_excelworkbook_additional/vb/ThisWorkbook.vb#30)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Title">
      <MemberSignature Language="C#" Value="public string Title { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Title" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Title" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToggleFormsDesign">
      <MemberSignature Language="C#" Value="public void ToggleFormsDesign ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ToggleFormsDesign() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.ToggleFormsDesign" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="18d1c-1404">将 Microsoft Office Excel 切换进和切换出设计模式。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1404">Toggles Microsoft Office Excel into and out of design mode.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unprotect">
      <MemberSignature Language="C#" Value="public void Unprotect (object password);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Unprotect(object password) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.Unprotect(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="password" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="password"><span data-ttu-id="18d1c-1405">用于取消保护工作簿的密码，区分大小写。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1405">The case-sensitive password to use to unprotect the workbook.</span></span> <span data-ttu-id="18d1c-1406">如果工作簿未使用密码保护，则忽略此参数。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1406">If the workbook is not protected with a password, this parameter is ignored.</span></span> <span data-ttu-id="18d1c-1407">如果对使用密码保护的工作簿省略了此参数，则该方法会失败。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1407">If you omit this parameter for a workbook that is protected with a password, the method fails.</span></span></param>
        <summary><span data-ttu-id="18d1c-1408">从工作簿中移除保护。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1408">Removes protection from the workbook.</span></span> <span data-ttu-id="18d1c-1409">如果工作簿不受保护，则此方法无效。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1409">This method has no effect if the workbook is not protected.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-1410">如果你忘记了密码，则不能取消保护工作簿。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1410">If you forget the password, you cannot unprotect the workbook.</span></span> <span data-ttu-id="18d1c-1411">最好将密码及其对应文档名的列表保存在安全的位置。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1411">It is a good idea to keep a list of your passwords and their corresponding document names in a safe place.</span></span>  
  
## <a name="optional-parameters"></a><span data-ttu-id="18d1c-1412">可选参数</span><span class="sxs-lookup"><span data-stu-id="18d1c-1412">Optional Parameters</span></span>  
 <span data-ttu-id="18d1c-1413">可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1413">For information on optional parameters, see [Optional Parameters in Office Solutions](/visualstudio/vsto/optional-parameters-in-office-solutions).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18d1c-1414">下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Protect%2A>方法来保护工作簿和工作簿窗口，而无需指定密码保护的结构。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1414">The following code example uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.Protect%2A> method to protect the structure of the workbook and workbook windows, but without specifying password protection.</span></span> <span data-ttu-id="18d1c-1415">该示例然后会提示用户通过使用取消保护工作簿<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Unprotect%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1415">The example then prompts the user to unprotect the workbook by using the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.Unprotect%2A> method.</span></span>  
  
 <span data-ttu-id="18d1c-1416">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1416">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#133](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#133)]
 [!code-vb[Trin_ExcelWorkBook#133](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#133)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnprotectDocument">
      <MemberSignature Language="C#" Value="protected virtual void UnprotectDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void UnprotectDocument() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.UnprotectDocument" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="18d1c-1417">由 [!INCLUDE[vsto_runtime](~/includes/vsto-runtime-md.md)] 调用，以便可从工作簿移除密码保护，并能保存缓存数据。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1417">Called by the [!INCLUDE[vsto_runtime](~/includes/vsto-runtime-md.md)] so that you can remove password protection from the workbook and enable cached data to be saved.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-1418">如果您的工作簿受密码保护，并且它包含的缓存的数据，可能会在运行时更改 Excel 重写此方法在文档级项目中。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1418">Override this method in a document-level project for Excel if your workbook is protected by using a password, and it contains cached data that might be changed at run time.</span></span> <span data-ttu-id="18d1c-1419">在此方法的实现中，使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Unprotect%2A>方法暂时取消保护工作簿。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1419">In your implementation of this method, use the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.Unprotect%2A> method to temporarily unprotect the workbook.</span></span>  
  
 <span data-ttu-id="18d1c-1420">默认情况下，对受密码保护的工作簿中的缓存数据的更改不会保留时保存工作簿。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1420">By default, changes to cached data in a password-protected workbook are not persisted when the workbook is saved.</span></span> <span data-ttu-id="18d1c-1421">若要将更改保存到缓存的数据，必须在你的项目中重写以下方法：</span><span class="sxs-lookup"><span data-stu-id="18d1c-1421">To save changes to the cached data, you must override the following methods in your project:</span></span>  
  
-   <span data-ttu-id="18d1c-1422"><xref:Microsoft.Office.Tools.Excel.WorkbookBase.UnprotectDocument%2A>。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1422"><xref:Microsoft.Office.Tools.Excel.WorkbookBase.UnprotectDocument%2A>.</span></span> <span data-ttu-id="18d1c-1423">保存该工作簿后，[!INCLUDE[vsto_runtime](~/includes/vsto-runtime-md.md)]调用此方法。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1423">When the workbook is saved, the [!INCLUDE[vsto_runtime](~/includes/vsto-runtime-md.md)] calls this method.</span></span> <span data-ttu-id="18d1c-1424">将代码添加到此方法可暂时取消保护工作簿。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1424">Add code to this method that temporarily unprotects the workbook.</span></span> <span data-ttu-id="18d1c-1425">这允许缓存的数据要保存更改。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1425">This enables changes to the cached data to be saved.</span></span>  
  
-   <span data-ttu-id="18d1c-1426"><xref:Microsoft.Office.Tools.Excel.WorkbookBase.ProtectDocument%2A>。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1426"><xref:Microsoft.Office.Tools.Excel.WorkbookBase.ProtectDocument%2A>.</span></span> <span data-ttu-id="18d1c-1427">保存工作簿后，[!INCLUDE[vsto_runtime](~/includes/vsto-runtime-md.md)]调用此方法。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1427">After the workbook is saved, the [!INCLUDE[vsto_runtime](~/includes/vsto-runtime-md.md)] calls this method.</span></span> <span data-ttu-id="18d1c-1428">将代码添加到此方法的重新应用到工作簿的保护。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1428">Add code to this method that reapplies protection to the workbook.</span></span>  
  
 <span data-ttu-id="18d1c-1429">有关详细信息，请参阅[如何： Password-Protected 文档中的缓存数据](/visualstudio/vsto/how-to-cache-data-in-a-password-protected-document)。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1429">For more information, see [How to: Cache Data in a Password-Protected Document](/visualstudio/vsto/how-to-cache-data-in-a-password-protected-document).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18d1c-1430">下面的代码示例演示如何重写<xref:Microsoft.Office.Tools.Excel.WorkbookBase.UnprotectDocument%2A>方法暂时取消保护工作簿，以便可以保存对缓存数据的更改。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1430">The following code example demonstrates how to override the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.UnprotectDocument%2A> method to temporarily unprotect the workbook so that changes to the cached data can be saved.</span></span> <span data-ttu-id="18d1c-1431">该示例首先将保存当前<xref:Microsoft.Office.Tools.Excel.WorkbookBase.ProtectStructure%2A>并<xref:Microsoft.Office.Tools.Excel.WorkbookBase.ProtectWindows%2A>值，以便可以更高版本中重新应用相同的保护类型<xref:Microsoft.Office.Tools.Excel.WorkbookBase.ProtectDocument%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1431">The example first saves the current <xref:Microsoft.Office.Tools.Excel.WorkbookBase.ProtectStructure%2A> and <xref:Microsoft.Office.Tools.Excel.WorkbookBase.ProtectWindows%2A> values, so that the same type of protection can be reapplied later in the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.ProtectDocument%2A> method.</span></span> <span data-ttu-id="18d1c-1432">若要使用此代码，运行从`ThisWorkbook`Excel 的文档级项目中的类。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1432">To use this code, run it from the `ThisWorkbook` class in a document-level project for Excel.</span></span> <span data-ttu-id="18d1c-1433">该密码存储在名为的字段中的代码假定`securelyStoredPassword`。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1433">The code assumes that the password is stored in a field named `securelyStoredPassword`.</span></span>  
  
 [!code-csharp[Trin_CachedDataProtectedWorkbook#1](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_CachedDataProtectedWorkbook/CS/ThisWorkbook.cs#1)]
 [!code-vb[Trin_CachedDataProtectedWorkbook#1](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_CachedDataProtectedWorkbook/VB/ThisWorkbook.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnprotectSharing">
      <MemberSignature Language="C#" Value="public void UnprotectSharing (object sharingPassword);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnprotectSharing(object sharingPassword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.UnprotectSharing(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sharingPassword" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="sharingPassword"><span data-ttu-id="18d1c-1434">工作簿密码。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1434">The workbook password.</span></span></param>
        <summary><span data-ttu-id="18d1c-1435">关闭共享保护并保存工作簿。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1435">Turns off protection for sharing and saves the workbook.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-1436">使用强密码的组合大写和小写字母、 数字和符号。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1436">Use strong passwords that combine uppercase and lowercase letters, numbers, and symbols.</span></span> <span data-ttu-id="18d1c-1437">弱密码不混合使用这些元素。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1437">Weak passwords do not mix these elements.</span></span> <span data-ttu-id="18d1c-1438">强密码： Y6dh ！ et5。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1438">Strong password: Y6dh!et5.</span></span> <span data-ttu-id="18d1c-1439">弱密码： House27。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1439">Weak password: House27.</span></span> <span data-ttu-id="18d1c-1440">使用，以便无需将其记下可以记住的强密码。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1440">Use a strong password that you can remember so that you do not have to write it down.</span></span>  
  
## <a name="optional-parameters"></a><span data-ttu-id="18d1c-1441">可选参数</span><span class="sxs-lookup"><span data-stu-id="18d1c-1441">Optional Parameters</span></span>  
 <span data-ttu-id="18d1c-1442">可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1442">For information on optional parameters, see [Optional Parameters in Office Solutions](/visualstudio/vsto/optional-parameters-in-office-solutions).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateFromFile">
      <MemberSignature Language="C#" Value="public void UpdateFromFile ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateFromFile() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.UpdateFromFile" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="18d1c-1443">如果磁盘版本比内存中加载的工作簿副本更新，则从保存的工作簿磁盘版本更新只读工作簿。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1443">Updates a read-only workbook from the saved disk version of the workbook if the disk version is more recent than the copy of the workbook that is loaded in memory.</span></span> <span data-ttu-id="18d1c-1444">如果自加载工作簿以来还未更改过磁盘副本，则不重新加载工作簿的内存副本。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1444">If the disk copy has not changed since the workbook was loaded, the in-memory copy of the workbook is not reloaded.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-1445">以只读方式打开由用户 A 和用户 b。 为读/写打开工作簿时，此方法很有用如果用户 B 将工作簿的较新版本保存到磁盘，而用户 A 仍工作簿打开，用户将无法获取的已更新的副本，而无需关闭并重新打开该工作簿和丢失视图设置。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1445">This method is useful when a workbook is opened as read-only by user A and opened as read/write by user B. If user B saves a newer version of the workbook to disk while user A still has the workbook open, user A cannot get the updated copy without closing and reopening the workbook and losing view settings.</span></span> <span data-ttu-id="18d1c-1446"><xref:Microsoft.Office.Tools.Excel.WorkbookBase.UpdateFromFile%2A>方法更新内存中副本的磁盘文件中的工作簿。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1446">The <xref:Microsoft.Office.Tools.Excel.WorkbookBase.UpdateFromFile%2A> method updates the in-memory copy of the workbook from the disk file.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateLink">
      <MemberSignature Language="C#" Value="public void UpdateLink (object name, object type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateLink(object name, object type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.UpdateLink(System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Object" />
        <Parameter Name="type" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="18d1c-1447">要更新的 Excel 或 DDE/OLE 链接的名称（和从 <see cref="M:Microsoft.Office.Tools.Excel.WorkbookBase.LinkSources(System.Object)" /> 方法返回的一样）。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1447">The name of the Excel or DDE/OLE link to be updated, as returned from the <see cref="M:Microsoft.Office.Tools.Excel.WorkbookBase.LinkSources(System.Object)" /> method.</span></span></param>
        <param name="type"><span data-ttu-id="18d1c-1448"><see cref="T:Microsoft.Office.Interop.Excel.XlLinkType" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1448">One of the <see cref="T:Microsoft.Office.Interop.Excel.XlLinkType" /> values.</span></span></param>
        <summary><span data-ttu-id="18d1c-1449">更新 Microsoft Office Excel、DDE 或 OLE 链接（或多个链接）。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1449">Updates a Microsoft Office Excel, DDE, or OLE link (or links).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-1450">不带任何参数调用此方法时，Excel 将默认为更新工作表的所有链接。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1450">When this method is called without any parameters, Excel defaults to updating all worksheet links.</span></span>  
  
## <a name="optional-parameters"></a><span data-ttu-id="18d1c-1451">可选参数</span><span class="sxs-lookup"><span data-stu-id="18d1c-1451">Optional Parameters</span></span>  
 <span data-ttu-id="18d1c-1452">可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1452">For information on optional parameters, see [Optional Parameters in Office Solutions](/visualstudio/vsto/optional-parameters-in-office-solutions).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18d1c-1453">下面的代码示例创建 Excel 工作簿的外部链接，然后使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.UpdateLink%2A>方法来更新该链接。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1453">The following code example creates an external link to an Excel workbook and then uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.UpdateLink%2A> method to update the link.</span></span> <span data-ttu-id="18d1c-1454">此示例假定 Book2.xlsx C 目录的根目录上存在该工作簿。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1454">This example assumes that workbook Book2.xlsx exists at the root of the C directory.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#134](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#134)]
 [!code-vb[Trin_ExcelWorkBook#134](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#134)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateLinks">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlUpdateLinks UpdateLinks { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlUpdateLinks UpdateLinks" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.UpdateLinks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlUpdateLinks</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-1455">获取或设置一个值，该值指示工作簿用于更新嵌入的 OLE 链接的设置。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1455">Gets or sets a value that indicates a workbook's setting for updating embedded OLE links.</span></span></summary>
        <value><span data-ttu-id="18d1c-1456"><see cref="T:Microsoft.Office.Interop.Excel.XlUpdateLinks" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1456">One of the <see cref="T:Microsoft.Office.Interop.Excel.XlUpdateLinks" /> values.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-1457">下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.UpdateLinks%2A>属性来显示如何嵌入的 OLE 链接更新工作簿中。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1457">The following code example uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.UpdateLinks%2A> property to display how embedded OLE links are updated in the workbook.</span></span>  
  
 <span data-ttu-id="18d1c-1458">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1458">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#39](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#39)]
 [!code-vb[Trin_ExcelWorkBook#39](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#39)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateRemoteReferences">
      <MemberSignature Language="C#" Value="public bool UpdateRemoteReferences { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UpdateRemoteReferences" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.UpdateRemoteReferences" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-1459">获取或设置一个值，该值指示 Microsoft Office Excel 是否更新工作簿中的远程引用。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1459">Gets or sets a value that indicates whether Microsoft Office Excel updates remote references in the workbook.</span></span></summary>
        <value><span data-ttu-id="18d1c-1460">如果 Excel 更新工作簿中的远程引用，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1460"><see langword="true" /> if Excel updates remote references in the workbook; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UserControl">
      <MemberSignature Language="C#" Value="public bool UserControl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UserControl" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.UserControl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UserStatus">
      <MemberSignature Language="C#" Value="public object UserStatus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object UserStatus" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.UserStatus" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-1461">获取一个二维数组（从 1 开始），该数组提供将工作簿打开为共享列表的每个用户的有关信息。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1461">Gets a 1-based, two-dimensional array that provides information about each user who has the workbook open as a shared list.</span></span></summary>
        <value><span data-ttu-id="18d1c-1462">二维数组（从 1 开始），该数组提供将工作簿打开为共享列表的每个用户的有关信息。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1462">A 1-based, two-dimensional array that provides information about each user who has the workbook open as a shared list.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-1463">第二个维度的第一个元素是用户的名称，第二个元素是日期和时间时用户上一次打开工作簿和第三个元素是一个数字，指示列表的类型 （1 表示独占的而 2 表示共享）。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1463">The first element of the second dimension is the name of the user, the second element is the date and time when the user last opened the workbook, and the third element is a number indicating the type of list (1 indicates exclusive, and 2 indicates shared).</span></span>  
  
 <span data-ttu-id="18d1c-1464">此属性不返回具有指定的工作簿打开为只读的用户有关的信息。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1464">This property does not return information about users who have the specified workbook open as read-only.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VBASigned">
      <MemberSignature Language="C#" Value="public bool VBASigned { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool VBASigned" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.VBASigned" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-1465">获取一个值，该值指示工作簿的 Visual Basic for Applications 项目是否已进行了数字签名。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1465">Gets a value that indicates whether the Visual Basic for Applications project for the workbook has been digitally signed.</span></span></summary>
        <value><span data-ttu-id="18d1c-1466">如果工作簿的 Visual Basic for Applications 项目已进行了数字签名，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1466"><see langword="true" /> if the Visual Basic for Applications project for the workbook has been digitally signed; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-1467">下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.VBASigned%2A>属性来显示一条消息，如果 Visual Basic for Applications 项目的工作簿未进行数字签名。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1467">The following code example uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.VBASigned%2A> property to display a message if the Visual Basic for Applications project for the workbook has not been digitally signed.</span></span>  
  
 <span data-ttu-id="18d1c-1468">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1468">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#41](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#41)]
 [!code-vb[Trin_ExcelWorkBook#41](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#41)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VBProject">
      <MemberSignature Language="C#" Value="public Microsoft.Vbe.Interop.VBProject VBProject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Vbe.Interop.VBProject VBProject" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.VBProject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Vbe.Interop.VBProject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-1469">获取工作簿中的虚拟 <c>Microsoft.Vbe.Interop.VBProject</c> 项目。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1469">Gets the virtual <c>Microsoft.Vbe.Interop.VBProject</c> project that is in the workbook.</span></span></summary>
        <value><span data-ttu-id="18d1c-1470">虚拟<c>Microsoft.Vbe.Interop.VBProject</c>工作簿中的项目。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1470">The virtual <c>Microsoft.Vbe.Interop.VBProject</c> project that is in the workbook.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-1471">此属性是指 Visual Basic for Applications 项目，而不是 Visual Basic 项目。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1471">This property refers to the Visual Basic for Applications project, not the Visual Basic project.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18d1c-1472">下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.VBProject%2A>属性显示为工作簿的应用程序项目的 Visual Basic 名称。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1472">The following code example uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.VBProject%2A> property to display the name of the Visual Basic for Applications project for the workbook.</span></span>  
  
 <span data-ttu-id="18d1c-1473">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1473">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#42](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#42)]
 [!code-vb[Trin_ExcelWorkBook#42](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#42)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VstoSmartTags">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Tools.SmartTagCollection VstoSmartTags { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Tools.SmartTagCollection VstoSmartTags" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.VstoSmartTags" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Tools.SmartTagCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-1474">获取与工作簿关联的 <see cref="T:Microsoft.Office.Tools.SmartTagCollection" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1474">Gets the <see cref="T:Microsoft.Office.Tools.SmartTagCollection" /> associated with the workbook.</span></span> [!INCLUDE[vsto_smart_tags](~/includes/vsto-smart-tags-md.md)]<span data-ttu-id="18d1c-1475">。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1475">.</span></span></summary>
        <value><span data-ttu-id="18d1c-1476">与工作簿关联的 <see cref="T:Microsoft.Office.Tools.SmartTagCollection" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1476">The <see cref="T:Microsoft.Office.Tools.SmartTagCollection" /> associated with the workbook.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-1477">下面的代码示例创建一个智能标记，设置为蓝色时识别"蓝色"一词的单元格的前景色。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1477">The following code example creates a smart tag that sets the font color of a cell to blue when the term "blue" is recognized.</span></span> <span data-ttu-id="18d1c-1478">该示例通过使用向工作簿添加智能标记<xref:Microsoft.Office.Tools.Excel.WorkbookBase.VstoSmartTags%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1478">The example adds the smart tag to the workbook by using the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.VstoSmartTags%2A> property.</span></span>  
  
 <span data-ttu-id="18d1c-1479">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1479">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#49](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#49)]
 [!code-vb[Trin_ExcelWorkBook#49](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#49)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WebOptions">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.WebOptions WebOptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.WebOptions WebOptions" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.WebOptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WebOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-1480">获取 <see cref="T:Microsoft.Office.Interop.Excel.WebOptions" /> 集合，该集合包含工作簿级特性，在将文档保存为网页或打开网页时 Microsoft Office Excel 将使用这些特性。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1480">Gets the <see cref="T:Microsoft.Office.Interop.Excel.WebOptions" /> collection, which contains workbook-level attributes used by Microsoft Office Excel when you save a document as a Web page or open a Web page.</span></span></summary>
        <value><span data-ttu-id="18d1c-1481"><see cref="T:Microsoft.Office.Interop.Excel.WebOptions" /> 集合，包含工作簿级特性，在将文档保存为网页或打开网页时 Excel 将使用这些特性。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1481">The <see cref="T:Microsoft.Office.Interop.Excel.WebOptions" /> collection, which contains workbook-level attributes used by Excel when you save a document as a Web page or open a Web page.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-1482">下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.WebOptions%2A>属性以支持可移植网络图形 (PNG) 作为输出格式，如果尚未安装，并将其以允许长文件命名时下载带有指定的网页的 Office Web 组件文档另存为网页。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1482">The following code example uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.WebOptions%2A> property to enable Portable Network Graphics (PNG) as an output format, download the Office Web components with the specified Web page if they are not already installed, and to allow long file names when the document is saved as a Web page.</span></span>  
  
 <span data-ttu-id="18d1c-1483">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1483">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#43](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#43)]
 [!code-vb[Trin_ExcelWorkBook#43](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#43)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WebPagePreview">
      <MemberSignature Language="C#" Value="public void WebPagePreview ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WebPagePreview() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.WebPagePreview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="18d1c-1484">显示与保存为网页效果相同的工作簿的预览。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1484">Displays a preview of the workbook as it would look if saved as a Web page.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowActivate">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_WindowActivateEventHandler WindowActivate;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_WindowActivateEventHandler WindowActivate" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.WindowActivate" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_WindowActivateEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-1485">在激活任何工作簿窗口时发生。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1485">Occurs when any workbook window is activated.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-1486">下面的代码示例演示了一个处理程序<xref:Microsoft.Office.Tools.Excel.WorkbookBase.WindowActivate>事件。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1486">The following code example demonstrates a handler for the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.WindowActivate> event.</span></span> <span data-ttu-id="18d1c-1487">事件处理程序可激活的工作簿窗口最大化。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1487">The event handler maximizes the workbook window that was activated.</span></span>  
  
 <span data-ttu-id="18d1c-1488">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1488">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#226](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#226)]
 [!code-vb[Trin_ExcelWorkBook#226](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#226)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowDeactivate">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_WindowDeactivateEventHandler WindowDeactivate;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_WindowDeactivateEventHandler WindowDeactivate" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.WindowDeactivate" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_WindowDeactivateEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-1489">在停用任何工作簿窗口时发生。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1489">Occurs when any workbook window is deactivated.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-1490">下面的代码示例演示了一个处理程序<xref:Microsoft.Office.Tools.Excel.WorkbookBase.WindowDeactivate>事件。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1490">The following code example demonstrates a handler for the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.WindowDeactivate> event.</span></span> <span data-ttu-id="18d1c-1491">事件处理程序最小化已停用的工作簿窗口。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1491">The event handler minimizes the workbook window that was deactivated.</span></span>  
  
 <span data-ttu-id="18d1c-1492">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1492">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#227](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#227)]
 [!code-vb[Trin_ExcelWorkBook#227](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#227)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowResize">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_WindowResizeEventHandler WindowResize;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_WindowResizeEventHandler WindowResize" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.WindowResize" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_WindowResizeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-1493">在调整任意工作簿窗口的大小时发生。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1493">Occurs when any workbook window is resized.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-1494">下面的代码示例演示了一个处理程序<xref:Microsoft.Office.Tools.Excel.WorkbookBase.WindowResize>事件。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1494">The following code example demonstrates a handler for the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.WindowResize> event.</span></span> <span data-ttu-id="18d1c-1495">事件处理程序已调整大小的工作簿窗口的标题栏中显示所显示的名称。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1495">The event handler displays the name that appears in the title bar of the workbook window that was resized.</span></span>  
  
 <span data-ttu-id="18d1c-1496">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1496">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#228](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#228)]
 [!code-vb[Trin_ExcelWorkBook#228](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#228)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Windows">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Windows Windows { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Windows Windows" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Windows" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Windows</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-1497">获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Windows" /> 集合，该集合表示工作簿中的所有窗口。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1497">Gets a <see cref="T:Microsoft.Office.Interop.Excel.Windows" /> collection that represents all the windows in the workbook.</span></span></summary>
        <value><span data-ttu-id="18d1c-1498"><see cref="T:Microsoft.Office.Interop.Excel.Windows" /> 集合，表示工作簿中的所有窗口。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1498">A <see cref="T:Microsoft.Office.Interop.Excel.Windows" /> collection that represents all the windows in the workbook.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-1499">此属性返回可见或隐藏窗口的集合。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1499">This property returns a collection of both visible and hidden windows.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18d1c-1500">下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Windows%2A>属性来显示公式、 网格线和当前工作簿的轮廓。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1500">The following code example uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.Windows%2A> property to display formulas, gridlines, and the outline of the current workbook.</span></span>  
  
 <span data-ttu-id="18d1c-1501">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1501">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#44](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#44)]
 [!code-vb[Trin_ExcelWorkBook#44](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#44)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Worksheets">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Sheets Worksheets { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Sheets Worksheets" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Worksheets" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Sheets</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-1502">获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Sheets" /> 集合，该集合表示工作簿中的所有工作表。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1502">Gets a <see cref="T:Microsoft.Office.Interop.Excel.Sheets" /> collection that represents all the worksheets in the workbook.</span></span></summary>
        <value><span data-ttu-id="18d1c-1503"><see cref="T:Microsoft.Office.Interop.Excel.Sheets" /> 集合，表示工作簿中的所有工作表。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1503">A <see cref="T:Microsoft.Office.Interop.Excel.Sheets" /> collection that represents all the worksheets in the workbook.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-1504">此属性不返回宏工作表、 图表、 或对话框工作表。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1504">This property does not return macro sheets, charts, or dialog sheets.</span></span> <span data-ttu-id="18d1c-1505">使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Sheets%2A>属性以返回这些表以及工作表。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1505">Use the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.Sheets%2A> property to return those sheets as well as worksheets.</span></span> <span data-ttu-id="18d1c-1506">您还可以使用专用的属性<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Excel4MacroSheets%2A>并<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Excel4IntlMacroSheets%2A>返回宏工作表和<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Charts%2A>属性以返回图表。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1506">You can also use the specialized properties <xref:Microsoft.Office.Tools.Excel.WorkbookBase.Excel4MacroSheets%2A> and <xref:Microsoft.Office.Tools.Excel.WorkbookBase.Excel4IntlMacroSheets%2A> to return macro sheets and the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.Charts%2A> property to return charts.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18d1c-1507">下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Worksheets%2A>属性以使当前工作簿中的第二个工作表中不可见。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1507">The following code example uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.Worksheets%2A> property to make the second worksheet in the current workbook invisible.</span></span>  
  
 <span data-ttu-id="18d1c-1508">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1508">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#45](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#45)]
 [!code-vb[Trin_ExcelWorkBook#45](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#45)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WritePassword">
      <MemberSignature Language="C#" Value="public string WritePassword { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string WritePassword" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.WritePassword" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-1509">获取或设置工作簿的写密码。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1509">Gets or sets the write password of a workbook.</span></span></summary>
        <value><span data-ttu-id="18d1c-1510">工作簿的写密码。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1510">The write password of a workbook.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-1511"><xref:Microsoft.Office.Tools.Excel.WorkbookBase.WritePassword%2A>属性是否可读，并且返回">> \* \*"。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1511">The <xref:Microsoft.Office.Tools.Excel.WorkbookBase.WritePassword%2A> property is readable and returns ">>\*\*".</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18d1c-1512">下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.WriteReserved%2A>属性来确定当前的工作簿是否受写保护。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1512">The following code example uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.WriteReserved%2A> property to determine whether the current workbook is write-reserved.</span></span> <span data-ttu-id="18d1c-1513">如果工作簿不受写保护，则此方法将<xref:Microsoft.Office.Tools.Excel.WorkbookBase.WritePassword%2A>获取通过用户输入的密码的属性。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1513">If the workbook is not write-reserved, then the method sets the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.WritePassword%2A> property to a password obtained through user input.</span></span> <span data-ttu-id="18d1c-1514">否则，该示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.WriteReservedBy%2A>属性来显示该工作簿保存为写保护的用户的名称。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1514">Otherwise, the example uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.WriteReservedBy%2A> property to display the name of the user who saved the workbook as write-reserved.</span></span> <span data-ttu-id="18d1c-1515">此示例假定名为方法的存在使得`GetPasswordFromUserInput`，获取用户输入一个强密码。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1515">This example assumes the existence of a method named `GetPasswordFromUserInput` that obtains a strong password from user input.</span></span>  
  
 <span data-ttu-id="18d1c-1516">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1516">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#46](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#46)]
 [!code-vb[Trin_ExcelWorkBook#46](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#46)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteReserved">
      <MemberSignature Language="C#" Value="public bool WriteReserved { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool WriteReserved" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.WriteReserved" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-1517">获取一个值，该值指示工作簿是否受写保护。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1517">Gets a value that indicates whether the workbook is write-reserved.</span></span></summary>
        <value><span data-ttu-id="18d1c-1518">如果工作簿受写保护，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1518"><see langword="true" /> if the workbook is write-reserved; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-1519">使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SaveAs%2A>方法以设置此属性。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1519">Use the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.SaveAs%2A> method to set this property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18d1c-1520">下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.WriteReserved%2A>属性来确定当前的工作簿是否受写保护。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1520">The following code example uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.WriteReserved%2A> property to determine whether the current workbook is write-reserved.</span></span> <span data-ttu-id="18d1c-1521">如果工作簿不受写保护，则此方法将<xref:Microsoft.Office.Tools.Excel.WorkbookBase.WritePassword%2A>获取通过用户输入的密码的属性。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1521">If the workbook is not write-reserved, then the method sets the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.WritePassword%2A> property to a password obtained through user input.</span></span> <span data-ttu-id="18d1c-1522">否则，该示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.WriteReservedBy%2A>属性来显示该工作簿保存为写保护的用户的名称。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1522">Otherwise, the example uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.WriteReservedBy%2A> property to display the name of the user who saved the workbook as write-reserved.</span></span> <span data-ttu-id="18d1c-1523">此示例假定名为方法的存在使得`GetPasswordFromUserInput`，获取用户输入一个强密码。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1523">This example assumes the existence of a method named `GetPasswordFromUserInput` that obtains a strong password from user input.</span></span>  
  
 <span data-ttu-id="18d1c-1524">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1524">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#46](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#46)]
 [!code-vb[Trin_ExcelWorkBook#46](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#46)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteReservedBy">
      <MemberSignature Language="C#" Value="public string WriteReservedBy { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string WriteReservedBy" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.WriteReservedBy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-1525">获取当前具有工作簿的写权限的用户名。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1525">Gets the name of the user who currently has write permission for the workbook.</span></span></summary>
        <value><span data-ttu-id="18d1c-1526">当前具有工作簿的写权限的用户名。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1526">The name of the user who currently has write permission for the workbook.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-1527">下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.WriteReserved%2A>属性来确定当前的工作簿是否受写保护。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1527">The following code example uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.WriteReserved%2A> property to determine whether the current workbook is write-reserved.</span></span> <span data-ttu-id="18d1c-1528">如果工作簿不受写保护，则此方法将<xref:Microsoft.Office.Tools.Excel.WorkbookBase.WritePassword%2A>获取通过用户输入的密码的属性。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1528">If the workbook is not write-reserved, then the method sets the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.WritePassword%2A> property to a password obtained through user input.</span></span> <span data-ttu-id="18d1c-1529">否则，该示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.WriteReservedBy%2A>属性来显示该工作簿保存为写保护的用户的名称。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1529">Otherwise, the example uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.WriteReservedBy%2A> property to display the name of the user who saved the workbook as write-reserved.</span></span> <span data-ttu-id="18d1c-1530">此示例假定名为方法的存在使得`GetPasswordFromUserInput`，获取用户输入一个强密码。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1530">This example assumes the existence of a method named `GetPasswordFromUserInput` that obtains a strong password from user input.</span></span>  
  
 <span data-ttu-id="18d1c-1531">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1531">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#46](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#46)]
 [!code-vb[Trin_ExcelWorkBook#46](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#46)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlImport">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlXmlImportResult XmlImport (string url, out Microsoft.Office.Interop.Excel.XmlMap importMap, object overwrite, object destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Microsoft.Office.Interop.Excel.XlXmlImportResult XmlImport(string url, class Microsoft.Office.Interop.Excel.XmlMap importMap, object overwrite, object destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.XmlImport(System.String,Microsoft.Office.Interop.Excel.XmlMap@,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlXmlImportResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="importMap" Type="Microsoft.Office.Interop.Excel.XmlMap&amp;" RefType="out" />
        <Parameter Name="overwrite" Type="System.Object" />
        <Parameter Name="destination" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="url"><span data-ttu-id="18d1c-1532">到 XML 数据文件的统一资源定位符 (URL) 或统一命名约定 (UNC) 路径。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1532">A uniform resource locator (URL) or a uniform naming convention (UNC) path to an XML data file.</span></span></param>
        <param name="importMap"><span data-ttu-id="18d1c-1533">导入文件时应用的架构映射。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1533">The schema map to apply when importing the file.</span></span></param>
        <param name="overwrite"><span data-ttu-id="18d1c-1534">如果未指定 <c>Destination</c> 参数的值，则此参数指定是否覆盖已映射到在 <c>ImportMap</c> 参数中指定的架构映射的数据。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1534">If a value is not specified for the <c>Destination</c> parameter, then this parameter specifies whether or not to overwrite data that has been mapped to the schema map specified in the <c>ImportMap</c> parameter.</span></span> <span data-ttu-id="18d1c-1535">设置为 <see langword="true" /> 可覆盖数据，设置为 <see langword="false" /> 可向现有数据追加新数据。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1535">Set to <see langword="true" /> to overwrite the data or <see langword="false" /> to append the new data to the existing data.</span></span> <span data-ttu-id="18d1c-1536">默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1536">The default value is <see langword="true" />.</span></span> <span data-ttu-id="18d1c-1537">如果已指定 <c>Destination</c> 参数的值，则此参数指定是否覆盖现有数据。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1537">If a value is specified for the <c>Destination</c> parameter, then this parameter specifies whether or not to overwrite existing data.</span></span> <span data-ttu-id="18d1c-1538">设置为 <see langword="true" /> 可覆盖现有数据，设置为 <see langword="false" /> 可在要执行数据覆盖时取消导入。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1538">Set to <see langword="true" /> to overwrite existing data or <see langword="false" /> to cancel the import if data would be overwritten.</span></span> <span data-ttu-id="18d1c-1539">默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1539">The default value is <see langword="true" />.</span></span></param>
        <param name="destination"><span data-ttu-id="18d1c-1540">数据将导入指定的 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 中的新 XML 列表。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1540">The data will be imported into a new XML list at the <see cref="T:Microsoft.Office.Interop.Excel.Range" /> specified.</span></span></param>
        <summary><span data-ttu-id="18d1c-1541">将 XML 数据文件导入当前工作簿。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1541">Imports an XML data file into the current workbook.</span></span></summary>
        <returns><span data-ttu-id="18d1c-1542"><see cref="T:Microsoft.Office.Interop.Excel.XlXmlImportResult" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1542">One of the <see cref="T:Microsoft.Office.Interop.Excel.XlXmlImportResult" /> values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-1543">未指定的值`Destination`参数，如果你想要将数据导入现有的映射。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1543">Do not specify a value for the `Destination` parameter if you want to import data into an existing mapping.</span></span>  
  
 <span data-ttu-id="18d1c-1544">以下情况将导致此方法以生成运行时错误：</span><span class="sxs-lookup"><span data-stu-id="18d1c-1544">The following conditions will cause this method to generate run-time errors:</span></span>  
  
-   <span data-ttu-id="18d1c-1545">指定的 XML 数据包含语法错误。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1545">The specified XML data contains syntax errors.</span></span>  
  
-   <span data-ttu-id="18d1c-1546">导入过程已取消，因为指定的数据不适合放在工作表。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1546">The import process was cancelled because the specified data cannot fit into the worksheet.</span></span>  
  
 <span data-ttu-id="18d1c-1547">使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.XmlImportXml%2A>方法导入先前加载到内存的 XML 数据。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1547">Use the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.XmlImportXml%2A> method to import XML data that has been previously loaded into memory.</span></span>  
  
## <a name="optional-parameters"></a><span data-ttu-id="18d1c-1548">可选参数</span><span class="sxs-lookup"><span data-stu-id="18d1c-1548">Optional Parameters</span></span>  
 <span data-ttu-id="18d1c-1549">可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1549">For information on optional parameters, see [Optional Parameters in Office Solutions](/visualstudio/vsto/optional-parameters-in-office-solutions).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18d1c-1550">下面的代码示例将创建<xref:Microsoft.Office.Interop.Excel.XmlMap>基于从生成的架构<xref:System.Data.DataSet>，将写入<xref:System.Data.DataSet>为 XML 文件，然后使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.XmlImport%2A>方法将 XML 文件中的数据写入工作表中的范围`Sheet1`。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1550">The following code example creates an <xref:Microsoft.Office.Interop.Excel.XmlMap> based on a schema generated from a <xref:System.Data.DataSet>, writes the <xref:System.Data.DataSet> to an XML file, and then uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.XmlImport%2A> method to write the data in the XML file to a range in worksheet `Sheet1`.</span></span>  
  
 <span data-ttu-id="18d1c-1551">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1551">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#135](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#135)]
 [!code-vb[Trin_ExcelWorkBook#135](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#135)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlImportXml">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlXmlImportResult XmlImportXml (string data, out Microsoft.Office.Interop.Excel.XmlMap importMap, object overwrite, object destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Microsoft.Office.Interop.Excel.XlXmlImportResult XmlImportXml(string data, class Microsoft.Office.Interop.Excel.XmlMap importMap, object overwrite, object destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.XmlImportXml(System.String,Microsoft.Office.Interop.Excel.XmlMap@,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlXmlImportResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.String" />
        <Parameter Name="importMap" Type="Microsoft.Office.Interop.Excel.XmlMap&amp;" RefType="out" />
        <Parameter Name="overwrite" Type="System.Object" />
        <Parameter Name="destination" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="18d1c-1552">要导入的数据。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1552">The data to import.</span></span></param>
        <param name="importMap"><span data-ttu-id="18d1c-1553">导入文件时应用的架构映射。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1553">The schema map to apply when importing the file.</span></span></param>
        <param name="overwrite"><span data-ttu-id="18d1c-1554">如果未指定 <c>Destination</c> 参数的值，则此参数指定是否覆盖已映射到在 <c>ImportMap</c> 参数中指定的架构映射的数据。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1554">If a value is not specified for the <c>Destination</c> parameter, then this parameter specifies whether or not to overwrite data that has been mapped to the schema map specified in the <c>ImportMap</c> parameter.</span></span> <span data-ttu-id="18d1c-1555">设置为 <see langword="true" /> 可覆盖数据，设置为 <see langword="false" /> 可向现有数据追加新数据。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1555">Set to <see langword="true" /> to overwrite the data or <see langword="false" /> to append the new data to the existing data.</span></span> <span data-ttu-id="18d1c-1556">默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1556">The default value is <see langword="true" />.</span></span> <span data-ttu-id="18d1c-1557">如果已指定 <c>Destination</c> 参数的值，则此参数指定是否覆盖现有数据。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1557">If a value is specified for the <c>Destination</c> parameter, then this parameter specifies whether or not to overwrite existing data.</span></span> <span data-ttu-id="18d1c-1558">设置为 <see langword="true" /> 可覆盖现有数据，设置为 <see langword="false" /> 可在要执行数据覆盖时取消导入。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1558">Set to <see langword="true" /> to overwrite existing data or <see langword="false" /> to cancel the import if data would be overwritten.</span></span> <span data-ttu-id="18d1c-1559">默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1559">The default value is <see langword="true" />.</span></span></param>
        <param name="destination"><span data-ttu-id="18d1c-1560">数据将导入指定的 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 中的新 XML 列表。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1560">The data will be imported into a new XML list in the <see cref="T:Microsoft.Office.Interop.Excel.Range" /> specified.</span></span></param>
        <summary><span data-ttu-id="18d1c-1561">导入先前加载到内存中的 XML 数据流。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1561">Imports an XML data stream that has been previously loaded into memory.</span></span></summary>
        <returns><span data-ttu-id="18d1c-1562"><see cref="T:Microsoft.Office.Interop.Excel.XlXmlImportResult" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1562">One of the <see cref="T:Microsoft.Office.Interop.Excel.XlXmlImportResult" /> values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18d1c-1563">未指定的值`Destination`参数，如果你想要将数据导入现有的映射。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1563">Do not specify a value for the `Destination` parameter if you want to import data into an existing mapping.</span></span>  
  
 <span data-ttu-id="18d1c-1564">以下情况将导致此方法以生成运行时错误：</span><span class="sxs-lookup"><span data-stu-id="18d1c-1564">The following conditions will cause this method to generate run-time errors:</span></span>  
  
-   <span data-ttu-id="18d1c-1565">指定的 XML 数据包含语法错误。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1565">The specified XML data contains syntax errors.</span></span>  
  
-   <span data-ttu-id="18d1c-1566">导入过程已取消，因为指定的数据不适合放在工作表。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1566">The import process was cancelled because the specified data cannot fit into the worksheet.</span></span>  
  
 <span data-ttu-id="18d1c-1567">使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.XmlImport%2A>方法将 XML 数据文件导入当前工作簿。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1567">Use the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.XmlImport%2A> method to import an XML data file into the current workbook.</span></span>  
  
## <a name="optional-parameters"></a><span data-ttu-id="18d1c-1568">可选参数</span><span class="sxs-lookup"><span data-stu-id="18d1c-1568">Optional Parameters</span></span>  
 <span data-ttu-id="18d1c-1569">可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1569">For information on optional parameters, see [Optional Parameters in Office Solutions](/visualstudio/vsto/optional-parameters-in-office-solutions).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="18d1c-1570">下面的代码示例演示如何将 XML 数据导入工作簿。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1570">The following code example demonstrates how to import XML data into a workbook.</span></span> <span data-ttu-id="18d1c-1571">该示例将创建<xref:System.Data.DataSet>的客户名称，并添加<xref:Microsoft.Office.Interop.Excel.XmlMap>基于的 XML 架构<xref:System.Data.DataSet>到<xref:Microsoft.Office.Tools.Excel.WorkbookBase.XmlMaps%2A>当前工作簿的集合。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1571">The example creates a <xref:System.Data.DataSet> of customer names and adds an <xref:Microsoft.Office.Interop.Excel.XmlMap> based on the XML schema for the <xref:System.Data.DataSet> to the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.XmlMaps%2A> collection of the current workbook.</span></span> <span data-ttu-id="18d1c-1572">该示例然后调用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.XmlImportXml%2A>方法将数据导入到工作表`Sheet1`。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1572">The example then calls the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.XmlImportXml%2A> method to import the data into worksheet `Sheet1`.</span></span> <span data-ttu-id="18d1c-1573">当<xref:Microsoft.Office.Tools.Excel.WorkbookBase.XmlImportXml%2A>调用方法时，<xref:Microsoft.Office.Tools.Excel.WorkbookBase.BeforeXmlImport>事件处理程序会提示用户继续或取消导入 XML 和<xref:Microsoft.Office.Tools.Excel.WorkbookBase.AfterXmlImport>事件处理程序报告是否已成功导入 XML。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1573">When the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.XmlImportXml%2A> method is called, the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.BeforeXmlImport> event handler prompts the user to either proceed with or cancel importing the XML, and the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.AfterXmlImport> event handler reports whether the XML was successfully imported.</span></span>  
  
 <span data-ttu-id="18d1c-1574">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1574">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#204](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#204)]
 [!code-vb[Trin_ExcelWorkBook#204](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#204)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlMaps">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XmlMaps XmlMaps { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.XmlMaps XmlMaps" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.XmlMaps" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XmlMaps</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-1575">获取一个 <see cref="T:Microsoft.Office.Interop.Excel.XmlMaps" /> 集合，该集合表示已添加到工作簿中的架构映射。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1575">Gets an <see cref="T:Microsoft.Office.Interop.Excel.XmlMaps" /> collection that represents the schema maps that have been added to the workbook.</span></span></summary>
        <value><span data-ttu-id="18d1c-1576"><see cref="T:Microsoft.Office.Interop.Excel.XmlMaps" /> 集合，表示已添加到工作簿中的架构映射。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1576">An <see cref="T:Microsoft.Office.Interop.Excel.XmlMaps" /> collection that represents the schema maps that have been added to the workbook.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-1577">下面的代码示例演示如何将 XML 数据导入工作簿。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1577">The following code example demonstrates how to import XML data into a workbook.</span></span> <span data-ttu-id="18d1c-1578">该示例将创建<xref:System.Data.DataSet>的客户名称，并添加<xref:Microsoft.Office.Interop.Excel.XmlMap>基于的 XML 架构<xref:System.Data.DataSet>到<xref:Microsoft.Office.Tools.Excel.WorkbookBase.XmlMaps%2A>当前工作簿的集合。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1578">The example creates a <xref:System.Data.DataSet> of customer names and adds an <xref:Microsoft.Office.Interop.Excel.XmlMap> based on the XML schema for the <xref:System.Data.DataSet> to the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.XmlMaps%2A> collection of the current workbook.</span></span> <span data-ttu-id="18d1c-1579">该示例然后调用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.XmlImportXml%2A>方法将数据导入到工作表`Sheet1`。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1579">The example then calls the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.XmlImportXml%2A> method to import the data into worksheet `Sheet1`.</span></span> <span data-ttu-id="18d1c-1580">当<xref:Microsoft.Office.Tools.Excel.WorkbookBase.XmlImportXml%2A>调用方法时，<xref:Microsoft.Office.Tools.Excel.WorkbookBase.BeforeXmlImport>事件处理程序会提示用户继续或取消导入 XML 和<xref:Microsoft.Office.Tools.Excel.WorkbookBase.AfterXmlImport>事件处理程序会报告是否已成功导入 XML。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1580">When the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.XmlImportXml%2A> method is called, the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.BeforeXmlImport> event handler prompts the user to either proceed with or cancel importing the XML, and the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.AfterXmlImport> event handler then reports whether the XML was successfully imported.</span></span>  
  
 <span data-ttu-id="18d1c-1581">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1581">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#204](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#204)]
 [!code-vb[Trin_ExcelWorkBook#204](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#204)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlNamespaces">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XmlNamespaces XmlNamespaces { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.XmlNamespaces XmlNamespaces" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.XmlNamespaces" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XmlNamespaces</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="18d1c-1582">获取一个 <see cref="T:Microsoft.Office.Interop.Excel.XmlNamespaces" /> 集合，该集合表示工作簿中包含的 XML 命名空间。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1582">Gets an <see cref="T:Microsoft.Office.Interop.Excel.XmlNamespaces" /> collection that represents the XML namespaces contained in the workbook.</span></span></summary>
        <value><span data-ttu-id="18d1c-1583"><see cref="T:Microsoft.Office.Interop.Excel.XmlNamespaces" /> 集合，表示工作簿中包含的 XML 命名空间。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1583">An <see cref="T:Microsoft.Office.Interop.Excel.XmlNamespaces" /> collection that represents the XML namespaces contained in the workbook.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="18d1c-1584">下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.XmlNamespaces%2A>属性来编写统一资源标识符 (URI) 为每个<xref:Microsoft.Office.Interop.Excel.XmlNamespace>到工作表的列的工作簿中`Sheet1`。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1584">The following code example uses the <xref:Microsoft.Office.Tools.Excel.WorkbookBase.XmlNamespaces%2A> property to write the Uniform Resource Identifier (URI) for each <xref:Microsoft.Office.Interop.Excel.XmlNamespace> in the workbook to column A of worksheet `Sheet1`.</span></span>  
  
 <span data-ttu-id="18d1c-1585">此示例适用于文档级自定义。</span><span class="sxs-lookup"><span data-stu-id="18d1c-1585">This example is for a document-level customization.</span></span>  
  
 [!code-csharp[Trin_ExcelWorkBook#47](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#47)]
 [!code-vb[Trin_ExcelWorkBook#47](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#47)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>