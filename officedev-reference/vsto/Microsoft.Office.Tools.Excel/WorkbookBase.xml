<Type Name="WorkbookBase" FullName="Microsoft.Office.Tools.Excel.WorkbookBase">
  <Metadata><Meta Name="ms.openlocfilehash" Value="687450663450c665f88b5401022903001938946b" /><Meta Name="ms.sourcegitcommit" Value="7439021cdeee6a9ef5d4640250701344f6cbba15" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="08/13/2019" /><Meta Name="ms.locfileid" Value="69004256" /></Metadata><TypeSignature Language="C#" Value="public abstract class WorkbookBase : IDisposable, Microsoft.Office.Tools.Excel.IWorkbookExtension, Microsoft.Office.Tools.ICachedDataPersistanceCallback, System.ComponentModel.IComponent, System.ComponentModel.ISupportInitialize, System.Windows.Forms.IBindableComponent" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit WorkbookBase extends System.Object implements class Microsoft.Office.Tools.EntryPoint, class Microsoft.Office.Tools.Excel.IWorkbookExtension, class Microsoft.Office.Tools.ICachedDataPersistanceCallback, class Microsoft.Office.Tools.IExtension, class System.ComponentModel.IComponent, class System.ComponentModel.ISupportInitialize, class System.IDisposable, class System.Windows.Forms.IBindableComponent" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Tools.Excel.WorkbookBase" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Office.Tools.EntryPoint</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.Office.Tools.Excel.IWorkbookExtension</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.Office.Tools.ICachedDataPersistanceCallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.Office.Tools.IExtension</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.IComponent</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Forms.IBindableComponent</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItem(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供 Microsoft Office Excel 的文档级项目中的 <c>ThisWorkbook</c> 类的基类。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 类是通过使用 Visual Studio 创建的`ThisWorkbook`文档级 Excel 项目中的类的基类。 <xref:Microsoft.Office.Tools.Excel.WorkbookBase> `ThisWorkbook`使用类以编程方式访问项目中的工作簿。 有关详细信息，请参阅 [Programming Document-Level Customizations](/visualstudio/vsto/programming-document-level-customizations)。  
  
 该类提供与 Excel 主互操作程序<xref:Microsoft.Office.Interop.Excel.Workbook?displayProperty=fullName>集中的对象相同的成员, 但它添加了以下功能: <xref:Microsoft.Office.Tools.Excel.WorkbookBase>  
  
-   <xref:Microsoft.Office.Tools.Excel.WorkbookBase.VstoSmartTags%2A> 属性。 使用此属性将智能标记添加到工作簿。  
  
-   <xref:Microsoft.Office.Tools.Excel.WorkbookBase.InnerObject%2A> 属性。 使用此属性可获取工作簿<xref:Microsoft.Office.Interop.Excel.Workbook?displayProperty=fullName>宿主项的基础对象。  
  
-   <xref:Microsoft.Office.Tools.Excel.WorkbookBase.RemoveCustomization%2A> 方法。 使用此方法可以从文档级自定义项中的工作簿中删除 Office 自定义程序集。  
  
-   <xref:Microsoft.Office.Tools.Excel.WorkbookBase.CreateRibbonObjects%2A> 方法。 如果使用 "**功能区 (可视化设计器)** " 项模板将多个自定义功能区添加到项目中, 并且想要指定要在运行时显示的功能区, 请重写此方法。  
  
-   <xref:Microsoft.Office.Tools.Excel.WorkbookBase.GetAutomationObject%2A> 方法。 重写此方法可向工作簿中的 VBA 代码公开项目中的类。  
  
## <a name="creating-workbook-host-items"></a>创建工作簿宿主项  
 不能在<xref:Microsoft.Office.Tools.Excel.WorkbookBase> Office 项目中以编程方式创建对象。  
  
 在文档级项目中, `ThisWorkbook` [!INCLUDE[vsto_runtime](~/includes/vsto-runtime-md.md)]当最终用户打开工作簿<xref:Microsoft.Office.Tools.Excel.WorkbookBase>时, 类 (派生自) 会自动实例化。 有关详细信息，请参阅 [Programming Document-Level Customizations](/visualstudio/vsto/programming-document-level-customizations)。  
  
 在应用程序级项目中, 您可以使用`GetVstoObject`方法以编程方式创建工作簿宿主项。 有关更多信息，请参见 [Extending Word Documents and Excel Workbooks in VSTO Add-ins at Run Time](/visualstudio/vsto/extending-word-documents-and-excel-workbooks-in-vsto-add-ins-at-run-time)。  
  
## <a name="usage"></a>用法  
 [!INCLUDE[vsto_net4utilities](~/includes/vsto-net4utilities-md.md)]  
  
   
  
## Examples  
 [主机项和主机控件概述](/visualstudio/vsto/host-items-and-host-controls-overview)  
  
 [工作簿主机项](/visualstudio/vsto/workbook-host-item)  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WorkbookBase (Microsoft.Office.Tools.Excel.Factory factory, IServiceProvider serviceProvider, string primaryCookie, string identifier);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Microsoft.Office.Tools.Excel.Factory factory, class System.IServiceProvider serviceProvider, string primaryCookie, string identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.#ctor(Microsoft.Office.Tools.Excel.Factory,System.IServiceProvider,System.String,System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="factory" Type="Microsoft.Office.Tools.Excel.Factory" />
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
        <Parameter Name="primaryCookie" Type="System.String" />
        <Parameter Name="identifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="factory">To be added.</param>
        <param name="serviceProvider">To be added.</param>
        <param name="primaryCookie">To be added.</param>
        <param name="identifier">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="_CodeName">
      <MemberSignature Language="C#" Value="public string _CodeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string _CodeName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase._CodeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="_ReadOnlyRecommended">
      <MemberSignature Language="C#" Value="public bool _ReadOnlyRecommended { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool _ReadOnlyRecommended" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase._ReadOnlyRecommended" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AcceptAllChanges">
      <MemberSignature Language="C#" Value="public void AcceptAllChanges (object when, object who, object where);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcceptAllChanges(object when, object who, object where) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.AcceptAllChanges(System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="when" Type="System.Object" />
        <Parameter Name="who" Type="System.Object" />
        <Parameter Name="where" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="when"><see cref="T:Microsoft.Office.Interop.Excel.XlHighlightChangesTime" /> 值中的一个，指定要接受的更改是在何时进行的。</param>
        <param name="who">一个标识进行要接受的更改的人的字符串。 可以是“Everyone”、“Everyone but Me”或共享工作簿的用户名之一。</param>
        <param name="where">指定要接受的更改的位置的 A1 样式范围引用。</param>
        <summary>接受共享工作簿中的所有更改。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AcceptLabelsInFormulas">
      <MemberSignature Language="C#" Value="public bool AcceptLabelsInFormulas { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AcceptLabelsInFormulas" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.AcceptLabelsInFormulas" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccuracyVersion">
      <MemberSignature Language="C#" Value="public int AccuracyVersion { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AccuracyVersion" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.AccuracyVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定特定工作表函数是否使用最新精度算法来计算其结果。</summary>
        <value>一个指定特定工作表函数是否使用最新精度算法来计算其结果的值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下, Excel 2007 和更早版本的 Excel 中的某些工作表函数使用的新算法会提高其准确性。 但是, 在某些情况下, 新算法相对于其在 Excel 2007 和早期版本的 Excel 中的性能降低了这些函数的性能。 若要指定这些工作表函数使用较旧的算法以提高其性能, <xref:Microsoft.Office.Tools.Excel.WorkbookBase.AccuracyVersion%2A>请将属性设置为1。  
  
 下表描述了<xref:Microsoft.Office.Tools.Excel.WorkbookBase.AccuracyVersion%2A>属性可能的设置。  
  
|设置|说明|  
|-------------|-----------------|  
|0|使用最新、最准确的算法 (默认值)|  
|1|使用 Excel 2007 或更早版本的算法|  
|2|使用 Excel 2010 算法|  
  
> [!NOTE]
>  如果将<xref:Microsoft.Office.Tools.Excel.WorkbookBase.AccuracyVersion%2A>属性设置为0、1或2以外的值, 将导致未定义的行为。  
  
 下表总结了通过将<xref:Microsoft.Office.Tools.Excel.WorkbookBase.AccuracyVersion%2A>属性设置为1来影响哪些函数。 "不受影响的函数" 列中列出的函数将始终使用最新的准确性算法, 或在 Excel 2010 中未进行更改。 对于名称中包含句点 (.) 的函数名, 若要确定在 VBA 中作为<xref:Microsoft.Office.Interop.Excel.WorksheetFunction>对象的方法实现的相应函数的名称, 请用下划线字符 (_) 替换句点。 例如, 对应于 BETA 的 VBA 方法。DIST 函数是<xref:Microsoft.Office.Interop.Excel.WorksheetFunction.BetaDist%2A>方法。  
  
|受影响的函数|不受影响的函数|  
|------------------------|----------------------------|  
|BETADIST|中心|  
|BETAINV|试用版。分发|  
|BINOMDIST|试用版。库存|  
|CHIDIST|BINOM.分发|  
|CHIINV|BINOM.库存|  
|CHITEST|顶角|  
|—|顶角.说|  
|CRITBINOM|CHISQ.INV.RT.分发|  
|CUMIPMT|CHISQ.INV.RT.分发.RT|  
|CUMPRINC|CHISQ.INV.RT.库存|  
|ERF|CHISQ.INV.RT|  
|ERFC|CHISQ.TEST|  
|EXPONDIST|—.做法|  
|FDIST|—.关心|  
|FINV|COVAR|  
|FTEST|协变.H-P|  
|GAMMADIST|协变.些|  
|GAMMALN|ERF.说|  
|GAMMINV|ERFC.说|  
|HYPGEOMDIST|则 EXPON.DIST.分发|  
|IPMT|F.DIST|  
|IRR|F.DIST.RT|  
|LOGINV|F。|  
|LOGNORMDIST|F。RT|  
|NEGBINOMDIST|F.TEST|  
|NORMDIST|突破|  
|NORMINV|突破.说|  
|NORMSDIST|Γ.分发|  
|NORMSINV|Γ.库存|  
|PMT|GAMMALN.说|  
|泊松|HYPGEOM.分发|  
|PPMT|ISO-C.顶角|  
|STDEV|LOGNORM.分发|  
|STDEVP|LOGNORM.库存|  
|TDIST|MOD|  
|TINV|众|  
|TTEST|众.MULT|  
|差|众.SNGL|  
|函数|NEGBINOM.分发|  
|VARP|NETWORKDAYS.区号|  
|VARPA|做法.分发|  
|韦伯|做法.库存|  
|XIRR|做法.NODE.JS|  
|ZTEST|做法.S. INV|  
||百分比|  
||百分比.独占|  
||百分比.增量|  
||PERCENTRANK|  
||PERCENTRANK.独占|  
||PERCENTRANK.增量|  
||泊松.分发|  
||四|  
||四.独占|  
||四.增量|  
||级别|  
||级别.AVG|  
||级别.EQ|  
||STDEV.H-P|  
||STDEV.些|  
||T.DIST|  
||T.DIST.2T|  
||T.DIST.RT|  
||T.DIST.RT|  
||\T\T|  
||2T|  
||\T\T。RT|  
||T.TEST|  
||差.H-P|  
||差.些|  
||星期天|  
||WEEKNUM|  
||韦伯.分发|  
||WORKDAY.区号|  
||Z.TEST|  
  
> [!NOTE]
>  此属性显示在面向的[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]Excel 2007 项目中的 IntelliSense 中。 但是, 不能在 Excel 2007 项目中使用此属性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MissingMemberException">此属性用于 Excel 2007 项目。</exception>
      </Docs>
    </Member>
    <Member MemberName="Activate">
      <MemberSignature Language="C#" Value="public void Activate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Activate() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.Activate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>激活工作簿的第一个关联窗口。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 这不会运行可能附加到工作簿的任何 Auto_Activate 或 Auto_Deactivate 宏 (使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.RunAutoMacros%2A>方法运行这些宏)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActivateEvent">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_ActivateEventHandler ActivateEvent;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_ActivateEventHandler ActivateEvent" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.ActivateEvent" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_ActivateEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在激活工作簿时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当在显示同一工作簿的两个窗口之间切换<xref:Microsoft.Office.Tools.Excel.WorkbookBase.WindowActivate>时, 将发生事件<xref:Microsoft.Office.Tools.Excel.WorkbookBase.ActivateEvent> , 但不会发生工作簿事件。  
  
 此事件不会在创建新窗口时发生。  
  
   
  
## Examples  
 下面的代码示例演示<xref:Microsoft.Office.Tools.Excel.WorkbookBase.ActivateEvent>事件的处理程序。 激活工作簿时, `Sheet1`事件处理程序会显示工作表。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#200](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#200)]
 [!code-vb[Trin_ExcelWorkBook#200](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#200)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActiveChart">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Chart ActiveChart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Chart ActiveChart" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.ActiveChart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Chart</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Chart" /> 对象，该对象表示活动图表（嵌入图表或图表工作表）。 嵌入图表在选择或激活后被视为活动的。 如果无活动图表，则此属性返回 <see langword="null" />。</summary>
        <value><see cref="T:Microsoft.Office.Interop.Excel.Chart" /> 对象，表示活动图表；如果无活动图表，则为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.ActiveChart%2A>属性获取当前工作簿的活动图表, 并使图表标题不可见。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#1](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#1)]
 [!code-vb[Trin_ExcelWorkBook#1](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActiveSheet">
      <MemberSignature Language="C#" Value="public object ActiveSheet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ActiveSheet" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.ActiveSheet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取活动工作表（最上层的工作表）。</summary>
        <value>活动工作表（最上层的工作表）；如果无活动工作表，则为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果工作簿出现在多个窗口中, 则该属性在不同的窗口中可能会有所不同。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.ActiveSheet%2A>属性来显示活动工作表的名称。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#2](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#2)]
 [!code-vb[Trin_ExcelWorkBook#2](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActiveSlicer">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Slicer ActiveSlicer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Slicer ActiveSlicer" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.ActiveSlicer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Slicer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个对象，该对象表示活动工作簿或指定工作簿中的活动切片器。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.Slicer" />，表示活动工作簿或指定工作簿中的活动切片器。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果未指定工作簿对象, 则此属性将返回活动工作簿中的活动切片器。  
  
> [!NOTE]
>  此属性显示在面向的[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]Excel 2007 项目中的 IntelliSense 中。 但是, 不能在 Excel 2007 项目中使用此属性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MissingMemberException">此属性用于 Excel 2007 项目。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddinInstall">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_AddinInstallEventHandler AddinInstall;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_AddinInstallEventHandler AddinInstall" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.AddinInstall" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_AddinInstallEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在工作簿作为外接程序安装时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示<xref:Microsoft.Office.Tools.Excel.WorkbookBase.AddinInstall>事件的处理程序。 当工作簿作为外接程序安装时, 事件处理程序将 Microsoft Office Excel 最大化。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#201](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#201)]
 [!code-vb[Trin_ExcelWorkBook#201](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#201)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddinUninstall">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_AddinUninstallEventHandler AddinUninstall;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_AddinUninstallEventHandler AddinUninstall" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.AddinUninstall" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_AddinUninstallEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在工作簿作为外接程序卸载时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 卸载外接程序时, 它不会自动关闭。  
  
   
  
## Examples  
 下面的代码示例演示<xref:Microsoft.Office.Tools.Excel.WorkbookBase.AddinUninstall>事件的处理程序。 当工作簿作为外接程序卸载时, 事件处理程序会将 Microsoft Office Excel 降到最低。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#202](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#202)]
 [!code-vb[Trin_ExcelWorkBook#202](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#202)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddToFavorites">
      <MemberSignature Language="C#" Value="public void AddToFavorites ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddToFavorites() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.AddToFavorites" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将工作簿的快捷方式添加到收藏夹文件夹。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AfterSave">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_AfterSaveEventHandler AfterSave;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_AfterSaveEventHandler AfterSave" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.AfterSave" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_AfterSaveEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在保存工作簿后发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此事件显示在面向的[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]Excel 2007 项目中的 IntelliSense 中。 但是, 在 Excel 2007 项目中不能使用此事件。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MissingMemberException">此事件在 Excel 2007 项目中使用。</exception>
      </Docs>
    </Member>
    <Member MemberName="AfterXmlExport">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_AfterXmlExportEventHandler AfterXmlExport;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_AfterXmlExportEventHandler AfterXmlExport" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.AfterXmlExport" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_AfterXmlExportEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在 Microsoft Office Excel 保存工作簿的数据或将数据从工作簿导出到 XML 数据文件后发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何从工作簿导出 XML 数据。 此示例将中的 XML 数据<xref:System.Data.DataSet>导入到当前工作簿中的。 <xref:Microsoft.Office.Interop.Excel.XmlMap> 然后, 该示例调用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SaveAsXMLData%2A>方法, 将<xref:Microsoft.Office.Interop.Excel.XmlMap>中的数据导出到 XML 文件中。 调用方法时<xref:Microsoft.Office.Tools.Excel.WorkbookBase.BeforeXmlExport> , 事件处理程序会报告 xml 正在导出, <xref:Microsoft.Office.Tools.Excel.WorkbookBase.AfterXmlExport>事件处理程序会报告 xml 是否已成功导出。 <xref:Microsoft.Office.Tools.Excel.WorkbookBase.SaveAsXMLData%2A>  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#203](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#203)]
 [!code-vb[Trin_ExcelWorkBook#203](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#203)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AfterXmlImport">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_AfterXmlImportEventHandler AfterXmlImport;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_AfterXmlImportEventHandler AfterXmlImport" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.AfterXmlImport" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_AfterXmlImportEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在刷新现有 XML 数据连接后或将新 XML 数据导入工作簿后发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何将 XML 数据导入工作簿。 该示例创建一个<xref:System.Data.DataSet>客户名称, 并<xref:Microsoft.Office.Interop.Excel.XmlMap>基于的 XML <xref:Microsoft.Office.Tools.Excel.WorkbookBase.XmlMaps%2A>架构<xref:System.Data.DataSet>将添加到当前工作簿的集合中。 然后, 该示例调用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.XmlImportXml%2A>方法将数据导入工作表`Sheet1`。 调用方法时<xref:Microsoft.Office.Tools.Excel.WorkbookBase.BeforeXmlImport> , 事件处理程序会提示用户继续或取消导入 xml, <xref:Microsoft.Office.Tools.Excel.WorkbookBase.AfterXmlImport>事件处理程序会报告 xml 是否已成功导入。 <xref:Microsoft.Office.Tools.Excel.WorkbookBase.XmlImportXml%2A>  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#204](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#204)]
 [!code-vb[Trin_ExcelWorkBook#204](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#204)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Application">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Application Application { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Application Application" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Application" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Application</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取表示工作簿创建者的 <see cref="T:Microsoft.Office.Interop.Excel.Application" />。</summary>
        <value>一个表示工作簿的创建者的 <see cref="T:Microsoft.Office.Interop.Excel.Application" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Application%2A>属性来显示创建当前工作簿的应用程序的名称。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#3](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#3)]
 [!code-vb[Trin_ExcelWorkBook#3](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyTheme">
      <MemberSignature Language="C#" Value="public void ApplyTheme (string filename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ApplyTheme(string filename) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.ApplyTheme(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">要应用的主题的完整文件路径。</param>
        <summary>对工作簿应用指定的主题。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例将工作簿主题切换为 Foundry 主题。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkbook_Additional#1](~/snippets/csharp/VS_Snippets_OfficeSP/trin_excelworkbook_additional/cs/ThisWorkbook.cs#1)]
 [!code-vb[Trin_ExcelWorkbook_Additional#1](~/snippets/visualbasic/VS_Snippets_OfficeSP/trin_excelworkbook_additional/vb/ThisWorkbook.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Author">
      <MemberSignature Language="C#" Value="public string Author { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Author" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Author" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoUpdateFrequency">
      <MemberSignature Language="C#" Value="public int AutoUpdateFrequency { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AutoUpdateFrequency" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.AutoUpdateFrequency" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置自动更新共享工作簿的间隔分钟数。</summary>
        <value>自动更新共享工作簿的间隔分钟数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要使此属性生效, 此属性必须设置为5到1440之间的值。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoUpdateSaveChanges">
      <MemberSignature Language="C#" Value="public bool AutoUpdateSaveChanges { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoUpdateSaveChanges" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.AutoUpdateSaveChanges" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示每当工作簿自动更新时，是否将对共享工作簿所做的当前更改发送到其他用户。</summary>
        <value>如果每当工作簿自动更新时，都将对共享工作簿所做的当前更改发送到其他用户，则为 <see langword="true" />。 如果不发送更改（此工作簿仍与其他用户所做更改保持同步），则为 <see langword="false" />。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要使此属性生效, 必须将属性设置为5到1440之间的值。<xref:Microsoft.Office.Tools.Excel.WorkbookBase.AutoUpdateFrequency%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Base">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Tools.Excel.Workbook Base { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Tools.Excel.Workbook Base" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Base" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Tools.Excel.Workbook</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取此 <see cref="T:Microsoft.Office.Tools.Excel.Workbook" /> 对象扩展的 <see cref="T:Microsoft.Office.Tools.Excel.WorkbookBase" /> 对象。</summary>
        <value>此 <see cref="T:Microsoft.Office.Tools.Excel.WorkbookBase" /> 对象扩展的对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 类通过<xref:Microsoft.Office.Tools.Excel.Workbook> 实现<xref:Microsoft.Office.Tools.Excel.IWorkbookExtension>接口来扩展对象。 <xref:Microsoft.Office.Tools.Excel.WorkbookBase>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeClose">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_BeforeCloseEventHandler BeforeClose;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_BeforeCloseEventHandler BeforeClose" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.BeforeClose" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_BeforeCloseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在关闭工作簿前发生。 如果工作簿已更改，则此事件在要求用户保存更改前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示<xref:Microsoft.Office.Tools.Excel.WorkbookBase.BeforeClose>事件的处理程序。 如果自上次保存工作簿后对其进行了更改, 则该事件处理程序会提示用户保存更改, 而不保存更改或取消关闭操作。 如果用户未保存更改, 则将工作簿<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Saved%2A>的属性设置为`true` , 以便 Microsoft Office Excel 在关闭操作继续时不会提示用户保存工作簿。 如果用户取消了关闭操作, 则`Cancel` <xref:Microsoft.Office.Interop.Excel.WorkbookEvents_BeforeCloseEventHandler>事件处理程序的参数将设置为`true` , 以便 Microsoft Office Excel 不会关闭工作簿。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#205](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#205)]
 [!code-vb[Trin_ExcelWorkBook#205](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#205)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforePrint">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_BeforePrintEventHandler BeforePrint;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_BeforePrintEventHandler BeforePrint" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.BeforePrint" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_BeforePrintEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在打印工作簿（或其中任何内容）前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示<xref:Microsoft.Office.Tools.Excel.WorkbookBase.BeforePrint>事件的处理程序。 此事件处理程序提示用户继续执行打印操作或取消打印操作。 如果用户取消了打印操作, 则`Cancel` <xref:Microsoft.Office.Interop.Excel.WorkbookEvents_BeforePrintEventHandler>事件处理程序的参数将设置为`true` , 以便 Microsoft Office Excel 不打印工作簿。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#206](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#206)]
 [!code-vb[Trin_ExcelWorkBook#206](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#206)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeSave">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_BeforeSaveEventHandler BeforeSave;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_BeforeSaveEventHandler BeforeSave" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.BeforeSave" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_BeforeSaveEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在保存工作簿前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示<xref:Microsoft.Office.Tools.Excel.WorkbookBase.BeforeSave>事件的处理程序。 此事件处理程序提示用户继续执行保存操作或取消操作。 如果用户取消了 save 操作, 则`Cancel` <xref:Microsoft.Office.Interop.Excel.WorkbookEvents_BeforeSaveEventHandler>事件处理程序的参数将设置为`true` , 以便 Microsoft Office Excel 不保存工作簿。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#207](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#207)]
 [!code-vb[Trin_ExcelWorkBook#207](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#207)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeXmlExport">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_BeforeXmlExportEventHandler BeforeXmlExport;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_BeforeXmlExportEventHandler BeforeXmlExport" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.BeforeXmlExport" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_BeforeXmlExportEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在 Microsoft Office Excel 保存工作簿的数据或将数据从工作簿导出到 XML 数据文件前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当您保存到 XML 电子表格文件格式时, 不会发生此事件。  
  
   
  
## Examples  
 下面的代码示例演示如何从工作簿导出 XML 数据。 此示例将中的 XML 数据<xref:System.Data.DataSet>导入到当前工作簿中的。 <xref:Microsoft.Office.Interop.Excel.XmlMap> 然后, 该示例调用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SaveAsXMLData%2A>方法, 将<xref:Microsoft.Office.Interop.Excel.XmlMap>中的数据导出到 XML 文件中。 调用方法时<xref:Microsoft.Office.Tools.Excel.WorkbookBase.BeforeXmlExport> , 事件处理程序会报告 xml 正在导出, <xref:Microsoft.Office.Tools.Excel.WorkbookBase.AfterXmlExport>事件处理程序会报告 xml 是否已成功导出。 <xref:Microsoft.Office.Tools.Excel.WorkbookBase.SaveAsXMLData%2A>  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#203](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#203)]
 [!code-vb[Trin_ExcelWorkBook#203](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#203)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeXmlImport">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_BeforeXmlImportEventHandler BeforeXmlImport;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_BeforeXmlImportEventHandler BeforeXmlImport" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.BeforeXmlImport" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_BeforeXmlImportEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在刷新现有 XML 数据连接前或将新 XML 数据导入工作簿前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何将 XML 数据导入工作簿。 该示例创建一个<xref:System.Data.DataSet>客户名称, 并<xref:Microsoft.Office.Interop.Excel.XmlMap>基于的 XML <xref:Microsoft.Office.Tools.Excel.WorkbookBase.XmlMaps%2A>架构<xref:System.Data.DataSet>将添加到当前工作簿的集合中。 然后, 该示例调用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.XmlImportXml%2A>方法将数据导入工作表`Sheet1`。 调用方法时<xref:Microsoft.Office.Tools.Excel.WorkbookBase.BeforeXmlImport> , 事件处理程序会提示用户继续或取消导入 xml, <xref:Microsoft.Office.Tools.Excel.WorkbookBase.AfterXmlImport>事件处理程序会报告 xml 是否已成功导入。 <xref:Microsoft.Office.Tools.Excel.WorkbookBase.XmlImportXml%2A>  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#204](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#204)]
 [!code-vb[Trin_ExcelWorkBook#204](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#204)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInit">
      <MemberSignature Language="C#" Value="public virtual void BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.BeginInit" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Tools.EntryPoint.BeginInit</InterfaceMember>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.BeginInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingContext">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.BindingContext BindingContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.BindingContext BindingContext" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.BindingContext" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Forms.IBindableComponent.BindingContext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BindingContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingContextChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BindingContextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BindingContextChanged" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.BindingContextChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BreakLink">
      <MemberSignature Language="C#" Value="public void BreakLink (string name, Microsoft.Office.Interop.Excel.XlLinkType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BreakLink(string name, valuetype Microsoft.Office.Interop.Excel.XlLinkType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.BreakLink(System.String,Microsoft.Office.Interop.Excel.XlLinkType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="type" Type="Microsoft.Office.Interop.Excel.XlLinkType" />
      </Parameters>
      <Docs>
        <param name="name">链接的名称。</param>
        <param name="type"><see cref="T:Microsoft.Office.Interop.Excel.XlLinkType" /> 值之一。 链接的类型。</param>
        <summary>将链接到其他 Microsoft Office Excel 源或 OLE 源的公式转换为值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例创建一个指向另一个 Excel 工作簿的链接, 然后使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.BreakLink%2A>方法提示用户将该链接替换为链接目标的值。 此示例假定工作簿 Book2 位于 C 目录的根目录中。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#101](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#101)]
 [!code-vb[Trin_ExcelWorkBook#101](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#101)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BuiltinDocumentProperties">
      <MemberSignature Language="C#" Value="public object BuiltinDocumentProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object BuiltinDocumentProperties" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.BuiltinDocumentProperties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <c>Microsoft.Office.Core.DocumentProperties</c> 集合，该集合表示工作簿的所有内置文档属性。</summary>
        <value>一个<c>DocumentProperties</c>集合, 表示工作簿的所有内置文档属性。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性返回内置文档属性的整个集合。 通过指定属性的名称或集合索引 (作为数字), `Microsoft.Office.Core.DocumentProperties`使用属性返回集合中的单个成员(一个对象)。`Microsoft.Office.Core.DocumentProperties.Item(System.Object)`  
  
 可以按索引值或按名称引用文档属性。 以下列表显示了可用的内置文档属性名称:  
  
-   Title  
  
-   Subject  
  
-   作者  
  
-   关键字  
  
-   注释  
  
-   模板  
  
-   上次作者  
  
-   修订号  
  
-   Application Name  
  
-   上次打印日期  
  
-   创建日期  
  
-   上次保存时间  
  
-   编辑时间总计  
  
-   页数  
  
-   字数  
  
-   字符数  
  
-   安全性  
  
-   类别  
  
-   格式  
  
-   Manager  
  
-   公司  
  
-   字节数  
  
-   行数  
  
-   段落数  
  
-   幻灯片数  
  
-   便笺数  
  
-   隐藏的幻灯片数  
  
-   多媒体剪辑数  
  
-   超链接基础  
  
-   字符数 (包含空格)  
  
 容器应用程序不需要定义每个内置文档属性的值。 如果 Microsoft Office Excel 未定义某个内置文档属性的值, 则读取`Microsoft.Office.Core.DocumentProperties.Value`该文档属性的属性会引发异常。  
  
 <xref:Microsoft.Office.Tools.Excel.WorkbookBase.CustomDocumentProperties%2A>使用属性返回自定义文档属性的集合。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.BuiltinDocumentProperties%2A>属性在工作表`Sheet1`的 A 列中显示当前工作簿的所有内置文档属性。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#6](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#6)]
 [!code-vb[Trin_ExcelWorkBook#6](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CalculationVersion">
      <MemberSignature Language="C#" Value="public int CalculationVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CalculationVersion" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.CalculationVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个数字，该数字指示上次对工作簿进行完全重新计算的 Excel 的版本。 最右边四位是计算引擎的次版本号，其他位（左边）是 Microsoft Office Excel 的主版本。</summary>
        <value>一个数字，该数字指示上次对工作簿进行完全重新计算的 Excel 的版本。 最右边四位是计算引擎的次版本号，其他位（左边）是 Microsoft Office Excel 的主版本。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果工作簿是在较早版本的 Excel 中保存的, 并且工作簿尚未完全重新计算, 则此属性返回0。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.CalculationVersion%2A>属性来显示上次完全重新计算工作簿的 Excel 的版本。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#7](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#7)]
 [!code-vb[Trin_ExcelWorkBook#7](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanCheckIn">
      <MemberSignature Language="C#" Value="public bool CanCheckIn ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanCheckIn() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.CanCheckIn" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取一个值，该值指示 Microsoft Office Excel 是否可以将工作簿签入到服务器。</summary>
        <returns>如果 Microsoft Office Excel 可以将工作簿签入到服务器，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.CanCheckIn%2A>方法来确定 Microsoft Office Excel 是否可以将当前工作簿签入到服务器。 如果可以签入工作簿, 则示例将使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.CheckIn%2A>方法保存修订并签入当前工作簿。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#104](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#104)]
 [!code-vb[Trin_ExcelWorkBook#104](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#104)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChangeFileAccess">
      <MemberSignature Language="C#" Value="public void ChangeFileAccess (Microsoft.Office.Interop.Excel.XlFileAccess mode, object writePassword, object notify);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ChangeFileAccess(valuetype Microsoft.Office.Interop.Excel.XlFileAccess mode, object writePassword, object notify) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.ChangeFileAccess(Microsoft.Office.Interop.Excel.XlFileAccess,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="Microsoft.Office.Interop.Excel.XlFileAccess" />
        <Parameter Name="writePassword" Type="System.Object" />
        <Parameter Name="notify" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="mode"><see cref="T:Microsoft.Office.Interop.Excel.XlFileAccess" /> 值之一。 指定新的访问模式。</param>
        <param name="writePassword">如果文件受写保护且 <c>Mode</c> 为 <see cref="F:Microsoft.Office.Interop.Excel.XlFileAccess.xlReadWrite" />，则指定写保护密码。 如果没有文件密码或 <c>Mode</c> 为 <see cref="F:Microsoft.Office.Interop.Excel.XlFileAccess.xlReadOnly" />，则忽略。</param>
        <param name="notify">如果为 <see langword="true" />，则在无法直接访问文件时通知用户。</param>
        <summary>更改工作簿的访问权限。 这可能需要从磁盘加载更新版本。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果以只读模式打开了某个文件, 则不具有对该文件的独占访问权限。 如果将文件从只读更改为读/写, Microsoft Office Excel 必须加载文件的新副本, 以确保在文件以只读方式打开时不进行任何更改。  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 如果<xref:Microsoft.Office.Tools.Excel.WorkbookBase.ReadOnlyRecommended%2A>属性<xref:Microsoft.Office.Tools.Excel.WorkbookBase.ChangeFileAccess%2A>为`true` 且<xref:Microsoft.Office.Tools.Excel.WorkbookBase.ReadOnly%2A>属性为`false`, 则下面的代码示例将显示一条消息, 然后提示用户通过调用方法将文件访问设置为只读。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#102](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#102)]
 [!code-vb[Trin_ExcelWorkBook#102](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#102)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChangeHistoryDuration">
      <MemberSignature Language="C#" Value="public int ChangeHistoryDuration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ChangeHistoryDuration" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.ChangeHistoryDuration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置在共享工作簿的更改历史记录中显示的天数。</summary>
        <value>在共享工作簿的更改历史记录中显示的天数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在关闭工作簿时, 将删除更改历史记录中任何早于此属性设置的更改。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChangeLink">
      <MemberSignature Language="C#" Value="public void ChangeLink (string name, string newName, Microsoft.Office.Interop.Excel.XlLinkType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ChangeLink(string name, string newName, valuetype Microsoft.Office.Interop.Excel.XlLinkType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.ChangeLink(System.String,System.String,Microsoft.Office.Interop.Excel.XlLinkType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="newName" Type="System.String" />
        <Parameter Name="type" Type="Microsoft.Office.Interop.Excel.XlLinkType" />
      </Parameters>
      <Docs>
        <param name="name">要更改的 Microsoft Office Excel 或 DDE/OLE 链接的名称（和从 <see cref="M:Microsoft.Office.Tools.Excel.WorkbookBase.LinkSources(System.Object)" /> 方法返回的一样）。</param>
        <param name="newName">链接的新名称。</param>
        <param name="type">指定链接类型的 <see cref="T:Microsoft.Office.Interop.Excel.XlLinkType" /> 值之一。</param>
        <summary>将链接从一个文档更改为另一个文档。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例创建一个指向 Excel 工作簿的外部链接, 然后使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.ChangeLink%2A>方法更改链接目标。 此示例假定工作簿 Book2 和 Book3 位于 C 目录的根目录中。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#103](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#103)]
 [!code-vb[Trin_ExcelWorkBook#103](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#103)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Charts">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Sheets Charts { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Sheets Charts" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Charts" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Sheets</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Sheets" /> 集合，该集合表示工作簿中的所有图表工作表。</summary>
        <value><see cref="T:Microsoft.Office.Interop.Excel.Sheets" /> 集合，表示工作簿中的所有图表工作表。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Charts%2A>属性为当前工作簿中的所有图表工作表生成打印预览。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#9](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#9)]
 [!code-vb[Trin_ExcelWorkBook#9](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckCompatibility">
      <MemberSignature Language="C#" Value="public bool CheckCompatibility { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CheckCompatibility" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.CheckCompatibility" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示在保存工作簿时是否自动运行兼容性检查器。</summary>
        <value>如果在保存工作簿时应该自动运行兼容性检查器，则为 <see langword="true" />；否则为 <see langword="false" />。 对于 Excel 97-2003 Binary (BIFF8) 工作簿，默认值为 <see langword="true" />；对于所有其他工作簿，默认值为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckIn">
      <MemberSignature Language="C#" Value="public void CheckIn (object saveChanges, object comments, object makePublic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CheckIn(object saveChanges, object comments, object makePublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.CheckIn(System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="saveChanges" Type="System.Object" />
        <Parameter Name="comments" Type="System.Object" />
        <Parameter Name="makePublic" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="saveChanges">如果为 <see langword="true" />，则保存更改并签入文档；如果为 <see langword="false" />，则将文档返回到签入状态而不保存修订。</param>
        <param name="comments">允许用户为签入的工作簿的修订输入签入批注（仅当 <c>SaveChanges</c> 等于 <see langword="true" /> 时应用）。</param>
        <param name="makePublic">如果为 <see langword="true" />，则允许用户在工作簿签入后发布该工作簿。 这会提交工作簿供审批，审批过程最终会生成将发布给具有工作簿只读权限的用户的工作簿版本（仅当 <c>SaveChanges</c> 为 <see langword="true" /> 时才会如此）。</param>
        <summary>将本地计算机的工作簿返回到服务器，并将本地工作簿设置为只读，以使它不能进行本地编辑。 调用此方法会关闭工作簿。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.CanCheckIn%2A>方法来确定 Microsoft Office Excel 是否可以将当前工作簿签入到服务器。 如果可以签入工作簿, 则示例将使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.CheckIn%2A>方法保存修订并签入当前工作簿。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#104](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#104)]
 [!code-vb[Trin_ExcelWorkBook#104](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#104)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckInWithVersion">
      <MemberSignature Language="C#" Value="public void CheckInWithVersion (object saveChanges, object comments, object makePublic, object versionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CheckInWithVersion(object saveChanges, object comments, object makePublic, object versionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.CheckInWithVersion(System.Object,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="saveChanges" Type="System.Object" />
        <Parameter Name="comments" Type="System.Object" />
        <Parameter Name="makePublic" Type="System.Object" />
        <Parameter Name="versionType" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="saveChanges">如果为 <see langword="true" />，则保存更改并签入文档；如果为 <see langword="false" />，则使文档恢复签入状态而不保存修订。</param>
        <param name="comments">如果为 <see langword="true" />，则启用签入注释；如果为 false，则在签入工作簿时丢弃注释。 此参数仅当 <c>SaveChanges</c> 为 <see langword="true" /> 时才应用。</param>
        <param name="makePublic">如果为 <see langword="true" />，则允许用户在工作簿签入后发布该工作簿。 这会提交工作簿供审批，审批过程最终会生成将发布给具有工作簿只读权限的用户的工作簿版本（仅当 <c>SaveChanges</c> 为 <see langword="true" /> 时才会如此）。</param>
        <param name="versionType">指定文档的版本信息。</param>
        <summary>将本地计算机中的工作簿发送到服务器，并将本地工作簿设置为只读，以使它不能进行本地编辑。 调用此方法会关闭工作簿。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.CanCheckIn%2A>方法来确定文档是否已存储在 SharePoint Portal Server Microsoft Office 上。 如果已将文档存储在服务器上, 则该示例调用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.CheckInWithVersion%2A>方法以在文档中签入指定的注释和版本号, 保存对服务器位置所做的更改, 并提交审批过程的文档。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkbook_Additional#2](~/snippets/csharp/VS_Snippets_OfficeSP/trin_excelworkbook_additional/cs/ThisWorkbook.cs#2)]
 [!code-vb[Trin_ExcelWorkbook_Additional#2](~/snippets/visualbasic/VS_Snippets_OfficeSP/trin_excelworkbook_additional/vb/ThisWorkbook.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close (object saveChanges, object filename, object routeWorkbook);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close(object saveChanges, object filename, object routeWorkbook) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.Close(System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="saveChanges" Type="System.Object" />
        <Parameter Name="filename" Type="System.Object" />
        <Parameter Name="routeWorkbook" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="saveChanges">如果没有对工作簿进行更改，则忽略此参数。 如果对工作簿进行了更改且工作簿显示在其他打开的窗口中，则忽略此参数。 如果对工作簿进行了更改，但工作簿没有显示在任何其他打开的窗口中，则此参数指定更改是否应保存（如下面的列表所示）。  
  
 <see langword="true" />。 保存对工作簿所做的更改。 如果工作簿还没有关联文件名，则使用 <c>FileName</c>。 如果省略了 <c>FileName</c>，则要求用户提供文件名。  
  
 <see langword="false" />。 不保存对工作簿所做的更改。  
  
省略。 显示一个对话框，询问用户是否保存更改。</param>
        <param name="filename">使用此文件名保存更改。</param>
        <param name="routeWorkbook">如果工作簿不需要传送给下一个收件人（如果该工作簿没有传送名单或已传送），则忽略此参数。 否则，Microsoft Office Excel 传送工作簿，如下面的列表所示。  
  
 <see langword="true" />。 将工作簿发送给下一个收件人。  
  
 <see langword="false" />。 不发送工作簿。  
  
省略。 显示一个对话框，询问用户是否应发送工作簿。</param>
        <summary>关闭工作簿。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此方法关闭工作簿不会在工作簿中运行任何 Auto_Close 宏。 <xref:Microsoft.Office.Tools.Excel.WorkbookBase.RunAutoMacros%2A>使用方法运行宏。  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Close%2A>方法关闭当前工作簿, 而不保存任何更改。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#105](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#105)]
 [!code-vb[Trin_ExcelWorkBook#105](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#105)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CodeName">
      <MemberSignature Language="C#" Value="public string CodeName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CodeName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.CodeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Colors">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Tools.Excel.Workbook_ColorsType Colors { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Tools.Excel.Workbook_ColorsType Colors" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Colors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Tools.Excel.Workbook_ColorsType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置工作簿的调色板中的颜色。</summary>
        <value>工作簿的调色板中的一个 RGB 颜色值，或一个包含工作簿调色板中所有 56 个 RGB 颜色值的数组。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Tools.Excel.WorkbookBase.Colors%2A>属性可与以下参数一起使用。  
  
|参数|说明|  
|---------------|-----------------|  
|`Index`|工作簿调色板中颜色的索引号 (从1到 56)。 如果未指定此参数, 此属性将返回一个数组, 其中包含调色板中所有56的颜色。|  
  
 如果尝试在不指定<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Colors%2A>任何参数的情况下<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Colors%2A>使用, 将<xref:Microsoft.Office.Tools.Excel.Workbook_ColorsType>获取一个对象, 该对象是 Visual Studio 基础结构中的 Office 开发工具的一部分, 不应在代码中直接使用。  
  
 工作簿调色板包含56个条目, 每个条目由一个 RGB 值表示。  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Colors%2A>属性将工作簿的调色板中的第一种颜色设置为蓝色, 然后以编程方式显示 "Microsoft Office Excel**调色板**" 对话框以验证是否进行了此更改。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#11](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#11)]
 [!code-vb[Trin_ExcelWorkBook#11](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandBars">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Core.CommandBars CommandBars { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Core.CommandBars CommandBars" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.CommandBars" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Core.CommandBars</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <c>Microsoft.Office.Core.CommandBars</c> 对象，该对象表示 Microsoft Office Excel 命令栏。</summary>
        <value>一个<c>CommandBars</c>对象, 它表示 Microsoft Office Excel 命令栏。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果工作簿嵌入到另一个应用程序中并通过双击工作簿由用户激活, 则使用带有工作簿对象的属性将返回在另一个应用程序中可用的 Excel 命令栏集。 在所有其他时间, 将此属性与工作簿对象结合`null`使用将返回。 不能通过编程方式来返回附加到工作簿的命令栏集。 命令栏与应用程序相关联, 而不是与工作簿相关联。 此属性存在于工作簿中, 因此在 Excel 不是应用程序时可以访问 Excel 应用程序命令栏。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.CommandBars%2A>属性删除所有不可见的自定义命令栏。 此示例假设当前工作簿嵌入到另一个应用程序中。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#12](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#12)]
 [!code-vb[Trin_ExcelWorkBook#12](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Comments">
      <MemberSignature Language="C#" Value="public string Comments { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Comments" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Comments" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConflictResolution">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlSaveConflictResolution ConflictResolution { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlSaveConflictResolution ConflictResolution" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.ConflictResolution" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlSaveConflictResolution</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置每次更新共享工作簿时解决冲突的方式。</summary>
        <value><see cref="T:Microsoft.Office.Interop.Excel.XlSaveConflictResolution" /> 值之一。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Connections">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Connections Connections { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Connections Connections" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Connections" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Connections</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取工作簿和数据源之间的连接的集合。</summary>
        <value>一个包含工作簿和数据源之间的连接的<c>Microsoft. "连接</c>" 集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例将新的数据连接添加到指定的 CSV 文件。 接下来, 该示例将遍历工作簿中存在的所有连接, 并显示每个连接的名称、类型和说明。 此示例需要驱动器 C 的根目录中名为 SalesData 的 CSV 文件。CSV 文件应包含逗号分隔的数据。 运行此示例时, Excel 将启动 "**文本导入向导**";按照此向导中的步骤创建到 CSV 文件的数据连接。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_Excelworkbook_Additional#24](~/snippets/csharp/VS_Snippets_OfficeSP/trin_excelworkbook_additional/cs/ThisWorkbook.cs#24)]
 [!code-vb[Trin_Excelworkbook_Additional#24](~/snippets/visualbasic/VS_Snippets_OfficeSP/trin_excelworkbook_additional/vb/ThisWorkbook.vb#24)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConnectionsDisabled">
      <MemberSignature Language="C#" Value="public bool ConnectionsDisabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ConnectionsDisabled" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.ConnectionsDisabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示是否在工作簿中禁用外部连接或链接。</summary>
        <value><see langword="true" /> 指示在工作簿中禁用外部连接或链接；<see langword="false" /> 指示不禁用。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Container">
      <MemberSignature Language="C#" Value="public object Container { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Container" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Container" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取表示工作簿的容器应用程序的对象。</summary>
        <value>表示工作簿的容器应用程序的对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性提供了一种方法, 以便在 Excel 工作簿 (如 Microsoft Internet Explorer) 中打开 Excel 工作簿时, 访问容器应用程序的对象模型。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentTypeProperties">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Core.MetaProperties ContentTypeProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Core.MetaProperties ContentTypeProperties" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.ContentTypeProperties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Core.MetaProperties</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取描述工作簿中存储的元数据的属性的集合。</summary>
        <value>一个<c>元属性</c>集合, 其中包含描述工作簿中存储的元数据的属性。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例检索与当前工作簿关联的元数据。 该示例显示了所找到的元数据属性的总数, 后跟每个属性的名称和值。 若要运行此示例, 必须将工作簿发布到 Microsoft Office SharePoint Server 文档库, 并为此工作簿提供自定义元数据属性。 例如, 可以在发布工作簿的文档库中添加一列。 有关内容类型属性的详细信息, 请参阅 Microsoft Office SharePoint Server 文档。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_Excelworkbook_Additional#25](~/snippets/csharp/VS_Snippets_OfficeSP/trin_excelworkbook_additional/cs/ThisWorkbook.cs#25)]
 [!code-vb[Trin_Excelworkbook_Additional#25](~/snippets/visualbasic/VS_Snippets_OfficeSP/trin_excelworkbook_additional/vb/ThisWorkbook.vb#25)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateBackup">
      <MemberSignature Language="C#" Value="public bool CreateBackup { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CreateBackup" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.CreateBackup" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示保存此文件时是否创建备份文件。</summary>
        <value>如果保存此文件时创建备份文件，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRibbonExtensibilityObject">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.Office.Core.IRibbonExtensibility CreateRibbonExtensibilityObject ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.Office.Core.IRibbonExtensibility CreateRibbonExtensibilityObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.CreateRibbonExtensibilityObject" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Tools.Excel.IWorkbookExtension.CreateRibbonExtensibilityObject</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Core.IRibbonExtensibility</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回实现 <c>Microsoft.Office.Core.IRibbonExtensibility</c> 接口的对象。</summary>
        <returns>实现 <c>Microsoft.Office.Core.IRibbonExtensibility</c> 接口的对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 重写此方法以返回`Microsoft.Office.Core.IRibbonExtensibility`接口的实现。 如果项目中有多个功能区, 则可以指定要在运行时显示的功能区。  
  
 您不必重写此方法即可返回通过使用 "**功能区 (可视化设计器)** " 项模板添加到项目中的功能区。 默认情况下, 此方法返回<xref:Microsoft.Office.Tools.Ribbon.RibbonManager>一个对象, 该对象表示项目中的所有 "**功能区 (可视化设计器)** " 项。 有关详细信息, 请参阅[功能区概述](/visualstudio/vsto/ribbon-overview)。  
  
 您必须重写<xref:Microsoft.Office.Tools.Excel.WorkbookBase.CreateRibbonExtensibilityObject%2A>或<xref:Microsoft.Office.Tools.Excel.WorkbookBase.RequestService%2A>方法才能在您的项目中返回通过使用 "**功能区 (XML)** " 项模板添加的功能区。 有关如何重写<xref:Microsoft.Office.Tools.Excel.WorkbookBase.CreateRibbonExtensibilityObject%2A>方法的详细信息, 请参阅[功能区 XML](/visualstudio/vsto/ribbon-xml)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRibbonObjects">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.Office.Tools.Ribbon.IRibbonExtension[] CreateRibbonObjects ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.Office.Tools.Ribbon.IRibbonExtension[] CreateRibbonObjects() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.CreateRibbonObjects" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Tools.Excel.IWorkbookExtension.CreateRibbonObjects</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Tools.Ribbon.IRibbonExtension[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将 <see cref="T:Microsoft.Office.Tools.Ribbon.OfficeRibbon" /> 对象的数组返回给 <see cref="M:Microsoft.Office.Tools.Excel.WorkbookBase.CreateRibbonExtensibilityObject" /> 方法。</summary>
        <returns>一个 <see cref="T:Microsoft.Office.Tools.Ribbon.OfficeRibbon" /> 对象数组。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当项目包含<xref:Microsoft.Office.Tools.Excel.WorkbookBase.CreateRibbonExtensibilityObject%2A> **功能区 (可视化设计器)** 项时, <xref:Microsoft.Office.Tools.Excel.WorkbookBase>类的方法的默认实现将调用此方法。  
  
 如果要指定要在运行时显示的功能区, 请重写此方法。  
  
 还可以重写<xref:Microsoft.Office.Tools.Excel.WorkbookBase.CreateRibbonExtensibilityObject%2A>方法, 以指定要在运行时显示的功能区。 有关详细信息, 请参阅[功能区概述](/visualstudio/vsto/ribbon-overview)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Creator">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlCreator Creator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlCreator Creator" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Creator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlCreator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取在其中创建工作簿的应用程序。</summary>
        <value><see cref="T:Microsoft.Office.Interop.Excel.XlCreator" /> 值之一。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果该对象是在 Microsoft Office Excel 中创建的, 则此属性返回字符串 x, 它等效于十六进制数5843454C 等效。  
  
 此属性设计为在 Excel 中用于 Macintosh, 其中每个应用程序都有一个四字符创建者代码。 例如, Excel 的创建者代码为 x。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Creator%2A>属性来显示当前工作簿是否是在 Microsoft Office Excel 中创建的。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#16](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#16)]
 [!code-vb[Trin_ExcelWorkBook#16](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#16)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomDocumentProperties">
      <MemberSignature Language="C#" Value="public object CustomDocumentProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object CustomDocumentProperties" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.CustomDocumentProperties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <c>Microsoft.Office.Core.DocumentProperties</c> 集合，该集合表示工作簿的所有自定义文档属性。</summary>
        <value>一个<c>DocumentProperties</c>集合, 表示工作簿的所有自定义文档属性。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性返回自定义文档属性的整个集合。 通过指定属性的名称或集合索引 (作为数字), `Microsoft.Office.Core.DocumentProperties`使用属性返回集合中的单个成员(一个对象)。`Microsoft.Office.Core.DocumentProperties.Item(System.Object)`  
  
 <xref:Microsoft.Office.Tools.Excel.WorkbookBase.BuiltinDocumentProperties%2A>使用属性返回内置文档属性的集合。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.CustomDocumentProperties%2A>属性在工作表`Sheet1`的 A 列中显示当前工作簿的所有自定义文档属性。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#17](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#17)]
 [!code-vb[Trin_ExcelWorkBook#17](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomViews">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.CustomViews CustomViews { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.CustomViews CustomViews" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.CustomViews" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.CustomViews</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.CustomViews" /> 集合，该集合表示工作簿的所有自定义视图。</summary>
        <value><see cref="T:Microsoft.Office.Interop.Excel.CustomViews" /> 集合，表示工作簿的所有自定义视图。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.CustomViews%2A>属性向当前工作簿添加一个名为 "Summary" 的自定义视图, 然后以编程方式显示 "**自定义视图**" 对话框, 以演示已创建新的自定义视图。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#18](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#18)]
 [!code-vb[Trin_ExcelWorkBook#18](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#18)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomXMLParts">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Core.CustomXMLParts CustomXMLParts { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Core.CustomXMLParts CustomXMLParts" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.CustomXMLParts" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Core.CustomXMLParts</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取工作簿中的自定义 XML 部件的集合。</summary>
        <value>一个<c>CustomXMLParts</c>集合, 包含工作簿中的自定义 XML 部件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关自定义 XML 部件的详细信息, 请参阅[自定义 Xml 部件概述](/visualstudio/vsto/custom-xml-parts-overview)。  
  
   
  
## Examples  
 下面的代码示例通过`Microsoft.Office.Core.CustomXMLPart` `Microsoft.Office.Core.CustomXMLParts`在集合中插入新的, 将员工数据添加到文档中。 然后, 该示例从 XML 部件检索员工数据, 并显示员工姓名和雇用日期`Sheet1`。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_Excelworkbook_Additional#26](~/snippets/csharp/VS_Snippets_OfficeSP/trin_excelworkbook_additional/cs/ThisWorkbook.cs#26)]
 [!code-vb[Trin_Excelworkbook_Additional#26](~/snippets/visualbasic/VS_Snippets_OfficeSP/trin_excelworkbook_additional/vb/ThisWorkbook.vb#26)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataBindings">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ControlBindingsCollection DataBindings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ControlBindingsCollection DataBindings" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.DataBindings" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Forms.IBindableComponent.DataBindings</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlBindingsCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataHost">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Tools.ICachedDataProvider DataHost { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Tools.ICachedDataProvider DataHost" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.DataHost" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Tools.ICachedDataProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Date1904">
      <MemberSignature Language="C#" Value="public bool Date1904 { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Date1904" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Date1904" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示工作簿是否使用 1904 日期系统。</summary>
        <value>如果工作簿使用 1904 日期系统，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Deactivate">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_DeactivateEventHandler Deactivate;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_DeactivateEventHandler Deactivate" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.Deactivate" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_DeactivateEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在停用工作簿时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Deactivate>事件的处理程序。 停用工作簿时, 事件处理程序会平铺所有打开的 Microsoft Office Excel 窗口。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#208](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#208)]
 [!code-vb[Trin_ExcelWorkBook#208](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#208)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultPivotTableStyle">
      <MemberSignature Language="C#" Value="public object DefaultPivotTableStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DefaultPivotTableStyle" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.DefaultPivotTableStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="P:Microsoft.Office.Tools.Excel.WorkbookBase.TableStyles" /> 属性中的表样式，该样式用作工作簿中的数据透视表的默认样式。</summary>
        <value><see cref="P:Microsoft.Office.Tools.Excel.WorkbookBase.TableStyles" /> 属性中的表样式，该样式用作工作簿中的数据透视表的默认样式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例将透视表的默认样式设置为**透视样式中型 3**, 这是在选择数据透视表时, 在 "**数据透视表样式**" 组的 "**设计**" 选项卡上的 Excel 中提供的一种样式。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_Excelworkbook_Additional#34](~/snippets/csharp/VS_Snippets_OfficeSP/trin_excelworkbook_additional/cs/ThisWorkbook.cs#34)]
 [!code-vb[Trin_Excelworkbook_Additional#34](~/snippets/visualbasic/VS_Snippets_OfficeSP/trin_excelworkbook_additional/vb/ThisWorkbook.vb#34)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultSlicerStyle">
      <MemberSignature Language="C#" Value="public object DefaultSlicerStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DefaultSlicerStyle" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.DefaultSlicerStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultTableStyle">
      <MemberSignature Language="C#" Value="public object DefaultTableStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DefaultTableStyle" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.DefaultTableStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="P:Microsoft.Office.Tools.Excel.WorkbookBase.TableStyles" /> 属性中的表样式，该样式用作工作簿中的表的默认样式。</summary>
        <value><see cref="P:Microsoft.Office.Tools.Excel.WorkbookBase.TableStyles" /> 属性中的表样式，该样式用作工作簿中的表的默认样式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例将表的默认样式设置为**表样式深色 11**, 这是在选择表时, 在 "**表样式**" 组的 "**设计**" 选项卡上的 Excel 中提供的一种样式。 然后, 该示例添加一个表以验证新的表样式。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_Excelworkbook_Additional#35](~/snippets/csharp/VS_Snippets_OfficeSP/trin_excelworkbook_additional/cs/ThisWorkbook.cs#35)]
 [!code-vb[Trin_Excelworkbook_Additional#35](~/snippets/visualbasic/VS_Snippets_OfficeSP/trin_excelworkbook_additional/vb/ThisWorkbook.vb#35)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteNumberFormat">
      <MemberSignature Language="C#" Value="public void DeleteNumberFormat (string numberFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteNumberFormat(string numberFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.DeleteNumberFormat(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="numberFormat" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="numberFormat">指定要删除的数字格式。</param>
        <summary>从工作簿中删除自定义数字格式。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.DeleteNumberFormat%2A>方法从当前工作簿中删除自定义数字格式 "#. # # #, # #"。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#106](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#106)]
 [!code-vb[Trin_ExcelWorkBook#106](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#106)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DialogSheets">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Sheets DialogSheets { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Sheets DialogSheets" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.DialogSheets" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Sheets</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayDrawingObjects">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlDisplayDrawingObjects DisplayDrawingObjects { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlDisplayDrawingObjects DisplayDrawingObjects" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.DisplayDrawingObjects" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlDisplayDrawingObjects</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置形状的显示方式。</summary>
        <value>以下 <see cref="T:Microsoft.Office.Interop.Excel.XlDisplayDrawingObjects" /> 值之一：<see cref="F:Microsoft.Office.Interop.Excel.XlDisplayDrawingObjects.xlDisplayShapes" />、<see cref="F:Microsoft.Office.Interop.Excel.XlDisplayDrawingObjects.xlPlaceholders" /> 或 <see cref="F:Microsoft.Office.Interop.Excel.XlDisplayDrawingObjects.xlHide" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例将一个圆环形状添加`Sheet1`到当前工作簿的工作表中, 然后提示用户<xref:Microsoft.Office.Tools.Excel.WorkbookBase.DisplayDrawingObjects%2A>使用属性隐藏绘图对象。 如果用户隐藏了绘图对象, 则圆环图形状将不可见;否则, 圆环形状将可见。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#18](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#18)]
 [!code-vb[Trin_ExcelWorkBook#18](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#18)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayInkComments">
      <MemberSignature Language="C#" Value="public bool DisplayInkComments { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DisplayInkComments" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.DisplayInkComments" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示工作簿中是否显示墨迹注释。</summary>
        <value>如果工作簿中显示墨迹批注，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.Dispose" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>释放 <see cref="T:Microsoft.Office.Tools.Excel.WorkbookBase" /> 类的当前实例所使用的所有资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不要自己调用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Dispose%2A>方法。 关闭文档级自定义项中的文档时, 将清理[!INCLUDE[vsto_runtime](~/includes/vsto-runtime-md.md)]自定义项所使用的所有资源。  
  
 有关<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Dispose%2A>方法的详细信息, 请参阅[清理非托管资源](http://msdn.microsoft.com/library/a17b0066-71c2-4ba4-9822-8e19332fc213)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Disposed">
      <MemberSignature Language="C#" Value="public event EventHandler Disposed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Disposed" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.Disposed" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.ComponentModel.IComponent.Disposed</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DocumentInspectors">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Core.DocumentInspectors DocumentInspectors { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Core.DocumentInspectors DocumentInspectors" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.DocumentInspectors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Core.DocumentInspectors</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取工作簿的文档检查器模块的集合。</summary>
        <value>一个<c>DocumentInspectors</c>集合, 包含工作簿的文档检查器模块。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例将遍历工作簿中的检查器。 此代码会检查每个对话框并显示一个消息框, 其中显示了检查器的名称, 以及检查的状态和结果。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_Excelworkbook_Additional#27](~/snippets/csharp/VS_Snippets_OfficeSP/trin_excelworkbook_additional/cs/ThisWorkbook.cs#27)]
 [!code-vb[Trin_Excelworkbook_Additional#27](~/snippets/visualbasic/VS_Snippets_OfficeSP/trin_excelworkbook_additional/vb/ThisWorkbook.vb#27)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DocumentLibraryVersions">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Core.DocumentLibraryVersions DocumentLibraryVersions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Core.DocumentLibraryVersions DocumentLibraryVersions" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.DocumentLibraryVersions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Core.DocumentLibraryVersions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <c>Microsoft.Office.Core.DocumentLibraryVersions</c> 集合，该集合表示共享工作簿（启用了版本控制并存储在服务器上的文档库中）的版本集合。</summary>
        <value>一个<c>DocumentLibraryVersions</c>集合, 该集合表示已启用版本控制并存储在服务器上的文档库中的共享工作簿的版本集合。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DoNotPromptForConvert">
      <MemberSignature Language="C#" Value="public bool DoNotPromptForConvert { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DoNotPromptForConvert" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.DoNotPromptForConvert" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示在工作簿包含 Excel 2007 之前的 Excel 版本不支持的功能的情况下，是否提示用户转换工作簿。</summary>
        <value><see langword="true" /> 表示提示用户转换工作簿；<see langword="false" /> 表示不提示。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableAutoRecover">
      <MemberSignature Language="C#" Value="public bool EnableAutoRecover { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableAutoRecover" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.EnableAutoRecover" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示 Microsoft Office Excel 是否按时间间隔保存更改后的文件（所有格式）。</summary>
        <value>如果 Excel 按时间间隔保存更改后的文件，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 Excel 失败, 系统将失败, 或者如果系统未正确关闭 (不允许 Excel 保存已更改的文件), 则将打开备份的文件, 并且用户有机会保存更改 (否则会丢失)。 当用户重新启动 Excel 时, "文档恢复" 窗口将打开, 并为用户提供一个用于恢复正在处理的文件的选项。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableConnections">
      <MemberSignature Language="C#" Value="public void EnableConnections ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnableConnections() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.EnableConnections" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>启用工作簿内的数据连接。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例调用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.EnableConnections%2A>方法来启用工作簿中的数据连接, 并取消现有数据连接的任何安全警告。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkbook_Additional#40](~/snippets/csharp/VS_Snippets_OfficeSP/trin_excelworkbook_additional/cs/ThisWorkbook.cs#40)]
 [!code-vb[Trin_ExcelWorkbook_Additional#40](~/snippets/visualbasic/VS_Snippets_OfficeSP/trin_excelworkbook_additional/vb/ThisWorkbook.vb#40)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EncryptionProvider">
      <MemberSignature Language="C#" Value="public string EncryptionProvider { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EncryptionProvider" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.EncryptionProvider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 Microsoft Office Excel 用来加密工作簿密码的算法加密提供程序的名称。</summary>
        <value>Excel 用来加密工作簿密码的算法加密提供程序的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例检查<xref:Microsoft.Office.Tools.Excel.WorkbookBase.HasPassword%2A>属性的值, 以确定工作簿是否受密码保护。 如果工作簿不受密码保护, 则该示例将<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Password%2A>属性设置为从用户输入获得的密码, 然后<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SetPasswordEncryptionOptions%2A>调用方法来设置加密算法, 设置密钥长度, 设置加密提供程序的名称,和启用文件属性加密。 然后<xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionProvider%2A>, 该示例在工作表<xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionAlgorithm%2A> <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionKeyLength%2A> <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionFileProperties%2A> 中`Sheet1`显示、、和属性的值。 此示例假定方法`GetPasswordFromUserInput`是在其他地方定义的。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#131](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#131)]
 [!code-vb[Trin_ExcelWorkBook#131](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#131)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndInit">
      <MemberSignature Language="C#" Value="public virtual void EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.EndInit" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Tools.EntryPoint.EndInit</InterfaceMember>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.EndInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndReview">
      <MemberSignature Language="C#" Value="public void EndReview ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndReview() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.EndReview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>使用 <see cref="M:Microsoft.Office.Tools.Excel.WorkbookBase.SendForReview(System.Object,System.Object,System.Object,System.Object)" /> 方法终止对发送审阅的文件的审阅。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnvelopeVisible">
      <MemberSignature Language="C#" Value="public bool EnvelopeVisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnvelopeVisible" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.EnvelopeVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示电子邮件撰写标题和信封工具栏是否都可见。</summary>
        <value>如果电子邮件撰写标题和信封工具栏都可见，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Excel4IntlMacroSheets">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Sheets Excel4IntlMacroSheets { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Sheets Excel4IntlMacroSheets" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Excel4IntlMacroSheets" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Sheets</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Sheets" /> 集合，该集合表示工作簿中的所有 Microsoft Office Excel 4.0 国际宏表。</summary>
        <value><see cref="T:Microsoft.Office.Interop.Excel.Sheets" /> 集合，表示工作簿中的所有 Microsoft Office Excel 4.0 国际宏表。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下面的代码示例遍历<xref:Microsoft.Office.Interop.Excel.Worksheet?displayProperty=fullName> <xref:Microsoft.Office.Tools.Excel.WorkbookBase.Excel4IntlMacroSheets%2A>属性返回的每个, 并将每个工作表的代码名称写入调试输出。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#21](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#21)]
 [!code-vb[Trin_ExcelWorkBook#21](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Excel4MacroSheets">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Sheets Excel4MacroSheets { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Sheets Excel4MacroSheets" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Excel4MacroSheets" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Sheets</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Sheets" /> 集合，该集合表示工作簿中的所有 Microsoft Office Excel 4.0 宏表。</summary>
        <value><see cref="T:Microsoft.Office.Interop.Excel.Sheets" /> 集合，表示工作簿中的所有 Microsoft Office Excel 4.0 宏表。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下面的代码示例遍历<xref:Microsoft.Office.Interop.Excel.Worksheet?displayProperty=fullName> <xref:Microsoft.Office.Tools.Excel.WorkbookBase.Excel4MacroSheets%2A>属性返回的每个, 并将每个工作表的代码名称写入调试输出。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#22](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#22)]
 [!code-vb[Trin_ExcelWorkBook#22](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Excel8CompatibilityMode">
      <MemberSignature Language="C#" Value="public bool Excel8CompatibilityMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Excel8CompatibilityMode" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Excel8CompatibilityMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示工作簿是否处于兼容模式。</summary>
        <value>如果工作簿处于兼容模式，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在兼容模式下, 某些功能被禁用或功能不同。 例如, 兼容模式下的 Excel 2007 工作簿被限制为在早期版本的 Excel 中可用的行数和列数。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveAccess">
      <MemberSignature Language="C#" Value="public bool ExclusiveAccess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ExclusiveAccess() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.ExclusiveAccess" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>向当前用户分配作为共享列表打开的工作簿的独占访问权限。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法保存对工作簿所做的任何更改, 并要求打开工作簿的其他用户将其更改保存到其他文件。  
  
 如果工作簿未作为共享列表打开, 则此方法将失败。 若要确定工作簿是否作为共享列表打开, 请使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.MultiUserEditing%2A>属性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExportAsFixedFormat">
      <MemberSignature Language="C#" Value="public void ExportAsFixedFormat (Microsoft.Office.Interop.Excel.XlFixedFormatType type, object filename, object quality, object includeDocProperties, object ignorePrintAreas, object from, object to, object openAfterPublish, object fixedFormatExtClassPtr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExportAsFixedFormat(valuetype Microsoft.Office.Interop.Excel.XlFixedFormatType type, object filename, object quality, object includeDocProperties, object ignorePrintAreas, object from, object to, object openAfterPublish, object fixedFormatExtClassPtr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.ExportAsFixedFormat(Microsoft.Office.Interop.Excel.XlFixedFormatType,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.Office.Interop.Excel.XlFixedFormatType" />
        <Parameter Name="filename" Type="System.Object" />
        <Parameter Name="quality" Type="System.Object" />
        <Parameter Name="includeDocProperties" Type="System.Object" />
        <Parameter Name="ignorePrintAreas" Type="System.Object" />
        <Parameter Name="from" Type="System.Object" />
        <Parameter Name="to" Type="System.Object" />
        <Parameter Name="openAfterPublish" Type="System.Object" />
        <Parameter Name="fixedFormatExtClassPtr" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="type">其中一个 <see langword="Microsoft.Office.Interop.Excel.XlFixedFormatType" /> 值，该值指定是否要将工作簿保存为 PDF 或 XPS 格式。</param>
        <param name="filename">新 PDF 或 XPS 文件的完整路径。 如果省略此参数，Excel 会将文件保存在当前文件夹中。</param>
        <param name="quality">其中一个 <see langword="Microsoft.Office.Interop.Excel.XlFixedFormatQuality" /> 值，该值指定导出文件的质量。</param>
        <param name="includeDocProperties">如果要在导出的文件中包含文档属性，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <param name="ignorePrintAreas">若要在导出时忽略任何打印区域设置，请使用 <see langword="true" />；否则使用 <see langword="false" />。</param>
        <param name="from">要从其处开始导出的页码。 如果省略此参数，则从第一页开始导出。</param>
        <param name="to">要导出的最后一页的页码。 如果省略此参数，则导出完最后一页后停止导出。</param>
        <param name="openAfterPublish">如果要在导出工作簿后打开新文件，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <param name="fixedFormatExtClassPtr">一个指向 <see langword="IMsoDocExporter" /> 接口的实现的指针，可使工作簿保存为另一种固定格式。 有关详细信息，请参阅“扩展 Office (2007) 固定格式导出功能”。</param>
        <summary>以 PDF 或 XPS 格式保存工作簿。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 仅在安装了提供此功能的外接程序后, 才能将保存为 PDF 或 XPS 文件 Microsoft Office Excel。 有关详细信息, 请在 Office Online 上搜索 "为其他文件格式 (如 PDF 和 XPS) 启用支持"。  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例使用高质量分辨率将工作簿的第一页以 PDF 格式保存到指定的文件路径。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkbook_Additional#3](~/snippets/csharp/VS_Snippets_OfficeSP/trin_excelworkbook_additional/cs/ThisWorkbook.cs#3)]
 [!code-vb[Trin_ExcelWorkbook_Additional#3](~/snippets/visualbasic/VS_Snippets_OfficeSP/trin_excelworkbook_additional/vb/ThisWorkbook.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FileFormat">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlFileFormat FileFormat { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlFileFormat FileFormat" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.FileFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlFileFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取工作簿的文件格式和类型。</summary>
        <value><see cref="T:Microsoft.Office.Interop.Excel.XlFileFormat" /> 值之一。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例检查<xref:Microsoft.Office.Tools.Excel.WorkbookBase.FileFormat%2A>属性的值, 以确定工作簿是否为正常工作簿。 如果工作簿是普通工作簿, 则该示例调用<xref:Microsoft.Office.Tools.Excel.Worksheet.SaveAs%2A>方法以将工作簿重新保存为 XML 电子表格, 该电子表格的名称`XMLCopy.xlsx`位于<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Path%2A>属性指定的路径中。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#125](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#125)]
 [!code-vb[Trin_ExcelWorkBook#125](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#125)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Final">
      <MemberSignature Language="C#" Value="public bool Final { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Final" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Final" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示工作簿是否处于最终状态。</summary>
        <value>如果工作簿处于最终状态，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 将此属性设置为`true`时, 将通知收件人工作簿为最终状态, 并且工作簿设置为只读。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FinishInitialization">
      <MemberSignature Language="C#" Value="protected virtual void FinishInitialization ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void FinishInitialization() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.FinishInitialization" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Tools.EntryPoint.FinishInitialization</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FollowHyperlink">
      <MemberSignature Language="C#" Value="public void FollowHyperlink (string address, object subAddress, object newWindow, object addHistory, object extraInfo, object method, object headerInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FollowHyperlink(string address, object subAddress, object newWindow, object addHistory, object extraInfo, object method, object headerInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.FollowHyperlink(System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="subAddress" Type="System.Object" />
        <Parameter Name="newWindow" Type="System.Object" />
        <Parameter Name="addHistory" Type="System.Object" />
        <Parameter Name="extraInfo" Type="System.Object" />
        <Parameter Name="method" Type="System.Object" />
        <Parameter Name="headerInfo" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">目标文档的地址。</param>
        <param name="subAddress">目标文档中的位置。 默认值为空字符串。</param>
        <param name="newWindow">如果为 <see langword="true" />，则在新窗口中显示目标应用程序。 默认值为 <see langword="false" />。</param>
        <param name="addHistory">未使用。 留待将来使用。</param>
        <param name="extraInfo">一个字符串或字节数组，指定用于解析超链接的有关 HTTP 的其他信息。 例如，可以使用 <c>ExtraInfo</c> 指定图像映射的坐标、窗体的内容或 FAT 文件名。</param>
        <param name="method">指定附加 <c>ExtraInfo</c> 的方式。 可以是下列 <see langword="Microsoft.Office.Core.MsoExtraInfoMethod" /> 常数之一：<see langword="Microsoft.Office.Core.MsoExtraInfoMethod.msoMethodGet" /> 或 <see langword="Microsoft.Office.Core.MsoExtraInfoMethod.msoMethodPost" />。</param>
        <param name="headerInfo">一个字符串，指定 HTTP 请求的标头信息。 默认值为一个空字符串。</param>
        <summary>如果文档已下载，则显示缓存文档。 否则，此方法解析超链接，下载目标文档并在适当的应用程序中显示此文档。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.FollowHyperlink%2A>方法在新窗口中的指定地址显示文档。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#108](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#108)]
 [!code-vb[Trin_ExcelWorkBook#108](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#108)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ForceFullCalculation">
      <MemberSignature Language="C#" Value="public bool ForceFullCalculation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ForceFullCalculation" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.ForceFullCalculation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否强制对工作簿进行完全计算。</summary>
        <value>如果强制对工作簿进行完全计算，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForwardMailer">
      <MemberSignature Language="C#" Value="public void ForwardMailer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ForwardMailer() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.ForwardMailer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FullName">
      <MemberSignature Language="C#" Value="public string FullName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.FullName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取对象的名称，包括其磁盘路径。</summary>
        <value>对象的名称，包括其磁盘路径。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性等效于<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Path%2A>属性, 后跟当前文件系统分隔符, 然后<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Name%2A>是属性。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.FullName%2A>属性显示工作簿的完整名称, 包括其路径。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#23](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#23)]
 [!code-vb[Trin_ExcelWorkBook#23](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FullNameURLEncoded">
      <MemberSignature Language="C#" Value="public string FullNameURLEncoded { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullNameURLEncoded" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.FullNameURLEncoded" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取对象的名称，包括其磁盘路径。</summary>
        <value>对象的名称，包括其磁盘路径。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.FullNameURLEncoded%2A>属性显示工作簿的完整名称 (包括其路径), 并编码为 URL。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#24](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#24)]
 [!code-vb[Trin_ExcelWorkBook#24](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#24)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="get_Colors">
      <MemberSignature Language="C#" Value="public object get_Colors (object index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object get_Colors(object index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.get_Colors(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAutomationObject">
      <MemberSignature Language="C#" Value="protected virtual object GetAutomationObject ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object GetAutomationObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.GetAutomationObject" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Tools.Excel.IWorkbookExtension.GetAutomationObject</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>由 [!INCLUDE[vsto_runtime](~/includes/vsto-runtime-md.md)] 调用，用于获取可由工作簿中的 VBA 代码使用的对象。</summary>
        <returns>文档级自定义项中的一个对象，可由工作簿中的 VBA 代码使用。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 重写此方法以返回您向工作簿中的 VBA 代码公开的类的实例。 有关详细信息, 请参阅[从 VBA 调用文档级自定义项中的代码](http://msdn.microsoft.com/en-us/aa99527b-eb50-4ac9-9855-92b913e75906)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHostItem&lt;T&gt;">
      <MemberSignature Language="C#" Value="protected T GetHostItem&lt;T&gt; (Type type, string cookie) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance !!T GetHostItem&lt;class T&gt;(class System.Type type, string cookie) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.GetHostItem``1(System.Type,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="cookie" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="type">To be added.</param>
        <param name="cookie">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWorkflowTasks">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Core.WorkflowTasks GetWorkflowTasks ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Office.Core.WorkflowTasks GetWorkflowTasks() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.GetWorkflowTasks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Core.WorkflowTasks</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回工作簿的工作流任务的集合。</summary>
        <returns>一个 <c>Microsoft.Office.Core.WorkflowTasks</c> 集合，包含工作簿的工作流任务。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例显示当前与工作簿关联的工作流任务的数目。 然后, 该示例将循环访问每个工作流任务 (如果有), 并在消息框中显示一些选定的任务属性。  
  
 若要向工作簿添加工作流任务, 您必须将工作簿发布到 Office Sharepoint Server 站点。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkbook_Additional#4](~/snippets/csharp/VS_Snippets_OfficeSP/trin_excelworkbook_additional/cs/ThisWorkbook.cs#4)]
 [!code-vb[Trin_ExcelWorkbook_Additional#4](~/snippets/visualbasic/VS_Snippets_OfficeSP/trin_excelworkbook_additional/vb/ThisWorkbook.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWorkflowTemplates">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Core.WorkflowTemplates GetWorkflowTemplates ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Office.Core.WorkflowTemplates GetWorkflowTemplates() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.GetWorkflowTemplates" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Core.WorkflowTemplates</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回工作簿的工作流模板的集合。</summary>
        <returns>一个 <c>Microsoft.Office.Core.WorkflowTemplates</c> 集合，包含工作簿的工作流模板。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例显示了可用于工作簿的工作流模板的数目。 如果存在一个或多个工作流模板, 则此示例将显示每个模板的名称和说明。  
  
 若要运行此代码示例, 您必须将工作簿发布到 Office SharePoint Server 站点。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkbook_Additional#5](~/snippets/csharp/VS_Snippets_OfficeSP/trin_excelworkbook_additional/cs/ThisWorkbook.cs#5)]
 [!code-vb[Trin_ExcelWorkbook_Additional#5](~/snippets/visualbasic/VS_Snippets_OfficeSP/trin_excelworkbook_additional/vb/ThisWorkbook.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasMailer">
      <MemberSignature Language="C#" Value="public bool HasMailer { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasMailer" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.HasMailer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasPassword">
      <MemberSignature Language="C#" Value="public bool HasPassword { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasPassword" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.HasPassword" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示工作簿是否具有保护密码。</summary>
        <value>如果工作簿具有保护密码，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例检查<xref:Microsoft.Office.Tools.Excel.WorkbookBase.HasPassword%2A>属性的值, 以确定工作簿是否受密码保护。 如果工作簿不受密码保护, 则该示例将<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Password%2A>属性设置为从用户输入获得的密码, 然后<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SetPasswordEncryptionOptions%2A>调用方法来设置加密算法, 设置密钥长度, 设置加密提供程序的名称,和启用文件属性加密。 然后<xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionProvider%2A>, 该示例在工作表<xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionAlgorithm%2A> <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionKeyLength%2A> <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionFileProperties%2A> 中`Sheet1`显示、、和属性的值。 此示例假定存在一个名为`GetPasswordFromUserInput`的方法, 该方法从用户输入获取强密码。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#131](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#131)]
 [!code-vb[Trin_ExcelWorkBook#131](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#131)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasRoutingSlip">
      <MemberSignature Language="C#" Value="public bool HasRoutingSlip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasRoutingSlip" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.HasRoutingSlip" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasVBProject">
      <MemberSignature Language="C#" Value="public bool HasVBProject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasVBProject" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.HasVBProject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示工作簿是否具有附加的 Microsoft Visual Basic for Applications (VBA) 项目。</summary>
        <value>如果工作簿具有附加的 VBA 项目，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HighlightChangesOnScreen">
      <MemberSignature Language="C#" Value="public bool HighlightChangesOnScreen { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HighlightChangesOnScreen" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.HighlightChangesOnScreen" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否在屏幕上突出显示对共享工作簿所做的更改。</summary>
        <value>如果在屏幕上突出显示对共享工作簿所做的更改，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HighlightChangesOptions">
      <MemberSignature Language="C#" Value="public void HighlightChangesOptions (object when, object who, object where);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void HighlightChangesOptions(object when, object who, object where) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.HighlightChangesOptions(System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="when" Type="System.Object" />
        <Parameter Name="who" Type="System.Object" />
        <Parameter Name="where" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="when">显示的更改。 可以为以下 <see cref="T:Microsoft.Office.Interop.Excel.XlHighlightChangesTime" /> 常数之一：<see cref="F:Microsoft.Office.Interop.Excel.XlHighlightChangesTime.xlSinceMyLastSave" />、<see cref="F:Microsoft.Office.Interop.Excel.XlHighlightChangesTime.xlAllChanges" /> 或 <see cref="F:Microsoft.Office.Interop.Excel.XlHighlightChangesTime.xlNotYetReviewed" />。</param>
        <param name="who">显示其更改的用户。 可以是“Everyone”、“Everyone but Me”或共享工作簿的用户名之一。</param>
        <param name="where">一个 A1 样式范围引用，指定要检查更改的区域。</param>
        <summary>控制在共享工作簿中显示更改的方式。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HostContext">
      <MemberSignature Language="C#" Value="public IServiceProvider HostContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IServiceProvider HostContext" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.HostContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IServiceProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HTMLProject">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Core.HTMLProject HTMLProject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Core.HTMLProject HTMLProject" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.HTMLProject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Core.HTMLProject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IconSets">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.IconSets IconSets { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.IconSets IconSets" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.IconSets" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.IconSets</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取内置图标集的集合，这些图标集可用于对工作簿中的范围应用条件格式规则。</summary>
        <value>一个<c>IconSets</c>集合, 其中包含内置图标集对象, 这些对象可用于向范围应用条件格式设置规则。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用图标集将范围数据分为三到五个类别, 并以阈值分隔。 每个图标表示一系列值。 例如, 在`Microsoft.Office.Interop.Excel.XlIconSet.xl3Arrows`图标集中, 红色向上箭头表示较高的值, 黄色侧向箭头表示中间值, 绿色向下箭头表示较小的值。  
  
 若要基于图标集应用条件`Microsoft.Office.Interop.Excel.IconSetCondition`格式规则, 请`Microsoft.Office.Interop.Excel.FormatConditions.AddIconSetCondition`使用范围的<xref:Microsoft.Office.Interop.Excel.Range.FormatConditions%2A>属性的方法或<xref:Microsoft.Office.Tools.Excel.NamedRange.FormatConditions%2A>命名范围的属性创建一个新的。 然后, 将`Microsoft.Office.Interop.Excel.IconSetCondition.IconSet`属性设置`Microsoft.Office.Interop.Excel.IconSet`为从<xref:Microsoft.Office.Tools.Excel.WorkbookBase.IconSets%2A>属性中检索的对象。 若要指定`Microsoft.Office.Interop.Excel.IconSet`要检索的对象, 请将其中一个`Microsoft.Office.Interop.Excel.XlIconSet`枚举值<xref:Microsoft.Office.Tools.Excel.WorkbookBase.IconSets%2A>作为索引传递到属性。  
  
   
  
## Examples  
 下面的代码示例`Sheet1`使用1到6之间的值填充范围。 然后, 该示例使用`Microsoft.Office.Interop.Excel.XlIconSet.xl3Arrows`图标集向 A1: A6 范围中添加一个图标集条件。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_Excelworkbook_Additional#36](~/snippets/csharp/VS_Snippets_OfficeSP/trin_excelworkbook_additional/cs/ThisWorkbook.cs#36)]
 [!code-vb[Trin_Excelworkbook_Additional#36](~/snippets/visualbasic/VS_Snippets_OfficeSP/trin_excelworkbook_additional/vb/ThisWorkbook.vb#36)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InactiveListBorderVisible">
      <MemberSignature Language="C#" Value="public bool InactiveListBorderVisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InactiveListBorderVisible" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.InactiveListBorderVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示列表不活动时列表边框是否可见。</summary>
        <value>如果边框可见，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="protected virtual void Initialize ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Initialize() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.Initialize" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Tools.EntryPoint.Initialize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeDataBindings">
      <MemberSignature Language="C#" Value="protected virtual void InitializeDataBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InitializeDataBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.InitializeDataBindings" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Tools.EntryPoint.InitializeDataBindings</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InnerObject">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Workbook InnerObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Workbook InnerObject" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.InnerObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Workbook</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Workbook" />，表示 <see cref="T:Microsoft.Office.Tools.Excel.WorkbookBase" /> 的基础本机对象。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.Workbook" />，表示 <see cref="T:Microsoft.Office.Tools.Excel.WorkbookBase" /> 的基础本机对象。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAddin">
      <MemberSignature Language="C#" Value="public bool IsAddin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAddin" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.IsAddin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示工作簿是否作为外接程序运行。</summary>
        <value>如果工作簿作为外接程序运行，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 将此属性设置为`true`时, 工作簿具有以下特征:  
  
-   如果工作簿处于打开状态, 则不会提示您保存该工作簿。  
  
-   工作簿窗口不可见。  
  
-   工作簿中的所有宏都不显示在**宏**对话框中 (通过指向 "**工具**" 菜单上的 "**宏**", 然后单击 "**宏**" 来显示)。  
  
-   即使不显示工作簿中的宏, 仍可以从 "**宏**" 对话框运行。 此外, 宏名称不需要用工作簿名称限定。  
  
-   打开工作簿时按住 SHIFT 键不起作用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInplace">
      <MemberSignature Language="C#" Value="public bool IsInplace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInplace" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.IsInplace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示指定的工作簿是否正在就地编辑</summary>
        <value>如果指定的工作簿正在就地编辑，则为 <see langword="true" />；如果工作簿已在 Microsoft Office Excel 中打开进行编辑，则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemProvider">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Tools.IHostItemProvider ItemProvider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Tools.IHostItemProvider ItemProvider" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.ItemProvider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Tools.IHostItemProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeepChangeHistory">
      <MemberSignature Language="C#" Value="public bool KeepChangeHistory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool KeepChangeHistory" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.KeepChangeHistory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示共享工作簿是否启用了更改跟踪。</summary>
        <value>如果共享工作簿启用了更改跟踪，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Keywords">
      <MemberSignature Language="C#" Value="public string Keywords { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Keywords" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Keywords" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LinkInfo">
      <MemberSignature Language="C#" Value="public object LinkInfo (string name, Microsoft.Office.Interop.Excel.XlLinkInfo linkInfoArgument, object type, object editionRef);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object LinkInfo(string name, valuetype Microsoft.Office.Interop.Excel.XlLinkInfo linkInfoArgument, object type, object editionRef) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.LinkInfo(System.String,Microsoft.Office.Interop.Excel.XlLinkInfo,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="linkInfoArgument" Type="Microsoft.Office.Interop.Excel.XlLinkInfo" />
        <Parameter Name="type" Type="System.Object" />
        <Parameter Name="editionRef" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">链接的名称。</param>
        <param name="linkInfoArgument"><see cref="T:Microsoft.Office.Interop.Excel.XlLinkInfo" /> 值之一，指定要返回的信息的类型。</param>
        <param name="type"><see cref="T:Microsoft.Office.Interop.Excel.XlLinkInfoType" /> 值之一，指定要为之返回信息的链接的类型。</param>
        <param name="editionRef">如果链接为版本，则此参数将版本引用指定为 R1C1 样式的字符串。 如果工作簿中有多个同名的发布者或订阅者，则需要 <c>EditionRef</c>。</param>
        <summary>获取链接日期和更新状态。</summary>
        <returns>指示关于链接的信息的值。 如果 <paramref name="LinkInfoArgument" /> 为 <see cref="F:Microsoft.Office.Interop.Excel.XlLinkInfo.xlUpdateState" />，则此方法返回 1（如果链接自动更新）或 2（如果链接必须手动更新）。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例使用获取当前工作簿中 DDE/ole 链接的集合, 然后使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.LinkInfo%2A>方法来确定每个 dde/ole 链接是否自动或手动更新。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#110](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#110)]
 [!code-vb[Trin_ExcelWorkBook#110](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#110)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LinkSources">
      <MemberSignature Language="C#" Value="public object LinkSources (object type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object LinkSources(object type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.LinkSources(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="type"><see cref="T:Microsoft.Office.Interop.Excel.XlLink" /> 值之一，指定要返回的链接的类型。</param>
        <summary>返回工作簿中的链接的 <see cref="T:System.Array" />。</summary>
        <returns>工作簿中的链接名称的 <see cref="T:System.Array" />；如果工作簿不包含指定的 <paramref name="Type" /> 的任何链接，则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返回<xref:System.Array>的中的名称是链接文档、版本或 DDE 或 OLE 服务器的名称。 数组的格式是适用于所有类型但发布服务器和订阅服务器的一维数组。 返回的字符串包含链接源的名称, 采用链接类型的适当表示法。 例如, DDE 链接使用 "服务器&#124;文档!Item "语法。  
  
 对于发布服务器和订阅服务器链接, 返回的数组为二维。 数组的第一列包含版本的名称, 第二列包含以文本形式进行的版本引用。  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例将外部 Excel 链接添加到当前工作簿, 并使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.LinkSources%2A>方法获取工作簿中所有 Excel 链接的名称的数组。 然后, 该示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.OpenLinks%2A>方法以只读方式打开每个链接的工作簿。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#111](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#111)]
 [!code-vb[Trin_ExcelWorkBook#111](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#111)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ListChangesOnNewSheet">
      <MemberSignature Language="C#" Value="public bool ListChangesOnNewSheet { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ListChangesOnNewSheet" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.ListChangesOnNewSheet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示对共享工作簿所做的更改是否显示在单独的工作表上。</summary>
        <value>如果对共享工作簿所做的更改显示在单独的工作表上，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LockServerFile">
      <MemberSignature Language="C#" Value="public void LockServerFile ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LockServerFile() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.LockServerFile" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>锁定服务器上的工作簿以防止修改。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Mailer">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Mailer Mailer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Mailer Mailer" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Mailer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Mailer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MergeWorkbook">
      <MemberSignature Language="C#" Value="public void MergeWorkbook (object filename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MergeWorkbook(object filename) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.MergeWorkbook(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="filename">包含要合并到打开的工作簿中的更改的工作簿的文件名。</param>
        <summary>将更改从一个工作簿合并到一个打开的共享工作簿中。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Office.Tools.EntryPoint.BeginInit">
      <MemberSignature Language="C#" Value="void EntryPoint.BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.Office.Tools.EntryPoint.BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.Microsoft#Office#Tools#EntryPoint#BeginInit" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Tools.EntryPoint.BeginInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Office.Tools.EntryPoint.EndInit">
      <MemberSignature Language="C#" Value="void EntryPoint.EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.Office.Tools.EntryPoint.EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.Microsoft#Office#Tools#EntryPoint#EndInit" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Tools.EntryPoint.EndInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Office.Tools.EntryPoint.FinishInitialization">
      <MemberSignature Language="C#" Value="void EntryPoint.FinishInitialization ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.Office.Tools.EntryPoint.FinishInitialization() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.Microsoft#Office#Tools#EntryPoint#FinishInitialization" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Tools.EntryPoint.FinishInitialization</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Office.Tools.EntryPoint.Initialize">
      <MemberSignature Language="C#" Value="void EntryPoint.Initialize ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.Office.Tools.EntryPoint.Initialize() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.Microsoft#Office#Tools#EntryPoint#Initialize" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Tools.EntryPoint.Initialize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Office.Tools.EntryPoint.InitializeDataBindings">
      <MemberSignature Language="C#" Value="void EntryPoint.InitializeDataBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.Office.Tools.EntryPoint.InitializeDataBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.Microsoft#Office#Tools#EntryPoint#InitializeDataBindings" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Tools.EntryPoint.InitializeDataBindings</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Office.Tools.EntryPoint.OnShutdown">
      <MemberSignature Language="C#" Value="void EntryPoint.OnShutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.Office.Tools.EntryPoint.OnShutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.Microsoft#Office#Tools#EntryPoint#OnShutdown" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Tools.EntryPoint.OnShutdown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Office.Tools.EntryPoint.OnStartup">
      <MemberSignature Language="C#" Value="void EntryPoint.OnStartup ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.Office.Tools.EntryPoint.OnStartup() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.Microsoft#Office#Tools#EntryPoint#OnStartup" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Tools.EntryPoint.OnStartup</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Office.Tools.Excel.IWorkbookExtension.CreateRibbonExtensibilityObject">
      <MemberSignature Language="C#" Value="Microsoft.Office.Core.IRibbonExtensibility IWorkbookExtension.CreateRibbonExtensibilityObject ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.Office.Core.IRibbonExtensibility Microsoft.Office.Tools.Excel.IWorkbookExtension.CreateRibbonExtensibilityObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.Microsoft#Office#Tools#Excel#IWorkbookExtension#CreateRibbonExtensibilityObject" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Tools.Excel.IWorkbookExtension.CreateRibbonExtensibilityObject</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Core.IRibbonExtensibility</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Office.Tools.Excel.IWorkbookExtension.CreateRibbonObjects">
      <MemberSignature Language="C#" Value="Microsoft.Office.Tools.Ribbon.IRibbonExtension[] IWorkbookExtension.CreateRibbonObjects ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Microsoft.Office.Tools.Ribbon.IRibbonExtension[] Microsoft.Office.Tools.Excel.IWorkbookExtension.CreateRibbonObjects() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.Microsoft#Office#Tools#Excel#IWorkbookExtension#CreateRibbonObjects" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Tools.Excel.IWorkbookExtension.CreateRibbonObjects</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Tools.Ribbon.IRibbonExtension[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Office.Tools.Excel.IWorkbookExtension.GetAutomationObject">
      <MemberSignature Language="C#" Value="object IWorkbookExtension.GetAutomationObject ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object Microsoft.Office.Tools.Excel.IWorkbookExtension.GetAutomationObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.Microsoft#Office#Tools#Excel#IWorkbookExtension#GetAutomationObject" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Tools.Excel.IWorkbookExtension.GetAutomationObject</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Office.Tools.Excel.IWorkbookExtension.ProtectDocument">
      <MemberSignature Language="C#" Value="void IWorkbookExtension.ProtectDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.Office.Tools.Excel.IWorkbookExtension.ProtectDocument() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.Microsoft#Office#Tools#Excel#IWorkbookExtension#ProtectDocument" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Tools.Excel.IWorkbookExtension.ProtectDocument</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Office.Tools.Excel.IWorkbookExtension.RequestService">
      <MemberSignature Language="C#" Value="object IWorkbookExtension.RequestService (Guid serviceGuid);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object Microsoft.Office.Tools.Excel.IWorkbookExtension.RequestService(valuetype System.Guid serviceGuid) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.Microsoft#Office#Tools#Excel#IWorkbookExtension#RequestService(System.Guid)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Tools.Excel.IWorkbookExtension.RequestService(System.Guid)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceGuid" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="serviceGuid">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Office.Tools.Excel.IWorkbookExtension.UnprotectDocument">
      <MemberSignature Language="C#" Value="void IWorkbookExtension.UnprotectDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.Office.Tools.Excel.IWorkbookExtension.UnprotectDocument() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.Microsoft#Office#Tools#Excel#IWorkbookExtension#UnprotectDocument" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Tools.Excel.IWorkbookExtension.UnprotectDocument</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Office.Tools.ICachedDataPersistanceCallback.OnAfterSave">
      <MemberSignature Language="C#" Value="void ICachedDataPersistanceCallback.OnAfterSave ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.Office.Tools.ICachedDataPersistanceCallback.OnAfterSave() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.Microsoft#Office#Tools#ICachedDataPersistanceCallback#OnAfterSave" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Tools.ICachedDataPersistanceCallback.OnAfterSave</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Office.Tools.ICachedDataPersistanceCallback.OnBeforeSave">
      <MemberSignature Language="C#" Value="void ICachedDataPersistanceCallback.OnBeforeSave ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.Office.Tools.ICachedDataPersistanceCallback.OnBeforeSave() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.Microsoft#Office#Tools#ICachedDataPersistanceCallback#OnBeforeSave" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Tools.ICachedDataPersistanceCallback.OnBeforeSave</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Office.Tools.IExtension.ExtensionBase">
      <MemberSignature Language="C#" Value="object Microsoft.Office.Tools.IExtension.ExtensionBase { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Microsoft.Office.Tools.IExtension.ExtensionBase" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Microsoft#Office#Tools#IExtension#ExtensionBase" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.Office.Tools.IExtension.ExtensionBase</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Modules">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Sheets Modules { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Sheets Modules" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Modules" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Sheets</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiUserEditing">
      <MemberSignature Language="C#" Value="public bool MultiUserEditing { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MultiUserEditing" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.MultiUserEditing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示工作簿是否作为共享列表打开。</summary>
        <value>如果工作簿作为共享列表打开，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Visual Studio 不支持共享工作簿。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取工作簿的名称。</summary>
        <value>工作簿的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Name%2A>属性来显示当前工作簿的名称。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#26](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#26)]
 [!code-vb[Trin_ExcelWorkBook#26](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#26)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Names">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Names Names { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Names Names" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Names" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Names</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Names" /> 集合，该集合表示工作簿中的所有名称（包括所有工作表特定的名称）。</summary>
        <value><see cref="T:Microsoft.Office.Interop.Excel.Names" /> 集合，表示工作簿中的所有名称（包括所有工作表特定的名称）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Names%2A>属性创建三个<xref:Microsoft.Office.Interop.Excel.Name?displayProperty=fullName>引用工作表`Sheet1`上不同范围的对象。 然后, 该示例遍历工作<xref:Microsoft.Office.Interop.Excel.Name?displayProperty=fullName>簿中的每个, 并显示工作表`Sheet1`的 A 列中的名称。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#27](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#27)]
 [!code-vb[Trin_ExcelWorkBook#27](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#27)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="New">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Tools.Excel.WorkbookEvents_NewEventHandler New;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Tools.Excel.WorkbookEvents_NewEventHandler New" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.New" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Tools.Excel.WorkbookEvents_NewEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在创建新工作簿时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示<xref:Microsoft.Office.Tools.Excel.WorkbookBase.New>事件的处理程序。 创建新的工作簿时, 事件处理程序会将 Microsoft Office Excel 应用程序窗口最大化。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#209](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#209)]
 [!code-vb[Trin_ExcelWorkBook#209](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#209)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewChart">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_NewChartEventHandler NewChart;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_NewChartEventHandler NewChart" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.NewChart" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_NewChartEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在工作簿中创建新图表时发生。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NewSheet">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_NewSheetEventHandler NewSheet;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_NewSheetEventHandler NewSheet" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.NewSheet" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_NewSheetEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在工作簿中创建新工作表时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示<xref:Microsoft.Office.Tools.Excel.WorkbookBase.NewSheet>事件的处理程序。 创建新的工作表时, 事件处理程序会将新工作表移动到工作簿中的最后一个位置。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#210](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#210)]
 [!code-vb[Trin_ExcelWorkBook#210](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#210)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewWindow">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Window NewWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Office.Interop.Excel.Window NewWindow() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.NewWindow" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Window</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建一个新窗口。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.NewWindow%2A>方法创建一个新的 Excel 应用程序窗口, 该窗口具有标题 "这是新窗口", 并且没有网格线。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#113](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#113)]
 [!code-vb[Trin_ExcelWorkBook#113](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#113)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSave">
      <MemberSignature Language="C#" Value="public string OnSave { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OnSave" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.OnSave" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSheetActivate">
      <MemberSignature Language="C#" Value="public string OnSheetActivate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OnSheetActivate" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.OnSheetActivate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSheetDeactivate">
      <MemberSignature Language="C#" Value="public string OnSheetDeactivate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OnSheetDeactivate" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.OnSheetDeactivate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnShutdown">
      <MemberSignature Language="C#" Value="protected virtual void OnShutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnShutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.OnShutdown" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Tools.EntryPoint.OnShutdown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnStartup">
      <MemberSignature Language="C#" Value="protected virtual void OnStartup ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStartup() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.OnStartup" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Tools.EntryPoint.OnStartup</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_OpenEventHandler Open;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_OpenEventHandler Open" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.Open" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_OpenEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在打开工作簿时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Open>事件的处理程序。 当打开当前工作簿时, 事件处理程序会将 Microsoft Office Excel 应用程序窗口最大化。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#211](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#211)]
 [!code-vb[Trin_ExcelWorkBook#211](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#211)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenLinks">
      <MemberSignature Language="C#" Value="public void OpenLinks (string name, object readOnly, object type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OpenLinks(string name, object readOnly, object type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.OpenLinks(System.String,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="readOnly" Type="System.Object" />
        <Parameter Name="type" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">Microsoft Office Excel 或 DDE/OLE 链接的名称（和从 <see cref="M:Microsoft.Office.Tools.Excel.WorkbookBase.LinkSources(System.Object)" /> 方法返回的一样）。</param>
        <param name="readOnly">如果为 <see langword="true" />，则以只读方式打开文档。 默认值为 <see langword="false" />。</param>
        <param name="type"><see cref="T:Microsoft.Office.Interop.Excel.XlLink" /> 值之一。 链接类型。</param>
        <summary>打开一个或多个链接的支持文档。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.LinkSources%2A>方法获取当前工作簿中所有 Excel 链接的名称数组。 然后, 该示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.OpenLinks%2A>方法以只读方式打开每个文档。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#111](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#111)]
 [!code-vb[Trin_ExcelWorkBook#111](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#111)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public object Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Parent" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取工作簿的父对象。</summary>
        <value>工作簿的父对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Parent%2A>属性来显示当前工作簿的父项的名称。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#28](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#28)]
 [!code-vb[Trin_ExcelWorkBook#28](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#28)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Password">
      <MemberSignature Language="C#" Value="public string Password { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Password" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Password" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置打开工作簿时必须提供的密码。</summary>
        <value>打开工作簿时必须提供的密码。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用结合大写字母和小写字母、数字和符号的强密码。 弱密码不会混合使用这些元素。 强密码:Y6dh!et5. 弱密码:House27. 使用可以记住的强密码, 这样就无需将其记下。  
  
   
  
## Examples  
 下面的代码示例检查<xref:Microsoft.Office.Tools.Excel.WorkbookBase.HasPassword%2A>属性的值, 以确定工作簿是否受密码保护。 如果工作簿不受密码保护, 则该示例将<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Password%2A>属性设置为从用户输入获得的密码, 然后<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SetPasswordEncryptionOptions%2A>调用方法来设置加密算法, 设置密钥长度, 设置加密提供程序的名称,和启用文件属性加密。 然后<xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionProvider%2A>, 该示例在工作表<xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionAlgorithm%2A> <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionKeyLength%2A> <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionFileProperties%2A> 中`Sheet1`显示、、和属性的值。 此示例假定方法`GetPasswordFromUserInput`是在其他地方定义的。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#131](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#131)]
 [!code-vb[Trin_ExcelWorkBook#131](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#131)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PasswordEncryptionAlgorithm">
      <MemberSignature Language="C#" Value="public string PasswordEncryptionAlgorithm { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PasswordEncryptionAlgorithm" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionAlgorithm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 Microsoft Office Excel 用来加密工作簿密码的算法。</summary>
        <value>Excel 用来加密工作簿密码的算法。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Tools.Excel.WorkbookBase.SetPasswordEncryptionOptions%2A>使用方法可指定 Excel 是否对受密码保护的工作簿的文件属性进行加密。  
  
   
  
## Examples  
 下面的代码示例检查<xref:Microsoft.Office.Tools.Excel.WorkbookBase.HasPassword%2A>属性的值, 以确定工作簿是否受密码保护。 如果工作簿不受密码保护, 则该示例将<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Password%2A>属性设置为从用户输入获得的密码, 然后<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SetPasswordEncryptionOptions%2A>调用方法来设置加密算法, 设置密钥长度, 设置加密提供程序的名称,和启用文件属性加密。 然后<xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionProvider%2A>, 该示例在工作表<xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionAlgorithm%2A> <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionKeyLength%2A> <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionFileProperties%2A> 中`Sheet1`显示、、和属性的值。 此示例假定方法`GetPasswordFromUserInput`是在其他地方定义的。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#131](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#131)]
 [!code-vb[Trin_ExcelWorkBook#131](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#131)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PasswordEncryptionFileProperties">
      <MemberSignature Language="C#" Value="public bool PasswordEncryptionFileProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PasswordEncryptionFileProperties" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionFileProperties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示 Microsoft Office Excel 是否对受密码保护的指定工作簿的文件属性进行加密。</summary>
        <value>如果 Excel 对受密码保护的指定工作簿的文件属性进行加密，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Tools.Excel.WorkbookBase.SetPasswordEncryptionOptions%2A>使用方法可指定 Excel 是否对指定的受密码保护的工作簿的文件属性进行加密。  
  
   
  
## Examples  
 下面的代码示例检查<xref:Microsoft.Office.Tools.Excel.WorkbookBase.HasPassword%2A>属性的值, 以确定工作簿是否受密码保护。 如果工作簿不受密码保护, 则该示例将<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Password%2A>属性设置为从用户输入获得的密码, 然后<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SetPasswordEncryptionOptions%2A>调用方法来设置加密算法, 设置密钥长度, 设置加密提供程序的名称,和启用文件属性加密。 然后<xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionProvider%2A>, 该示例在工作表<xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionAlgorithm%2A> <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionKeyLength%2A> <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionFileProperties%2A> 中`Sheet1`显示、、和属性的值。 此示例假定方法`GetPasswordFromUserInput`是在其他地方定义的。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#131](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#131)]
 [!code-vb[Trin_ExcelWorkBook#131](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#131)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PasswordEncryptionKeyLength">
      <MemberSignature Language="C#" Value="public int PasswordEncryptionKeyLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PasswordEncryptionKeyLength" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionKeyLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 Microsoft Office Excel 用来加密工作簿密码的算法的密钥长度。</summary>
        <value>Excel 用来加密工作簿密码的算法的密钥长度。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Tools.Excel.WorkbookBase.SetPasswordEncryptionOptions%2A>使用方法可指定 Excel 是否对指定的受密码保护的工作簿的文件属性进行加密。  
  
   
  
## Examples  
 下面的代码示例检查<xref:Microsoft.Office.Tools.Excel.WorkbookBase.HasPassword%2A>属性的值, 以确定工作簿是否受密码保护。 如果工作簿不受密码保护, 则该示例将<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Password%2A>属性设置为从用户输入获得的密码, 然后<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SetPasswordEncryptionOptions%2A>调用方法来设置加密算法, 设置密钥长度, 设置加密提供程序的名称,和启用文件属性加密。 然后<xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionProvider%2A>, 该示例在工作表<xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionAlgorithm%2A> <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionKeyLength%2A> <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionFileProperties%2A> 中`Sheet1`显示、、和属性的值。 此示例假定方法`GetPasswordFromUserInput`是在其他地方定义的。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#131](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#131)]
 [!code-vb[Trin_ExcelWorkBook#131](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#131)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PasswordEncryptionProvider">
      <MemberSignature Language="C#" Value="public string PasswordEncryptionProvider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PasswordEncryptionProvider" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionProvider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 Microsoft Office Excel 用来加密工作簿密码的算法加密提供程序的名称。</summary>
        <value>Excel 用来加密工作簿密码的算法加密提供程序的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例检查<xref:Microsoft.Office.Tools.Excel.WorkbookBase.HasPassword%2A>属性的值, 以确定工作簿是否受密码保护。 如果工作簿不受密码保护, 则该示例将<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Password%2A>属性设置为从用户输入获得的密码, 然后<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SetPasswordEncryptionOptions%2A>调用方法来设置加密算法, 设置密钥长度, 设置加密提供程序的名称,和启用文件属性加密。 然后<xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionProvider%2A>, 该示例在工作表<xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionAlgorithm%2A> <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionKeyLength%2A> <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionFileProperties%2A> 中`Sheet1`显示、、和属性的值。 此示例假定方法`GetPasswordFromUserInput`是在其他地方定义的。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#131](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#131)]
 [!code-vb[Trin_ExcelWorkBook#131](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#131)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Path">
      <MemberSignature Language="C#" Value="public string Path { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Path" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Path" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取应用程序的完整路径，不包括最后的分隔符和应用程序的名称。</summary>
        <value>应用程序的完整路径，不包括最后的分隔符和应用程序的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例检查<xref:Microsoft.Office.Tools.Excel.WorkbookBase.FileFormat%2A>属性的值, 以确定工作簿是否为正常工作簿。 如果工作簿是普通工作簿, 则该示例调用<xref:Microsoft.Office.Tools.Excel.Worksheet.SaveAs%2A>方法以将工作簿重新保存为 XML 电子表格, 该电子表格的名称`XMLCopy.xlsx`位于<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Path%2A>属性指定的路径中。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#125](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#125)]
 [!code-vb[Trin_ExcelWorkBook#125](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#125)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Permission">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Core.Permission Permission { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Core.Permission Permission" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Permission" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Core.Permission</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <c>Microsoft.Office.Core.Permission</c> 对象，该对象表示工作簿中的权限设置。</summary>
        <value>一个表示工作簿中的权限设置的<c>Microsoft. 权限</c>对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Permission%2A>属性, 以便在当前工作簿上没有启用权限的情况下显示消息。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#29](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#29)]
 [!code-vb[Trin_ExcelWorkBook#29](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#29)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PersonalViewListSettings">
      <MemberSignature Language="C#" Value="public bool PersonalViewListSettings { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PersonalViewListSettings" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.PersonalViewListSettings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示列表的筛选器设置和排序设置是否包括在共享工作簿的用户个人视图中。</summary>
        <value>如果列表的筛选器设置和排序设置包括在共享工作簿的用户个人视图中，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PersonalViewPrintSettings">
      <MemberSignature Language="C#" Value="public bool PersonalViewPrintSettings { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PersonalViewPrintSettings" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.PersonalViewPrintSettings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示打印设置是否包括在共享工作簿的用户个人视图中。</summary>
        <value>如果打印设置包括在共享工作簿的用户个人视图中，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PivotCaches">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.PivotCaches PivotCaches ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Office.Interop.Excel.PivotCaches PivotCaches() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.PivotCaches" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.PivotCaches</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.PivotCaches" /> 集合，该集合表示指定工作簿中的所有数据透视表缓存。</summary>
        <returns><see cref="T:Microsoft.Office.Interop.Excel.PivotCaches" /> 集合，表示指定工作簿中的所有数据透视表缓存。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.PivotCaches%2A>方法在每次打开工作簿时, 将当前工作簿中的每个<xref:Microsoft.Office.Interop.Excel.PivotCache?displayProperty=fullName>设置为自动更新。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#114](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#114)]
 [!code-vb[Trin_ExcelWorkBook#114](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#114)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PivotTableCloseConnection">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_PivotTableCloseConnectionEventHandler PivotTableCloseConnection;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_PivotTableCloseConnectionEventHandler PivotTableCloseConnection" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.PivotTableCloseConnection" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_PivotTableCloseConnectionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在数据透视表关闭到其数据源的连接后发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示<xref:Microsoft.Office.Tools.Excel.WorkbookBase.PivotTableCloseConnection>事件的处理程序。 当数据透视表关闭与数据源的连接时, 事件处理程序将显示一条消息。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#212](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#212)]
 [!code-vb[Trin_ExcelWorkBook#212](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#212)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PivotTableOpenConnection">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_PivotTableOpenConnectionEventHandler PivotTableOpenConnection;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_PivotTableOpenConnectionEventHandler PivotTableOpenConnection" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.PivotTableOpenConnection" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_PivotTableOpenConnectionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在数据透视表打开到其数据源的连接后发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示<xref:Microsoft.Office.Tools.Excel.WorkbookBase.PivotTableOpenConnection>事件的处理程序。 当数据透视表打开与数据源的连接时, 事件处理程序将显示一条消息。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#213](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#213)]
 [!code-vb[Trin_ExcelWorkBook#213](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#213)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PivotTableWizard">
      <MemberSignature Language="C#" Value="public void PivotTableWizard (object sourceType, object sourceData, object tableDestination, object tableName, object rowGrand, object columnGrand, object saveData, object hasAutoFormat, object autoPage, object reserved, object backgroundQuery, object optimizeCache, object pageFieldOrder, object pageFieldWrapCount, object readData, object connection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PivotTableWizard(object sourceType, object sourceData, object tableDestination, object tableName, object rowGrand, object columnGrand, object saveData, object hasAutoFormat, object autoPage, object reserved, object backgroundQuery, object optimizeCache, object pageFieldOrder, object pageFieldWrapCount, object readData, object connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.PivotTableWizard(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceType" Type="System.Object" />
        <Parameter Name="sourceData" Type="System.Object" />
        <Parameter Name="tableDestination" Type="System.Object" />
        <Parameter Name="tableName" Type="System.Object" />
        <Parameter Name="rowGrand" Type="System.Object" />
        <Parameter Name="columnGrand" Type="System.Object" />
        <Parameter Name="saveData" Type="System.Object" />
        <Parameter Name="hasAutoFormat" Type="System.Object" />
        <Parameter Name="autoPage" Type="System.Object" />
        <Parameter Name="reserved" Type="System.Object" />
        <Parameter Name="backgroundQuery" Type="System.Object" />
        <Parameter Name="optimizeCache" Type="System.Object" />
        <Parameter Name="pageFieldOrder" Type="System.Object" />
        <Parameter Name="pageFieldWrapCount" Type="System.Object" />
        <Parameter Name="readData" Type="System.Object" />
        <Parameter Name="connection" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="sourceType">To be added.</param>
        <param name="sourceData">To be added.</param>
        <param name="tableDestination">To be added.</param>
        <param name="tableName">To be added.</param>
        <param name="rowGrand">To be added.</param>
        <param name="columnGrand">To be added.</param>
        <param name="saveData">To be added.</param>
        <param name="hasAutoFormat">To be added.</param>
        <param name="autoPage">To be added.</param>
        <param name="reserved">To be added.</param>
        <param name="backgroundQuery">To be added.</param>
        <param name="optimizeCache">To be added.</param>
        <param name="pageFieldOrder">To be added.</param>
        <param name="pageFieldWrapCount">To be added.</param>
        <param name="readData">To be added.</param>
        <param name="connection">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Post">
      <MemberSignature Language="C#" Value="public void Post (object destName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Post(object destName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.Post(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="destName">此参数忽略。 <see cref="M:Microsoft.Office.Tools.Excel.WorkbookBase.Post(System.Object)" /> 方法提示用户指定工作簿的目标。</param>
        <summary>将工作簿发送到公共文件夹。 此方法仅用于连接到 Microsoft Exchange 服务器的 Microsoft Exchange 客户端。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PrecisionAsDisplayed">
      <MemberSignature Language="C#" Value="public bool PrecisionAsDisplayed { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PrecisionAsDisplayed" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.PrecisionAsDisplayed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否仅使用数字所显示的精度来完成工作簿中的计算。</summary>
        <value>如果仅使用数字所显示的精度来完成工作簿中的计算，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrintOut">
      <MemberSignature Language="C#" Value="public void PrintOut (object from, object to, object copies, object preview, object activePrinter, object printToFile, object collate, object prToFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PrintOut(object from, object to, object copies, object preview, object activePrinter, object printToFile, object collate, object prToFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.PrintOut(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="from" Type="System.Object" />
        <Parameter Name="to" Type="System.Object" />
        <Parameter Name="copies" Type="System.Object" />
        <Parameter Name="preview" Type="System.Object" />
        <Parameter Name="activePrinter" Type="System.Object" />
        <Parameter Name="printToFile" Type="System.Object" />
        <Parameter Name="collate" Type="System.Object" />
        <Parameter Name="prToFileName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="from">To be added.</param>
        <param name="to">To be added.</param>
        <param name="copies">To be added.</param>
        <param name="preview">To be added.</param>
        <param name="activePrinter">To be added.</param>
        <param name="printToFile">To be added.</param>
        <param name="collate">To be added.</param>
        <param name="prToFileName">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrintOutEx">
      <MemberSignature Language="C#" Value="public void PrintOutEx (object from, object to, object copies, object preview, object activePrinter, object printToFile, object collate, object prToFileName, object ignorePrintAreas);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PrintOutEx(object from, object to, object copies, object preview, object activePrinter, object printToFile, object collate, object prToFileName, object ignorePrintAreas) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.PrintOutEx(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="from" Type="System.Object" />
        <Parameter Name="to" Type="System.Object" />
        <Parameter Name="copies" Type="System.Object" />
        <Parameter Name="preview" Type="System.Object" />
        <Parameter Name="activePrinter" Type="System.Object" />
        <Parameter Name="printToFile" Type="System.Object" />
        <Parameter Name="collate" Type="System.Object" />
        <Parameter Name="prToFileName" Type="System.Object" />
        <Parameter Name="ignorePrintAreas" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="from">要从其处开始打印的页码。 如果省略此参数，则打印从第一页开始。</param>
        <param name="to">要打印的最后一页的页码。 若忽略此参数，则打印至最后一页。</param>
        <param name="copies">要打印的份数。 如果忽略此参数，则打印一份。</param>
        <param name="preview">若要在打印对象前让 Microsoft Office Excel 调用打印预览，请使用 <see langword="true" />。 若要立即打印对象，请使用 <see langword="false" />。</param>
        <param name="activePrinter">设置活动打印机的名称。</param>
        <param name="printToFile">若要打印到文件，请使用 <see langword="true" />。 若未指定 <c>PrToFileName</c>，则 Excel 会提示用户输入输出文件的名称。</param>
        <param name="collate">若逐份打印多个副本，请使用 <see langword="true" />。</param>
        <param name="prToFileName">如果 <c>PrintToFile</c> 设为 <see langword="true" />，则此参数指定要打印到的文件的名称。</param>
        <param name="ignorePrintAreas">如果要忽略打印区域并打印整个工作簿，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <summary>打印工作簿。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `From` 和`To`中的 "页" 是指打印页, 而不是对工作表或工作簿中的所有页。  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.PrintOutEx%2A>方法将工作簿的前两个打印页的两个逐份打印副本打印到默认打印机。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook_Additional#7](~/snippets/csharp/VS_Snippets_OfficeSP/trin_excelworkbook_additional/cs/ThisWorkbook.cs#7)]
 [!code-vb[Trin_ExcelWorkBook_Additional#7](~/snippets/visualbasic/VS_Snippets_OfficeSP/trin_excelworkbook_additional/vb/ThisWorkbook.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PrintPreview">
      <MemberSignature Language="C#" Value="public void PrintPreview (object enableChanges);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PrintPreview(object enableChanges) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.PrintPreview(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enableChanges" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="enableChanges">如果为 <see langword="true" />，则允许在显示打印预览时更改边距和页面设置；否则为 <see langword="false" />。</param>
        <summary>显示与打印效果相同的对象的预览。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.PrintPreview%2A>方法来显示当前工作簿的打印预览。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#117](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#117)]
 [!code-vb[Trin_ExcelWorkBook#117](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#117)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Protect">
      <MemberSignature Language="C#" Value="public void Protect (object password, object structure, object windows);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Protect(object password, object structure, object windows) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.Protect(System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="password" Type="System.Object" />
        <Parameter Name="structure" Type="System.Object" />
        <Parameter Name="windows" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="password">工作簿的密码，区分大小写。 如果省略此参数，则无需使用密码即可取消保护工作簿。 否则，必须指定密码才能取消保护工作簿。</param>
        <param name="structure">如果为 <see langword="true" />，则保护工作簿的结构（工作表的相对位置）。 默认值为 <see langword="false" />。</param>
        <param name="windows">如果为 <see langword="true" />，则保护工作簿窗口。 如果省略此参数，则窗口不受保护。</param>
        <summary>保护工作簿使其无法修改。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用结合大写字母和小写字母、数字和符号的强密码。 弱密码不会混合使用这些元素。 例如, "Y6dh! et5" 是一个强密码, 而 "House27" 是弱密码。 使用可以记住的强密码, 这样就无需将其记下。  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Protect%2A>方法来保护工作簿和工作簿窗口的结构, 但不指定密码保护。 然后, 该示例检查<xref:Microsoft.Office.Tools.Excel.WorkbookBase.ProtectStructure%2A>和<xref:Microsoft.Office.Tools.Excel.WorkbookBase.ProtectWindows%2A>属性的值以验证是否设置了此保护。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#30](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#30)]
 [!code-vb[Trin_ExcelWorkBook#30](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#30)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectDocument">
      <MemberSignature Language="C#" Value="protected virtual void ProtectDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ProtectDocument() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.ProtectDocument" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Tools.Excel.IWorkbookExtension.ProtectDocument</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>由 [!INCLUDE[vsto_runtime](~/includes/vsto-runtime-md.md)] 调用，以便可在保存缓存数据后，重新对工作簿应用密码保护。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果工作簿是使用密码保护的, 则在 Excel 文档级项目中重写此方法, 它包含在运行时可能更改的缓存数据。 在此方法的实现中, 使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Protect%2A>方法来保护工作簿。  
  
 默认情况下, 保存工作簿时, 对受密码保护的工作簿中的缓存数据所做的更改将不会保留。 若要保存对缓存数据所做的更改, 必须在项目中重写以下方法:  
  
-   <xref:Microsoft.Office.Tools.Excel.WorkbookBase.UnprotectDocument%2A>。 保存工作簿时, 将[!INCLUDE[vsto_runtime](~/includes/vsto-runtime-md.md)]调用此方法。 将代码添加到暂时取消对工作簿的工作的此方法中。 这样, 就可以保存对缓存数据所做的更改。  
  
-   <xref:Microsoft.Office.Tools.Excel.WorkbookBase.ProtectDocument%2A>。 保存工作簿后, 将[!INCLUDE[vsto_runtime](~/includes/vsto-runtime-md.md)]调用此方法。 将代码添加到此方法, 以便对工作簿重新应用保护。  
  
 有关详细信息，请参阅[如何：在受密码保护的文档](/visualstudio/vsto/how-to-cache-data-in-a-password-protected-document)中缓存数据。  
  
 即使因某些<xref:Microsoft.Office.Tools.Excel.WorkbookBase.ProtectDocument%2A>与密码保护无关的错误而导致无法保存缓存的数据, 也会调用方法。[!INCLUDE[vsto_runtime](~/includes/vsto-runtime-md.md)] 例如, 如果你实现<xref:Microsoft.VisualStudio.Tools.Applications.Runtime.ICachedType>接口以自定义缓存数据在文档中的存储方式, 则即使你<xref:Microsoft.VisualStudio.Tools.Applications.Runtime.ICachedType>的<xref:Microsoft.Office.Tools.Excel.WorkbookBase.ProtectDocument%2A>实现引发了阻止保存缓存数据的异常, 也会调用方法。  
  
   
  
## Examples  
 下面的代码示例演示如何重写<xref:Microsoft.Office.Tools.Excel.WorkbookBase.ProtectDocument%2A>方法, 以重新应用通过<xref:Microsoft.Office.Tools.Excel.WorkbookBase.UnprotectDocument%2A>重写方法删除的保护。 若要使用此代码, 请在 Excel `ThisWorkbook`文档级项目的类中运行它。 此代码假定密码存储在名为`securelyStoredPassword`的字段中。  
  
 [!code-csharp[Trin_CachedDataProtectedWorkbook#1](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_CachedDataProtectedWorkbook/CS/ThisWorkbook.cs#1)]
 [!code-vb[Trin_CachedDataProtectedWorkbook#1](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_CachedDataProtectedWorkbook/VB/ThisWorkbook.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectSharing">
      <MemberSignature Language="C#" Value="public void ProtectSharing (object filename, object password, object writeResPassword, object readOnlyRecommended, object createBackup, object sharingPassword);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ProtectSharing(object filename, object password, object writeResPassword, object readOnlyRecommended, object createBackup, object sharingPassword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.ProtectSharing(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.Object" />
        <Parameter Name="password" Type="System.Object" />
        <Parameter Name="writeResPassword" Type="System.Object" />
        <Parameter Name="readOnlyRecommended" Type="System.Object" />
        <Parameter Name="createBackup" Type="System.Object" />
        <Parameter Name="sharingPassword" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="filename">To be added.</param>
        <param name="password">To be added.</param>
        <param name="writeResPassword">To be added.</param>
        <param name="readOnlyRecommended">To be added.</param>
        <param name="createBackup">To be added.</param>
        <param name="sharingPassword">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectSharingEx">
      <MemberSignature Language="C#" Value="public void ProtectSharingEx (object filename, object password, object writeResPassword, object readOnlyRecommended, object createBackup, object sharingPassword, object fileFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ProtectSharingEx(object filename, object password, object writeResPassword, object readOnlyRecommended, object createBackup, object sharingPassword, object fileFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.ProtectSharingEx(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.Object" />
        <Parameter Name="password" Type="System.Object" />
        <Parameter Name="writeResPassword" Type="System.Object" />
        <Parameter Name="readOnlyRecommended" Type="System.Object" />
        <Parameter Name="createBackup" Type="System.Object" />
        <Parameter Name="sharingPassword" Type="System.Object" />
        <Parameter Name="fileFormat" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="filename">保存的文件的名称。 可以包含完整路径；否则，Microsoft Office Excel 将文件保存在当前文件夹中。</param>
        <param name="password">工作簿的密码，区分大小写。 如果省略此参数，则无需使用密码即可取消保护工作簿。 否则，必须指定密码才能取消保护工作簿。</param>
        <param name="writeResPassword">文件的写保护密码。 如果保存文件时指定了密码，但打开文件时没有提供密码，则该文件以只读方式打开。</param>
        <param name="readOnlyRecommended">如果为 <see langword="true" />，则在打开该文件时显示一条消息，建议以只读方式打开该文件。</param>
        <param name="createBackup">如果为 <see langword="true" />，则创建备份文件。</param>
        <param name="sharingPassword">要用来保护文件共享的密码。</param>
        <param name="fileFormat">一个指示文件格式的字符串。</param>
        <summary>保存工作簿，并进行共享保护。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用结合大写字母和小写字母、数字和符号的强密码。 弱密码不会混合使用这些元素。 例如, "Y6dh! et5" 是一个强密码, 而 "House27" 是弱密码。 使用可以记住的强密码, 这样就无需将其记下。  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectStructure">
      <MemberSignature Language="C#" Value="public bool ProtectStructure { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ProtectStructure" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.ProtectStructure" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示工作簿中的表的顺序是否受保护。</summary>
        <value>如果工作簿中的表的顺序受保护，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Protect%2A>方法来保护工作簿和工作簿窗口的结构, 但不指定密码保护。 然后, 该示例检查<xref:Microsoft.Office.Tools.Excel.WorkbookBase.ProtectStructure%2A>和<xref:Microsoft.Office.Tools.Excel.WorkbookBase.ProtectWindows%2A>属性的值以验证是否设置了此保护。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#30](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#30)]
 [!code-vb[Trin_ExcelWorkBook#30](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#30)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectWindows">
      <MemberSignature Language="C#" Value="public bool ProtectWindows { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ProtectWindows" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.ProtectWindows" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示工作簿窗口是否受保护。</summary>
        <value>如果工作簿窗口受保护，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Protect%2A>方法来保护工作簿和工作簿窗口的结构, 但不指定密码保护。 然后, 该示例检查<xref:Microsoft.Office.Tools.Excel.WorkbookBase.ProtectStructure%2A>和<xref:Microsoft.Office.Tools.Excel.WorkbookBase.ProtectWindows%2A>属性的值以验证是否设置了此保护。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#30](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#30)]
 [!code-vb[Trin_ExcelWorkBook#30](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#30)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PublishObjects">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.PublishObjects PublishObjects { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.PublishObjects PublishObjects" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.PublishObjects" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.PublishObjects</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:Microsoft.Office.Interop.Excel.PublishObjects" /> 集合。</summary>
        <value><see cref="T:Microsoft.Office.Interop.Excel.PublishObjects" /> 集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.PublishObjects%2A>属性将活动工作簿中的所有静态<xref:Microsoft.Office.Interop.Excel.PublishObject?displayProperty=fullName>项发布到网页上。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#31](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#31)]
 [!code-vb[Trin_ExcelWorkBook#31](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#31)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PurgeChangeHistoryNow">
      <MemberSignature Language="C#" Value="public void PurgeChangeHistoryNow (int days, object sharingPassword);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PurgeChangeHistoryNow(int32 days, object sharingPassword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.PurgeChangeHistoryNow(System.Int32,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="days" Type="System.Int32" />
        <Parameter Name="sharingPassword" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="days">更改日志中的更改要保留的天数。</param>
        <param name="sharingPassword">取消对工作簿的共享保护的密码。 如果工作簿的共享保护使用了密码，但省略了此参数，则会提示用户输入密码。</param>
        <summary>从工作簿的更改日志中移除项。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public bool ReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReadOnly" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.ReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示是否已用只读方式打开工作簿。</summary>
        <value>如果已用只读方式打开工作簿，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性仅用于链接到 SharePoint 站点的列表。  
  
   
  
## Examples  
 如果<xref:Microsoft.Office.Tools.Excel.WorkbookBase.ReadOnlyRecommended%2A>属性<xref:Microsoft.Office.Tools.Excel.WorkbookBase.ChangeFileAccess%2A>为`true` 且<xref:Microsoft.Office.Tools.Excel.WorkbookBase.ReadOnly%2A>属性为`false`, 则下面的代码示例将显示一条消息, 然后提示用户通过调用方法将文件访问设置为只读。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#102](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#102)]
 [!code-vb[Trin_ExcelWorkBook#102](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#102)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadOnlyRecommended">
      <MemberSignature Language="C#" Value="public bool ReadOnlyRecommended { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReadOnlyRecommended" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.ReadOnlyRecommended" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示工作簿是否保存为建议的只读方式。</summary>
        <value>如果工作簿保存为建议的只读方式，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当你打开以只读方式保存的工作簿时, Microsoft Office Excel 将显示一条消息, 建议以只读方式打开工作簿。  
  
 <xref:Microsoft.Office.Tools.Excel.WorkbookBase.SaveAs%2A>使用方法可更改此属性。  
  
   
  
## Examples  
 如果<xref:Microsoft.Office.Tools.Excel.WorkbookBase.ReadOnlyRecommended%2A>属性<xref:Microsoft.Office.Tools.Excel.WorkbookBase.ChangeFileAccess%2A>为`true` 且<xref:Microsoft.Office.Tools.Excel.WorkbookBase.ReadOnly%2A>属性为`false`, 则下面的代码示例将显示一个消息框, 然后提示用户通过调用方法将文件访问设置为只读。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#102](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#102)]
 [!code-vb[Trin_ExcelWorkBook#102](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#102)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RecheckSmartTags">
      <MemberSignature Language="C#" Value="public void RecheckSmartTags ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RecheckSmartTags() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.RecheckSmartTags" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RefreshAll">
      <MemberSignature Language="C#" Value="public void RefreshAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RefreshAll() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.RefreshAll" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>刷新工作簿中的所有外部数据范围和数据透视表。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 属性设置为`true`的对象将在后台进行刷新。 <xref:Microsoft.Office.Interop.Excel.PivotCache.BackgroundQuery%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RejectAllChanges">
      <MemberSignature Language="C#" Value="public void RejectAllChanges (object when, object who, object where);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RejectAllChanges(object when, object who, object where) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.RejectAllChanges(System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="when" Type="System.Object" />
        <Parameter Name="who" Type="System.Object" />
        <Parameter Name="where" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="when"><see cref="T:Microsoft.Office.Interop.Excel.XlHighlightChangesTime" /> 值中的一个，指定要拒绝的更改是在何时进行的。</param>
        <param name="who">一个标识进行要拒绝的更改的人的字符串。 可以是“Everyone”、“Everyone but Me”或共享工作簿的用户名之一。</param>
        <param name="where">指定要拒绝的更改的位置的 A1 样式范围引用。</param>
        <summary>拒绝共享工作簿中的所有更改。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReloadAs">
      <MemberSignature Language="C#" Value="public void ReloadAs (Microsoft.Office.Core.MsoEncoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReloadAs(valuetype Microsoft.Office.Core.MsoEncoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.ReloadAs(Microsoft.Office.Core.MsoEncoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encoding" Type="Microsoft.Office.Core.MsoEncoding" />
      </Parameters>
      <Docs>
        <param name="encoding"><see langword="Microsoft.Office.Core.MsoEncoding" /> 值之一。 要应用于工作簿的编码。</param>
        <summary>使用指定文档编码重新加载基于 HTML 文档的工作簿。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.ReloadAs%2A>方法通过使用西方文档编码重新加载工作簿。 此示例假设当前工作簿基于一个 HTML 文档。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#121](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#121)]
 [!code-vb[Trin_ExcelWorkBook#121](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#121)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveCustomization">
      <MemberSignature Language="C#" Value="public void RemoveCustomization ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveCustomization() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.RemoveCustomization" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从工作簿移除使用 Visual Studio 的 Office 开发工具创建的自定义。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法通过执行以下任务来删除自定义:  
  
-   它从工作`_AssemblyName`簿`_AssemblyLocation`中删除和自定义属性。 有关更多信息，请参见 [Custom Document Properties Overview](/visualstudio/vsto/custom-document-properties-overview)。  
  
-   它删除工作簿中的缓存数据。 有关缓存数据的详细信息, 请参阅[缓存数据](/visualstudio/vsto/caching-data)。  
  
 <xref:System.UnauthorizedAccessException>如果工作簿受到保护, 此方法可能会引发。 在调用此方法之前, 您应从工作簿中移除任何保护。  
  
 ]]></format>
        </remarks>
        <exception cref="T:Microsoft.Office.Tools.CannotRemoveCustomizationException">无法从工作簿移除自定义文档属性或缓存数据。</exception>
        <exception cref="T:System.UnauthorizedAccessException">文档是受保护的。</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveDocumentInformation">
      <MemberSignature Language="C#" Value="public void RemoveDocumentInformation (Microsoft.Office.Interop.Excel.XlRemoveDocInfoType removeDocInfoType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveDocumentInformation(valuetype Microsoft.Office.Interop.Excel.XlRemoveDocInfoType removeDocInfoType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.RemoveDocumentInformation(Microsoft.Office.Interop.Excel.XlRemoveDocInfoType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="removeDocInfoType" Type="Microsoft.Office.Interop.Excel.XlRemoveDocInfoType" />
      </Parameters>
      <Docs>
        <param name="removeDocInfoType"><see langword="Microsoft.Office.Interop.Excel.XlRemoveDocInfoType" /> 值之一，指定要移除的信息的类型。</param>
        <summary>从工作簿中移除指定类型的所有信息。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例将删除当前工作簿的所有工作簿属性。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkbook_Additional#6](~/snippets/csharp/VS_Snippets_OfficeSP/trin_excelworkbook_additional/cs/ThisWorkbook.cs#6)]
 [!code-vb[Trin_ExcelWorkbook_Additional#6](~/snippets/visualbasic/VS_Snippets_OfficeSP/trin_excelworkbook_additional/vb/ThisWorkbook.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemovePersonalInformation">
      <MemberSignature Language="C#" Value="public bool RemovePersonalInformation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RemovePersonalInformation" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.RemovePersonalInformation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示个人信息是否可从工作簿中移除。</summary>
        <value>如果个人信息可从工作簿中移除，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveUser">
      <MemberSignature Language="C#" Value="public void RemoveUser (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveUser(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.RemoveUser(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">用户索引。</param>
        <summary>从共享工作簿断开指定用户的连接。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reply">
      <MemberSignature Language="C#" Value="public void Reply ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reply() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.Reply" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplyAll">
      <MemberSignature Language="C#" Value="public void ReplyAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReplyAll() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.ReplyAll" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplyWithChanges">
      <MemberSignature Language="C#" Value="public void ReplyWithChanges (object showMessage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReplyWithChanges(object showMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.ReplyWithChanges(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="showMessage" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="showMessage">如果为 <see langword="true" />，则显示该邮件；如果为 <see langword="false" />，则不显示该邮件。</param>
        <summary>向已发送审阅的工作簿的作者发送电子邮件，通知他或她审阅者已完成对该工作簿的审阅。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Tools.Excel.WorkbookBase.SendForReview%2A>使用方法可启动工作簿的协作评审。 如果在不属于合作审核循环的工作簿上执行方法,则会引发异常。<xref:Microsoft.Office.Tools.Excel.WorkbookBase.ReplyWithChanges%2A>  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.ReplyWithChanges%2A>方法将通知发送到审阅工作簿的作者, 审阅者在显示该电子邮件后已完成审阅。 此示例假设活动工作簿是协作审阅周期的一部分。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#123](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#123)]
 [!code-vb[Trin_ExcelWorkBook#123](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#123)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RequestService">
      <MemberSignature Language="C#" Value="protected virtual object RequestService (Guid serviceGuid);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object RequestService(valuetype System.Guid serviceGuid) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.RequestService(System.Guid)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Tools.Excel.IWorkbookExtension.RequestService(System.Guid)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceGuid" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="serviceGuid">一个标识 <see langword="Microsoft.Office.Core.IRibbonExtensibility" /> 接口的 <see cref="T:System.Guid" />。</param>
        <summary>返回在文档级自定义项中实现 <c>Microsoft.Office.Core.IRibbonExtensibility</c> 接口的对象。</summary>
        <returns>文档级自定义项中实现 <c>Microsoft.Office.Core.IRibbonExtensibility</c> 接口的对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果要通过创建自己的`Microsoft.Office.Core.IRibbonExtensibility`接口实现或通过向项目添加**功能区 (XML)** 项来自定义工作簿的功能区, 请重写此方法。  
  
 如果通过将 "**功能区 (可视化设计器)** " 项添加到项目自定义功能区, 则 Visual Studio 会替代此方法。 有关详细信息, 请参阅[功能区概述](/visualstudio/vsto/ribbon-overview)和[功能区设计器](/visualstudio/vsto/ribbon-designer)。  
  
 如果重写此方法, 请检查`serviceGuid`参数的值以确定`Microsoft.Office.Core.IRibbonExtensibility`是否正在请求接口, 然后返回实现该接口的对象。 打开工作簿后, [!INCLUDE[vsto_runtime](~/includes/vsto-runtime-md.md)]调用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.RequestService%2A>, 并将返回值发送到 Microsoft Office Excel。 有关`Microsoft.Office.Core.IRibbonExtensibility`接口的详细信息, 请参阅 Microsoft Office 文档中的[microsoft.office.core.iribbonextensibility 对象](HV10096517)。  
  
 您也可以重写<xref:Microsoft.Office.Tools.Excel.WorkbookBase.CreateRibbonExtensibilityObject%2A>方法, 而不是<xref:Microsoft.Office.Tools.Excel.WorkbookBase.RequestService%2A>重写方法。 有关更多信息，请参见 [Ribbon XML](/visualstudio/vsto/ribbon-xml)。  
  
> [!NOTE]
>  `Microsoft.Office.Core.IRibbonExtensibility`是 Microsoft Office 提供的多个接口 (也称为*扩展性接口*) 之一。 但是, 这是可在 Excel 文档级自定义项中实现的唯一接口。 可以在应用程序级外接程序中实现其他扩展性接口。有关详细信息，请参阅 [Customizing UI Features By Using Extensibility Interfaces](/visualstudio/vsto/customizing-ui-features-by-using-extensibility-interfaces)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Research">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Research Research { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Research Research" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Research" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Research</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个表示工作簿的信息检索服务的对象。</summary>
        <value>一个<c></c>表示工作簿的信息检索服务的 web.config 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例访问`Microsoft.Office.Interop.Word.Research`文档的对象, 以设置在转换服务中使用的默认语言对。 它将 "英语 (美国)" 设置为要转换的源文本的语言, 将日语设置为要将文本转换为的语言。 默认翻译语言显示在 Excel 的 "**调查**" 窗格中的 "**翻译**" 部分下。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_Excelworkbook_Additional#28](~/snippets/csharp/VS_Snippets_OfficeSP/trin_excelworkbook_additional/cs/ThisWorkbook.cs#28)]
 [!code-vb[Trin_Excelworkbook_Additional#28](~/snippets/visualbasic/VS_Snippets_OfficeSP/trin_excelworkbook_additional/vb/ThisWorkbook.vb#28)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetColors">
      <MemberSignature Language="C#" Value="public void ResetColors ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetColors() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.ResetColors" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将调色板重置为默认颜色。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RevisionNumber">
      <MemberSignature Language="C#" Value="public int RevisionNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RevisionNumber" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.RevisionNumber" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取工作簿作为共享列表打开期间的保存次数。 如果工作簿以独占模式打开，则此属性返回 0（零）。</summary>
        <value>工作簿作为共享列表打开期间的保存次数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性仅在保存工作簿的本地副本时进行更新, 而不是在保存远程副本时更新。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Route">
      <MemberSignature Language="C#" Value="public void Route ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Route() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.Route" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Routed">
      <MemberSignature Language="C#" Value="public bool Routed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Routed" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Routed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RoutingSlip">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.RoutingSlip RoutingSlip { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.RoutingSlip RoutingSlip" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.RoutingSlip" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.RoutingSlip</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RowsetComplete">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_RowsetCompleteEventHandler RowsetComplete;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_RowsetCompleteEventHandler RowsetComplete" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.RowsetComplete" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_RowsetCompleteEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当用户在记录集中导航或对 OLAP 数据透视表调用行集合操作时发生。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RunAutoMacros">
      <MemberSignature Language="C#" Value="public void RunAutoMacros (Microsoft.Office.Interop.Excel.XlRunAutoMacro which);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RunAutoMacros(valuetype Microsoft.Office.Interop.Excel.XlRunAutoMacro which) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.RunAutoMacros(Microsoft.Office.Interop.Excel.XlRunAutoMacro)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="which" Type="Microsoft.Office.Interop.Excel.XlRunAutoMacro" />
      </Parameters>
      <Docs>
        <param name="which"><see cref="T:Microsoft.Office.Interop.Excel.XlRunAutoMacro" /> 值之一。</param>
        <summary>运行附加到工作簿的 Auto_Open、Auto_Close、Auto_Activate 或 Auto_Deactivate 宏。 包含此方法是为了向后兼容。 应使用 Open、Close、Activate 和 Deactivate 事件代替这些宏。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.RunAutoMacros%2A>方法来运行 Auto_Activate 宏。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#124](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#124)]
 [!code-vb[Trin_ExcelWorkBook#124](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#124)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.Save" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>保存对工作簿所做的更改。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 首次保存工作簿时, 请使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SaveAs%2A>方法指定文件的名称。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveAs">
      <MemberSignature Language="C#" Value="public void SaveAs (object filename, object fileFormat, object password, object writeResPassword, object readOnlyRecommended, object createBackup, Microsoft.Office.Interop.Excel.XlSaveAsAccessMode accessMode, object conflictResolution, object addToMru, object textCodepage, object textVisualLayout, object local);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SaveAs(object filename, object fileFormat, object password, object writeResPassword, object readOnlyRecommended, object createBackup, valuetype Microsoft.Office.Interop.Excel.XlSaveAsAccessMode accessMode, object conflictResolution, object addToMru, object textCodepage, object textVisualLayout, object local) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.SaveAs(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,Microsoft.Office.Interop.Excel.XlSaveAsAccessMode,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.Object" />
        <Parameter Name="fileFormat" Type="System.Object" />
        <Parameter Name="password" Type="System.Object" />
        <Parameter Name="writeResPassword" Type="System.Object" />
        <Parameter Name="readOnlyRecommended" Type="System.Object" />
        <Parameter Name="createBackup" Type="System.Object" />
        <Parameter Name="accessMode" Type="Microsoft.Office.Interop.Excel.XlSaveAsAccessMode" />
        <Parameter Name="conflictResolution" Type="System.Object" />
        <Parameter Name="addToMru" Type="System.Object" />
        <Parameter Name="textCodepage" Type="System.Object" />
        <Parameter Name="textVisualLayout" Type="System.Object" />
        <Parameter Name="local" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="filename">要保存的文件的名称。 可以包含完整路径；否则，Microsoft Office Excel 将文件保存在当前文件夹中。</param>
        <param name="fileFormat"><see cref="T:Microsoft.Office.Interop.Excel.XlFileFormat" /> 值之一，指定保存文件时要使用的文件格式。 对于现有文件，默认格式为最后一种指定文件格式；对于新文件，默认格式为所用 Excel 版本的格式。</param>
        <param name="password">一个区分大小写的字符串（不超过 15 个字符），指示为文件指定的保护密码。</param>
        <param name="writeResPassword">文件的写保护密码。 如果保存文件时指定了密码，但打开文件时没有提供密码，则该文件以只读方式打开。</param>
        <param name="readOnlyRecommended">如果为 <see langword="true" />，则在打开该文件时显示一条消息，建议以只读方式打开该文件。</param>
        <param name="createBackup">如果为 <see langword="true" />，则创建备份文件。</param>
        <param name="accessMode"><see cref="T:Microsoft.Office.Interop.Excel.XlSaveAsAccessMode" /> 值之一。</param>
        <param name="conflictResolution"><see cref="T:Microsoft.Office.Interop.Excel.XlSaveConflictResolution" /> 值之一。</param>
        <param name="addToMru">如果为 <see langword="true" />，则将工作簿添加到最近使用的文件列表中。 默认值为 <see langword="false" />。</param>
        <param name="textCodepage">不在美国使用英语 Excel。</param>
        <param name="textVisualLayout">不在美国使用英语 Excel。</param>
        <param name="local">如果为 <see langword="true" />，则按照 Excel（包括控制面板设置）的语言保存文件。 如果为 <see langword="false" />（默认值），则按照 Visual Basic for Applications (VBA) 的语言保存文件。</param>
        <summary>在另一个文件中保存对工作簿所做的更改。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Visual Studio 不支持将工作簿另存为共享工作簿。  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例检查<xref:Microsoft.Office.Tools.Excel.WorkbookBase.FileFormat%2A>属性的值, 以确定工作簿是否为正常工作簿。 如果工作簿是普通工作簿, 则该示例调用<xref:Microsoft.Office.Tools.Excel.Worksheet.SaveAs%2A>方法以将工作簿重新保存为 XML 电子表格, 该电子表格的名称`XMLCopy.xlsx`位于<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Path%2A>属性指定的路径中。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#125](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#125)]
 [!code-vb[Trin_ExcelWorkBook#125](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#125)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveAsXMLData">
      <MemberSignature Language="C#" Value="public void SaveAsXMLData (string filename, Microsoft.Office.Interop.Excel.XmlMap map);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SaveAsXMLData(string filename, class Microsoft.Office.Interop.Excel.XmlMap map) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.SaveAsXMLData(System.String,Microsoft.Office.Interop.Excel.XmlMap)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
        <Parameter Name="map" Type="Microsoft.Office.Interop.Excel.XmlMap" />
      </Parameters>
      <Docs>
        <param name="filename">要保存的文件的名称。 可以包含完整路径；否则，Microsoft Office Excel 将文件保存在当前文件夹中。</param>
        <param name="map"><see cref="T:Microsoft.Office.Interop.Excel.XmlMap" /> 对象。 要应用于数据的架构映射。</param>
        <summary>将映射到指定 XML 架构映射的数据导出到 XML 数据文件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 Excel 无法使用指定的架构映射导出数据, 则此方法将导致运行时错误。 若要检查 Excel 是否可以使用指定的架构映射来导出数据, 请<xref:Microsoft.Office.Interop.Excel.XmlMap.IsExportable%2A>使用属性。  
  
   
  
## Examples  
 下面的代码示例演示如何从工作簿导出 XML 数据。 此示例将中的 XML 数据<xref:System.Data.DataSet>导入到当前工作簿中的。 <xref:Microsoft.Office.Interop.Excel.XmlMap> 然后, 该示例调用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SaveAsXMLData%2A>方法, 将<xref:Microsoft.Office.Interop.Excel.XmlMap>中的数据导出到 XML 文件中。 调用方法时<xref:Microsoft.Office.Tools.Excel.WorkbookBase.BeforeXmlExport> , 事件处理程序会报告 xml 正在导出, <xref:Microsoft.Office.Tools.Excel.WorkbookBase.AfterXmlExport>事件处理程序会报告 xml 是否已成功导出。 <xref:Microsoft.Office.Tools.Excel.WorkbookBase.SaveAsXMLData%2A>  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#203](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#203)]
 [!code-vb[Trin_ExcelWorkBook#203](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#203)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveCopyAs">
      <MemberSignature Language="C#" Value="public void SaveCopyAs (object filename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SaveCopyAs(object filename) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.SaveCopyAs(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="filename">指定副本的文件名。</param>
        <summary>将工作簿的副本保存到文件中，但不修改内存中打开的工作簿。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SaveCopyAs%2A>方法保存当前工作簿的副本。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#126](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#126)]
 [!code-vb[Trin_ExcelWorkBook#126](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#126)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Saved">
      <MemberSignature Language="C#" Value="public bool Saved { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Saved" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Saved" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示工作簿自上次保存以来是否进行了更改。</summary>
        <value>如果工作簿自上次保存以来进行了更改，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果从未保存过工作簿, 则其<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Path%2A>属性返回空字符串 ("")。  
  
 如果要在不保存修改`true`的工作簿的情况下关闭修改后的工作簿, 则可以将此属性设置为。  
  
   
  
## Examples  
 下面的代码示例演示了一个<xref:Microsoft.Office.Tools.Excel.WorkbookBase.BeforeClose>事件的处理程序, 该处理程序提示用户保存更改, 而不保存更改, 或者如果自上次保存后对工作簿进行了更改, 则取消关闭操作。 如果用户未保存更改, 则将工作簿<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Saved%2A>的属性设置为`true` , 以便 Microsoft Office Excel 在关闭操作继续时不会提示用户保存工作簿。 如果用户取消了关闭操作, 则`Cancel` <xref:Microsoft.Office.Interop.Excel.WorkbookEvents_BeforeCloseEventHandler>事件处理程序的参数将设置为`true` , 以便 Microsoft Office Excel 不会关闭工作簿。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#205](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#205)]
 [!code-vb[Trin_ExcelWorkBook#205](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#205)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveLinkValues">
      <MemberSignature Language="C#" Value="public bool SaveLinkValues { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SaveLinkValues" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.SaveLinkValues" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示 Microsoft Office Excel 是否将外部链接值与工作簿一起保存。</summary>
        <value>如果 Excel 将外部链接值与工作簿一起保存，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="sblt">
      <MemberSignature Language="C#" Value="public void sblt (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void sblt(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.sblt(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SendFaxOverInternet">
      <MemberSignature Language="C#" Value="public void SendFaxOverInternet (object recipients, object subject, object showMessage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendFaxOverInternet(object recipients, object subject, object showMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.SendFaxOverInternet(System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="recipients" Type="System.Object" />
        <Parameter Name="subject" Type="System.Object" />
        <Parameter Name="showMessage" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="recipients">要向其发送传真的收件人的传真号码和电子邮件地址。 用分号分隔多个收件人。</param>
        <param name="subject">传真文档的主题行。</param>
        <param name="showMessage">如果为 <see langword="true" />，则在发送传真邮件前显示该邮件；如果为 <see langword="false" />，则发送传真但不显示传真邮件。</param>
        <summary>将工作簿中的活动工作表作为传真发送给指定收件人。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此方法要求在用户的计算机上启用传真服务。  
  
 用于在`Recipients`参数中指定传真号码的格式`recipientsfaxnumber@usersfaxprovider`为或`recipientsname@recipientsfaxnumber`。 你可以使用以下注册表路径访问用户的传真提供程序信息:  
  
 `HKEY_CURRENT_USER\Software\Microsoft\Office\11.0\Common\Services\Fax`  
  
 使用此注册表路径中的 FaxAddress 项的值来确定用于接收方的格式。  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SendFaxOverInternet%2A>方法以传真的形式发送当前工作簿, 并在发送传真邮件前显示它。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#127](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#127)]
 [!code-vb[Trin_ExcelWorkBook#127](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#127)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendForReview">
      <MemberSignature Language="C#" Value="public void SendForReview (object recipients, object subject, object showMessage, object includeAttachment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendForReview(object recipients, object subject, object showMessage, object includeAttachment) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.SendForReview(System.Object,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="recipients" Type="System.Object" />
        <Parameter Name="subject" Type="System.Object" />
        <Parameter Name="showMessage" Type="System.Object" />
        <Parameter Name="includeAttachment" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="recipients">邮件收件人。 这些收件人可以是电子邮件电话簿中未解析的名称和别名，或完整的电子邮件地址。 用分号 (;) 分隔多个收件人。 如果留空且 <c>ShowMessage</c> 为 <see langword="false" />，则会接收一条错误消息，且不会发送邮件。</param>
        <param name="subject">邮件的主题。 如果留空，主题为：请审阅“<c>filename</c>”。</param>
        <param name="showMessage">一个值，指示该方法执行时是否应显示邮件。 默认值为 <see langword="true" />。 如果设置为 <see langword="false" />，则邮件会自动发送给收件人，而不首先向发件人显示邮件。</param>
        <param name="includeAttachment">一个值，指示邮件是否应包含附件或到服务器位置的链接。 默认值为 <see langword="true" />。 如果设置为 <see langword="false" />，则必须将文档存储在共享位置。</param>
        <summary>在电子邮件中将工作簿发送给指定收件人进行审阅。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法启动协作审阅循环。 <xref:Microsoft.Office.Tools.Excel.WorkbookBase.EndReview%2A>使用方法结束审阅周期。  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SendForReview%2A>方法将电子邮件中的工作簿发送给两个收件人。 电子邮件将具有默认的 "主题" 行, 并将该工作簿包含为附件。 此示例假设收件人名称解析为有效电子邮件地址。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#128](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#128)]
 [!code-vb[Trin_ExcelWorkBook#128](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#128)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendMail">
      <MemberSignature Language="C#" Value="public void SendMail (object recipients, object subject, object returnReceipt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendMail(object recipients, object subject, object returnReceipt) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.SendMail(System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="recipients" Type="System.Object" />
        <Parameter Name="subject" Type="System.Object" />
        <Parameter Name="returnReceipt" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="recipients">以文本格式指定收件人姓名，或以文本字符串数组的格式指定收件人（如果有多个）。 必须至少指定一个收件人，所有收件人都以“To recipient”的格式添加。</param>
        <param name="subject">指定邮件的主题。 如果省略此参数，则使用文档名称。</param>
        <param name="returnReceipt">如果为 <see langword="true" />，则请求回执。 如果为 <see langword="false" />，则不请求回执。 默认值为 <see langword="false" />。</param>
        <summary>使用安装的邮件系统发送工作簿。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SendMail%2A>方法将电子邮件中的工作簿发送给单个收件人。 该电子邮件将包含 "请查看" 主题, 并且不会请求回执。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#129](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#129)]
 [!code-vb[Trin_ExcelWorkBook#129](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#129)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendMailer">
      <MemberSignature Language="C#" Value="public void SendMailer (object fileFormat, Microsoft.Office.Interop.Excel.XlPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendMailer(object fileFormat, valuetype Microsoft.Office.Interop.Excel.XlPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.SendMailer(System.Object,Microsoft.Office.Interop.Excel.XlPriority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileFormat" Type="System.Object" />
        <Parameter Name="priority" Type="Microsoft.Office.Interop.Excel.XlPriority" />
      </Parameters>
      <Docs>
        <param name="fileFormat">To be added.</param>
        <param name="priority">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ServerPolicy">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Core.ServerPolicy ServerPolicy { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Core.ServerPolicy ServerPolicy" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.ServerPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Core.ServerPolicy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个对象，该对象表示为运行 Microsoft Office SharePoint Server 的服务器上存储的工作簿指定的策略。</summary>
        <value>一个<c>ServerPolicy</c>对象, 它表示为存储在运行 SharePoint server 的服务器上的工作簿指定的策略。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下面的代码示例检索与当前工作簿关联的信息管理策略, 并显示策略名称、说明和语句。 若要运行此示例, 您必须将工作簿发布到 Microsoft Office 的 Sharepoint Server 站点并在站点中定义信息管理策略。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_Excelworkbook_Additional#29](~/snippets/csharp/VS_Snippets_OfficeSP/trin_excelworkbook_additional/cs/ThisWorkbook.cs#29)]
 [!code-vb[Trin_Excelworkbook_Additional#29](~/snippets/visualbasic/VS_Snippets_OfficeSP/trin_excelworkbook_additional/vb/ThisWorkbook.vb#29)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ServerViewableItems">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.ServerViewableItems ServerViewableItems { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.ServerViewableItems ServerViewableItems" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.ServerViewableItems" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.ServerViewableItems</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个对象，该对象可用于与 Microsoft Office SharePoint Server 服务器上显示的工作簿中的已发布对象列表进行交互。</summary>
        <value>一个<c>ServerViewableItems</c>对象, 可用于与服务器上显示的工作簿中的已发布对象列表进行交互。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性返回工作簿中的项的集合, 您可以将这些项发布到 Excel Services。 只有此集合中的对象才会显示在服务器上。 默认情况下, 将显示整个工作簿 (包括所有工作表)。  
  
 每个<xref:Microsoft.Office.Interop.Excel.ServerViewableItems?displayProperty=fullName>工作簿只能存在一个对象。 此集合不能按名称编制索引, 因为无法保证在服务器上标记为可查看的对象的名称是唯一的。  
  
 在 Excel 用户界面的 " **Excel Services 选项**" 对话框中, 您可以查看在服务器上标记为 "可查看" 的对象集合。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="set_Colors">
      <MemberSignature Language="C#" Value="public void set_Colors (object index, object rHS);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void set_Colors(object index, object rHS) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.set_Colors(System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Object" />
        <Parameter Name="rHS" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <param name="rHS">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLinkOnData">
      <MemberSignature Language="C#" Value="public void SetLinkOnData (string name, object procedure);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetLinkOnData(string name, object procedure) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.SetLinkOnData(System.String,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="procedure" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">DDE/OLE 链接的名称（和从 <see cref="M:Microsoft.Office.Tools.Excel.WorkbookBase.LinkSources(System.Object)" /> 方法返回的一样）。</param>
        <param name="procedure">更新链接时要运行的过程的名称。 这可以是 Microsoft Office Excel 4.0 宏或 Visual Basic 过程。 将此参数设置为空字符串 ("") 可指示在更新链接时不应运行任何过程。</param>
        <summary>设置每次更新 DDE 链接时运行的过程的名称。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例获取当前工作簿中所有 DDE 链接的集合, 然后使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SetLinkOnData%2A>方法运行一个在更新其中一个链接时名为`UPDATE_MACRO`的宏。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#130](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#130)]
 [!code-vb[Trin_ExcelWorkBook#130](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#130)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPasswordEncryptionOptions">
      <MemberSignature Language="C#" Value="public void SetPasswordEncryptionOptions (object passwordEncryptionProvider, object passwordEncryptionAlgorithm, object passwordEncryptionKeyLength, object passwordEncryptionFileProperties);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetPasswordEncryptionOptions(object passwordEncryptionProvider, object passwordEncryptionAlgorithm, object passwordEncryptionKeyLength, object passwordEncryptionFileProperties) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.SetPasswordEncryptionOptions(System.Object,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="passwordEncryptionProvider" Type="System.Object" />
        <Parameter Name="passwordEncryptionAlgorithm" Type="System.Object" />
        <Parameter Name="passwordEncryptionKeyLength" Type="System.Object" />
        <Parameter Name="passwordEncryptionFileProperties" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="passwordEncryptionProvider">加密提供程序的字符串，区分大小写。</param>
        <param name="passwordEncryptionAlgorithm">算法短名称的区分大小写的字符串（例如“RC4”）。</param>
        <param name="passwordEncryptionKeyLength">加密密钥长度，为 8 的倍数（40 或更大）。</param>
        <param name="passwordEncryptionFileProperties">如果为 <see langword="true" />（默认值），则加密文件属性。</param>
        <summary>设置使用密码加密工作簿的选项。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `PasswordEncryptionProvider`、和参数`PasswordEncryptionKeyLength`不是相互独立的。 `PasswordEncryptionAlgorithm` 选定的加密提供程序限制了可以选择的算法集和密钥长度。  
  
 `PasswordEncryptionKeyLength`对于参数, 密钥长度范围没有内在限制。 范围由加密服务提供程序确定, 该提供程序还确定加密算法。  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例检查<xref:Microsoft.Office.Tools.Excel.WorkbookBase.HasPassword%2A>属性的值, 以确定工作簿是否受密码保护。 如果工作簿不受密码保护, 则该示例将<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Password%2A>属性设置为从用户输入获得的密码, 然后<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SetPasswordEncryptionOptions%2A>调用方法来设置加密算法, 设置密钥长度, 设置加密提供程序的名称,和启用文件属性加密。 然后<xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionProvider%2A>, 该示例在工作表<xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionAlgorithm%2A> <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionKeyLength%2A> <xref:Microsoft.Office.Tools.Excel.WorkbookBase.PasswordEncryptionFileProperties%2A> 中`Sheet1`显示、、和属性的值。 此示例假定方法`GetPasswordFromUserInput`是在其他地方定义的。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#131](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#131)]
 [!code-vb[Trin_ExcelWorkBook#131](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#131)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SharedWorkspace">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Core.SharedWorkspace SharedWorkspace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Core.SharedWorkspace SharedWorkspace" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.SharedWorkspace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Core.SharedWorkspace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <c>Microsoft.Office.Core.SharedWorkspace</c>，它表示工作簿所在的文档工作区。</summary>
        <value>一个<c>SharedWorkspace</c> , 它表示工作簿所在的文档工作区。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SharedWorkspace%2A>属性来确定当前工作簿是否为文档工作区的一部分。 如果工作簿是文档工作区的一部分, 则该示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Sync%2A>属性来显示上次更改文档的用户。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#38](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#38)]
 [!code-vb[Trin_ExcelWorkBook#38](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#38)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SheetActivate">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_SheetActivateEventHandler SheetActivate;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_SheetActivateEventHandler SheetActivate" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.SheetActivate" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_SheetActivateEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>包含它仅为了向后兼容。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SheetBeforeDoubleClick">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_SheetBeforeDoubleClickEventHandler SheetBeforeDoubleClick;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_SheetBeforeDoubleClickEventHandler SheetBeforeDoubleClick" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.SheetBeforeDoubleClick" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_SheetBeforeDoubleClickEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在双击任意工作表之后，默认的双击操作之前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此事件不会在图表工作表上发生。  
  
   
  
## Examples  
 下面的代码示例演示<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SheetBeforeDoubleClick>事件的处理程序。 事件处理程序通知用户不允许对工作表进行双击, 然后将`Cancel` <xref:Microsoft.Office.Interop.Excel.WorkbookEvents_SheetBeforeDoubleClickEventHandler>事件处理程序的参数设置为`true` , 以便 Microsoft Office Excel 取消双击操作。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#215](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#215)]
 [!code-vb[Trin_ExcelWorkBook#215](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#215)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SheetBeforeRightClick">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_SheetBeforeRightClickEventHandler SheetBeforeRightClick;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_SheetBeforeRightClickEventHandler SheetBeforeRightClick" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.SheetBeforeRightClick" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_SheetBeforeRightClickEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在右击任意工作表之后，默认的右击操作之前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此事件不会在图表工作表上发生。  
  
   
  
## Examples  
 下面的代码示例演示<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SheetBeforeRightClick>事件的处理程序。 事件处理程序通知用户: 对于工作表不允许右键单击, 然后将`Cancel` <xref:Microsoft.Office.Interop.Excel.WorkbookEvents_SheetBeforeRightClickEventHandler>事件处理程序的参数设置为`true` , 以便 Microsoft Office Excel 取消右键单击操作。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#216](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#216)]
 [!code-vb[Trin_ExcelWorkBook#216](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#216)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SheetCalculate">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_SheetCalculateEventHandler SheetCalculate;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_SheetCalculateEventHandler SheetCalculate" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.SheetCalculate" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_SheetCalculateEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在重新计算任何工作表后或将任何更改的数据绘制在图表上后发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SheetCalculate>事件的处理程序。 该事件处理程序显示正在计算的工作表的名称。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#217](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#217)]
 [!code-vb[Trin_ExcelWorkBook#217](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#217)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SheetChange">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_SheetChangeEventHandler SheetChange;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_SheetChangeEventHandler SheetChange" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.SheetChange" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_SheetChangeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在用户或外部链接更改任何工作表中的单元格时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此事件不会在图表工作表上发生。  
  
   
  
## Examples  
 下面的代码示例演示<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SheetChange>事件的处理程序。 事件处理程序显示工作表的名称和已更改的单元格范围。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#218](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#218)]
 [!code-vb[Trin_ExcelWorkBook#218](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#218)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SheetDeactivate">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_SheetDeactivateEventHandler SheetDeactivate;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_SheetDeactivateEventHandler SheetDeactivate" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.SheetDeactivate" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_SheetDeactivateEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>包含它仅为了向后兼容。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SheetFollowHyperlink">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_SheetFollowHyperlinkEventHandler SheetFollowHyperlink;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_SheetFollowHyperlinkEventHandler SheetFollowHyperlink" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.SheetFollowHyperlink" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_SheetFollowHyperlinkEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在单击工作簿中的任何超链接时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SheetFollowHyperlink>事件的处理程序。 事件处理程序保留当前工作簿中已单击的所有超链接的列表, 以及<xref:System.Windows.Forms.ListBox>控件中包含这些超链接的工作表的名称。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#220](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#220)]
 [!code-vb[Trin_ExcelWorkBook#220](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#220)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SheetPivotTableAfterValueChange">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_SheetPivotTableAfterValueChangeEventHandler SheetPivotTableAfterValueChange;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_SheetPivotTableAfterValueChangeEventHandler SheetPivotTableAfterValueChange" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.SheetPivotTableAfterValueChange" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_SheetPivotTableAfterValueChangeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在对数据透视表内的单元格或单元格范围进行编辑或重新计算（针对包含公式的单元格）后发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在<xref:Microsoft.Office.Tools.Excel.Workbook.SheetPivotTableAfterValueChange>编辑或重新计算单元格以外的任何情况下, 事件不会发生。 例如, 如果对数据透视表进行刷新、排序、筛选或深化, 则不会发生这种情况, 即使这些操作移动单元格并且可能从 OLAP 数据源检索新值也是如此。  
  
> [!NOTE]
>  此事件显示在面向的[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]Excel 2007 项目中的 IntelliSense 中。 但是, 在 Excel 2007 项目中不能使用此事件。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MissingMemberException">此事件在 Excel 2007 项目中使用。</exception>
      </Docs>
    </Member>
    <Member MemberName="SheetPivotTableBeforeAllocateChanges">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_SheetPivotTableBeforeAllocateChangesEventHandler SheetPivotTableBeforeAllocateChanges;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_SheetPivotTableBeforeAllocateChangesEventHandler SheetPivotTableBeforeAllocateChanges" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.SheetPivotTableBeforeAllocateChanges" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_SheetPivotTableBeforeAllocateChangesEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在将更改应用于数据透视表之前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Tools.Excel.WorkbookBase.SheetPivotTableBeforeAllocateChanges>事件在 Excel 执行 UPDATE CUBE 语句之前立即发生, 以将所有更改应用于数据透视表的 OLAP 数据源, 并在用户选择在用户界面中应用更改之后立即发生。  
  
> [!NOTE]
>  此事件显示在面向的[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]Excel 2007 项目中的 IntelliSense 中。 但是, 在 Excel 2007 项目中不能使用此事件。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MissingMemberException">此事件在 Excel 2007 项目中使用。</exception>
      </Docs>
    </Member>
    <Member MemberName="SheetPivotTableBeforeCommitChanges">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_SheetPivotTableBeforeCommitChangesEventHandler SheetPivotTableBeforeCommitChanges;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_SheetPivotTableBeforeCommitChangesEventHandler SheetPivotTableBeforeCommitChanges" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.SheetPivotTableBeforeCommitChanges" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_SheetPivotTableBeforeCommitChangesEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在针对 OLAP 数据源提交数据透视表的更改之前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SheetPivotTableBeforeCommitChanges>事件在 Excel 针对数据透视表的 OLAP 数据源执行 COMMIT TRANSACTION 之前发生, 并在用户选择保存整个数据透视表的更改之后立即发生。  
  
> [!NOTE]
>  此事件显示在面向的[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]Excel 2007 项目中的 IntelliSense 中。 但是, 在 Excel 2007 项目中不能使用此事件。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MissingMemberException">此事件在 Excel 2007 项目中使用。</exception>
      </Docs>
    </Member>
    <Member MemberName="SheetPivotTableBeforeDiscardChanges">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_SheetPivotTableBeforeDiscardChangesEventHandler SheetPivotTableBeforeDiscardChanges;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_SheetPivotTableBeforeDiscardChangesEventHandler SheetPivotTableBeforeDiscardChanges" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.SheetPivotTableBeforeDiscardChanges" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_SheetPivotTableBeforeDiscardChangesEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在放弃对数据透视表的更改之前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果事务仍处于活动状态, 则此事件会在 Excel 对 OLAP 数据源执行 ROLLBACK TRANSACTION 语句之前立即发生, 如果事务仍处于活动状态, 则在用户选择放弃更改后放弃数据透视表中的所有编辑值。  
  
> [!NOTE]
>  此事件显示在面向的[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]Excel 2007 项目中的 IntelliSense 中。 但是, 在 Excel 2007 项目中不能使用此事件。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MissingMemberException">此事件在 Excel 2007 项目中使用。</exception>
      </Docs>
    </Member>
    <Member MemberName="SheetPivotTableChangeSync">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_SheetPivotTableChangeSyncEventHandler SheetPivotTableChangeSync;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_SheetPivotTableChangeSyncEventHandler SheetPivotTableChangeSync" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.SheetPivotTableChangeSync" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_SheetPivotTableChangeSyncEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在对数据透视表进行更改后发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SheetPivotTableChangeSync>对数据透视表进行大多数更改期间发生, 以便您可以编写代码来响应用户操作, 如清除、分组或刷新数据透视表中的项。  
  
> [!NOTE]
>  此事件显示在面向的[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]Excel 2007 项目中的 IntelliSense 中。 但是, 在 Excel 2007 项目中不能使用此事件。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MissingMemberException">此事件在 Excel 2007 项目中使用。</exception>
      </Docs>
    </Member>
    <Member MemberName="SheetPivotTableUpdate">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_SheetPivotTableUpdateEventHandler SheetPivotTableUpdate;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_SheetPivotTableUpdateEventHandler SheetPivotTableUpdate" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.SheetPivotTableUpdate" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_SheetPivotTableUpdateEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在更新数据透视表的工作表后发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SheetPivotTableUpdate>事件的处理程序。 更新数据透视表的工作表时, 事件处理程序将显示一条消息。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#221](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#221)]
 [!code-vb[Trin_ExcelWorkBook#221](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#221)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sheets">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Sheets Sheets { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Sheets Sheets" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Sheets" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Sheets</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Sheets" /> 集合，该集合表示工作簿中的所有工作表。</summary>
        <value><see cref="T:Microsoft.Office.Interop.Excel.Sheets" /> 集合，表示工作簿中的所有工作表。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 该集合包括工作簿中的工作表、图表、对话框表和宏表。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Sheets%2A>属性显示工作簿中的工作表数。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#34](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#34)]
 [!code-vb[Trin_ExcelWorkBook#34](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#34)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SheetSelectionChange">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_SheetSelectionChangeEventHandler SheetSelectionChange;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_SheetSelectionChangeEventHandler SheetSelectionChange" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.SheetSelectionChange" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_SheetSelectionChangeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>所选内容在任何工作表上更改时发生。 如果所选内容位于图表工作表上，则不发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SheetSelectionChange>事件的处理程序。 此事件处理程序在状态栏中显示所选范围的工作表名称和地址。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#222](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#222)]
 [!code-vb[Trin_ExcelWorkBook#222](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#222)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowConflictHistory">
      <MemberSignature Language="C#" Value="public bool ShowConflictHistory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowConflictHistory" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.ShowConflictHistory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示冲突历史记录工作表在作为共享列表打开的工作簿中是否可见。</summary>
        <value>如果冲突历史记录工作表在作为共享列表打开的工作簿中可见，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果工作簿未作为共享列表打开, 则此属性会失败。 若要确定工作簿是否作为共享列表打开, 请使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.MultiUserEditing%2A>属性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowPivotChartActiveFields">
      <MemberSignature Language="C#" Value="public bool ShowPivotChartActiveFields { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowPivotChartActiveFields" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.ShowPivotChartActiveFields" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示数据透视图筛选窗格是否可见。</summary>
        <value>如果数据透视图筛选窗格可见，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要显示 "数据透视图筛选器" 窗格, 请选择一个数据透视图对象。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowPivotTableFieldList">
      <MemberSignature Language="C#" Value="public bool ShowPivotTableFieldList { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowPivotTableFieldList" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.ShowPivotTableFieldList" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示数据透视表字段列表是否能够显示。</summary>
        <value>如果数据透视表字段列表能够显示，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Shutdown">
      <MemberSignature Language="C#" Value="public event EventHandler Shutdown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Shutdown" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.Shutdown" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在工作簿宿主项关闭时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 这是卸载<xref:Microsoft.Office.Tools.Excel.WorkbookBase> <xref:Microsoft.Office.Tools.Excel.WorkbookBase>类时要在类中调用的最后一个事件。 此事件用于任何其他清理。  
  
 在文档级自定义项中, 在工作簿宿主项关闭时将卸载程序集的应用程序域。  
  
 在应用程序级外接程序中, 工作簿宿主项关闭时不会卸载应用程序域。 此外, 基础工作簿对象不再可用。 若要在关闭工作簿后对其<xref:Microsoft.Office.Tools.Excel.WorkbookBase.BeforeClose>进行访问, 请改用。  
  
   
  
## Examples  
 下面的代码示例演示<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Shutdown>事件的处理程序。 此<xref:Microsoft.Office.Tools.Excel.WorkbookBase>事件处理程序在类卸载时显示一条消息。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#223](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#223)]
 [!code-vb[Trin_ExcelWorkBook#223](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#223)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Signatures">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Core.SignatureSet Signatures { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Core.SignatureSet Signatures" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Signatures" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Core.SignatureSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取工作簿的数字签名的集合。</summary>
        <value>一个<c>SignatureSet</c>集合, 包含工作簿的数字签名。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要对 Excel 工作簿进行数字签名并验证其中的其他签名, 需要 Microsoft CryptoAPI 和唯一的数字签名证书。 CryptoAPI 与 Microsoft Internet Explorer 4.01 或更高版本一起安装。 可以从证书颁发机构获取数字签名证书。  
  
   
  
## Examples  
 下面的代码示例获取附加到当前工作簿的签名数, 并向用户显示相应的消息。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_Excelworkbook_Additional#39](~/snippets/csharp/VS_Snippets_OfficeSP/trin_excelworkbook_additional/cs/ThisWorkbook.cs#39)]
 [!code-vb[Trin_Excelworkbook_Additional#39](~/snippets/visualbasic/VS_Snippets_OfficeSP/trin_excelworkbook_additional/vb/ThisWorkbook.vb#39)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Site">
      <MemberSignature Language="C#" Value="public System.ComponentModel.ISite Site { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISite Site" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Site" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.ComponentModel.IComponent.Site</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SlicerCaches">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.SlicerCaches SlicerCaches { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.SlicerCaches SlicerCaches" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.SlicerCaches" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.SlicerCaches</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取与工作簿关联的 <see cref="T:Microsoft.Office.Interop.Excel.SlicerCaches" /> 对象。</summary>
        <value>与工作簿关联的 <see cref="T:Microsoft.Office.Interop.Excel.SlicerCaches" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性显示在面向的[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]Excel 2007 项目中的 IntelliSense 中。 但是, 不能在 Excel 2007 项目中使用此属性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MissingMemberException">此属性用于 Excel 2007 项目。</exception>
      </Docs>
    </Member>
    <Member MemberName="SmartDocument">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Core.SmartDocument SmartDocument { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Core.SmartDocument SmartDocument" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.SmartDocument" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Core.SmartDocument</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个表示智能文档解决方案的设置的 <c>Microsoft.Office.Core.SmartDocument</c>。</summary>
        <value>一个表示智能文档解决方案的设置的<c>SmartDocument</c> 。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SmartDocument%2A>属性显示一个对话框, 该对话框允许用户选择要附加到文档的 XML 扩展包。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#35](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#35)]
 [!code-vb[Trin_ExcelWorkBook#35](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#35)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SmartTagOptions">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.SmartTagOptions SmartTagOptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.SmartTagOptions SmartTagOptions" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.SmartTagOptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.SmartTagOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Startup">
      <MemberSignature Language="C#" Value="public event EventHandler Startup;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Startup" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.Startup" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Styles">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Styles Styles { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Styles Styles" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Styles" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Styles</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Styles" /> 集合，该集合表示工作簿中的所有样式。</summary>
        <value><see cref="T:Microsoft.Office.Interop.Excel.Styles" /> 集合，表示工作簿中的所有样式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Styles%2A>属性调整工作簿中每个<xref:Microsoft.Office.Interop.Excel.Style?displayProperty=fullName>的属性, 包括文本换行、垂直和水平对齐以及隐藏公式。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#37](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#37)]
 [!code-vb[Trin_ExcelWorkBook#37](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#37)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Subject">
      <MemberSignature Language="C#" Value="public string Subject { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Subject" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Subject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sync">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Core.Sync Sync { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Core.Sync Sync" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Sync" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Core.Sync</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <c>Microsoft.Office.Core.Sync</c> 对象，该对象提供对属于文档工作区的文档的方法和属性的访问。</summary>
        <value>一个<c>Microsoft. .sync</c>对象, 它提供对属于文档工作区的文档的方法和属性的访问。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SharedWorkspace%2A>属性来确定当前工作簿是否为文档工作区的一部分。 如果工作簿是文档工作区的一部分, 则该示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Sync%2A>属性来显示上次更改文档的用户。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#38](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#38)]
 [!code-vb[Trin_ExcelWorkBook#38](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#38)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SyncEvent">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_SyncEventHandler SyncEvent;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_SyncEventHandler SyncEvent" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.SyncEvent" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_SyncEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在属于文档工作区的工作表的本地副本与服务器上的副本进行同步时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示<xref:Microsoft.Office.Tools.Excel.WorkbookBase.SyncEvent>事件的处理程序。 如果文档工作区中工作表的同步失败, 则该事件处理程序将显示一条消息。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#225](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#225)]
 [!code-vb[Trin_ExcelWorkBook#225](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#225)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TableStyles">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.TableStyles TableStyles { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.TableStyles TableStyles" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.TableStyles" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.TableStyles</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取工作簿中使用的表样式的集合。</summary>
        <value>一个<c>system.windows.forms.datagrid.tablestyles</c>集合, 其中包含在工作簿中使用的表样式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例将表的默认样式设置为`TableStyleDark11`, 这是<xref:Microsoft.Office.Tools.Excel.WorkbookBase.TableStyles%2A>集合中可用的样式。 然后, 该示例添加一个表以验证新的表样式。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_Excelworkbook_Additional#35](~/snippets/csharp/VS_Snippets_OfficeSP/trin_excelworkbook_additional/cs/ThisWorkbook.cs#35)]
 [!code-vb[Trin_Excelworkbook_Additional#35](~/snippets/visualbasic/VS_Snippets_OfficeSP/trin_excelworkbook_additional/vb/ThisWorkbook.vb#35)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置包含有关工作簿的数据的对象。</summary>
        <value>一个对象，包含有关工作簿的数据。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Tools.Excel.WorkbookBase.Tag%2A>属性的常见用途是存储与工作簿密切关联的数据。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TemplateRemoveExtData">
      <MemberSignature Language="C#" Value="public bool TemplateRemoveExtData { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TemplateRemoveExtData" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.TemplateRemoveExtData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示在将工作簿保存为模板时是否移除外部数据引用。</summary>
        <value>如果在将工作簿保存为模板时移除外部数据引用，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Theme">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Core.OfficeTheme Theme { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Core.OfficeTheme Theme" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Theme" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Core.OfficeTheme</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取应用于工作簿的主题。</summary>
        <value>一个<c>OfficeTheme</c> , 表示应用于工作簿的主题。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例检索当前工作簿的主题。 然后, 该示例显示在工作簿主题的字体方案中找到的主要字体和次要字体的名称。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_Excelworkbook_Additional#30](~/snippets/csharp/VS_Snippets_OfficeSP/trin_excelworkbook_additional/cs/ThisWorkbook.cs#30)]
 [!code-vb[Trin_Excelworkbook_Additional#30](~/snippets/visualbasic/VS_Snippets_OfficeSP/trin_excelworkbook_additional/vb/ThisWorkbook.vb#30)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Title">
      <MemberSignature Language="C#" Value="public string Title { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Title" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Title" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToggleFormsDesign">
      <MemberSignature Language="C#" Value="public void ToggleFormsDesign ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ToggleFormsDesign() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.ToggleFormsDesign" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将 Microsoft Office Excel 切换进和切换出设计模式。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unprotect">
      <MemberSignature Language="C#" Value="public void Unprotect (object password);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Unprotect(object password) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.Unprotect(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="password" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="password">用于取消保护工作簿的密码，区分大小写。 如果工作簿未使用密码保护，则忽略此参数。 如果对使用密码保护的工作簿省略了此参数，则该方法会失败。</param>
        <summary>从工作簿中移除保护。 如果工作簿不受保护，则此方法无效。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果忘记了密码, 则无法取消对工作簿的保护。 最好将密码及其对应文档名的列表保存在安全的位置。  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Protect%2A>方法来保护工作簿和工作簿窗口的结构, 但不指定密码保护。 然后, 该示例通过使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Unprotect%2A>方法提示用户取消保护工作簿。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#133](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#133)]
 [!code-vb[Trin_ExcelWorkBook#133](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#133)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnprotectDocument">
      <MemberSignature Language="C#" Value="protected virtual void UnprotectDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void UnprotectDocument() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.UnprotectDocument" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Tools.Excel.IWorkbookExtension.UnprotectDocument</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>由 [!INCLUDE[vsto_runtime](~/includes/vsto-runtime-md.md)] 调用，以便可从工作簿移除密码保护，并能保存缓存数据。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果工作簿是使用密码保护的, 则在 Excel 文档级项目中重写此方法, 它包含在运行时可能更改的缓存数据。 在此方法的实现中, 使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Unprotect%2A>方法暂时取消保护工作簿。  
  
 默认情况下, 保存工作簿时, 对受密码保护的工作簿中的缓存数据所做的更改将不会保留。 若要保存对缓存数据所做的更改, 必须在项目中重写以下方法:  
  
-   <xref:Microsoft.Office.Tools.Excel.WorkbookBase.UnprotectDocument%2A>。 保存工作簿时, 将[!INCLUDE[vsto_runtime](~/includes/vsto-runtime-md.md)]调用此方法。 将代码添加到暂时取消对工作簿的工作的此方法中。 这样, 就可以保存对缓存数据所做的更改。  
  
-   <xref:Microsoft.Office.Tools.Excel.WorkbookBase.ProtectDocument%2A>。 保存工作簿后, 将[!INCLUDE[vsto_runtime](~/includes/vsto-runtime-md.md)]调用此方法。 将代码添加到此方法, 以便对工作簿重新应用保护。  
  
 有关详细信息，请参阅[如何：在受密码保护的文档](/visualstudio/vsto/how-to-cache-data-in-a-password-protected-document)中缓存数据。  
  
   
  
## Examples  
 下面的代码示例演示如何重写<xref:Microsoft.Office.Tools.Excel.WorkbookBase.UnprotectDocument%2A>方法以暂时取消对工作簿的保护, 以便保存对缓存数据所做的更改。 该示例首先保存当前<xref:Microsoft.Office.Tools.Excel.WorkbookBase.ProtectStructure%2A>的和<xref:Microsoft.Office.Tools.Excel.WorkbookBase.ProtectWindows%2A>值, 以便在稍后的<xref:Microsoft.Office.Tools.Excel.WorkbookBase.ProtectDocument%2A>方法中可以重新应用相同的保护类型。 若要使用此代码, 请在 Excel `ThisWorkbook`文档级项目的类中运行它。 此代码假定密码存储在名为`securelyStoredPassword`的字段中。  
  
 [!code-csharp[Trin_CachedDataProtectedWorkbook#1](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_CachedDataProtectedWorkbook/CS/ThisWorkbook.cs#1)]
 [!code-vb[Trin_CachedDataProtectedWorkbook#1](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_CachedDataProtectedWorkbook/VB/ThisWorkbook.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnprotectSharing">
      <MemberSignature Language="C#" Value="public void UnprotectSharing (object sharingPassword);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnprotectSharing(object sharingPassword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.UnprotectSharing(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sharingPassword" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="sharingPassword">工作簿密码。</param>
        <summary>关闭共享保护并保存工作簿。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用结合大写字母和小写字母、数字和符号的强密码。 弱密码不会混合使用这些元素。 强密码:Y6dh!et5. 弱密码:House27. 使用可以记住的强密码, 这样就无需将其记下。  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateFromFile">
      <MemberSignature Language="C#" Value="public void UpdateFromFile ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateFromFile() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.UpdateFromFile" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>如果磁盘版本比内存中加载的工作簿副本更新，则从保存的工作簿磁盘版本更新只读工作簿。 如果自加载工作簿以来还未更改过磁盘副本，则不重新加载工作簿的内存副本。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当用户 A 以只读方式打开工作簿, 并且用户 B 以读/写方式打开时, 此方法非常有用。如果用户 B 在用户 A 仍打开工作簿的情况下将较新版本的工作簿保存到磁盘, 则用户 A 将无法在不关闭和重新打开工作簿的情况下获取更新后的副本, 因而将失去视图设置。 <xref:Microsoft.Office.Tools.Excel.WorkbookBase.UpdateFromFile%2A>方法更新磁盘文件中工作簿的内存中副本。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateLink">
      <MemberSignature Language="C#" Value="public void UpdateLink (object name, object type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateLink(object name, object type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.UpdateLink(System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Object" />
        <Parameter Name="type" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">要更新的 Excel 或 DDE/OLE 链接的名称（和从 <see cref="M:Microsoft.Office.Tools.Excel.WorkbookBase.LinkSources(System.Object)" /> 方法返回的一样）。</param>
        <param name="type"><see cref="T:Microsoft.Office.Interop.Excel.XlLinkType" /> 值之一。</param>
        <summary>更新 Microsoft Office Excel、DDE 或 OLE 链接（或多个链接）。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果在没有任何参数的情况下调用此方法, 则 Excel 默认为更新所有工作表链接。  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例创建一个指向 Excel 工作簿的外部链接, 然后使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.UpdateLink%2A>该方法更新链接。 此示例假定工作簿 Book2 位于 C 目录的根目录中。  
  
 [!code-csharp[Trin_ExcelWorkBook#134](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#134)]
 [!code-vb[Trin_ExcelWorkBook#134](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#134)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateLinks">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlUpdateLinks UpdateLinks { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlUpdateLinks UpdateLinks" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.UpdateLinks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlUpdateLinks</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示工作簿用于更新嵌入的 OLE 链接的设置。</summary>
        <value><see cref="T:Microsoft.Office.Interop.Excel.XlUpdateLinks" /> 值之一。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.UpdateLinks%2A>属性来显示如何在工作簿中更新嵌入的 OLE 链接。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#39](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#39)]
 [!code-vb[Trin_ExcelWorkBook#39](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#39)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateRemoteReferences">
      <MemberSignature Language="C#" Value="public bool UpdateRemoteReferences { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UpdateRemoteReferences" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.UpdateRemoteReferences" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示 Microsoft Office Excel 是否更新工作簿中的远程引用。</summary>
        <value>如果 Excel 更新工作簿中的远程引用，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UserControl">
      <MemberSignature Language="C#" Value="public bool UserControl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UserControl" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.UserControl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UserStatus">
      <MemberSignature Language="C#" Value="public object UserStatus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object UserStatus" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.UserStatus" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个二维数组（从 1 开始），该数组提供将工作簿打开为共享列表的每个用户的有关信息。</summary>
        <value>二维数组（从 1 开始），该数组提供将工作簿打开为共享列表的每个用户的有关信息。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 第二个维度的第一个元素是用户的名称, 第二个元素是用户最后打开工作簿时的日期和时间, 第三个元素是指示列表类型的数字 (1 表示独占, 2 表示共享)。  
  
 此属性不返回以只读方式打开指定工作簿的用户的相关信息。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VBASigned">
      <MemberSignature Language="C#" Value="public bool VBASigned { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool VBASigned" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.VBASigned" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示工作簿的 Visual Basic for Applications 项目是否已进行了数字签名。</summary>
        <value>如果工作簿的 Visual Basic for Applications 项目已进行了数字签名，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.VBASigned%2A>属性, 以便在尚未对工作簿的 Visual Basic for Applications 项目进行数字签名的情况下显示消息。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#41](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#41)]
 [!code-vb[Trin_ExcelWorkBook#41](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#41)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VBProject">
      <MemberSignature Language="C#" Value="public Microsoft.Vbe.Interop.VBProject VBProject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Vbe.Interop.VBProject VBProject" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.VBProject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Vbe.Interop.VBProject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取工作簿中的虚拟 <c>Microsoft.Vbe.Interop.VBProject</c> 项目。</summary>
        <value>位于工作簿中的虚拟<c>VBProject</c>项目。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性指的是 Visual Basic for Applications 项目, 而不是 Visual Basic 项目。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.VBProject%2A>属性显示工作簿的 Visual Basic for Applications 项目的名称。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#42](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#42)]
 [!code-vb[Trin_ExcelWorkBook#42](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#42)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VstoSmartTags">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Tools.SmartTagCollection VstoSmartTags { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Tools.SmartTagCollection VstoSmartTags" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.VstoSmartTags" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Tools.SmartTagCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取与工作簿关联的 <see cref="T:Microsoft.Office.Tools.SmartTagCollection" />。 [!INCLUDE[vsto_smart_tags](~/includes/vsto-smart-tags-md.md)]。</summary>
        <value>与工作簿关联的 <see cref="T:Microsoft.Office.Tools.SmartTagCollection" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例创建一个智能标记, 该标记在识别字词 "blue" 时将单元格的字体颜色设置为蓝色。 该示例通过使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.VstoSmartTags%2A>属性将智能标记添加到工作簿。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#49](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#49)]
 [!code-vb[Trin_ExcelWorkBook#49](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#49)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WebOptions">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.WebOptions WebOptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.WebOptions WebOptions" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.WebOptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WebOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:Microsoft.Office.Interop.Excel.WebOptions" /> 集合，该集合包含工作簿级特性，在将文档保存为网页或打开网页时 Microsoft Office Excel 将使用这些特性。</summary>
        <value><see cref="T:Microsoft.Office.Interop.Excel.WebOptions" /> 集合，包含工作簿级特性，在将文档保存为网页或打开网页时 Excel 将使用这些特性。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.WebOptions%2A>属性将可移植网络图形 (PNG) 作为输出格式启用, 使用指定的网页下载 Office Web 组件 (如果尚未安装), 并在文档作为网页保存。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#43](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#43)]
 [!code-vb[Trin_ExcelWorkBook#43](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#43)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WebPagePreview">
      <MemberSignature Language="C#" Value="public void WebPagePreview ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WebPagePreview() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.WebPagePreview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>显示与保存为网页效果相同的工作簿的预览。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowActivate">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_WindowActivateEventHandler WindowActivate;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_WindowActivateEventHandler WindowActivate" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.WindowActivate" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_WindowActivateEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在激活任何工作簿窗口时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示<xref:Microsoft.Office.Tools.Excel.WorkbookBase.WindowActivate>事件的处理程序。 事件处理程序可最大化已激活的工作簿窗口。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#226](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#226)]
 [!code-vb[Trin_ExcelWorkBook#226](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#226)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowDeactivate">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_WindowDeactivateEventHandler WindowDeactivate;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_WindowDeactivateEventHandler WindowDeactivate" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.WindowDeactivate" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_WindowDeactivateEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在停用任何工作簿窗口时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示<xref:Microsoft.Office.Tools.Excel.WorkbookBase.WindowDeactivate>事件的处理程序。 此事件处理程序可最大程度地减少已停用的工作簿窗口。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#227](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#227)]
 [!code-vb[Trin_ExcelWorkBook#227](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#227)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowResize">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.WorkbookEvents_WindowResizeEventHandler WindowResize;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.WorkbookEvents_WindowResizeEventHandler WindowResize" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorkbookBase.WindowResize" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.WorkbookEvents_WindowResizeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在调整任意工作簿窗口的大小时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示<xref:Microsoft.Office.Tools.Excel.WorkbookBase.WindowResize>事件的处理程序。 事件处理程序显示在已调整大小的工作簿窗口的标题栏中显示的名称。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#228](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#228)]
 [!code-vb[Trin_ExcelWorkBook#228](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#228)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Windows">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Windows Windows { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Windows Windows" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Windows" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Windows</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Windows" /> 集合，该集合表示工作簿中的所有窗口。</summary>
        <value><see cref="T:Microsoft.Office.Interop.Excel.Windows" /> 集合，表示工作簿中的所有窗口。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性返回可见窗口和隐藏窗口的集合。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Windows%2A>属性来显示公式、网格线和当前工作簿的轮廓。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#44](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#44)]
 [!code-vb[Trin_ExcelWorkBook#44](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#44)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Worksheets">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Sheets Worksheets { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Sheets Worksheets" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.Worksheets" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Sheets</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Sheets" /> 集合，该集合表示工作簿中的所有工作表。</summary>
        <value><see cref="T:Microsoft.Office.Interop.Excel.Sheets" /> 集合，表示工作簿中的所有工作表。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性不返回宏表、图表或对话框表。 <xref:Microsoft.Office.Tools.Excel.WorkbookBase.Sheets%2A>使用属性返回这些工作表以及工作表。 您还可以使用专用属性<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Excel4MacroSheets%2A>并<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Excel4IntlMacroSheets%2A> <xref:Microsoft.Office.Tools.Excel.WorkbookBase.Charts%2A>返回宏表, 并使用属性返回图表。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.Worksheets%2A>属性使当前工作簿中的第二个工作表不可见。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#45](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#45)]
 [!code-vb[Trin_ExcelWorkBook#45](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#45)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WritePassword">
      <MemberSignature Language="C#" Value="public string WritePassword { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string WritePassword" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.WritePassword" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置工作簿的写密码。</summary>
        <value>工作簿的写密码。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 该<xref:Microsoft.Office.Tools.Excel.WorkbookBase.WritePassword%2A>属性是可读的, 并返回 "> > * *"。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.WriteReserved%2A>属性来确定当前工作簿是否已被写保护。 如果工作簿不是写保留的, 则此方法会将<xref:Microsoft.Office.Tools.Excel.WorkbookBase.WritePassword%2A>属性设置为通过用户输入获得的密码。 否则, 该示例将使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.WriteReservedBy%2A>属性来显示将工作簿保存为 "写保留" 的用户的名称。 此示例假定存在一个名为`GetPasswordFromUserInput`的方法, 该方法从用户输入获取强密码。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#46](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#46)]
 [!code-vb[Trin_ExcelWorkBook#46](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#46)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteReserved">
      <MemberSignature Language="C#" Value="public bool WriteReserved { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool WriteReserved" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.WriteReserved" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示工作簿是否受写保护。</summary>
        <value>如果工作簿受写保护，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Tools.Excel.WorkbookBase.SaveAs%2A>使用方法可设置此属性。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.WriteReserved%2A>属性来确定当前工作簿是否已被写保护。 如果工作簿不是写保留的, 则此方法会将<xref:Microsoft.Office.Tools.Excel.WorkbookBase.WritePassword%2A>属性设置为通过用户输入获得的密码。 否则, 该示例将使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.WriteReservedBy%2A>属性来显示将工作簿保存为 "写保留" 的用户的名称。 此示例假定存在一个名为`GetPasswordFromUserInput`的方法, 该方法从用户输入获取强密码。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#46](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#46)]
 [!code-vb[Trin_ExcelWorkBook#46](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#46)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteReservedBy">
      <MemberSignature Language="C#" Value="public string WriteReservedBy { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string WriteReservedBy" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.WriteReservedBy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前具有工作簿的写权限的用户名。</summary>
        <value>当前具有工作簿的写权限的用户名。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.WriteReserved%2A>属性来确定当前工作簿是否已被写保护。 如果工作簿不是写保留的, 则此方法会将<xref:Microsoft.Office.Tools.Excel.WorkbookBase.WritePassword%2A>属性设置为通过用户输入获得的密码。 否则, 该示例将使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.WriteReservedBy%2A>属性来显示将工作簿保存为 "写保留" 的用户的名称。 此示例假定存在一个名为`GetPasswordFromUserInput`的方法, 该方法从用户输入获取强密码。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#46](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#46)]
 [!code-vb[Trin_ExcelWorkBook#46](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#46)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlImport">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlXmlImportResult XmlImport (string url, out Microsoft.Office.Interop.Excel.XmlMap importMap, object overwrite, object destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Microsoft.Office.Interop.Excel.XlXmlImportResult XmlImport(string url, [out] class Microsoft.Office.Interop.Excel.XmlMap&amp; importMap, object overwrite, object destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.XmlImport(System.String,Microsoft.Office.Interop.Excel.XmlMap@,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlXmlImportResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="importMap" Type="Microsoft.Office.Interop.Excel.XmlMap" RefType="out" />
        <Parameter Name="overwrite" Type="System.Object" />
        <Parameter Name="destination" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="url">到 XML 数据文件的统一资源定位符 (URL) 或统一命名约定 (UNC) 路径。</param>
        <param name="importMap">导入文件时应用的架构映射。</param>
        <param name="overwrite">如果未指定 <c>Destination</c> 参数的值，则此参数指定是否覆盖已映射到在 <c>ImportMap</c> 参数中指定的架构映射的数据。 设置为 <see langword="true" /> 可覆盖数据，设置为 <see langword="false" /> 可向现有数据追加新数据。 默认值为 <see langword="true" />。 如果已指定 <c>Destination</c> 参数的值，则此参数指定是否覆盖现有数据。 设置为 <see langword="true" /> 可覆盖现有数据，设置为 <see langword="false" /> 可在要执行数据覆盖时取消导入。 默认值为 <see langword="true" />。</param>
        <param name="destination">数据将导入指定的 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 中的新 XML 列表。</param>
        <summary>将 XML 数据文件导入当前工作簿。</summary>
        <returns><see cref="T:Microsoft.Office.Interop.Excel.XlXmlImportResult" /> 值之一。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果要将数据导入现有`Destination`映射, 请不要为该参数指定值。  
  
 以下条件将导致此方法生成运行时错误:  
  
-   指定的 XML 数据包含语法错误。  
  
-   导入进程已取消, 因为指定的数据无法放入工作表。  
  
 <xref:Microsoft.Office.Tools.Excel.WorkbookBase.XmlImportXml%2A>使用方法导入之前加载到内存中的 XML 数据。  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例<xref:Microsoft.Office.Interop.Excel.XmlMap>基于<xref:System.Data.DataSet>从生成的架构创建, 将写入<xref:System.Data.DataSet> xml 文件, 然后使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.XmlImport%2A>方法将 XML 文件中的数据写入工作表`Sheet1`中的范围内。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#135](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#135)]
 [!code-vb[Trin_ExcelWorkBook#135](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#135)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlImportXml">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlXmlImportResult XmlImportXml (string data, out Microsoft.Office.Interop.Excel.XmlMap importMap, object overwrite, object destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Microsoft.Office.Interop.Excel.XlXmlImportResult XmlImportXml(string data, [out] class Microsoft.Office.Interop.Excel.XmlMap&amp; importMap, object overwrite, object destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorkbookBase.XmlImportXml(System.String,Microsoft.Office.Interop.Excel.XmlMap@,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlXmlImportResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.String" />
        <Parameter Name="importMap" Type="Microsoft.Office.Interop.Excel.XmlMap" RefType="out" />
        <Parameter Name="overwrite" Type="System.Object" />
        <Parameter Name="destination" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data">要导入的数据。</param>
        <param name="importMap">导入文件时应用的架构映射。</param>
        <param name="overwrite">如果未指定 <c>Destination</c> 参数的值，则此参数指定是否覆盖已映射到在 <c>ImportMap</c> 参数中指定的架构映射的数据。 设置为 <see langword="true" /> 可覆盖数据，设置为 <see langword="false" /> 可向现有数据追加新数据。 默认值为 <see langword="true" />。 如果已指定 <c>Destination</c> 参数的值，则此参数指定是否覆盖现有数据。 设置为 <see langword="true" /> 可覆盖现有数据，设置为 <see langword="false" /> 可在要执行数据覆盖时取消导入。 默认值为 <see langword="true" />。</param>
        <param name="destination">数据将导入指定的 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 中的新 XML 列表。</param>
        <summary>导入先前加载到内存中的 XML 数据流。</summary>
        <returns><see cref="T:Microsoft.Office.Interop.Excel.XlXmlImportResult" /> 值之一。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果要将数据导入现有`Destination`映射, 请不要为该参数指定值。  
  
 以下条件将导致此方法生成运行时错误:  
  
-   指定的 XML 数据包含语法错误。  
  
-   导入进程已取消, 因为指定的数据无法放入工作表。  
  
 <xref:Microsoft.Office.Tools.Excel.WorkbookBase.XmlImport%2A>使用方法将 XML 数据文件导入到当前工作簿中。  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例演示如何将 XML 数据导入工作簿。 该示例创建一个<xref:System.Data.DataSet>客户名称, 并<xref:Microsoft.Office.Interop.Excel.XmlMap>基于的 XML <xref:Microsoft.Office.Tools.Excel.WorkbookBase.XmlMaps%2A>架构<xref:System.Data.DataSet>将添加到当前工作簿的集合中。 然后, 该示例调用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.XmlImportXml%2A>方法将数据导入工作表`Sheet1`。 调用方法时<xref:Microsoft.Office.Tools.Excel.WorkbookBase.BeforeXmlImport> , 事件处理程序会提示用户继续或取消导入 xml, <xref:Microsoft.Office.Tools.Excel.WorkbookBase.AfterXmlImport>事件处理程序会报告 xml 是否已成功导入。 <xref:Microsoft.Office.Tools.Excel.WorkbookBase.XmlImportXml%2A>  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#204](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#204)]
 [!code-vb[Trin_ExcelWorkBook#204](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#204)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlMaps">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XmlMaps XmlMaps { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.XmlMaps XmlMaps" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.XmlMaps" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XmlMaps</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.XmlMaps" /> 集合，该集合表示已添加到工作簿中的架构映射。</summary>
        <value><see cref="T:Microsoft.Office.Interop.Excel.XmlMaps" /> 集合，表示已添加到工作簿中的架构映射。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何将 XML 数据导入工作簿。 该示例创建一个<xref:System.Data.DataSet>客户名称, 并<xref:Microsoft.Office.Interop.Excel.XmlMap>基于的 XML <xref:Microsoft.Office.Tools.Excel.WorkbookBase.XmlMaps%2A>架构<xref:System.Data.DataSet>将添加到当前工作簿的集合中。 然后, 该示例调用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.XmlImportXml%2A>方法将数据导入工作表`Sheet1`。 调用方法时<xref:Microsoft.Office.Tools.Excel.WorkbookBase.BeforeXmlImport> , 事件处理程序会提示用户继续或取消导入 xml, <xref:Microsoft.Office.Tools.Excel.WorkbookBase.AfterXmlImport>事件处理程序会报告 xml 是否已成功导入。 <xref:Microsoft.Office.Tools.Excel.WorkbookBase.XmlImportXml%2A>  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#204](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#204)]
 [!code-vb[Trin_ExcelWorkBook#204](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#204)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlNamespaces">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XmlNamespaces XmlNamespaces { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.XmlNamespaces XmlNamespaces" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorkbookBase.XmlNamespaces" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XmlNamespaces</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.XmlNamespaces" /> 集合，该集合表示工作簿中包含的 XML 命名空间。</summary>
        <value><see cref="T:Microsoft.Office.Interop.Excel.XmlNamespaces" /> 集合，表示工作簿中包含的 XML 命名空间。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorkbookBase.XmlNamespaces%2A>属性将工作簿中每个<xref:Microsoft.Office.Interop.Excel.XmlNamespace>的统一资源标识符 (URI) 写入工作表`Sheet1`的 A 列。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook#47](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/CS/ThisWorkbook.cs#47)]
 [!code-vb[Trin_ExcelWorkBook#47](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkBook/VB/ThisWorkbook.vb#47)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
