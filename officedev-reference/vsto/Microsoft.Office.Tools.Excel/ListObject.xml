<Type Name="ListObject" FullName="Microsoft.Office.Tools.Excel.ListObject">
  <Metadata><Meta Name="ms.openlocfilehash" Value="99b191c7c97cf9f92fe85dc05fbe34cc074d9ada" /><Meta Name="ms.sourcegitcommit" Value="7439021cdeee6a9ef5d4640250701344f6cbba15" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="08/13/2019" /><Meta Name="ms.locfileid" Value="69004793" /></Metadata><TypeSignature Language="C#" Value="public interface ListObject : IDisposable, System.ComponentModel.IComponent, System.ComponentModel.ISupportInitialize, System.Windows.Forms.IBindableComponent" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ListObject implements class System.ComponentModel.IComponent, class System.ComponentModel.ISupportInitialize, class System.IDisposable, class System.Windows.Forms.IBindableComponent" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Tools.Excel.ListObject" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.IComponent</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Forms.IBindableComponent</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("48eb309a-698d-4d40-95af-d9d083e63d30")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件在一系列行和列中显示数据。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关更多信息，请参见 [ListObject Control](/visualstudio/vsto/listobject-control)。  
  
 [!INCLUDE[vsto_interface](~/includes/vsto-interface-md.md)]  
  
## <a name="usage"></a>用法  
 [!INCLUDE[vsto_net35mref](~/includes/vsto-net35mref-md.md)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="_Default">
      <MemberSignature Language="C#" Value="public string _Default { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string _Default" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject._Default" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Active">
      <MemberSignature Language="C#" Value="public bool Active { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Active" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.Active" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示工作表上的 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件是否处于活动状态；即，活动单元格是否位于 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件的范围内。</summary>
        <value>如果活动单元格位于 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件的范围内，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 由于`Activate` <xref:Microsoft.Office.Tools.Excel.ListObject>控件没有方法<xref:Microsoft.Office.Tools.Excel.ListObject> , 因此只能通过激活列表内的单元格范围来激活控件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AlternativeText">
      <MemberSignature Language="C#" Value="public string AlternativeText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AlternativeText" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.AlternativeText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置指定表的说明性（可选）文本字符串。</summary>
        <value>一个字符串，表示指定表的说明性（可选）文本字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Tools.Excel.ListObject.AlternativeText%2A>属性的值对应于 "**可选文本**" 对话框中的 "**标题**" 框的设置, 该对话框通过右键单击表, 指向 "**表**", 然后单击 "**备用文本**" 来显示。  
  
> [!NOTE]
>  此属性显示在面向的[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]Excel 2007 项目中的 IntelliSense 中。 但是, 不能在 Excel 2007 项目中使用此属性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MissingMemberException">此属性用于 Excel 2007 项目。</exception>
      </Docs>
    </Member>
    <Member MemberName="Application">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Application Application { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Application Application" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.Application" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Application</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个表示 Microsoft Office Excel 应用程序或 <see cref="T:Microsoft.Office.Interop.Excel.Application" /> 创建者的 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" />。</summary>
        <value>一个表示 <see cref="T:Microsoft.Office.Interop.Excel.Application" /> 创建者的 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例获取包含的<xref:Microsoft.Office.Tools.Excel.ListObject>应用程序的名称和版本, 并在消息框中显示信息。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelListObject#8](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#8)]
 [!code-vb[Trin_ExcelListObject#8](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoFilter">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.AutoFilter AutoFilter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.AutoFilter AutoFilter" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.AutoFilter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.AutoFilter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个筛选的表。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.AutoFilter" />，其中包含筛选的表。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例将添加<xref:Microsoft.Office.Tools.Excel.ListObject>到工作表中, 该工作表对应于 Excel 中的表。 然后, 该示例使用任意数据的两行来填充表, 并在表上指定一个筛选器, 筛选出其第一个列值不等于字符串值 "bb" 的所有行。 接下来, 该示例显示在表中找到的活动筛选器的数目。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_Excelworkbook_Additional#32](~/snippets/csharp/VS_Snippets_OfficeSP/trin_excelworkbook_additional/cs/Sheet3.cs#32)]
 [!code-vb[Trin_Excelworkbook_Additional#32](~/snippets/visualbasic/VS_Snippets_OfficeSP/trin_excelworkbook_additional/vb/Sheet3.vb#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoSelectRows">
      <MemberSignature Language="C#" Value="public bool AutoSelectRows { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoSelectRows" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.AutoSelectRows" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示在 <see cref="P:Microsoft.Office.Tools.Excel.ListObject.SelectedIndex" /> 发生更改时是否选择整行。</summary>
        <value>如果选择整行，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当此属性设置为<xref:Microsoft.Office.Tools.Excel.ListObject> `true`时, 将选择与对应的<xref:Microsoft.Office.Tools.Excel.ListObject.SelectedIndex%2A>控件用户界面中的整行。  
  
   
  
## Examples  
 下面的代码示例在当前<xref:Microsoft.Office.Tools.Excel.ListObject>工作表上创建一个。 它使用<xref:Microsoft.Office.Tools.Excel.ListObject.SelectedIndex%2A>和<xref:Microsoft.Office.Tools.Excel.ListObject.AutoSelectRows%2A>属性来选择第二行, 并指定在用户单击行时选择整行。 此代码示例还为事件创建了一个事件<xref:Microsoft.Office.Tools.Excel.ListObject.SelectedIndexChanged>处理程序, 该事件在每次选择新行时都会显示一个消息框。  
  
 此版本适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelListObject#2](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#2)]
 [!code-vb[Trin_ExcelListObject#2](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#2)]  
  
 此版本适用于应用程序级外接程序。  
  
 [!code-csharp[Trin_ExcelListObject_AppLevelAddIn#2](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject_AppLevelAddIn/CS/ThisAddIn.cs#2)]
 [!code-vb[Trin_ExcelListObject_AppLevelAddIn#2](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject_AppLevelAddIn/VB/ThisAddIn.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoSetDataBoundColumnHeaders">
      <MemberSignature Language="C#" Value="public bool AutoSetDataBoundColumnHeaders { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoSetDataBoundColumnHeaders" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.AutoSetDataBoundColumnHeaders" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值确定是否自动将列标题设置为与数据源相匹配。</summary>
        <value>如果自动设置列名，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当设置为`true`时, 此属性将导致<xref:Microsoft.Office.Tools.Excel.ListObject>控件中每列的列标题与数据源的相应列标题匹配。  
  
 如果将此属性设置为`true`, 则使用该工作表的人员将无法更改列标题。 如果更改了列标题, 则当用户将焦点移出标题单元格时, 它将还原为与数据源匹配。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeAddDataBoundRow">
      <MemberSignature Language="C#" Value="event Microsoft.Office.Tools.Excel.BeforeAddDataBoundRowEventHandler BeforeAddDataBoundRow;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Tools.Excel.BeforeAddDataBoundRowEventHandler BeforeAddDataBoundRow" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.ListObject.BeforeAddDataBoundRow" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Tools.Excel.BeforeAddDataBoundRowEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>恰好在尝试向绑定到数据的 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件添加新行之前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 仅当<xref:Microsoft.Office.Tools.Excel.ListObject>控件绑定到数据时, 才引发此事件。  
  
 仅当通过 Microsoft Office Excel 用户界面添加新行时, 才引发此事件。 以编程方式添加新行时, 不会引发此方法。  
  
 处理此事件以执行其他验证, 或取消添加行。  
  
   
  
## Examples  
 下面<xref:System.Data.DataTable>的代码示例创建<xref:Microsoft.Office.Tools.Excel.ListObject>和, <xref:System.Data.DataTable>并将绑定<xref:Microsoft.Office.Tools.Excel.ListObject>到。 然后, 创建一个<xref:Microsoft.Office.Tools.Excel.ListObject.BeforeAddDataBoundRow>事件处理程序。 若要测试该事件, 请<xref:Microsoft.Office.Tools.Excel.ListObject>在工作表1上手动向添加一个新行。 该事件处理程序将删除行并显示一条消息。  
  
 此版本适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelListObject#9](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#9)]
 [!code-vb[Trin_ExcelListObject#9](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#9)]  
  
 此版本适用于应用程序级外接程序。 若要使用此代码示例, 请`using System.Data;`在使用C#或`Imports System.Data`语句时添加指令 (如果使用的是 Visual Basic)。  
  
 [!code-csharp[Trin_ExcelListObject_AppLevelAddIn#9](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject_AppLevelAddIn/CS/ThisAddIn.cs#9)]
 [!code-vb[Trin_ExcelListObject_AppLevelAddIn#9](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject_AppLevelAddIn/VB/ThisAddIn.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeDoubleClick">
      <MemberSignature Language="C#" Value="event Microsoft.Office.Interop.Excel.DocEvents_BeforeDoubleClickEventHandler BeforeDoubleClick;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.DocEvents_BeforeDoubleClickEventHandler BeforeDoubleClick" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.ListObject.BeforeDoubleClick" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.DocEvents_BeforeDoubleClickEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在双击 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件时，但在默认双击操作之前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例创建一个<xref:Microsoft.Office.Tools.Excel.ListObject>和一个<xref:Microsoft.Office.Tools.Excel.ListObject.BeforeDoubleClick>事件处理程序。 双击时, 将显示一条消息, 指示<xref:Microsoft.Office.Tools.Excel.ListObject>是否已绑定到数据。 <xref:Microsoft.Office.Tools.Excel.ListObject>  
  
 此版本适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelListObject#10](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#10)]
 [!code-vb[Trin_ExcelListObject#10](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#10)]  
  
 此版本适用于应用程序级外接程序。  
  
 [!code-csharp[Trin_ExcelListObject_AppLevelAddIn#10](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject_AppLevelAddIn/CS/ThisAddIn.cs#10)]
 [!code-vb[Trin_ExcelListObject_AppLevelAddIn#10](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject_AppLevelAddIn/VB/ThisAddIn.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeRightClick">
      <MemberSignature Language="C#" Value="event Microsoft.Office.Interop.Excel.DocEvents_BeforeRightClickEventHandler BeforeRightClick;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.DocEvents_BeforeRightClickEventHandler BeforeRightClick" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.ListObject.BeforeRightClick" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.DocEvents_BeforeRightClickEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在右击 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件时，但在默认右击操作之前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例创建一个<xref:Microsoft.Office.Tools.Excel.ListObject>和一个<xref:Microsoft.Office.Tools.Excel.ListObject.BeforeRightClick>事件处理程序。 右键单击列表对象时, 会显示一条消息, 指示列表对象是否绑定到数据。  
  
 此版本适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelListObject#11](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#11)]
 [!code-vb[Trin_ExcelListObject#11](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#11)]  
  
 此版本适用于应用程序级外接程序。  
  
 [!code-csharp[Trin_ExcelListObject_AppLevelAddIn#11](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject_AppLevelAddIn/CS/ThisAddIn.cs#11)]
 [!code-vb[Trin_ExcelListObject_AppLevelAddIn#11](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject_AppLevelAddIn/VB/ThisAddIn.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingContextChanged">
      <MemberSignature Language="C#" Value="event EventHandler BindingContextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BindingContextChanged" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.ListObject.BindingContextChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="event Microsoft.Office.Tools.Excel.ListObjectChangeHandler Change;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Tools.Excel.ListObjectChangeHandler Change" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.ListObject.Change" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Tools.Excel.ListObjectChangeHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件中发生更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果编程修改或用户交互<xref:Microsoft.Office.Tools.Excel.ListObject>更改了控件, 则会引发此事件。  
  
 当在重新计算期间更改单元格时, 不会发生此事件。  
  
   
  
## Examples  
 下面的代码示例创建一个<xref:Microsoft.Office.Tools.Excel.ListObject>和一个<xref:Microsoft.Office.Tools.Excel.ListObject.Change>事件处理程序。 若要引发<xref:Microsoft.Office.Tools.Excel.ListObject.Change>事件, 请将文本添加到<xref:Microsoft.Office.Tools.Excel.ListObject>中的一个单元格, 然后按 enter。  
  
 此版本适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelListObject#12](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#12)]
 [!code-vb[Trin_ExcelListObject#12](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#12)]  
  
 此版本适用于应用程序级外接程序。  
  
 [!code-csharp[Trin_ExcelListObject_AppLevelAddIn#12](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject_AppLevelAddIn/CS/ThisAddIn.cs#12)]
 [!code-vb[Trin_ExcelListObject_AppLevelAddIn#12](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject_AppLevelAddIn/VB/ThisAddIn.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Comment">
      <MemberSignature Language="C#" Value="public string Comment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Comment" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.Comment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置与 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 关联的注释。</summary>
        <value>一个字符串，表示与 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 关联的注释。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Container">
      <MemberSignature Language="C#" Value="public System.ComponentModel.IContainer Container { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.IContainer Container" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.Container" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.IContainer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Creator">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlCreator Creator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlCreator Creator" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.Creator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlCreator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取在其中创建 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 的应用程序。</summary>
        <value>在其中创建 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 的应用程序。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果该对象是在 Microsoft Office Excel 中创建的, 则此属性返回字符串 x, 它等效于十六进制数5843454C 等效。  
  
   
  
## Examples  
 下面的代码示例创建一个<xref:Microsoft.Office.Tools.Excel.ListObject>并检查创建者代码是否与 Excel 匹配。 如果创建者代码匹配, 则代码将显示一个消息框。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelListObject#13](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#13)]
 [!code-vb[Trin_ExcelListObject#13](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataBindingFailure">
      <MemberSignature Language="C#" Value="event EventHandler DataBindingFailure;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DataBindingFailure" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.ListObject.DataBindingFailure" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当某个条件导致 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件的数据绑定失败时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 例如, 如果用户<xref:Microsoft.Office.Tools.Excel.ListObject>将控件放到已位于放置位置的另一个<xref:Microsoft.Office.Tools.Excel.ListObject>控件上, 则会出现失败的情况。 新控件的数据绑定失败, 控件引发此事件。  
  
   
  
## Examples  
 下面的代码示例创建一个<xref:Microsoft.Office.Tools.Excel.ListObject> , 并<xref:Microsoft.Office.Tools.Excel.ListObject.DataBindingFailure>为事件添加一个事件处理程序。 如果 list1 绑定到数据源, 但绑定失败, 则捕获事件, 并显示一条消息, 其中显示绑定的状态。  
  
 此版本适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelListObject#14](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#14)]
 [!code-vb[Trin_ExcelListObject#14](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#14)]  
  
 此版本适用于应用程序级外接程序。  
  
 [!code-csharp[Trin_ExcelListObject_AppLevelAddIn#14](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject_AppLevelAddIn/CS/ThisAddIn.cs#14)]
 [!code-vb[Trin_ExcelListObject_AppLevelAddIn#14](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject_AppLevelAddIn/VB/ThisAddIn.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataBodyRange">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range DataBodyRange { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range DataBodyRange" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.DataBodyRange" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，它表示包含标题行和插入行之间列表中数据区域的范围。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，表示包含标题行和插入行之间列表中数据区域的范围。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果控件没有, 则此属性返回`null`。 <xref:Microsoft.Office.Tools.Excel.ListObject.DataBodyRange%2A> <xref:Microsoft.Office.Tools.Excel.ListObject>  
  
   
  
## Examples  
 下面的代码示例创建一个<xref:Microsoft.Office.Tools.Excel.ListObject> , 然后显示可用于数据的行数。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelListObject#15](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#15)]
 [!code-vb[Trin_ExcelListObject#15](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataBoundFormat">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlRangeAutoFormat DataBoundFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlRangeAutoFormat DataBoundFormat" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.DataBoundFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlRangeAutoFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置数据绑定 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件的格式样式。</summary>
        <value><see cref="T:Microsoft.Office.Interop.Excel.XlRangeAutoFormat" /> 值之一。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 必须先将控件绑定到数据, 然后才能使用此属性。 <xref:Microsoft.Office.Tools.Excel.ListObject>  
  
 指定的格式应用于整个 list 对象, 包括稍后添加的行。  
  
 若要删除格式设置<xref:Microsoft.Office.Tools.Excel.ListObject.DataBoundFormat%2A> , <xref:Microsoft.Office.Interop.Excel.XlRangeAutoFormat.xlRangeAutoFormatNone>请将设置为。  
  
 用于<xref:Microsoft.Office.Tools.Excel.ListObject.DataBoundFormatSettings%2A>排除特定类型的格式设置, 如样式中的模式、字体或宽度。  
  
   
  
## Examples  
 下面<xref:System.Data.DataTable>的代码示例创建<xref:Microsoft.Office.Tools.Excel.ListObject>和, <xref:System.Data.DataTable>并将绑定<xref:Microsoft.Office.Tools.Excel.ListObject>到。 然后, 它使用<xref:Microsoft.Office.Interop.Excel.XlRangeAutoFormat>值来设置的<xref:Microsoft.Office.Tools.Excel.ListObject>格式。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelListObject#16](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#16)]
 [!code-vb[Trin_ExcelListObject#16](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#16)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataBoundFormatSettings">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Tools.Excel.FormatSettings DataBoundFormatSettings { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Tools.Excel.FormatSettings DataBoundFormatSettings" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.DataBoundFormatSettings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Tools.Excel.FormatSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要向 <see cref="T:Microsoft.Office.Tools.Excel.FormatSettings" /> 控件应用指定 <see cref="T:Microsoft.Office.Interop.Excel.XlRangeAutoFormat" /> 的哪个 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" />。</summary>
        <value><see cref="T:Microsoft.Office.Tools.Excel.FormatSettings" /> 值的按位组合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下, 将应用<xref:Microsoft.Office.Interop.Excel.XlRangeAutoFormat>样式中的所有信息。 但是, 可以删除特定项, 以便不会将样式应用于这些项。 这些项包括:  
  
-   数字  
  
-   字体  
  
-   对齐方式  
  
-   Border  
  
-   模式  
  
-   宽度  
  
 若要只应用所选样式<xref:Microsoft.Office.Tools.Excel.ListObject.DataBoundFormatSettings%2A> , 请<xref:Microsoft.Office.Tools.Excel.ListObject.DataBoundFormat%2A>在设置属性前设置。 <xref:Microsoft.Office.Tools.Excel.ListObject.DataBoundFormatSettings%2A>如果<xref:Microsoft.Office.Tools.Excel.ListObject.DataBoundFormat%2A>已设置, 则将不起作用。  
  
   
  
## Examples  
 下面<xref:System.Data.DataTable>的代码示例创建<xref:Microsoft.Office.Tools.Excel.ListObject>和, <xref:System.Data.DataTable>并将绑定<xref:Microsoft.Office.Tools.Excel.ListObject>到。 然后, 它将<xref:Microsoft.Office.Tools.Excel.FormatSettings>设置为应用<xref:Microsoft.Office.Tools.Excel.ListObject>到, 并使用<xref:Microsoft.Office.Interop.Excel.XlRangeAutoFormat>值提供格式。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelListObject#17](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#17)]
 [!code-vb[Trin_ExcelListObject#17](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataMember">
      <MemberSignature Language="C#" Value="public string DataMember { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataMember" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.DataMember" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置多成员数据源中要绑定到 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件的特定数据成员。</summary>
        <value>多成员数据源中的数据成员。 默认值为 <see cref="F:System.String.Empty" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果数据源只有一个成员, 则不需要。  
  
 使用属性指定多成员数据源中要绑定到控件的<xref:Microsoft.Office.Tools.Excel.ListObject>成员。 <xref:Microsoft.Office.Tools.Excel.ListObject.DataMember%2A> 例如, 如果在<xref:Microsoft.Office.Tools.Excel.ListObject.DataSource%2A>属性中指定了多个表的数据源, 请<xref:Microsoft.Office.Tools.Excel.ListObject.DataMember%2A>使用属性指定要绑定到<xref:Microsoft.Office.Tools.Excel.ListObject>控件的表。  
  
   
  
## Examples  
 下面的代码示例创建具有两个 <xref:System.Data.DataSet> 对象的 <xref:System.Data.DataTable> ，并使用数据填充其中一个表。 然后, 该代码设置<xref:Microsoft.Office.Tools.Excel.ListObject.DataSource%2A>的<xref:Microsoft.Office.Tools.Excel.ListObject.DataMember%2A> <xref:Microsoft.Office.Tools.Excel.ListObject>和属性以绑定到包含数据的表。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelListObject#18](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#18)]
 [!code-vb[Trin_ExcelListObject#18](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#18)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataMemberChanged">
      <MemberSignature Language="C#" Value="event EventHandler DataMemberChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DataMemberChanged" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.ListObject.DataMemberChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="P:Microsoft.Office.Tools.Excel.ListObject.DataMember" /> 属性的值更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果编程修改或用户交互<xref:Microsoft.Office.Tools.Excel.ListObject.DataMember%2A>更改了属性, 则会引发此事件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataSource">
      <MemberSignature Language="C#" Value="public object DataSource { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DataSource" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.DataSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置包含用于填充该控件中的项的值列表的源。</summary>
        <value>包含用于填充该控件中的项的值列表的源。 默认值为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在运行时, 使用<xref:Microsoft.Office.Tools.Excel.ListObject.SetDataBinding%2A>方法来<xref:Microsoft.Office.Tools.Excel.ListObject.DataSource%2A>设置和<xref:Microsoft.Office.Tools.Excel.ListObject.DataMember%2A>属性。  
  
 以下数据源有效:  
  
-   <xref:System.Data.DataTable>。  
  
-   <xref:System.Data.DataView>。  
  
-   <xref:System.Data.DataSet>。  
  
-   <xref:System.Data.DataViewManager>。  
  
-   实现 <xref:System.ComponentModel.IListSource> 接口的任意组件。  
  
-   实现 <xref:System.Collections.IList> 接口的任意组件。  
  
 有关数据源的详细信息, 请参阅类概述。<xref:System.Windows.Forms.Binding>  
  
 如果引用包含多个表或属性, 则必须<xref:Microsoft.Office.Tools.Excel.ListObject.DataMember%2A>将属性设置为指定要绑定到的表的字符串。 <xref:Microsoft.Office.Tools.Excel.ListObject.DataSource%2A> 例如, 如果<xref:Microsoft.Office.Tools.Excel.ListObject.DataSource%2A> <xref:System.Data.DataSet>为或<xref:System.Data.DataViewManager>包含三个名为 Customers、Orders 和 OrderDetails 的表, 则必须指定要绑定到的表。  
  
 如果将设置<xref:System.ComponentModel.IListSource> <xref:System.Collections.IList> <xref:Microsoft.Office.Tools.Excel.ListObject.DataSource%2A>为不实现接口的对象, 则将导致引发异常。  
  
   
  
## Examples  
 下面的代码示例创建具有两个 <xref:System.Data.DataSet> 对象的 <xref:System.Data.DataTable> ，并使用数据填充其中一个表。 然后, 该代码设置<xref:Microsoft.Office.Tools.Excel.ListObject.DataSource%2A>的<xref:Microsoft.Office.Tools.Excel.ListObject.DataMember%2A> <xref:Microsoft.Office.Tools.Excel.ListObject>和属性以绑定到包含数据的表。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelListObject#18](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#18)]
 [!code-vb[Trin_ExcelListObject#18](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#18)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataSourceChanged">
      <MemberSignature Language="C#" Value="event EventHandler DataSourceChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DataSourceChanged" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.ListObject.DataSourceChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="P:Microsoft.Office.Tools.Excel.ListObject.DataSource" /> 属性的值更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果编程修改或用户交互<xref:Microsoft.Office.Tools.Excel.ListObject.DataSource%2A>更改了属性, 则会引发此事件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultDataSourceUpdateMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataSourceUpdateMode DefaultDataSourceUpdateMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataSourceUpdateMode DefaultDataSourceUpdateMode" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.DefaultDataSourceUpdateMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataSourceUpdateMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置默认 <see cref="T:System.Windows.Forms.DataSourceUpdateMode" />。</summary>
        <value><see cref="T:System.Windows.Forms.DataSourceUpdateMode" /> 值之一。 默认值为 <see cref="F:System.Windows.Forms.DataSourceUpdateMode.Never" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果未<xref:System.Windows.Forms.Binding> 指定值<xref:System.Windows.Forms.Binding.DataSourceUpdateMode%2A>的情况下将添加到集合中,则使用此属性。<xref:System.Windows.Forms.IBindableComponent.DataBindings%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public void Delete ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Delete() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.ListObject.Delete" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>删除动态创建的 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件，清除工作表中的单元格数据，并将该控件从 <see cref="T:Microsoft.Office.Tools.Excel.ControlCollection" /> 中移除。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法只能与<xref:Microsoft.Office.Tools.Excel.ListObject>在运行时以编程方式创建的控件一起使用。 如果在设计时添加到文档的上<xref:Microsoft.Office.Tools.Excel.ListObject>调用此方法, 则会引发异常。  
  
 如果列表对象链接到 SharePoint 站点, 则删除该对象不会影响运行 Windows SharePoint Services 的服务器上的数据。 对本地列表对象所做的任何未提交的更改都不会发送到 SharePoint 列表。 (不会出现这些未提交更改丢失的警告。)  
  
   
  
## Examples  
 下面的代码示例在当前<xref:Microsoft.Office.Tools.Excel.ListObject>工作表上创建一个, 然后显示一个消息框, 询问用户是否<xref:Microsoft.Office.Tools.Excel.ListObject>删除。 如果用户接受, <xref:Microsoft.Office.Tools.Excel.ListObject.Delete%2A>则调用方法以<xref:Microsoft.Office.Tools.Excel.ListObject>删除。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelListObject#3](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#3)]
 [!code-vb[Trin_ExcelListObject#3](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Deselected">
      <MemberSignature Language="C#" Value="event Microsoft.Office.Interop.Excel.DocEvents_SelectionChangeEventHandler Deselected;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.DocEvents_SelectionChangeEventHandler Deselected" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.ListObject.Deselected" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.DocEvents_SelectionChangeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当所选内容从 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件移到 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件外部时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此事件仅在<xref:Microsoft.Office.Tools.Excel.ListObject>控件具有焦点时引发, 然后将焦点<xref:Microsoft.Office.Tools.Excel.ListObject>从控件传输出去。  
  
   
  
## Examples  
 下面的代码示例创建一个<xref:Microsoft.Office.Tools.Excel.ListObject>和一个<xref:Microsoft.Office.Tools.Excel.ListObject.Deselected>事件处理程序。 如果选择了, 然后选择了之外<xref:Microsoft.Office.Tools.Excel.ListObject>的对象, 则将显示一条消息, 指示所选内容已更改。 <xref:Microsoft.Office.Tools.Excel.ListObject>  
  
 此版本适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelListObject#19](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#19)]
 [!code-vb[Trin_ExcelListObject#19](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#19)]  
  
 此版本适用于应用程序级外接程序。  
  
 [!code-csharp[Trin_ExcelListObject_AppLevelAddIn#19](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject_AppLevelAddIn/CS/ThisAddIn.cs#19)]
 [!code-vb[Trin_ExcelListObject_AppLevelAddIn#19](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject_AppLevelAddIn/VB/ThisAddIn.vb#19)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Disconnect">
      <MemberSignature Language="C#" Value="public void Disconnect ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Disconnect() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.ListObject.Disconnect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件移除数据绑定。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法断开<xref:Microsoft.Office.Tools.Excel.ListObject>控件与数据源的连接, <xref:Microsoft.Office.Tools.Excel.ListObject.IsBinding%2A>将属性设置为<xref:Microsoft.Office.Tools.Excel.ListObject.DataSource%2A> false, 并重置和<xref:Microsoft.Office.Tools.Excel.ListObject.DataMember%2A>属性。 现有的<xref:Microsoft.Office.Tools.Excel.ListObject>数据仍保留在控件中。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public string DisplayName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.DisplayName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置显示名称。</summary>
        <value>一个字符串，表示 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 的显示名称。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayRightToLeft">
      <MemberSignature Language="C#" Value="public bool DisplayRightToLeft { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DisplayRightToLeft" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.DisplayRightToLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 是否从右向左（而非从左向右）显示。</summary>
        <value>如果 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 从右向左（而非从左向右）显示，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ErrorAddDataBoundRow">
      <MemberSignature Language="C#" Value="event Microsoft.Office.Tools.Excel.ErrorAddDataBoundRowEventHandler ErrorAddDataBoundRow;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Tools.Excel.ErrorAddDataBoundRowEventHandler ErrorAddDataBoundRow" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.ListObject.ErrorAddDataBoundRow" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Tools.Excel.ErrorAddDataBoundRowEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在用户尝试向数据绑定 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件添加行，但是该行无法添加时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 仅当<xref:Microsoft.Office.Tools.Excel.ListObject>控件绑定到数据时, 才引发此事件。  
  
 处理此事件以尝试更正可能的错误。  
  
   
  
## Examples  
 下面<xref:System.Data.DataTable>的代码示例创建<xref:Microsoft.Office.Tools.Excel.ListObject>和, <xref:System.Data.DataTable>并将绑定<xref:Microsoft.Office.Tools.Excel.ListObject>到。 然后, 创建一个<xref:Microsoft.Office.Tools.Excel.ListObject.ErrorAddDataBoundRow>事件处理程序。 若要测试事件, 请将新行手动添加到<xref:Microsoft.Office.Tools.Excel.ListObject> , 并输入姓氏 "更改" 和名字。 事件处理程序将显示一条消息。  
  
 此版本适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelListObject#20](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#20)]
 [!code-vb[Trin_ExcelListObject#20](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#20)]  
  
 此版本适用于应用程序级外接程序。 若要使用此代码示例, 请`using System.Data;`在使用C#或`Imports System.Data`语句时添加指令 (如果使用的是 Visual Basic)。  
  
 [!code-csharp[Trin_ExcelListObject_AppLevelAddIn#20](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject_AppLevelAddIn/CS/ThisAddIn.cs#20)]
 [!code-vb[Trin_ExcelListObject_AppLevelAddIn#20](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject_AppLevelAddIn/VB/ThisAddIn.vb#20)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExportToVisio">
      <MemberSignature Language="C#" Value="public void ExportToVisio ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExportToVisio() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.ListObject.ExportToVisio" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 导出到 Visio。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HeaderRowRange">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range HeaderRowRange { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range HeaderRowRange" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.HeaderRowRange" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个表示标题行范围的 <see cref="T:Microsoft.Office.Interop.Excel.Range" />。</summary>
        <value>一个表示标题行范围的 <see cref="T:Microsoft.Office.Interop.Excel.Range" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果没有标题行, <xref:Microsoft.Office.Tools.Excel.ListObject.HeaderRowRange%2A>则返回。 `null`  
  
   
  
## Examples  
 下面<xref:System.Data.DataTable>的代码示例创建<xref:Microsoft.Office.Tools.Excel.ListObject>和, <xref:System.Data.DataTable>并将绑定<xref:Microsoft.Office.Tools.Excel.ListObject>到。 然后, 它获取包含标题行的范围, 并将标题行字体更改为粗体。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelListObject#21](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#21)]
 [!code-vb[Trin_ExcelListObject#21](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InnerObject">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.ListObject InnerObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.ListObject InnerObject" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.InnerObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.ListObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.ListObject" />，表示 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 的基础本机对象。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.ListObject" />，表示 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 的基础本机对象。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertRowRange">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range InsertRowRange { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range InsertRowRange" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.InsertRowRange" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个表示 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 控件的插入行（如果有的话）的 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" />。</summary>
        <value>一个表示 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 控件的插入行（如果有的话）的 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果没有插入行, <xref:Microsoft.Office.Tools.Excel.ListObject.InsertRowRange%2A>则返回。 `null`  
  
   
  
## Examples  
 下面的代码示例创建一个<xref:Microsoft.Office.Tools.Excel.ListObject>, 获取包含插入行的范围, 然后显示一条消息, 显示插入行包含的单元格数。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelListObject#22](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#22)]
 [!code-vb[Trin_ExcelListObject#22](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBinding">
      <MemberSignature Language="C#" Value="public bool IsBinding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBinding" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.IsBinding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示数据绑定功能是否处于活动状态。</summary>
        <value>如果数据绑定功能处于活动状态，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当绑定满足以下条件时, 该绑定处于活动状态: 设置了其所有属性, 用户未<xref:System.Windows.Forms.BindingManagerBase.ResumeBinding%2A>调用<xref:System.Windows.Forms.BindingManagerBase.SuspendBinding%2A>或<xref:System.Windows.Forms.BindingManagerBase> <xref:System.Windows.Forms.Binding>所属的, 以及<xref:System.Windows.Forms.Binding>所属的控件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSelected">
      <MemberSignature Language="C#" Value="public bool IsSelected { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSelected" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.IsSelected" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 是否处于选定状态。</summary>
        <value>如果 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 处于选定状态，或者包括 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 一部分的任何范围处于选定状态，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ListColumns">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.ListColumns ListColumns { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.ListColumns ListColumns" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.ListColumns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.ListColumns</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.ListColumns" /> 集合，该集合表示 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件中的所有列。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.ListColumns" /> 集合，表示 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件中的所有列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要删除此集合中的任何项, 请不要`Delete`使用项的方法。 使用项范围的`ListColumns.Item(1).Range.Delete()`方法删除项;例如,。`Delete` 请注意, 不能删除绑定到<xref:Microsoft.Office.Tools.Excel.ListObject>数据源的控件的列。  
  
   
  
## Examples  
 下面的代码示例创建一个<xref:Microsoft.Office.Tools.Excel.ListObject>, 获取列的集合, 然后显示一条消息, 显示<xref:Microsoft.Office.Tools.Excel.ListObject>包含多少列。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelListObject#23](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#23)]
 [!code-vb[Trin_ExcelListObject#23](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ListRows">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.ListRows ListRows { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.ListRows ListRows" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.ListRows" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.ListRows</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.ListRows" /> 对象，该对象表示 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件中的所有数据行。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.ListRows" /> 对象，表示 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件中的所有数据行。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返回<xref:Microsoft.Office.Interop.Excel.ListRows>的对象不包含标头、总计或插入行。  
  
 若要删除此集合中的任何项, 请不要`Delete`使用项的方法。 使用项范围的`ListRows.Item(1).Range.Delete()`方法删除项;例如,。`Delete`  
  
   
  
## Examples  
 下面的代码示例创建一个<xref:Microsoft.Office.Tools.Excel.ListObject>, 获取行的集合, 然后显示一条消息, 显示<xref:Microsoft.Office.Tools.Excel.ListObject>包含多少行。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelListObject#24](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#24)]
 [!code-vb[Trin_ExcelListObject#24](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#24)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MappedColumns">
      <MemberSignature Language="C#" Value="public string[] MappedColumns { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] MappedColumns" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.MappedColumns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件的名称。</summary>
        <value><see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此名称仅用作<xref:Microsoft.Office.Interop.Excel.ListObjects.Item%2A?displayProperty=fullName> <xref:Microsoft.Office.Interop.Excel.ListObjects?displayProperty=fullName>集合的属性的唯一标识符。 仅可通过对象模型设置此属性。  
  
 默认情况下, <xref:Microsoft.Office.Tools.Excel.ListObject>每个控件名称以单词 "List" 开头, 后跟数字 (无空格)。 如果尝试将<xref:Microsoft.Office.Tools.Excel.ListObject.Name%2A>属性设置为另<xref:Microsoft.Office.Tools.Excel.ListObject>一个控件已经使用的名称, 则会引发异常。  
  
   
  
## Examples  
 下面的代码示例在当前<xref:Microsoft.Office.Tools.Excel.ListObject>工作表中创建一个, 然后<xref:Microsoft.Office.Tools.Excel.ListObject.Name%2A>使用属性将的<xref:Microsoft.Office.Tools.Excel.ListObject>名称设置为 "Employees"。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelListObject#1](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#1)]
 [!code-vb[Trin_ExcelListObject#1](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OriginalDataRestored">
      <MemberSignature Language="C#" Value="event Microsoft.Office.Tools.Excel.OriginalDataRestoredEventHandler OriginalDataRestored;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Tools.Excel.OriginalDataRestoredEventHandler OriginalDataRestored" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.ListObject.OriginalDataRestored" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Tools.Excel.OriginalDataRestoredEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在用户执行被禁止的操作时发生，<see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件随后会恢复回其原始状态。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果用户对只读数据进行了更改, 则会导致引发此事件的操作的示例。 <xref:Microsoft.Office.Tools.Excel.ListObject>控件撤消更改并替换原始值。  
  
 此事件提供枚举中的信息, 其中包含已还原的内容和原因。  
  
   
  
## Examples  
 下面<xref:System.Data.DataTable>的代码示例创建<xref:Microsoft.Office.Tools.Excel.ListObject>和, <xref:System.Data.DataTable>并将绑定<xref:Microsoft.Office.Tools.Excel.ListObject>到。 然后, 创建一个<xref:Microsoft.Office.Tools.Excel.ListObject.OriginalDataRestored>事件处理程序。 若要测试该事件, 请右键单击 "工作表 1 <xref:Microsoft.Office.Tools.Excel.ListObject> " 上方的列号, 然后单击快捷菜单中的 "**删除**"。 此事件处理程序将替换列和列标题数据, 并显示每个操作的消息。  
  
 此版本适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelListObject#25](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#25)]
 [!code-vb[Trin_ExcelListObject#25](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#25)]  
  
 此版本适用于应用程序级外接程序。 若要使用此代码示例, 请`using System.Data;`在使用C#或`Imports System.Data`语句时添加指令 (如果使用的是 Visual Basic)。  
  
 [!code-csharp[Trin_ExcelListObject_AppLevelAddIn#25](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject_AppLevelAddIn/CS/ThisAddIn.cs#25)]
 [!code-vb[Trin_ExcelListObject_AppLevelAddIn#25](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject_AppLevelAddIn/VB/ThisAddIn.vb#25)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public object Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Parent" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件的父对象。</summary>
        <value><see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件的父对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例创建一个<xref:Microsoft.Office.Tools.Excel.ListObject> , 然后在消息中显示其父对象的名称。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelListObject#26](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#26)]
 [!code-vb[Trin_ExcelListObject#26](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#26)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Publish">
      <MemberSignature Language="C#" Value="public string Publish (object Target, bool LinkSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Publish(object Target, bool LinkSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.ListObject.Publish(System.Object,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Target" Type="System.Object" />
        <Parameter Name="LinkSource" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Target">包含字符串数组。 下表描述了此数组的元素。  
  
 [1|1] 元素 #  
  
 [1|2] 内容  
  
 [2|1] 0  
  
 [2|2] SharePoint 服务器的 URL。  
  
 [3|1] 1  
  
 [3|2] ListName（显示名称）。  
  
 [4|1] 2  
  
 [4|2] 列表的说明。</param>
        <param name="LinkSource">布尔值。 （请参见“备注”部分。）</param>
        <summary>将 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件发布到运行 Microsoft Windows SharePoint Services 的服务器。</summary>
        <returns>SharePoint 站点上已发布列表的 URL。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果控件当前未链接到 SharePoint 站点上的列表, 则将设置`LinkSource`为`true`将在指定的 SharePoint 站点上创建新列表。 <xref:Microsoft.Office.Tools.Excel.ListObject> 如果控件当前已链接到一个 SharePoint 站点, 则将`LinkSource`参数设置为`true`将替换现有链接 (您只能将该列表链接到一个 SharePoint 站点)。 <xref:Microsoft.Office.Tools.Excel.ListObject> 如果当前没有链接`LinkSource` `false` <xref:Microsoft.Office.Tools.Excel.ListObject>控件, 则将设置为会使控件取消链接。 <xref:Microsoft.Office.Tools.Excel.ListObject> 如果控件当前已链接到 SharePoint 网站, 则将设置`LinkSource`为`false`将<xref:Microsoft.Office.Tools.Excel.ListObject>控件链接到当前的 sharepoint 站点。 <xref:Microsoft.Office.Tools.Excel.ListObject>  
  
   
  
## Examples  
 下面的代码示例在当前<xref:Microsoft.Office.Tools.Excel.ListObject>工作表上创建一个, 然后<xref:Microsoft.Office.Tools.Excel.ListObject.Publish%2A>调用方法以将发布<xref:Microsoft.Office.Tools.Excel.ListObject>到运行 Microsoft Windows SharePoint Services 的网站。 此示例假定`SharePointURL`参数标识运行 Microsoft Windows SharePoint Services 的网站的有效 URL。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelListObject#4](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#4)]
 [!code-vb[Trin_ExcelListObject#4](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryTable">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.QueryTable QueryTable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.QueryTable QueryTable" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.QueryTable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.QueryTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:Microsoft.Office.Interop.Excel.QueryTable" />，它为 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件提供指向列表服务器的链接。</summary>
        <value><see cref="T:Microsoft.Office.Interop.Excel.QueryTable" />，为 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件提供指向列表服务器的链接。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.ListObject.QueryTable%2A>属性刷新与<xref:Microsoft.Office.Tools.Excel.ListObject>相交的查询表。 此代码示例假定当前工作表包含一个<xref:Microsoft.Office.Tools.Excel.ListObject>名为的, 该名称`customerListObject`与查询表相交。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelListObject#27](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#27)]
 [!code-vb[Trin_ExcelListObject#27](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#27)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Range">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range Range { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range Range" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.Range" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，表示要应用 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 的范围。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，表示要应用 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 的范围。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果显示, 则包括标题、插入行和总计行。  
  
   
  
## Examples  
 下面的代码示例创建一个<xref:Microsoft.Office.Tools.Excel.ListObject> , 然后显示一条消息, 其中显示了应用的<xref:Microsoft.Office.Tools.Excel.ListObject>范围内的单元格数。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelListObject#28](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#28)]
 [!code-vb[Trin_ExcelListObject#28](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#28)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public void Refresh ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Refresh() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.ListObject.Refresh" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>用运行 Microsoft Windows SharePoint Services 的服务器上的当前数据和架构更新 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法只能与<xref:Microsoft.Office.Tools.Excel.ListObject>链接到 SharePoint 站点的控件一起使用。 如果 SharePoint 站点不可用, 则调用此方法将导致引发异常。  
  
 调用此方法不会将更改提交到<xref:Microsoft.Office.Tools.Excel.ListObject> Excel 工作簿中的。 调用<xref:Microsoft.Office.Tools.Excel.ListObject.Refresh%2A>方法时, 将放弃 Excel 中的列表对象的未提交更改。 若要避免丢失任何未提交的更改<xref:Microsoft.Office.Tools.Excel.ListObject.UpdateChanges%2A> , 请在<xref:Microsoft.Office.Tools.Excel.ListObject>调用<xref:Microsoft.Office.Tools.Excel.ListObject.Refresh%2A>方法之前调用控件的方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RefreshDataRow">
      <MemberSignature Language="C#" Value="public void RefreshDataRow (int dataRowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RefreshDataRow(int32 dataRowIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.ListObject.RefreshDataRow(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataRowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dataRowIndex">数据源中数据行的索引。</param>
        <summary>更新与指定数据行关联的 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 数据行。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法不会将对数据<xref:Microsoft.Office.Tools.Excel.ListObject>进行的更改发送回数据源, 而只会获取信息。  
  
 如果数据对象在数据更改时不引发通知事件, 则使用此方法, 例如, 如果创建一个类来保存数据, 但不包含事件来通知侦听器发生更改。 如果数据对象不引发事件, <xref:Microsoft.Office.Tools.Excel.ListObject>则不会自动更新。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RefreshDataRows">
      <MemberSignature Language="C#" Value="public void RefreshDataRows ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RefreshDataRows() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.ListObject.RefreshDataRows" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>使用数据源中的数据更新 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 中的所有行。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法不会将对数据<xref:Microsoft.Office.Tools.Excel.ListObject>进行的更改发送回数据源, 而只会获取信息。  
  
 如果数据对象在数据更改时不引发通知事件, 则使用此方法, 例如, 如果创建一个类来保存数据, 但不包含事件来通知侦听器发生更改。 如果数据对象不引发事件, <xref:Microsoft.Office.Tools.Excel.ListObject>则不会自动更新。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetPersistedBindingInformation">
      <MemberSignature Language="C#" Value="public void ResetPersistedBindingInformation ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ResetPersistedBindingInformation() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.ListObject.ResetPersistedBindingInformation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>清除有关用户对 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件所做的更改的信息。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果用户更改了列或行的顺序, 则有关此更改的信息将存储在工作表中, 以便<xref:Microsoft.Office.Tools.Excel.ListObject>下次打开工作表时该控件位于自定义配置中。 <xref:Microsoft.Office.Tools.Excel.ListObject.ResetPersistedBindingInformation%2A>清除存储的信息, 使<xref:Microsoft.Office.Tools.Excel.ListObject>控件显示在默认配置中。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Resize">
      <MemberSignature Language="C#" Value="public void Resize (Microsoft.Office.Interop.Excel.Range Range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Resize(class Microsoft.Office.Interop.Excel.Range Range) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.ListObject.Resize(Microsoft.Office.Interop.Excel.Range)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Range" Type="Microsoft.Office.Interop.Excel.Range" />
      </Parameters>
      <Docs>
        <param name="Range">列表的新范围。</param>
        <summary>允许在新范围上调整 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件的大小。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性不插入或移动任何单元格。  
  
 标题必须保持在同一行中, 并且生成的列表必须与原始列表重叠。 此列表必须包含标题行和至少一行数据。  
  
 对于链接到运行 Microsoft Windows SharePoint Services 的服务器的列表, 您可以使用此方法来调整该列表的大小, 方法是`Range`提供一个自变量, 该自变量与<xref:Microsoft.Office.Tools.Excel.ListObject>的当前范围不同有. 尝试通过添加或删除列 (在`Range`参数中) 来调整链接到 Windows SharePoint Services 的列表的大小会导致运行时错误。  
  
   
  
## Examples  
 下面的代码示例在当前<xref:Microsoft.Office.Tools.Excel.ListObject>工作表上创建一个, 然后<xref:Microsoft.Office.Tools.Excel.ListObject.Resize%2A>调用方法以<xref:Microsoft.Office.Tools.Excel.ListObject>增加的大小。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelListObject#5](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#5)]
 [!code-vb[Trin_ExcelListObject#5](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveSortOrder">
      <MemberSignature Language="C#" Value="public bool SaveSortOrder { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SaveSortOrder" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.SaveSortOrder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件的行顺序是否已保存到工作表中。</summary>
        <value>若要将行顺序保存到工作表中，请使用 <see langword="true" />；否则使用 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性仅适用<xref:Microsoft.Office.Tools.Excel.ListObject>于绑定到数据的控件。  
  
 如果不设置此属性, 则在下次打开工作簿时<xref:Microsoft.Office.Tools.Excel.ListObject> , 的行顺序将与数据源的行顺序匹配, 即使用户对排序和保存工作簿进行了更改。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Selected">
      <MemberSignature Language="C#" Value="event Microsoft.Office.Interop.Excel.DocEvents_SelectionChangeEventHandler Selected;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.DocEvents_SelectionChangeEventHandler Selected" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.ListObject.Selected" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.DocEvents_SelectionChangeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当选择 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当选择更改<xref:Microsoft.Office.Tools.Excel.ListObject>控件时, 将引发此事件。  
  
   
  
## Examples  
 下面的代码示例创建一个<xref:Microsoft.Office.Tools.Excel.ListObject> , 然后创建<xref:Microsoft.Office.Tools.Excel.ListObject.Selected>事件的事件处理程序。 若要测试事件处理程序, 请确保<xref:Microsoft.Office.Tools.Excel.ListObject>未选中, 然后选择它。  
  
 此版本适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelListObject#29](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#29)]
 [!code-vb[Trin_ExcelListObject#29](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#29)]  
  
 此版本适用于应用程序级外接程序。  
  
 [!code-csharp[Trin_ExcelListObject_AppLevelAddIn#29](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject_AppLevelAddIn/CS/ThisAddIn.cs#29)]
 [!code-vb[Trin_ExcelListObject_AppLevelAddIn#29](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject_AppLevelAddIn/VB/ThisAddIn.vb#29)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectedIndex">
      <MemberSignature Language="C#" Value="public int SelectedIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SelectedIndex" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.SelectedIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置当前选定的行的索引。</summary>
        <value>当前选定的行的索引号。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性是从1开始的, 而不是从0开始的。 <xref:Microsoft.Office.Tools.Excel.ListObject>控件中的第一个数据行的索引号为1。  
  
   
  
## Examples  
 下面的代码示例在当前<xref:Microsoft.Office.Tools.Excel.ListObject>工作表上创建一个。 它使用<xref:Microsoft.Office.Tools.Excel.ListObject.SelectedIndex%2A>和<xref:Microsoft.Office.Tools.Excel.ListObject.AutoSelectRows%2A>属性来选择第二行, 并指定在用户单击行时选择整行。 此代码示例还为事件创建了一个事件<xref:Microsoft.Office.Tools.Excel.ListObject.SelectedIndexChanged>处理程序, 该事件在每次选择新行时都会显示一个消息框。  
  
 此版本适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelListObject#2](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#2)]
 [!code-vb[Trin_ExcelListObject#2](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#2)]  
  
 此版本适用于应用程序级外接程序。  
  
 [!code-csharp[Trin_ExcelListObject_AppLevelAddIn#2](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject_AppLevelAddIn/CS/ThisAddIn.cs#2)]
 [!code-vb[Trin_ExcelListObject_AppLevelAddIn#2](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject_AppLevelAddIn/VB/ThisAddIn.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectedIndexChanged">
      <MemberSignature Language="C#" Value="event EventHandler SelectedIndexChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SelectedIndexChanged" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.ListObject.SelectedIndexChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="P:Microsoft.Office.Tools.Excel.ListObject.SelectedIndex" /> 属性的值更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果选择了 "标头"、"插入行" 或 "总计" 行, 则不会引发此事件。  
  
 如果编程修改或用户交互<xref:Microsoft.Office.Tools.Excel.ListObject.SelectedIndex%2A>更改了属性, 则会引发此事件。  
  
   
  
## Examples  
 下面的代码示例在当前<xref:Microsoft.Office.Tools.Excel.ListObject>工作表上创建一个。 它使用<xref:Microsoft.Office.Tools.Excel.ListObject.SelectedIndex%2A>和<xref:Microsoft.Office.Tools.Excel.ListObject.AutoSelectRows%2A>属性来选择第二行, 并指定在用户单击行时选择整行。 此代码示例还为事件创建了一个事件<xref:Microsoft.Office.Tools.Excel.ListObject.SelectedIndexChanged>处理程序, 该事件在每次选择新行时都会显示一个消息框。  
  
 此版本适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelListObject#2](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#2)]
 [!code-vb[Trin_ExcelListObject#2](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#2)]  
  
 此版本适用于应用程序级外接程序。  
  
 [!code-csharp[Trin_ExcelListObject_AppLevelAddIn#2](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject_AppLevelAddIn/CS/ThisAddIn.cs#2)]
 [!code-vb[Trin_ExcelListObject_AppLevelAddIn#2](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject_AppLevelAddIn/VB/ThisAddIn.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectionChange">
      <MemberSignature Language="C#" Value="event Microsoft.Office.Interop.Excel.DocEvents_SelectionChangeEventHandler SelectionChange;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.DocEvents_SelectionChangeEventHandler SelectionChange" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.ListObject.SelectionChange" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.DocEvents_SelectionChangeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件内部的所选内容更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当所选范围内的<xref:Microsoft.Office.Tools.Excel.ListObject>任何范围发生更改时, 将引发此事件。  
  
 当焦点从<xref:Microsoft.Office.Tools.Excel.ListObject>控件内部移动到<xref:Microsoft.Office.Tools.Excel.ListObject>控件之外时, 不会引发此事件。 当焦点从<xref:Microsoft.Office.Tools.Excel.ListObject>控件外部移动<xref:Microsoft.Office.Tools.Excel.ListObject>到控件时引发。  
  
   
  
## Examples  
 下面的代码示例创建一个<xref:Microsoft.Office.Tools.Excel.ListObject> , 然后创建<xref:Microsoft.Office.Tools.Excel.ListObject.SelectionChange>事件的事件处理程序。 若要测试事件处理程序, 请在中<xref:Microsoft.Office.Tools.Excel.ListObject>选择一个单元格, 然后在<xref:Microsoft.Office.Tools.Excel.ListObject>中选择另一个单元格。  
  
 此版本适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelListObject#30](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#30)]
 [!code-vb[Trin_ExcelListObject#30](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#30)]  
  
 此版本适用于应用程序级外接程序。  
  
 [!code-csharp[Trin_ExcelListObject_AppLevelAddIn#30](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject_AppLevelAddIn/CS/ThisAddIn.cs#30)]
 [!code-vb[Trin_ExcelListObject_AppLevelAddIn#30](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject_AppLevelAddIn/VB/ThisAddIn.vb#30)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDataBinding">
      <MemberSignature Language="C#" Value="public void SetDataBinding (object dataSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDataBinding(object dataSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.ListObject.SetDataBinding(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSource" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="dataSource">要用作 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件的数据源的对象。</param>
        <summary>将 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件绑定到数据源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 数据源可以是实现<xref:System.Collections.IList> <xref:System.ComponentModel.IBindingList>、 <xref:System.ComponentModel.IListSource>、或<xref:System.Collections.IEnumerable>的任何对象, 如<xref:System.Data.DataTable>或一维数组。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:Microsoft.Office.Tools.Excel.ListObject.SetDataBinding%2A>方法将<xref:Microsoft.Office.Tools.Excel.ListObject>绑定到<xref:System.Data.DataTable>。 <xref:System.Data.DataTable>包含两个列, 其中包含雇员的姓名和年龄, 以及表示雇员条目的四行。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelListObject#7](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#7)]
 [!code-vb[Trin_ExcelListObject#7](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:Microsoft.Office.Tools.Excel.SetDataBindingFailedException">未能绑定到指定的数据源。</exception>
        <exception cref="T:System.ArgumentException">该参数无效。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="dataSource" /> 参数为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="SetDataBinding">
      <MemberSignature Language="C#" Value="public void SetDataBinding (object dataSource, string dataMember);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDataBinding(object dataSource, string dataMember) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.ListObject.SetDataBinding(System.Object,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSource" Type="System.Object" />
        <Parameter Name="dataMember" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSource">要用作 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件的数据源的对象。</param>
        <param name="dataMember">由 <see cref="P:Microsoft.Office.Tools.Excel.ListObject.DataMember" /> 返回的对象中用来指定要绑定到的属性的 <see cref="P:Microsoft.Office.Tools.Excel.ListObject.DataSource" />。</param>
        <summary>将 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件绑定到数据源的指定数据成员。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 数据源可以是<xref:System.Collections.IList>任何实现<xref:System.ComponentModel.IBindingList>、 <xref:System.ComponentModel.IListSource>、或<xref:System.Collections.IEnumerable>的对象。  
  
 数据成员必须是返回可绑定集合的数据源的属性。 例如, 源将<xref:System.Data.DataSet>表作为数据成员。  
  
   
  
## Examples  
 下面的代码示例创建一个<xref:System.Data.DataSet>、一个<xref:System.Data.DataTable>和一个<xref:Microsoft.Office.Tools.Excel.ListObject>。 然后, 将列表对象绑定到<xref:System.Data.DataSet> <xref:System.Data.DataTable>和。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelListObject#31](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#31)]
 [!code-vb[Trin_ExcelListObject#31](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#31)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:Microsoft.Office.Tools.Excel.SetDataBindingFailedException">未能绑定到指定的数据源。</exception>
        <exception cref="T:System.ArgumentException">一个或多个参数无效。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="dataSource" /> 参数为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="SetDataBinding">
      <MemberSignature Language="C#" Value="public void SetDataBinding (object dataSource, string dataMember, params string[] mappedColumns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDataBinding(object dataSource, string dataMember, string[] mappedColumns) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.ListObject.SetDataBinding(System.Object,System.String,System.String[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSource" Type="System.Object" />
        <Parameter Name="dataMember" Type="System.String" />
        <Parameter Name="mappedColumns" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="dataSource">要用作 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件的数据源的对象。</param>
        <param name="dataMember">由 <see cref="P:Microsoft.Office.Tools.Excel.ListObject.DataMember" /> 返回的对象中用来指定要绑定到的属性的 <see cref="P:Microsoft.Office.Tools.Excel.ListObject.DataSource" />。</param>
        <param name="mappedColumns">数据成员中要显示在 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件中的列名。 若要添加未映射的列，请在数组中包括一个空字符串。</param>
        <summary>将 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件绑定到数据源的指定数据成员，并且仅显示该数据成员的指定列。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.IList> <xref:System.ComponentModel.IListSource> <xref:System.ComponentModel.IBindingList>参数可以是任何实现、、或<xref:System.Collections.IEnumerable>的对象。 `dataSource`  
  
 `dataMember`参数必须是返回可绑定集合的数据源的属性。 例如, 源将<xref:System.Data.DataSet>表作为数据成员。  
  
   
  
## Examples  
 下面的代码示例创建一个<xref:System.Data.DataSet>、一个<xref:System.Data.DataTable>和一个<xref:Microsoft.Office.Tools.Excel.ListObject>。 然后<xref:System.Data.DataTable>, 它将<xref:Microsoft.Office.Tools.Excel.ListObject>绑定<xref:System.Data.DataSet>到和, 但只包括中两个可能的表列中<xref:Microsoft.Office.Tools.Excel.ListObject>的一个。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelListObject#32](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#32)]
 [!code-vb[Trin_ExcelListObject#32](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:Microsoft.Office.Tools.Excel.SetDataBindingFailedException">未能绑定到指定的数据源。</exception>
        <exception cref="T:System.ArgumentException">一个或多个参数无效。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="dataSource" /> 参数为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="SharePointURL">
      <MemberSignature Language="C#" Value="public string SharePointURL { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SharePointURL" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.SharePointURL" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取给定 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件的 SharePoint 列表的 URL。</summary>
        <value>给定 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件的 SharePoint 列表的 URL。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果列表未链接到 SharePoint 站点, 访问此属性将导致引发异常。  
  
   
  
## Examples  
 下面的代码示例将发布<xref:Microsoft.Office.Tools.Excel.ListObject>到运行 Microsoft Windows SharePoint Services 的网站。 此示例假定在当前<xref:Microsoft.Office.Tools.Excel.ListObject> <xref:Microsoft.Office.Tools.Excel.ListObject>工作表上`customerListObject`有一个名为的, 并且已链接到 SharePoint 站点。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelListObject#33](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#33)]
 [!code-vb[Trin_ExcelListObject#33](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowAutoFilter">
      <MemberSignature Language="C#" Value="public bool ShowAutoFilter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowAutoFilter" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.ShowAutoFilter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否显示自动筛选。</summary>
        <value>如果显示自动筛选，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 对于新`true` <xref:Microsoft.Office.Tools.Excel.ListObject.ShowAutoFilter%2A> 控件,<xref:Microsoft.Office.Tools.Excel.ListObject>属性默认为。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowHeaders">
      <MemberSignature Language="C#" Value="public bool ShowHeaders { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowHeaders" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.ShowHeaders" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否应显示标题信息。</summary>
        <value>如果应显示标题信息，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowTableStyleColumnStripes">
      <MemberSignature Language="C#" Value="public bool ShowTableStyleColumnStripes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowTableStyleColumnStripes" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.ShowTableStyleColumnStripes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>设置或获取一个值，该值指示是否使用列条纹表样式。</summary>
        <value>如果使用列条纹表样式，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowTableStyleFirstColumn">
      <MemberSignature Language="C#" Value="public bool ShowTableStyleFirstColumn { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowTableStyleFirstColumn" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.ShowTableStyleFirstColumn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否对第一列设置格式。</summary>
        <value>如果对第一列设置格式，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowTableStyleLastColumn">
      <MemberSignature Language="C#" Value="public bool ShowTableStyleLastColumn { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowTableStyleLastColumn" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.ShowTableStyleLastColumn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否对最后一列设置格式。</summary>
        <value>如果对最后一列设置格式，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowTableStyleRowStripes">
      <MemberSignature Language="C#" Value="public bool ShowTableStyleRowStripes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowTableStyleRowStripes" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.ShowTableStyleRowStripes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>设置或获取一个值，该值指示是否使用行条纹表样式。</summary>
        <value>如果使用行条纹表样式，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowTotals">
      <MemberSignature Language="C#" Value="public bool ShowTotals { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowTotals" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.ShowTotals" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值表示总计行是否可见。</summary>
        <value>如果总计行可见，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Sort Sort { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Sort Sort" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.Sort" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Sort</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 集合的一个或多个排序列以及排序顺序。</summary>
        <value>表示一个或多个<see cref="T:Microsoft.Office.Tools.Excel.ListObject" />列的排序顺序以及集合的排序顺序的<c>Microsoft.</c></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例将添加<xref:Microsoft.Office.Tools.Excel.ListObject>到当前工作表。 然后<xref:Microsoft.Office.Tools.Excel.ListObject>, 该示例将填充与 Excel 表对应的, 其中包含两行任意数据, 并指定按照列范围 A1: A3 按升序进行排序。 接下来, 该示例调用`Microsoft.Office.Interop.Excel.Sort.Apply`方法对表进行排序。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_Excelworkbook_Additional#33](~/snippets/csharp/VS_Snippets_OfficeSP/trin_excelworkbook_additional/cs/Sheet3.cs#33)]
 [!code-vb[Trin_Excelworkbook_Additional#33](~/snippets/visualbasic/VS_Snippets_OfficeSP/trin_excelworkbook_additional/vb/Sheet3.vb#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceType">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlListObjectSourceType SourceType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlListObjectSourceType SourceType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.SourceType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlListObjectSourceType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取列表的当前源。</summary>
        <value><see cref="T:Microsoft.Office.Interop.Excel.XlListObjectSourceType" /> 值之一。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例创建一个<xref:System.Data.DataTable>和一个<xref:Microsoft.Office.Tools.Excel.ListObject> <xref:Microsoft.Office.Tools.Excel.ListObject> , <xref:System.Data.DataTable>然后将绑定到。 然后, 它在消息中显示列表的源。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelListObject#34](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#34)]
 [!code-vb[Trin_ExcelListObject#34](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#34)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Summary">
      <MemberSignature Language="C#" Value="public string Summary { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Summary" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.Summary" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置与指定表的可选文本字符串关联的说明。</summary>
        <value>一个字符串，表示与指定表的可选文本字符串关联的说明。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Tools.Excel.ListObject.Summary%2A>属性的值对应于 "**可选文本**" 对话框中 "**说明**" 框的设置, 该对话框通过右键单击表、指向 "**表**", 然后单击 "**备用文本" 显示**.  
  
> [!NOTE]
>  此属性显示在面向的[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]Excel 2007 项目中的 IntelliSense 中。 但是, 不能在 Excel 2007 项目中使用此属性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MissingMemberException">此属性用于 Excel 2007 项目。</exception>
      </Docs>
    </Member>
    <Member MemberName="TableStyle">
      <MemberSignature Language="C#" Value="public object TableStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object TableStyle" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.TableStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置表样式。</summary>
        <value>一个表示表样式的对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例将添加<xref:Microsoft.Office.Tools.Excel.ListObject> `Sheet1`到工作表中。 然后<xref:Microsoft.Office.Tools.Excel.ListObject>, 该示例将对应于 Excel 表的表样式设置为**表样式深色 10**样式。 您可以为此属性设置的表样式对应于 "设计" 选项卡上的 Excel 用户界面中提供的表样式, 该选项卡是在选择表时显示的。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_Excelworkbook_Additional#41](~/snippets/csharp/VS_Snippets_OfficeSP/trin_excelworkbook_additional/cs/ThisWorkbook.cs#41)]
 [!code-vb[Trin_Excelworkbook_Additional#41](~/snippets/visualbasic/VS_Snippets_OfficeSP/trin_excelworkbook_additional/vb/ThisWorkbook.vb#41)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置包含有关 <see cref="P:Microsoft.Office.Tools.Excel.ListObject.Tag" /> 控件的数据的对象。</summary>
        <value>一个包含有关 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件的数据的对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Tools.Excel.ListObject.Tag%2A>属性的常见用途是存储<xref:Microsoft.Office.Tools.Excel.ListObject>与控件密切关联的数据。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TotalsRowRange">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range TotalsRowRange { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range TotalsRowRange" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.TotalsRowRange" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个表示 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 控件的总计行的 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" />。</summary>
        <value>一个表示 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 控件的总计行的 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Interop.Excel.Range>仅当总计行显示<xref:Microsoft.Office.Tools.Excel.ListObject>在控件中时, 此属性才会返回。 如果未显示 "总计" 行, 则返回`null`。  
  
   
  
## Examples  
 下面<xref:System.Data.DataTable>的代码示例创建<xref:Microsoft.Office.Tools.Excel.ListObject>和, <xref:System.Data.DataTable>并将绑定<xref:Microsoft.Office.Tools.Excel.ListObject>到。 然后, 它获取包含总计行的范围, 并将总计行字体更改为斜体。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelListObject#35](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#35)]
 [!code-vb[Trin_ExcelListObject#35](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#35)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unlink">
      <MemberSignature Language="C#" Value="public void Unlink ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Unlink() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.ListObject.Unlink" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件中移除指向 Microsoft Windows SharePoint Services 站点的链接。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在调用此方法并<xref:Microsoft.Office.Tools.Excel.ListObject>取消链接后, 无法反转取消链接。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unlist">
      <MemberSignature Language="C#" Value="public void Unlist ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Unlist() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.ListObject.Unlist" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从 <see cref="T:Microsoft.Office.Interop.Excel.ListObject" /> 控件中移除列表功能。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法从本机 Excel <xref:Microsoft.Office.Interop.Excel.ListObject?displayProperty=fullName>对象中移除列表功能, 但不<xref:Microsoft.Office.Tools.Excel.ListObject?displayProperty=fullName>影响宿主控件; 为控件生成的代码保留在项目中。  
  
 使用此方法之后, 在列表中组成的单元格范围将为数据的常规范围。  
  
 运行此方法会在工作表中保留单元数据、格式和公式。 总计行将保持不变。 此方法删除指向 Microsoft Windows SharePoint Services 站点的任何链接。 自动筛选和插入行也从列表中删除。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateChanges">
      <MemberSignature Language="C#" Value="public void UpdateChanges (Microsoft.Office.Interop.Excel.XlListConflict iConflictType = Microsoft.Office.Interop.Excel.XlListConflict.xlListConflictDialog);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UpdateChanges(valuetype Microsoft.Office.Interop.Excel.XlListConflict iConflictType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.ListObject.UpdateChanges(Microsoft.Office.Interop.Excel.XlListConflict)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iConflictType" Type="Microsoft.Office.Interop.Excel.XlListConflict" />
      </Parameters>
      <Docs>
        <param name="iConflictType">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlMap">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XmlMap XmlMap { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.XmlMap XmlMap" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.XmlMap" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XmlMap</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个表示该列表所用架构映射的 <see cref="T:Microsoft.Office.Interop.Excel.XmlMap" />。</summary>
        <value>一个表示该列表所用架构映射的 <see cref="T:Microsoft.Office.Interop.Excel.XmlMap" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例显示映射<xref:Microsoft.Office.Interop.Excel.XmlMap> <xref:Microsoft.Office.Tools.Excel.ListObject>到的的名称。 此示例假定<xref:Microsoft.Office.Tools.Excel.ListObject>在当前<xref:Microsoft.Office.Tools.Excel.ListObject>工作表上`customerListObject`命名为, 并使用架构映射。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelListObject#36](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#36)]
 [!code-vb[Trin_ExcelListObject#36](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#36)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
