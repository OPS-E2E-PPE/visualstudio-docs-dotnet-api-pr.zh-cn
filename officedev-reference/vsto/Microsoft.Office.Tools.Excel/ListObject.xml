<Type Name="ListObject" FullName="Microsoft.Office.Tools.Excel.ListObject">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c71db2da15ff3ebd2549cf6df901af94c69c3141" />
    <Meta Name="ms.sourcegitcommit" Value="d85a83935f1d68ded616fcdfb8fd10d6bf4a4633" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="07/24/2018" />
    <Meta Name="ms.locfileid" Value="29435571" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface ListObject : IDisposable, System.ComponentModel.IComponent, System.ComponentModel.ISupportInitialize, System.Windows.Forms.IBindableComponent" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ListObject implements class System.ComponentModel.IComponent, class System.ComponentModel.ISupportInitialize, class System.IDisposable, class System.Windows.Forms.IBindableComponent" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Tools.Excel.ListObject" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.IComponent</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Forms.IBindableComponent</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("48eb309a-698d-4d40-95af-d9d083e63d30")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.TypeIdentifier</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件在一系列行和列中显示数据。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关详细信息，请参阅[ListObject 控件](/visualstudio/vsto/listobject-control.md)。  
  
 [!INCLUDE[vsto_interface](~/includes/vsto-interface-md.md)]  
  
## <a name="usage"></a>用法  
 [!INCLUDE[vsto_net35mref](~/includes/vsto-net35mref-md.md)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="_Default">
      <MemberSignature Language="C#" Value="public string _Default { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string _Default" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject._Default" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Active">
      <MemberSignature Language="C#" Value="public bool Active { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Active" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.Active" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示工作表上的 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件是否处于活动状态；即，活动单元格是否位于 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件的范围内。</summary>
        <value>如果活动单元格位于 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件的范围内，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 因为没有任何`Activate`方法<xref:Microsoft.Office.Tools.Excel.ListObject>控件，可以激活<xref:Microsoft.Office.Tools.Excel.ListObject>仅通过激活单元格范围列表中的控件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AlternativeText">
      <MemberSignature Language="C#" Value="public string AlternativeText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AlternativeText" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.AlternativeText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置指定表的说明性（可选）文本字符串。</summary>
        <value>一个字符串，表示指定表的说明性（可选）文本字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:Microsoft.Office.Tools.Excel.ListObject.AlternativeText%2A>的设置的属性相对应**标题**框中**可选文字**对话框中，右键单击某个表，指向显示**表**，然后单击**可选文字**。  
  
> [!NOTE]
>  此属性将出现在 IntelliSense 中 Excel 2007 项目中面向[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]。 但是，此属性不能使用 Excel 2007 项目中。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MissingMemberException">此属性用于 Excel 2007 项目。</exception>
      </Docs>
    </Member>
    <Member MemberName="Application">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Application Application { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Application Application" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.Application" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Application</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个表示 Microsoft Office Excel 应用程序或 <see cref="T:Microsoft.Office.Interop.Excel.Application" /> 创建者的 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" />。</summary>
        <value>一个表示 <see cref="T:Microsoft.Office.Interop.Excel.Application" /> 创建者的 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例获取的名称和版本的应用程序包含<xref:Microsoft.Office.Tools.Excel.ListObject>并在消息框中显示的信息。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelListObject#8](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#8)]
 [!code-vb[Trin_ExcelListObject#8](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoFilter">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.AutoFilter AutoFilter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.AutoFilter AutoFilter" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.AutoFilter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.AutoFilter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个筛选的表。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.AutoFilter" />，其中包含筛选的表。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例添加<xref:Microsoft.Office.Tools.Excel.ListObject>到工作表，它对应于 Excel 中的表。 然后，示例使用两个行的任意数据填充表，并指定上筛选出所有行的第一列的值的表的筛选器不等于"bb"的字符串值。 接下来，此示例显示表中找到的活动筛选器的数。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_Excelworkbook_Additional#32](~/snippets/csharp/VS_Snippets_OfficeSP/trin_excelworkbook_additional/cs/Sheet3.cs#32)]
 [!code-vb[Trin_Excelworkbook_Additional#32](~/snippets/visualbasic/VS_Snippets_OfficeSP/trin_excelworkbook_additional/vb/Sheet3.vb#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoSelectRows">
      <MemberSignature Language="C#" Value="public bool AutoSelectRows { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoSelectRows" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.AutoSelectRows" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示在 <see cref="P:Microsoft.Office.Tools.Excel.ListObject.SelectedIndex" /> 发生更改时是否选择整行。</summary>
        <value>如果选择整行，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 中的整个行<xref:Microsoft.Office.Tools.Excel.ListObject>对应的控件用户界面<xref:Microsoft.Office.Tools.Excel.ListObject.SelectedIndex%2A>时此属性设置为选择`true`。  
  
   
  
## Examples  
 下面的代码示例创建<xref:Microsoft.Office.Tools.Excel.ListObject>当前工作表上。 它使用<xref:Microsoft.Office.Tools.Excel.ListObject.SelectedIndex%2A>和<xref:Microsoft.Office.Tools.Excel.ListObject.AutoSelectRows%2A>属性来选择第二行并指定当用户单击行选择整行。 此代码示例还创建的事件处理程序<xref:Microsoft.Office.Tools.Excel.ListObject.SelectedIndexChanged>显示一个消息框，选择一个新行时的事件。  
  
 此版本是文档级自定义项。  
  
 [!code-csharp[Trin_ExcelListObject#2](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#2)]
 [!code-vb[Trin_ExcelListObject#2](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#2)]  
  
 此版本用于针对应用程序级外接程序。  
  
 [!code-csharp[Trin_ExcelListObject_AppLevelAddIn#2](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject_AppLevelAddIn/CS/ThisAddIn.cs#2)]
 [!code-vb[Trin_ExcelListObject_AppLevelAddIn#2](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject_AppLevelAddIn/VB/ThisAddIn.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoSetDataBoundColumnHeaders">
      <MemberSignature Language="C#" Value="public bool AutoSetDataBoundColumnHeaders { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoSetDataBoundColumnHeaders" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.AutoSetDataBoundColumnHeaders" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值确定是否自动将列标题设置为与数据源相匹配。</summary>
        <value>如果自动设置列名，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果设置为`true`，此属性会导致在每个列的列标题<xref:Microsoft.Office.Tools.Excel.ListObject>控件以匹配数据源的相应列标题。  
  
 此属性设置为使用工作表的人员不能更改列标题`true`。 如果更改列标题，它将还原回以匹配数据源，用户切换焦点从标头单元格上时。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeAddDataBoundRow">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Tools.Excel.BeforeAddDataBoundRowEventHandler BeforeAddDataBoundRow;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Tools.Excel.BeforeAddDataBoundRowEventHandler BeforeAddDataBoundRow" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.ListObject.BeforeAddDataBoundRow" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Tools.Excel.BeforeAddDataBoundRowEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>恰好在尝试向绑定到数据的 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件添加新行之前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 仅当引发此事件<xref:Microsoft.Office.Tools.Excel.ListObject>控件绑定到数据。  
  
 仅当通过 Microsoft Office Excel 用户界面添加一个新行时，引发此事件。 以编程方式添加一个新行时，它将不引发。  
  
 处理此事件来执行其他验证，或若要取消添加一行。  
  
   
  
## Examples  
 下面的代码示例将创建<xref:System.Data.DataTable>和一个<xref:Microsoft.Office.Tools.Excel.ListObject>，并将绑定<xref:Microsoft.Office.Tools.Excel.ListObject>到<xref:System.Data.DataTable>。 然后，它创建<xref:Microsoft.Office.Tools.Excel.ListObject.BeforeAddDataBoundRow>事件处理程序。 若要测试事件，请手动添加到一个新行<xref:Microsoft.Office.Tools.Excel.ListObject>表 1 上。 事件处理程序中删除相应行，并显示一条消息。  
  
 此版本是文档级自定义项。  
  
 [!code-csharp[Trin_ExcelListObject#9](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#9)]
 [!code-vb[Trin_ExcelListObject#9](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#9)]  
  
 此版本用于针对应用程序级外接程序。 若要使用此代码示例，请添加`using System.Data;`指令，如果使用的 C# 或`Imports System.Data`语句，如果使用的 Visual Basic。  
  
 [!code-csharp[Trin_ExcelListObject_AppLevelAddIn#9](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject_AppLevelAddIn/CS/ThisAddIn.cs#9)]
 [!code-vb[Trin_ExcelListObject_AppLevelAddIn#9](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject_AppLevelAddIn/VB/ThisAddIn.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeDoubleClick">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.DocEvents_BeforeDoubleClickEventHandler BeforeDoubleClick;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.DocEvents_BeforeDoubleClickEventHandler BeforeDoubleClick" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.ListObject.BeforeDoubleClick" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.DocEvents_BeforeDoubleClickEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在双击 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件时，但在默认双击操作之前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例将创建<xref:Microsoft.Office.Tools.Excel.ListObject>和一个<xref:Microsoft.Office.Tools.Excel.ListObject.BeforeDoubleClick>事件处理程序。 当<xref:Microsoft.Office.Tools.Excel.ListObject>双击之后，显示一条消息，指示是否<xref:Microsoft.Office.Tools.Excel.ListObject>绑定到数据。  
  
 此版本是文档级自定义项。  
  
 [!code-csharp[Trin_ExcelListObject#10](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#10)]
 [!code-vb[Trin_ExcelListObject#10](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#10)]  
  
 此版本用于针对应用程序级外接程序。  
  
 [!code-csharp[Trin_ExcelListObject_AppLevelAddIn#10](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject_AppLevelAddIn/CS/ThisAddIn.cs#10)]
 [!code-vb[Trin_ExcelListObject_AppLevelAddIn#10](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject_AppLevelAddIn/VB/ThisAddIn.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeRightClick">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.DocEvents_BeforeRightClickEventHandler BeforeRightClick;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.DocEvents_BeforeRightClickEventHandler BeforeRightClick" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.ListObject.BeforeRightClick" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.DocEvents_BeforeRightClickEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在右击 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件时，但在默认右击操作之前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例将创建<xref:Microsoft.Office.Tools.Excel.ListObject>和一个<xref:Microsoft.Office.Tools.Excel.ListObject.BeforeRightClick>事件处理程序。 右击列表对象时，将显示一条消息，指示是否将列表对象绑定到数据。  
  
 此版本是文档级自定义项。  
  
 [!code-csharp[Trin_ExcelListObject#11](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#11)]
 [!code-vb[Trin_ExcelListObject#11](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#11)]  
  
 此版本用于针对应用程序级外接程序。  
  
 [!code-csharp[Trin_ExcelListObject_AppLevelAddIn#11](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject_AppLevelAddIn/CS/ThisAddIn.cs#11)]
 [!code-vb[Trin_ExcelListObject_AppLevelAddIn#11](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject_AppLevelAddIn/VB/ThisAddIn.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingContextChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BindingContextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BindingContextChanged" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.ListObject.BindingContextChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Tools.Excel.ListObjectChangeHandler Change;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Tools.Excel.ListObjectChangeHandler Change" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.ListObject.Change" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Tools.Excel.ListObjectChangeHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件中发生更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果引发此事件<xref:Microsoft.Office.Tools.Excel.ListObject>通过以编程方式修改或用户交互更改控制。  
  
 不会触发重新计算的单元格更改此事件。  
  
   
  
## Examples  
 下面的代码示例将创建<xref:Microsoft.Office.Tools.Excel.ListObject>和一个<xref:Microsoft.Office.Tools.Excel.ListObject.Change>事件处理程序。 若要引发<xref:Microsoft.Office.Tools.Excel.ListObject.Change>事件，将文本添加到中的单元格之一<xref:Microsoft.Office.Tools.Excel.ListObject>，然后按 ENTER。  
  
 此版本是文档级自定义项。  
  
 [!code-csharp[Trin_ExcelListObject#12](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#12)]
 [!code-vb[Trin_ExcelListObject#12](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#12)]  
  
 此版本用于针对应用程序级外接程序。  
  
 [!code-csharp[Trin_ExcelListObject_AppLevelAddIn#12](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject_AppLevelAddIn/CS/ThisAddIn.cs#12)]
 [!code-vb[Trin_ExcelListObject_AppLevelAddIn#12](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject_AppLevelAddIn/VB/ThisAddIn.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Comment">
      <MemberSignature Language="C#" Value="public string Comment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Comment" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.Comment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置与 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 关联的注释。</summary>
        <value>一个字符串，表示与 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 关联的注释。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Container">
      <MemberSignature Language="C#" Value="public System.ComponentModel.IContainer Container { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.IContainer Container" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.Container" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.IContainer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Creator">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlCreator Creator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlCreator Creator" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.Creator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlCreator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取在其中创建 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 的应用程序。</summary>
        <value>在其中创建 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 的应用程序。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果在 Microsoft Office Excel 中创建对象时，此属性返回字符串 XCEL，这与十六进制数 5843454c。  
  
   
  
## Examples  
 下面的代码示例创建<xref:Microsoft.Office.Tools.Excel.ListObject>和检查的创建者代码是否与 Excel 相匹配。 如果创建者代码与匹配，代码将显示一个消息框。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelListObject#13](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#13)]
 [!code-vb[Trin_ExcelListObject#13](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataBindingFailure">
      <MemberSignature Language="C#" Value="public event EventHandler DataBindingFailure;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DataBindingFailure" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.ListObject.DataBindingFailure" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当某个条件导致 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件的数据绑定失败时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 导致失败的条件的一个示例是如果用户将<xref:Microsoft.Office.Tools.Excel.ListObject>控件拖到另一个<xref:Microsoft.Office.Tools.Excel.ListObject>控件中的放置位置。 新控件的数据绑定失败，并且该控件会引发此事件。  
  
   
  
## Examples  
 下面的代码示例将创建<xref:Microsoft.Office.Tools.Excel.ListObject>，并将添加的事件处理程序<xref:Microsoft.Office.Tools.Excel.ListObject.DataBindingFailure>事件。 如果列表 1 绑定到数据源，然后绑定失败，该事件将捕获并显示绑定的状态显示一条消息。  
  
 此版本是文档级自定义项。  
  
 [!code-csharp[Trin_ExcelListObject#14](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#14)]
 [!code-vb[Trin_ExcelListObject#14](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#14)]  
  
 此版本用于针对应用程序级外接程序。  
  
 [!code-csharp[Trin_ExcelListObject_AppLevelAddIn#14](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject_AppLevelAddIn/CS/ThisAddIn.cs#14)]
 [!code-vb[Trin_ExcelListObject_AppLevelAddIn#14](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject_AppLevelAddIn/VB/ThisAddIn.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataBodyRange">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range DataBodyRange { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range DataBodyRange" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.DataBodyRange" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，它表示包含标题行和插入行之间列表中数据区域的范围。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，表示包含标题行和插入行之间列表中数据区域的范围。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:Microsoft.Office.Tools.Excel.ListObject>控件不具有<xref:Microsoft.Office.Tools.Excel.ListObject.DataBodyRange%2A>，此属性返回`null`。  
  
   
  
## Examples  
 下面的代码示例创建<xref:Microsoft.Office.Tools.Excel.ListObject>然后显示可用于数据的行数。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelListObject#15](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#15)]
 [!code-vb[Trin_ExcelListObject#15](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataBoundFormat">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlRangeAutoFormat DataBoundFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlRangeAutoFormat DataBoundFormat" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.DataBoundFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlRangeAutoFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置数据绑定 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件的格式样式。</summary>
        <value>
          <see cref="T:Microsoft.Office.Interop.Excel.XlRangeAutoFormat" /> 值之一。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Tools.Excel.ListObject>控件必须绑定到数据，然后才能使用此属性。  
  
 指定的格式应用于整个列表对象，包括更高版本添加的行。  
  
 若要删除格式设置，请设置<xref:Microsoft.Office.Tools.Excel.ListObject.DataBoundFormat%2A>到<xref:Microsoft.Office.Interop.Excel.XlRangeAutoFormat.xlRangeAutoFormatNone>。  
  
 使用<xref:Microsoft.Office.Tools.Excel.ListObject.DataBoundFormatSettings%2A>来排除特定类型的格式如模式、 字体或样式中的宽度。  
  
   
  
## Examples  
 下面的代码示例将创建<xref:System.Data.DataTable>和一个<xref:Microsoft.Office.Tools.Excel.ListObject>，并将绑定<xref:Microsoft.Office.Tools.Excel.ListObject>到<xref:System.Data.DataTable>。 然后，它使用<xref:Microsoft.Office.Interop.Excel.XlRangeAutoFormat>要设置格式值<xref:Microsoft.Office.Tools.Excel.ListObject>。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelListObject#16](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#16)]
 [!code-vb[Trin_ExcelListObject#16](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#16)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataBoundFormatSettings">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Tools.Excel.FormatSettings DataBoundFormatSettings { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Tools.Excel.FormatSettings DataBoundFormatSettings" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.DataBoundFormatSettings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Tools.Excel.FormatSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要向 <see cref="T:Microsoft.Office.Tools.Excel.FormatSettings" /> 控件应用指定 <see cref="T:Microsoft.Office.Interop.Excel.XlRangeAutoFormat" /> 的哪个 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" />。</summary>
        <value>
          <see cref="T:Microsoft.Office.Tools.Excel.FormatSettings" /> 值的按位组合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下中的信息的所有<xref:Microsoft.Office.Interop.Excel.XlRangeAutoFormat>应用样式。 但是，以便此样式不应用于这些项，则可以删除特定项。 这些项是：  
  
-   数字  
  
-   字体  
  
-   对齐方式  
  
-   Border  
  
-   模式  
  
-   宽度  
  
 若要将应用仅选择样式，请设置<xref:Microsoft.Office.Tools.Excel.ListObject.DataBoundFormatSettings%2A>之前<xref:Microsoft.Office.Tools.Excel.ListObject.DataBoundFormat%2A>属性设置。 <xref:Microsoft.Office.Tools.Excel.ListObject.DataBoundFormatSettings%2A> 如果将无法工作<xref:Microsoft.Office.Tools.Excel.ListObject.DataBoundFormat%2A>已设置。  
  
   
  
## Examples  
 下面的代码示例将创建<xref:System.Data.DataTable>和一个<xref:Microsoft.Office.Tools.Excel.ListObject>，并将绑定<xref:Microsoft.Office.Tools.Excel.ListObject>到<xref:System.Data.DataTable>。 然后，它设置<xref:Microsoft.Office.Tools.Excel.FormatSettings>要应用于<xref:Microsoft.Office.Tools.Excel.ListObject>，并使用<xref:Microsoft.Office.Interop.Excel.XlRangeAutoFormat>提供该格式的值。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelListObject#17](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#17)]
 [!code-vb[Trin_ExcelListObject#17](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataMember">
      <MemberSignature Language="C#" Value="public string DataMember { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataMember" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.DataMember" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置多成员数据源中要绑定到 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件的特定数据成员。</summary>
        <value>多成员数据源中的数据成员。 默认值为 <see cref="F:System.String.Empty" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果数据源具有只有一个成员，不需要。  
  
 使用<xref:Microsoft.Office.Tools.Excel.ListObject.DataMember%2A>属性来指定要绑定到从多成员数据源成员<xref:Microsoft.Office.Tools.Excel.ListObject>控件。 例如，如果有多个表中指定的数据源<xref:Microsoft.Office.Tools.Excel.ListObject.DataSource%2A>属性，请使用<xref:Microsoft.Office.Tools.Excel.ListObject.DataMember%2A>属性来指定要绑定到的表<xref:Microsoft.Office.Tools.Excel.ListObject>控件。  
  
   
  
## Examples  
 下面的代码示例创建具有两个 <xref:System.Data.DataSet> 对象的 <xref:System.Data.DataTable> ，并使用数据填充其中一个表。 代码随后设置<xref:Microsoft.Office.Tools.Excel.ListObject.DataSource%2A>并<xref:Microsoft.Office.Tools.Excel.ListObject.DataMember%2A>的属性<xref:Microsoft.Office.Tools.Excel.ListObject>要绑定到包含数据的表。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelListObject#18](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#18)]
 [!code-vb[Trin_ExcelListObject#18](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#18)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataMemberChanged">
      <MemberSignature Language="C#" Value="public event EventHandler DataMemberChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DataMemberChanged" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.ListObject.DataMemberChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="P:Microsoft.Office.Tools.Excel.ListObject.DataMember" /> 属性的值更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果引发此事件<xref:Microsoft.Office.Tools.Excel.ListObject.DataMember%2A>属性更改通过以编程方式修改或用户交互。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataSource">
      <MemberSignature Language="C#" Value="public object DataSource { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DataSource" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.DataSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置包含用于填充该控件中的项的值列表的源。</summary>
        <value>包含用于填充该控件中的项的值列表的源。 默认值为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在运行时，使用<xref:Microsoft.Office.Tools.Excel.ListObject.SetDataBinding%2A>方法以设置<xref:Microsoft.Office.Tools.Excel.ListObject.DataSource%2A>和<xref:Microsoft.Office.Tools.Excel.ListObject.DataMember%2A>属性。  
  
 以下数据源是有效的：  
  
-   <xref:System.Data.DataTable>。  
  
-   <xref:System.Data.DataView>。  
  
-   <xref:System.Data.DataSet>。  
  
-   <xref:System.Data.DataViewManager>。  
  
-   实现 <xref:System.ComponentModel.IListSource> 接口的任意组件。  
  
-   实现 <xref:System.Collections.IList> 接口的任意组件。  
  
 请参阅<xref:System.Windows.Forms.Binding>类概述的数据源的详细信息。  
  
 如果<xref:Microsoft.Office.Tools.Excel.ListObject.DataSource%2A>引用包含多个表或属性，则必须设置<xref:Microsoft.Office.Tools.Excel.ListObject.DataMember%2A>属性设置为一个字符串，指定要绑定到的表。 例如，如果<xref:Microsoft.Office.Tools.Excel.ListObject.DataSource%2A>是<xref:System.Data.DataSet>或<xref:System.Data.DataViewManager>，其中包含名为客户、 订单和订单明细的三个表，必须指定要绑定到的表。  
  
 设置<xref:Microsoft.Office.Tools.Excel.ListObject.DataSource%2A>未实现的对象<xref:System.Collections.IList>接口或<xref:System.ComponentModel.IListSource>将导致引发异常。  
  
   
  
## Examples  
 下面的代码示例创建具有两个 <xref:System.Data.DataSet> 对象的 <xref:System.Data.DataTable> ，并使用数据填充其中一个表。 代码随后设置<xref:Microsoft.Office.Tools.Excel.ListObject.DataSource%2A>并<xref:Microsoft.Office.Tools.Excel.ListObject.DataMember%2A>的属性<xref:Microsoft.Office.Tools.Excel.ListObject>要绑定到包含数据的表。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelListObject#18](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#18)]
 [!code-vb[Trin_ExcelListObject#18](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#18)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataSourceChanged">
      <MemberSignature Language="C#" Value="public event EventHandler DataSourceChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DataSourceChanged" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.ListObject.DataSourceChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="P:Microsoft.Office.Tools.Excel.ListObject.DataSource" /> 属性的值更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果引发此事件<xref:Microsoft.Office.Tools.Excel.ListObject.DataSource%2A>属性更改通过以编程方式修改或用户交互。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultDataSourceUpdateMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataSourceUpdateMode DefaultDataSourceUpdateMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataSourceUpdateMode DefaultDataSourceUpdateMode" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.DefaultDataSourceUpdateMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataSourceUpdateMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置默认 <see cref="T:System.Windows.Forms.DataSourceUpdateMode" />。</summary>
        <value>
          <see cref="T:System.Windows.Forms.DataSourceUpdateMode" /> 值之一。 默认值为 <see cref="F:System.Windows.Forms.DataSourceUpdateMode.Never" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性可在情况下，<xref:System.Windows.Forms.Binding>而无需<xref:System.Windows.Forms.Binding.DataSourceUpdateMode%2A>指定值添加到<xref:System.Windows.Forms.IBindableComponent.DataBindings%2A>集合。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public void Delete ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Delete() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.ListObject.Delete" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>删除动态创建的 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件，清除工作表中的单元格数据，并将该控件从 <see cref="T:Microsoft.Office.Tools.Excel.ControlCollection" /> 中移除。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法只应该用于<xref:Microsoft.Office.Tools.Excel.ListObject>在运行时以编程方式创建的控件。 如果在调用此方法引发异常<xref:Microsoft.Office.Tools.Excel.ListObject>，在设计时添加到文档。  
  
 如果列表对象链接到 SharePoint 站点中，删除它不会影响运行 Windows SharePoint Services 服务器上的数据。 对本地列表对象所做的任何未提交的更改不会发送到 SharePoint 列表。 （没有任何警告，这些未提交的更改将丢失。）  
  
   
  
## Examples  
 下面的代码示例将创建<xref:Microsoft.Office.Tools.Excel.ListObject>在当前工作表，然后显示一个消息框，询问用户是否删除<xref:Microsoft.Office.Tools.Excel.ListObject>。 如果用户接受，则<xref:Microsoft.Office.Tools.Excel.ListObject.Delete%2A>调用方法来删除<xref:Microsoft.Office.Tools.Excel.ListObject>。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelListObject#3](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#3)]
 [!code-vb[Trin_ExcelListObject#3](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Deselected">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.DocEvents_SelectionChangeEventHandler Deselected;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.DocEvents_SelectionChangeEventHandler Deselected" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.ListObject.Deselected" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.DocEvents_SelectionChangeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当所选内容从 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件移到 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件外部时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发此事件时，才<xref:Microsoft.Office.Tools.Excel.ListObject>控件具有焦点，然后焦点传输离开<xref:Microsoft.Office.Tools.Excel.ListObject>控件。  
  
   
  
## Examples  
 下面的代码示例将创建<xref:Microsoft.Office.Tools.Excel.ListObject>和一个<xref:Microsoft.Office.Tools.Excel.ListObject.Deselected>事件处理程序。 当<xref:Microsoft.Office.Tools.Excel.ListObject>处于选中状态和外部的对象<xref:Microsoft.Office.Tools.Excel.ListObject>是选择，显示一条消息是，该值指示所选内容已更改。  
  
 此版本是文档级自定义项。  
  
 [!code-csharp[Trin_ExcelListObject#19](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#19)]
 [!code-vb[Trin_ExcelListObject#19](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#19)]  
  
 此版本用于针对应用程序级外接程序。  
  
 [!code-csharp[Trin_ExcelListObject_AppLevelAddIn#19](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject_AppLevelAddIn/CS/ThisAddIn.cs#19)]
 [!code-vb[Trin_ExcelListObject_AppLevelAddIn#19](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject_AppLevelAddIn/VB/ThisAddIn.vb#19)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Disconnect">
      <MemberSignature Language="C#" Value="public void Disconnect ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Disconnect() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.ListObject.Disconnect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件移除数据绑定。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法则断开<xref:Microsoft.Office.Tools.Excel.ListObject>控件从数据源，集<xref:Microsoft.Office.Tools.Excel.ListObject.IsBinding%2A>属性设置为 false，并重置<xref:Microsoft.Office.Tools.Excel.ListObject.DataSource%2A>和<xref:Microsoft.Office.Tools.Excel.ListObject.DataMember%2A>属性。 现有数据将保留在<xref:Microsoft.Office.Tools.Excel.ListObject>控件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public string DisplayName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.DisplayName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置显示名称。</summary>
        <value>一个字符串，表示 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 的显示名称。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayRightToLeft">
      <MemberSignature Language="C#" Value="public bool DisplayRightToLeft { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DisplayRightToLeft" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.DisplayRightToLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 是否从右向左（而非从左向右）显示。</summary>
        <value>如果 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 从右向左（而非从左向右）显示，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ErrorAddDataBoundRow">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Tools.Excel.ErrorAddDataBoundRowEventHandler ErrorAddDataBoundRow;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Tools.Excel.ErrorAddDataBoundRowEventHandler ErrorAddDataBoundRow" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.ListObject.ErrorAddDataBoundRow" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Tools.Excel.ErrorAddDataBoundRowEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在用户尝试向数据绑定 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件添加行，但是该行无法添加时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 仅当引发此事件<xref:Microsoft.Office.Tools.Excel.ListObject>控件绑定到数据。  
  
 处理此事件以尝试纠正可能出现的错误。  
  
   
  
## Examples  
 下面的代码示例将创建<xref:System.Data.DataTable>和一个<xref:Microsoft.Office.Tools.Excel.ListObject>，并将绑定<xref:Microsoft.Office.Tools.Excel.ListObject>到<xref:System.Data.DataTable>。 然后，它创建<xref:Microsoft.Office.Tools.Excel.ListObject.ErrorAddDataBoundRow>事件处理程序。 若要测试事件，请手动添加到一个新行<xref:Microsoft.Office.Tools.Excel.ListObject>并输入"更改"的姓氏和名字。 事件处理程序会显示一条消息。  
  
 此版本是文档级自定义项。  
  
 [!code-csharp[Trin_ExcelListObject#20](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#20)]
 [!code-vb[Trin_ExcelListObject#20](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#20)]  
  
 此版本用于针对应用程序级外接程序。 若要使用此代码示例，请添加`using System.Data;`指令，如果使用的 C# 或`Imports System.Data`语句，如果使用的 Visual Basic。  
  
 [!code-csharp[Trin_ExcelListObject_AppLevelAddIn#20](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject_AppLevelAddIn/CS/ThisAddIn.cs#20)]
 [!code-vb[Trin_ExcelListObject_AppLevelAddIn#20](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject_AppLevelAddIn/VB/ThisAddIn.vb#20)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExportToVisio">
      <MemberSignature Language="C#" Value="public void ExportToVisio ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExportToVisio() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.ListObject.ExportToVisio" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 导出到 Visio。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HeaderRowRange">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range HeaderRowRange { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range HeaderRowRange" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.HeaderRowRange" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个表示标题行范围的 <see cref="T:Microsoft.Office.Interop.Excel.Range" />。</summary>
        <value>一个表示标题行范围的 <see cref="T:Microsoft.Office.Interop.Excel.Range" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果没有标头行，<xref:Microsoft.Office.Tools.Excel.ListObject.HeaderRowRange%2A>返回`null`。  
  
   
  
## Examples  
 下面的代码示例将创建<xref:System.Data.DataTable>和一个<xref:Microsoft.Office.Tools.Excel.ListObject>，并将绑定<xref:Microsoft.Office.Tools.Excel.ListObject>到<xref:System.Data.DataTable>。 然后获取包含标头行，并且更改将标头行的字体为粗体的范围。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelListObject#21](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#21)]
 [!code-vb[Trin_ExcelListObject#21](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InnerObject">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.ListObject InnerObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.ListObject InnerObject" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.InnerObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.ListObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.ListObject" />，表示 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 的基础本机对象。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.ListObject" />，表示 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 的基础本机对象。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertRowRange">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range InsertRowRange { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range InsertRowRange" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.InsertRowRange" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个表示 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 控件的插入行（如果有的话）的 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" />。</summary>
        <value>一个表示 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 控件的插入行（如果有的话）的 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果没有插入行，<xref:Microsoft.Office.Tools.Excel.ListObject.InsertRowRange%2A>返回`null`。  
  
   
  
## Examples  
 下面的代码示例创建<xref:Microsoft.Office.Tools.Excel.ListObject>，获取包含插入行，然后显示一条消息，显示多少的单元格插入行的范围包含。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelListObject#22](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#22)]
 [!code-vb[Trin_ExcelListObject#22](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBinding">
      <MemberSignature Language="C#" Value="public bool IsBinding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBinding" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.IsBinding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示数据绑定功能是否处于活动状态。</summary>
        <value>如果数据绑定功能处于活动状态，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 满足这些条件时，绑定处于活动状态： 所有属性均都设置、 用户未调用<xref:System.Windows.Forms.BindingManagerBase.ResumeBinding%2A>或<xref:System.Windows.Forms.BindingManagerBase.SuspendBinding%2A>上<xref:System.Windows.Forms.BindingManagerBase>的<xref:System.Windows.Forms.Binding>所属，以及对其控制<xref:System.Windows.Forms.Binding>所属已创建。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSelected">
      <MemberSignature Language="C#" Value="public bool IsSelected { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSelected" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.IsSelected" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 是否处于选定状态。</summary>
        <value>如果 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 处于选定状态，或者包括 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 一部分的任何范围处于选定状态，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ListColumns">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.ListColumns ListColumns { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.ListColumns ListColumns" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.ListColumns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.ListColumns</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.ListColumns" /> 集合，该集合表示 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件中的所有列。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.ListColumns" /> 集合，表示 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件中的所有列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 要从此集合中删除任何项，请勿使用`Delete`项的方法。 使用`Delete`要删除的项; 的项范围的方法为例`ListColumns.Item(1).Range.Delete()`。 请注意，不能删除的列<xref:Microsoft.Office.Tools.Excel.ListObject>绑定到数据源的控件。  
  
   
  
## Examples  
 下面的代码示例将创建<xref:Microsoft.Office.Tools.Excel.ListObject>，获取列的集合，然后显示一条消息，显示列数<xref:Microsoft.Office.Tools.Excel.ListObject>包含。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelListObject#23](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#23)]
 [!code-vb[Trin_ExcelListObject#23](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ListRows">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.ListRows ListRows { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.ListRows ListRows" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.ListRows" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.ListRows</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.ListRows" /> 对象，该对象表示 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件中的所有数据行。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.ListRows" /> 对象，表示 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件中的所有数据行。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Interop.Excel.ListRows>返回的对象不包含标头，总计行或插入行。  
  
 要从此集合中删除任何项，请勿使用`Delete`项的方法。 使用`Delete`要删除的项; 的项范围的方法为例`ListRows.Item(1).Range.Delete()`。  
  
   
  
## Examples  
 下面的代码示例将创建<xref:Microsoft.Office.Tools.Excel.ListObject>，获取行的集合，然后显示一条消息，显示行数<xref:Microsoft.Office.Tools.Excel.ListObject>包含。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelListObject#24](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#24)]
 [!code-vb[Trin_ExcelListObject#24](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#24)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MappedColumns">
      <MemberSignature Language="C#" Value="public string[] MappedColumns { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] MappedColumns" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.MappedColumns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件的名称。</summary>
        <value>
          <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此名称仅用作的唯一标识符<xref:Microsoft.Office.Interop.Excel.ListObjects.Item%2A?displayProperty=fullName>属性的<xref:Microsoft.Office.Interop.Excel.ListObjects?displayProperty=fullName>集合。 此属性只能通过对象模型进行设置。  
  
 默认情况下，每个<xref:Microsoft.Office.Tools.Excel.ListObject>控件的名称以单词"列表"中后, 接一个数字 （无空格） 开始。 如果尝试设置<xref:Microsoft.Office.Tools.Excel.ListObject.Name%2A>属性设置为已由另一名称<xref:Microsoft.Office.Tools.Excel.ListObject>控件，将引发异常。  
  
   
  
## Examples  
 下面的代码示例将创建<xref:Microsoft.Office.Tools.Excel.ListObject>在当前工作表，然后使用<xref:Microsoft.Office.Tools.Excel.ListObject.Name%2A>属性的名称设置<xref:Microsoft.Office.Tools.Excel.ListObject>到的"Employees"。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelListObject#1](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#1)]
 [!code-vb[Trin_ExcelListObject#1](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OriginalDataRestored">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Tools.Excel.OriginalDataRestoredEventHandler OriginalDataRestored;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Tools.Excel.OriginalDataRestoredEventHandler OriginalDataRestored" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.ListObject.OriginalDataRestored" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Tools.Excel.OriginalDataRestoredEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在用户执行被禁止的操作时发生，<see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件随后会恢复回其原始状态。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 将导致引发此事件的一个示例是操作的如果用户对更改数据是操作的只读的。 <xref:Microsoft.Office.Tools.Excel.ListObject>控件撤消所做的更改，并替换原始值。  
  
 此事件提供了一个包含内容已还原的枚举中的信息和原因。  
  
   
  
## Examples  
 下面的代码示例将创建<xref:System.Data.DataTable>和一个<xref:Microsoft.Office.Tools.Excel.ListObject>，并将绑定<xref:Microsoft.Office.Tools.Excel.ListObject>到<xref:System.Data.DataTable>。 然后，它创建<xref:Microsoft.Office.Tools.Excel.ListObject.OriginalDataRestored>事件处理程序。 若要测试事件，请右键单击上方的列字母<xref:Microsoft.Office.Tools.Excel.ListObject>在工作表 1，然后单击**删除**的快捷菜单中。 事件处理程序替换的列和列标题数据，并显示每个操作的消息。  
  
 此版本是文档级自定义项。  
  
 [!code-csharp[Trin_ExcelListObject#25](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#25)]
 [!code-vb[Trin_ExcelListObject#25](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#25)]  
  
 此版本用于针对应用程序级外接程序。 若要使用此代码示例，请添加`using System.Data;`指令，如果使用的 C# 或`Imports System.Data`语句，如果使用的 Visual Basic。  
  
 [!code-csharp[Trin_ExcelListObject_AppLevelAddIn#25](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject_AppLevelAddIn/CS/ThisAddIn.cs#25)]
 [!code-vb[Trin_ExcelListObject_AppLevelAddIn#25](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject_AppLevelAddIn/VB/ThisAddIn.vb#25)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public object Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Parent" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件的父对象。</summary>
        <value>
          <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件的父对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例创建<xref:Microsoft.Office.Tools.Excel.ListObject>，然后在消息中显示其父对象的名称。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelListObject#26](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#26)]
 [!code-vb[Trin_ExcelListObject#26](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#26)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Publish">
      <MemberSignature Language="C#" Value="public string Publish (object Target, bool LinkSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Publish(object Target, bool LinkSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.ListObject.Publish(System.Object,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Target" Type="System.Object" />
        <Parameter Name="LinkSource" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Target">包含字符串数组。 下表描述了此数组的元素。  [1|1] 元素编号  [1|2] 内容  [2|1] 0  [2|2] SharePoint 服务器的 URL。  [3|1] 1  [3|2] ListName（显示名称）。  [4|1] 2  [4|2] 列表的说明。</param>
        <param name="LinkSource">布尔值。 （请参见“备注”部分。）</param>
        <summary>将 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件发布到运行 Microsoft Windows SharePoint Services 的服务器。</summary>
        <returns>SharePoint 站点上已发布列表的 URL。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:Microsoft.Office.Tools.Excel.ListObject>控制当前未链接到 SharePoint 站点上，设置列表`LinkSource`到`true`将指定的 SharePoint 站点上创建一个新列表。 如果<xref:Microsoft.Office.Tools.Excel.ListObject>控件当前已链接到 SharePoint 站点，则设置`LinkSource`参数`true`将替换现有的链接 （只能将链接列表到一个 SharePoint 站点）。 如果<xref:Microsoft.Office.Tools.Excel.ListObject>控制当前未链接，设置`LinkSource`到`false`将保留<xref:Microsoft.Office.Tools.Excel.ListObject>已取消链接控件。 如果<xref:Microsoft.Office.Tools.Excel.ListObject>控件当前已链接到 SharePoint 站点，则设置`LinkSource`到`false`将保留<xref:Microsoft.Office.Tools.Excel.ListObject>控件链接到当前的 SharePoint 站点。  
  
   
  
## Examples  
 下面的代码示例将创建<xref:Microsoft.Office.Tools.Excel.ListObject>在当前工作表，然后调用<xref:Microsoft.Office.Tools.Excel.ListObject.Publish%2A>方法来发布<xref:Microsoft.Office.Tools.Excel.ListObject>到运行 Microsoft Windows SharePoint Services 的网站。 此示例假定`SharePointURL`参数标识一个运行 Microsoft Windows SharePoint Services 网站的有效 URL。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelListObject#4](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#4)]
 [!code-vb[Trin_ExcelListObject#4](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryTable">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.QueryTable QueryTable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.QueryTable QueryTable" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.QueryTable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.QueryTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:Microsoft.Office.Interop.Excel.QueryTable" />，它为 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件提供指向列表服务器的链接。</summary>
        <value>
          <see cref="T:Microsoft.Office.Interop.Excel.QueryTable" />，为 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件提供指向列表服务器的链接。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.ListObject.QueryTable%2A>属性来刷新相交的查询表<xref:Microsoft.Office.Tools.Excel.ListObject>。 此代码示例假定当前工作表包含<xref:Microsoft.Office.Tools.Excel.ListObject>名为`customerListObject`查询表与相交。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelListObject#27](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#27)]
 [!code-vb[Trin_ExcelListObject#27](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#27)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Range">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range Range { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range Range" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.Range" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，表示要应用 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 的范围。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，表示要应用 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 的范围。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果显示，包括标头、 插入行和总计行。  
  
   
  
## Examples  
 下面的代码示例将创建<xref:Microsoft.Office.Tools.Excel.ListObject>，然后显示一条消息显示到其中的范围中有多少个单元格<xref:Microsoft.Office.Tools.Excel.ListObject>适用。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelListObject#28](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#28)]
 [!code-vb[Trin_ExcelListObject#28](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#28)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public void Refresh ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Refresh() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.ListObject.Refresh" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>用运行 Microsoft Windows SharePoint Services 的服务器上的当前数据和架构更新 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法可仅与<xref:Microsoft.Office.Tools.Excel.ListObject>都链接到 SharePoint 站点的控件。 如果 SharePoint 站点不可用，则调用此方法将导致引发异常。  
  
 调用此方法不会提交对更改<xref:Microsoft.Office.Tools.Excel.ListObject>Excel 工作簿中。 在 Excel 中的列表对象中未提交的更改将被丢弃时<xref:Microsoft.Office.Tools.Excel.ListObject.Refresh%2A>调用方法。 若要避免丢失任何未提交的更改，请调用<xref:Microsoft.Office.Tools.Excel.ListObject.UpdateChanges%2A>方法<xref:Microsoft.Office.Tools.Excel.ListObject>控件之前调用<xref:Microsoft.Office.Tools.Excel.ListObject.Refresh%2A>方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RefreshDataRow">
      <MemberSignature Language="C#" Value="public void RefreshDataRow (int dataRowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RefreshDataRow(int32 dataRowIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.ListObject.RefreshDataRow(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataRowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dataRowIndex">数据源中数据行的索引。</param>
        <summary>更新与指定数据行关联的 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 数据行。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法不会发送到中的数据所做的更改<xref:Microsoft.Office.Tools.Excel.ListObject>返回到数据源中; 它仅获取信息。  
  
 如果此数据对象不会引发通知事件数据发生更改时，例如，如果创建一个类来保存数据，但不是包括事件以通知的更改的侦听器，请使用此方法。 如果此数据对象不会引发一个事件，<xref:Microsoft.Office.Tools.Excel.ListObject>不会自动更新。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RefreshDataRows">
      <MemberSignature Language="C#" Value="public void RefreshDataRows ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RefreshDataRows() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.ListObject.RefreshDataRows" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>使用数据源中的数据更新 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 中的所有行。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法不会发送到中的数据所做的更改<xref:Microsoft.Office.Tools.Excel.ListObject>返回到数据源中; 它仅获取信息。  
  
 如果此数据对象不会引发通知事件数据发生更改时，例如，如果创建一个类来保存数据，但不是包括事件以通知的更改的侦听器，请使用此方法。 如果此数据对象不会引发一个事件，<xref:Microsoft.Office.Tools.Excel.ListObject>不会自动更新。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetPersistedBindingInformation">
      <MemberSignature Language="C#" Value="public void ResetPersistedBindingInformation ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ResetPersistedBindingInformation() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.ListObject.ResetPersistedBindingInformation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>清除有关用户对 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件所做的更改的信息。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果用户更改的列或行的顺序，在工作表中存储有关所做的更改的信息，以便<xref:Microsoft.Office.Tools.Excel.ListObject>控件是自定义配置在下次打开该工作表中。 <xref:Microsoft.Office.Tools.Excel.ListObject.ResetPersistedBindingInformation%2A> 清除存储的信息，以便<xref:Microsoft.Office.Tools.Excel.ListObject>控件会出现在默认配置。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Resize">
      <MemberSignature Language="C#" Value="public void Resize (Microsoft.Office.Interop.Excel.Range Range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Resize(class Microsoft.Office.Interop.Excel.Range Range) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.ListObject.Resize(Microsoft.Office.Interop.Excel.Range)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Range" Type="Microsoft.Office.Interop.Excel.Range" />
      </Parameters>
      <Docs>
        <param name="Range">列表的新范围。</param>
        <summary>允许在新范围上调整 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件的大小。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 插入或移动此属性没有单元格。  
  
 标头必须保留在同一行中，并且生成的列表必须重叠的原始列表。 列表必须包含一个标题行和至少一个数据行。  
  
 有关链接到正在运行 Microsoft Windows SharePoint Services 的服务器的列表，您可以调整大小，从而使用此方法的列表`Range`参数不同于当前范围的<xref:Microsoft.Office.Tools.Excel.ListObject>仅在的行数中它包含。 尝试重设列表大小链接到 Windows SharePoint Services 通过添加或删除列 (在`Range`参数) 会导致运行时错误。  
  
   
  
## Examples  
 下面的代码示例将创建<xref:Microsoft.Office.Tools.Excel.ListObject>在当前工作表，然后调用<xref:Microsoft.Office.Tools.Excel.ListObject.Resize%2A>方法来增加的大小<xref:Microsoft.Office.Tools.Excel.ListObject>。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelListObject#5](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#5)]
 [!code-vb[Trin_ExcelListObject#5](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveSortOrder">
      <MemberSignature Language="C#" Value="public bool SaveSortOrder { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SaveSortOrder" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.SaveSortOrder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件的行顺序是否已保存到工作表中。</summary>
        <value>若要将行顺序保存到工作表中，请使用 <see langword="true" />；否则使用 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性仅适用于<xref:Microsoft.Office.Tools.Excel.ListObject>绑定到数据的控件。  
  
 如果你未设置此属性的行顺序<xref:Microsoft.Office.Tools.Excel.ListObject>将匹配数据源的行顺序的下次打开该工作簿时，即使用户对排序进行了更改并保存该工作簿。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Selected">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.DocEvents_SelectionChangeEventHandler Selected;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.DocEvents_SelectionChangeEventHandler Selected" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.ListObject.Selected" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.DocEvents_SelectionChangeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当选择 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 为所选内容更改时引发此事件<xref:Microsoft.Office.Tools.Excel.ListObject>控件。  
  
   
  
## Examples  
 下面的代码示例将创建<xref:Microsoft.Office.Tools.Excel.ListObject>，然后创建的事件处理程序<xref:Microsoft.Office.Tools.Excel.ListObject.Selected>事件。 若要测试的事件处理程序，请确保<xref:Microsoft.Office.Tools.Excel.ListObject>未选择，并选择它。  
  
 此版本是文档级自定义项。  
  
 [!code-csharp[Trin_ExcelListObject#29](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#29)]
 [!code-vb[Trin_ExcelListObject#29](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#29)]  
  
 此版本用于针对应用程序级外接程序。  
  
 [!code-csharp[Trin_ExcelListObject_AppLevelAddIn#29](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject_AppLevelAddIn/CS/ThisAddIn.cs#29)]
 [!code-vb[Trin_ExcelListObject_AppLevelAddIn#29](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject_AppLevelAddIn/VB/ThisAddIn.vb#29)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectedIndex">
      <MemberSignature Language="C#" Value="public int SelectedIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SelectedIndex" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.SelectedIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置当前选定的行的索引。</summary>
        <value>当前选定的行的索引号。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性是从 1 开始，不是从 0 开始。 中的第一个数据行<xref:Microsoft.Office.Tools.Excel.ListObject>控件具有索引号为 1。  
  
   
  
## Examples  
 下面的代码示例创建<xref:Microsoft.Office.Tools.Excel.ListObject>当前工作表上。 它使用<xref:Microsoft.Office.Tools.Excel.ListObject.SelectedIndex%2A>和<xref:Microsoft.Office.Tools.Excel.ListObject.AutoSelectRows%2A>属性来选择第二行并指定当用户单击行选择整行。 此代码示例还创建的事件处理程序<xref:Microsoft.Office.Tools.Excel.ListObject.SelectedIndexChanged>显示一个消息框，选择一个新行时的事件。  
  
 此版本是文档级自定义项。  
  
 [!code-csharp[Trin_ExcelListObject#2](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#2)]
 [!code-vb[Trin_ExcelListObject#2](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#2)]  
  
 此版本用于针对应用程序级外接程序。  
  
 [!code-csharp[Trin_ExcelListObject_AppLevelAddIn#2](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject_AppLevelAddIn/CS/ThisAddIn.cs#2)]
 [!code-vb[Trin_ExcelListObject_AppLevelAddIn#2](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject_AppLevelAddIn/VB/ThisAddIn.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectedIndexChanged">
      <MemberSignature Language="C#" Value="public event EventHandler SelectedIndexChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SelectedIndexChanged" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.ListObject.SelectedIndexChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="P:Microsoft.Office.Tools.Excel.ListObject.SelectedIndex" /> 属性的值更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果选择标头、 插入行或总计行，不引发此事件。  
  
 如果引发此事件<xref:Microsoft.Office.Tools.Excel.ListObject.SelectedIndex%2A>属性更改通过以编程方式修改或用户交互。  
  
   
  
## Examples  
 下面的代码示例创建<xref:Microsoft.Office.Tools.Excel.ListObject>当前工作表上。 它使用<xref:Microsoft.Office.Tools.Excel.ListObject.SelectedIndex%2A>和<xref:Microsoft.Office.Tools.Excel.ListObject.AutoSelectRows%2A>属性来选择第二行并指定当用户单击行选择整行。 此代码示例还创建的事件处理程序<xref:Microsoft.Office.Tools.Excel.ListObject.SelectedIndexChanged>显示一个消息框，选择一个新行时的事件。  
  
 此版本是文档级自定义项。  
  
 [!code-csharp[Trin_ExcelListObject#2](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#2)]
 [!code-vb[Trin_ExcelListObject#2](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#2)]  
  
 此版本用于针对应用程序级外接程序。  
  
 [!code-csharp[Trin_ExcelListObject_AppLevelAddIn#2](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject_AppLevelAddIn/CS/ThisAddIn.cs#2)]
 [!code-vb[Trin_ExcelListObject_AppLevelAddIn#2](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject_AppLevelAddIn/VB/ThisAddIn.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectionChange">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.DocEvents_SelectionChangeEventHandler SelectionChange;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.DocEvents_SelectionChangeEventHandler SelectionChange" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.ListObject.SelectionChange" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.DocEvents_SelectionChangeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件内部的所选内容更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当任何所选范围内的时，将引发此事件<xref:Microsoft.Office.Tools.Excel.ListObject>更改。  
  
 从移动焦点时不会引发此事件内<xref:Microsoft.Office.Tools.Excel.ListObject>外部的控制转移到<xref:Microsoft.Office.Tools.Excel.ListObject>控件。 引发时焦点从外部<xref:Microsoft.Office.Tools.Excel.ListObject>控制对<xref:Microsoft.Office.Tools.Excel.ListObject>控件。  
  
   
  
## Examples  
 下面的代码示例将创建<xref:Microsoft.Office.Tools.Excel.ListObject>，然后创建的事件处理程序<xref:Microsoft.Office.Tools.Excel.ListObject.SelectionChange>事件。 若要测试的事件处理程序，请选择中的单元格<xref:Microsoft.Office.Tools.Excel.ListObject>，然后选择在不同的单元格<xref:Microsoft.Office.Tools.Excel.ListObject>。  
  
 此版本是文档级自定义项。  
  
 [!code-csharp[Trin_ExcelListObject#30](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#30)]
 [!code-vb[Trin_ExcelListObject#30](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#30)]  
  
 此版本用于针对应用程序级外接程序。  
  
 [!code-csharp[Trin_ExcelListObject_AppLevelAddIn#30](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject_AppLevelAddIn/CS/ThisAddIn.cs#30)]
 [!code-vb[Trin_ExcelListObject_AppLevelAddIn#30](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject_AppLevelAddIn/VB/ThisAddIn.vb#30)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDataBinding">
      <MemberSignature Language="C#" Value="public void SetDataBinding (object dataSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDataBinding(object dataSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.ListObject.SetDataBinding(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSource" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="dataSource">要用作 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件的数据源的对象。</param>
        <summary>将 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件绑定到数据源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 数据源可以是任何对象，它实现<xref:System.Collections.IList>， <xref:System.ComponentModel.IListSource>， <xref:System.ComponentModel.IBindingList>，或<xref:System.Collections.IEnumerable>，如<xref:System.Data.DataTable>或一维数组。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:Microsoft.Office.Tools.Excel.ListObject.SetDataBinding%2A>方法将绑定<xref:Microsoft.Office.Tools.Excel.ListObject>到<xref:System.Data.DataTable>。 <xref:System.Data.DataTable>包含两个列，其中包含名称和员工的年龄和表示员工条目的四个行。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelListObject#7](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#7)]
 [!code-vb[Trin_ExcelListObject#7](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:Microsoft.Office.Tools.Excel.SetDataBindingFailedException">未能绑定到指定的数据源。</exception>
        <exception cref="T:System.ArgumentException">该参数无效。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="dataSource" /> 参数为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="SetDataBinding">
      <MemberSignature Language="C#" Value="public void SetDataBinding (object dataSource, string dataMember);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDataBinding(object dataSource, string dataMember) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.ListObject.SetDataBinding(System.Object,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSource" Type="System.Object" />
        <Parameter Name="dataMember" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSource">要用作 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件的数据源的对象。</param>
        <param name="dataMember">由 <see cref="P:Microsoft.Office.Tools.Excel.ListObject.DataMember" /> 返回的对象中用来指定要绑定到的属性的 <see cref="P:Microsoft.Office.Tools.Excel.ListObject.DataSource" />。</param>
        <summary>将 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件绑定到数据源的指定数据成员。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 数据源可以是任何对象，它实现<xref:System.Collections.IList>， <xref:System.ComponentModel.IListSource>， <xref:System.ComponentModel.IBindingList>，或<xref:System.Collections.IEnumerable>。  
  
 数据成员必须是返回可绑定集合的数据源的属性。 例如，<xref:System.Data.DataSet>源具有表作为数据成员。  
  
   
  
## Examples  
 下面的代码示例将创建<xref:System.Data.DataSet>、 一个<xref:System.Data.DataTable>，和一个<xref:Microsoft.Office.Tools.Excel.ListObject>。 然后将绑定到列表对象<xref:System.Data.DataSet>和<xref:System.Data.DataTable>。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelListObject#31](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#31)]
 [!code-vb[Trin_ExcelListObject#31](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#31)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:Microsoft.Office.Tools.Excel.SetDataBindingFailedException">未能绑定到指定的数据源。</exception>
        <exception cref="T:System.ArgumentException">一个或多个参数无效。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="dataSource" /> 参数为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="SetDataBinding">
      <MemberSignature Language="C#" Value="public void SetDataBinding (object dataSource, string dataMember, string[] mappedColumns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDataBinding(object dataSource, string dataMember, string[] mappedColumns) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.ListObject.SetDataBinding(System.Object,System.String,System.String[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSource" Type="System.Object" />
        <Parameter Name="dataMember" Type="System.String" />
        <Parameter Name="mappedColumns" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="dataSource">要用作 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件的数据源的对象。</param>
        <param name="dataMember">由 <see cref="P:Microsoft.Office.Tools.Excel.ListObject.DataMember" /> 返回的对象中用来指定要绑定到的属性的 <see cref="P:Microsoft.Office.Tools.Excel.ListObject.DataSource" />。</param>
        <param name="mappedColumns">数据成员中要显示在 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件中的列名。 若要添加未映射的列，请在数组中包括一个空字符串。</param>
        <summary>将 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件绑定到数据源的指定数据成员，并且仅显示该数据成员的指定列。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `dataSource`参数可以是任何对象，它实现<xref:System.Collections.IList>， <xref:System.ComponentModel.IListSource>， <xref:System.ComponentModel.IBindingList>，或<xref:System.Collections.IEnumerable>。  
  
 `dataMember`参数必须是返回可绑定集合的数据源的属性。 例如，<xref:System.Data.DataSet>源具有表作为数据成员。  
  
   
  
## Examples  
 下面的代码示例将创建<xref:System.Data.DataSet>、 一个<xref:System.Data.DataTable>，和一个<xref:Microsoft.Office.Tools.Excel.ListObject>。 然后将绑定<xref:Microsoft.Office.Tools.Excel.ListObject>到<xref:System.Data.DataSet>并<xref:System.Data.DataTable>，但仅包括两个可能的表的列中的一个<xref:Microsoft.Office.Tools.Excel.ListObject>。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelListObject#32](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#32)]
 [!code-vb[Trin_ExcelListObject#32](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:Microsoft.Office.Tools.Excel.SetDataBindingFailedException">未能绑定到指定的数据源。</exception>
        <exception cref="T:System.ArgumentException">一个或多个参数无效。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="dataSource" /> 参数为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="SharePointURL">
      <MemberSignature Language="C#" Value="public string SharePointURL { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SharePointURL" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.SharePointURL" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取给定 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件的 SharePoint 列表的 URL。</summary>
        <value>给定 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件的 SharePoint 列表的 URL。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 访问此属性会导致如果列表未链接到 SharePoint 站点，则引发异常。  
  
   
  
## Examples  
 下面的代码示例发布<xref:Microsoft.Office.Tools.Excel.ListObject>到运行 Microsoft Windows SharePoint Services 的网站。 此示例假定有<xref:Microsoft.Office.Tools.Excel.ListObject>名为`customerListObject`当前的工作表上<xref:Microsoft.Office.Tools.Excel.ListObject>链接到 SharePoint 站点。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelListObject#33](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#33)]
 [!code-vb[Trin_ExcelListObject#33](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowAutoFilter">
      <MemberSignature Language="C#" Value="public bool ShowAutoFilter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowAutoFilter" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.ShowAutoFilter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否显示自动筛选。</summary>
        <value>如果显示自动筛选，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Tools.Excel.ListObject.ShowAutoFilter%2A>属性的默认值为`true`新<xref:Microsoft.Office.Tools.Excel.ListObject>控件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowHeaders">
      <MemberSignature Language="C#" Value="public bool ShowHeaders { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowHeaders" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.ShowHeaders" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否应显示标题信息。</summary>
        <value>如果应显示标题信息，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowTableStyleColumnStripes">
      <MemberSignature Language="C#" Value="public bool ShowTableStyleColumnStripes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowTableStyleColumnStripes" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.ShowTableStyleColumnStripes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>设置或获取一个值，该值指示是否使用列条纹表样式。</summary>
        <value>如果使用列条纹表样式，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowTableStyleFirstColumn">
      <MemberSignature Language="C#" Value="public bool ShowTableStyleFirstColumn { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowTableStyleFirstColumn" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.ShowTableStyleFirstColumn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否对第一列设置格式。</summary>
        <value>如果对第一列设置格式，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowTableStyleLastColumn">
      <MemberSignature Language="C#" Value="public bool ShowTableStyleLastColumn { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowTableStyleLastColumn" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.ShowTableStyleLastColumn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否对最后一列设置格式。</summary>
        <value>如果对最后一列设置格式，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowTableStyleRowStripes">
      <MemberSignature Language="C#" Value="public bool ShowTableStyleRowStripes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowTableStyleRowStripes" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.ShowTableStyleRowStripes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>设置或获取一个值，该值指示是否使用行条纹表样式。</summary>
        <value>如果使用行条纹表样式，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowTotals">
      <MemberSignature Language="C#" Value="public bool ShowTotals { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowTotals" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.ShowTotals" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值表示总计行是否可见。</summary>
        <value>如果总计行可见，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Sort Sort { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Sort Sort" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.Sort" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Sort</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 集合的一个或多个排序列以及排序顺序。</summary>
        <value>一个<c>Microsoft.Office.Interop.Excel.Sort</c> ，表示列排序或列和的排序顺序<see cref="T:Microsoft.Office.Tools.Excel.ListObject" />集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例添加<xref:Microsoft.Office.Tools.Excel.ListObject>到当前工作表。 然后，示例填充<xref:Microsoft.Office.Tools.Excel.ListObject>，这对应于 Excel 表、 使用的任意数据的两个行，并指定排序是升序顺序对列范围 a1: a3 执行。 接下来，该示例调用`Microsoft.Office.Interop.Excel.Sort.Apply`方法对表进行排序。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_Excelworkbook_Additional#33](~/snippets/csharp/VS_Snippets_OfficeSP/trin_excelworkbook_additional/cs/Sheet3.cs#33)]
 [!code-vb[Trin_Excelworkbook_Additional#33](~/snippets/visualbasic/VS_Snippets_OfficeSP/trin_excelworkbook_additional/vb/Sheet3.vb#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceType">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlListObjectSourceType SourceType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlListObjectSourceType SourceType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.SourceType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlListObjectSourceType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取列表的当前源。</summary>
        <value>
          <see cref="T:Microsoft.Office.Interop.Excel.XlListObjectSourceType" /> 值之一。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例将创建<xref:System.Data.DataTable>和一个<xref:Microsoft.Office.Tools.Excel.ListObject>，，然后将绑定<xref:Microsoft.Office.Tools.Excel.ListObject>到<xref:System.Data.DataTable>。 然后，在消息中显示的列表的源。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelListObject#34](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#34)]
 [!code-vb[Trin_ExcelListObject#34](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#34)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Summary">
      <MemberSignature Language="C#" Value="public string Summary { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Summary" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.Summary" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置与指定表的可选文本字符串关联的说明。</summary>
        <value>一个字符串，表示与指定表的可选文本字符串关联的说明。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:Microsoft.Office.Tools.Excel.ListObject.Summary%2A>的设置的属性相对应**描述**框中**可选文字**对话框中，右键单击某个表，指向显示**表**，然后单击**可选文字**。  
  
> [!NOTE]
>  此属性将出现在 IntelliSense 中 Excel 2007 项目中面向[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]。 但是，此属性不能使用 Excel 2007 项目中。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MissingMemberException">此属性用于 Excel 2007 项目。</exception>
      </Docs>
    </Member>
    <Member MemberName="TableStyle">
      <MemberSignature Language="C#" Value="public object TableStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object TableStyle" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.TableStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置表样式。</summary>
        <value>一个表示表样式的对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例将添加<xref:Microsoft.Office.Tools.Excel.ListObject>到`Sheet1`工作表。 该示例然后设置的表样式<xref:Microsoft.Office.Tools.Excel.ListObject>，它为对应于 Excel 表，**表样式深色 10**样式。 为此属性可以设置表样式对应的表样式时选择某个表时，将显示设计选项卡上的 Excel 用户界面中提供的。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_Excelworkbook_Additional#41](~/snippets/csharp/VS_Snippets_OfficeSP/trin_excelworkbook_additional/cs/ThisWorkbook.cs#41)]
 [!code-vb[Trin_Excelworkbook_Additional#41](~/snippets/visualbasic/VS_Snippets_OfficeSP/trin_excelworkbook_additional/vb/ThisWorkbook.vb#41)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置包含有关 <see cref="P:Microsoft.Office.Tools.Excel.ListObject.Tag" /> 控件的数据的对象。</summary>
        <value>一个包含有关 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件的数据的对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一个常见用途<xref:Microsoft.Office.Tools.Excel.ListObject.Tag%2A>属性是与密切关联的数据存储<xref:Microsoft.Office.Tools.Excel.ListObject>控件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TotalsRowRange">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range TotalsRowRange { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range TotalsRowRange" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.TotalsRowRange" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个表示 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 控件的总计行的 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" />。</summary>
        <value>一个表示 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 控件的总计行的 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性返回<xref:Microsoft.Office.Interop.Excel.Range>仅当中显示总计行<xref:Microsoft.Office.Tools.Excel.ListObject>控件。 如果未显示总计行，它将返回`null`。  
  
   
  
## Examples  
 下面的代码示例将创建<xref:System.Data.DataTable>和一个<xref:Microsoft.Office.Tools.Excel.ListObject>，并将绑定<xref:Microsoft.Office.Tools.Excel.ListObject>到<xref:System.Data.DataTable>。 然后获取包含总计行和总计行字体变为斜体的范围。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelListObject#35](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#35)]
 [!code-vb[Trin_ExcelListObject#35](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#35)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unlink">
      <MemberSignature Language="C#" Value="public void Unlink ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Unlink() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.ListObject.Unlink" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 控件中移除指向 Microsoft Windows SharePoint Services 站点的链接。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用此方法后，<xref:Microsoft.Office.Tools.Excel.ListObject>是取消链接，取消链接的操作无法撤消。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unlist">
      <MemberSignature Language="C#" Value="public void Unlist ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Unlist() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.ListObject.Unlist" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从 <see cref="T:Microsoft.Office.Interop.Excel.ListObject" /> 控件中移除列表功能。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法从本机 Excel 中移除列表功能<xref:Microsoft.Office.Interop.Excel.ListObject?displayProperty=fullName>对象，但不会影响<xref:Microsoft.Office.Tools.Excel.ListObject?displayProperty=fullName>宿主控件; 该控件将保持在项目生成的代码。  
  
 使用此方法后，由列表组成的单元格的范围将是常规的数据区域。  
  
 运行此方法保留在工作表中单元格数据、 格式和公式。 总计行也将保持不变。 此方法删除任何链接到 Microsoft Windows SharePoint Services 站点。 从列表中，还删除了自动筛选和插入行。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateChanges">
      <MemberSignature Language="C#" Value="public void UpdateChanges (Microsoft.Office.Interop.Excel.XlListConflict iConflictType = Microsoft.Office.Interop.Excel.XlListConflict.xlListConflictDialog);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UpdateChanges(valuetype Microsoft.Office.Interop.Excel.XlListConflict iConflictType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.ListObject.UpdateChanges(Microsoft.Office.Interop.Excel.XlListConflict)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iConflictType" Type="Microsoft.Office.Interop.Excel.XlListConflict" />
      </Parameters>
      <Docs>
        <param name="iConflictType">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlMap">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XmlMap XmlMap { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.XmlMap XmlMap" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.ListObject.XmlMap" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XmlMap</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个表示该列表所用架构映射的 <see cref="T:Microsoft.Office.Interop.Excel.XmlMap" />。</summary>
        <value>一个表示该列表所用架构映射的 <see cref="T:Microsoft.Office.Interop.Excel.XmlMap" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例显示的名称<xref:Microsoft.Office.Interop.Excel.XmlMap>映射到<xref:Microsoft.Office.Tools.Excel.ListObject>。 此示例假定有<xref:Microsoft.Office.Tools.Excel.ListObject>名为`customerListObject`当前的工作表上<xref:Microsoft.Office.Tools.Excel.ListObject>使用架构映射。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelListObject#36](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelListObject/CS/Trin_ExcelListObject.cs#36)]
 [!code-vb[Trin_ExcelListObject#36](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelListObject/VB/Sheet1.vb#36)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>