<Type Name="ApplicationFactory" FullName="Microsoft.Office.Tools.Excel.ApplicationFactory">
  <Metadata><Meta Name="ms.openlocfilehash" Value="78b06a78b4f9ebe52fb102d2a4ee6348fdef227f" /><Meta Name="ms.sourcegitcommit" Value="7439021cdeee6a9ef5d4640250701344f6cbba15" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="08/13/2019" /><Meta Name="ms.locfileid" Value="69005372" /></Metadata><TypeSignature Language="C#" Value="public interface ApplicationFactory : Microsoft.Office.Tools.Factory" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ApplicationFactory implements class Microsoft.Office.Tools.Factory" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Tools.Excel.ApplicationFactory" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Office.Tools.Factory</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("7FB273FD-6B13-4113-B557-8F9BDF4E1B2D")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="50d91-101">提供可用于在应用程序级外接程序中执行杂项任务（如在运行时创建功能区控件以及向工作表添加智能标记）的方法。</span><span class="sxs-lookup"><span data-stu-id="50d91-101">Provides methods you can use to perform miscellaneous tasks in application-level add-ins, such as creating Ribbon controls at run time and adding smart tags to worksheets.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50d91-102">若要获取<xref:Microsoft.Office.Tools.Excel.Factory>对象, 请使用`Globals.Factory`项目中的属性。</span><span class="sxs-lookup"><span data-stu-id="50d91-102">To get a <xref:Microsoft.Office.Tools.Excel.Factory> object, use the `Globals.Factory` property in your project.</span></span> <span data-ttu-id="50d91-103">有关详细信息, 请参阅[对 Office 项目中对象的全局访问](/visualstudio/vsto/global-access-to-objects-in-office-projects)。</span><span class="sxs-lookup"><span data-stu-id="50d91-103">For more information, see [Global Access to Objects in Office Projects](/visualstudio/vsto/global-access-to-objects-in-office-projects).</span></span>  
  
 [!INCLUDE[vsto_interface](~/includes/vsto-interface-md.md)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CreateAction">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Tools.Excel.Action CreateAction (string caption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Tools.Excel.Action CreateAction(string caption) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.ApplicationFactory.CreateAction(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Tools.Excel.Action</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="caption" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="caption"><span data-ttu-id="50d91-104">智能标记菜单显示的操作的名称。</span><span class="sxs-lookup"><span data-stu-id="50d91-104">The name of the action, which is displayed by the smart tag menu.</span></span></param>
        <summary><span data-ttu-id="50d91-105">创建一个 <see cref="T:Microsoft.Office.Tools.Excel.Action" /> 对象，该对象表示智能标记的一个操作。</span><span class="sxs-lookup"><span data-stu-id="50d91-105">Creates a <see cref="T:Microsoft.Office.Tools.Excel.Action" /> object that represents an action for a smart tag.</span></span> [!INCLUDE[vsto_smart_tags](~/includes/vsto-smart-tags-md.md)]<span data-ttu-id="50d91-106">。</span><span class="sxs-lookup"><span data-stu-id="50d91-106">.</span></span></summary>
        <returns><span data-ttu-id="50d91-107">新智能标记操作。</span><span class="sxs-lookup"><span data-stu-id="50d91-107">The new smart tag action.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="50d91-108">下面的代码示例演示如何在 Excel 工作簿项目中创建智能标记和操作。</span><span class="sxs-lookup"><span data-stu-id="50d91-108">The following code example demonstrates how to create a smart tag and an action in an Excel workbook project.</span></span> <span data-ttu-id="50d91-109">若要使用此示例，请在 `ThisAddIn` 类中运行代码。</span><span class="sxs-lookup"><span data-stu-id="50d91-109">To use this example, run the code from the `ThisAddIn` class.</span></span>  
  
 [!code-csharp[Trin_ExcelSmartTags#2](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelSmartTags/CS/Trin_ExcelSmartTags.cs#2)]
 [!code-vb[Trin_ExcelSmartTags#2](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelSmartTags/VB/ThisWorkbook.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSmartTag">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Tools.Excel.SmartTag CreateSmartTag (string smartTagType, string caption, Microsoft.Office.Tools.Excel.ISmartTagExtension extension = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Tools.Excel.SmartTag CreateSmartTag(string smartTagType, string caption, class Microsoft.Office.Tools.Excel.ISmartTagExtension extension) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.ApplicationFactory.CreateSmartTag(System.String,System.String,Microsoft.Office.Tools.Excel.ISmartTagExtension)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Tools.Excel.SmartTag</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="smartTagType" Type="System.String" />
        <Parameter Name="caption" Type="System.String" />
        <Parameter Name="extension" Type="Microsoft.Office.Tools.Excel.ISmartTagExtension" />
      </Parameters>
      <Docs>
        <param name="smartTagType"><span data-ttu-id="50d91-110">智能标记的唯一标识符，由命名空间 URI 和标记类型名组成，两部分之间用数字符号 (#) 分隔。</span><span class="sxs-lookup"><span data-stu-id="50d91-110">A unique identifier for the smart tag, composed of a namespace URI and a tag type name separated by a number sign (#).</span></span></param>
        <param name="caption"><span data-ttu-id="50d91-111">智能标记菜单上显示的智能标记的名称。</span><span class="sxs-lookup"><span data-stu-id="50d91-111">The name of the smart tag, which is displayed on the smart tag menu.</span></span></param>
        <param name="extension"><span data-ttu-id="50d91-112">可选。</span><span class="sxs-lookup"><span data-stu-id="50d91-112">Optional.</span></span> <span data-ttu-id="50d91-113">一个扩展对象，用于为智能标记定义自定义识别器。</span><span class="sxs-lookup"><span data-stu-id="50d91-113">An extension object that defines a custom recognizer for the smart tag.</span></span></param>
        <summary><span data-ttu-id="50d91-114">创建一个 <see cref="T:Microsoft.Office.Tools.Excel.SmartTag" /> 对象，该对象表示工作表中的一个智能标记。</span><span class="sxs-lookup"><span data-stu-id="50d91-114">Creates a <see cref="T:Microsoft.Office.Tools.Excel.SmartTag" /> object that represents a smart tag on a worksheet.</span></span> [!INCLUDE[vsto_smart_tags](~/includes/vsto-smart-tags-md.md)]<span data-ttu-id="50d91-115">。</span><span class="sxs-lookup"><span data-stu-id="50d91-115">.</span></span></summary>
        <returns><span data-ttu-id="50d91-116">新智能标记。</span><span class="sxs-lookup"><span data-stu-id="50d91-116">The new smart tag.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50d91-117">`smartTagType`参数的有效字符串的一个示例是http://smarttags.contoso.com#TagName。</span><span class="sxs-lookup"><span data-stu-id="50d91-117">An example of a valid string for the `smartTagType` parameter is http://smarttags.contoso.com#TagName.</span></span> <span data-ttu-id="50d91-118">格式正确的智能标记类型字符串不包含空格, 并且以字母 (a-z, a-z)、下划线 (_) 或冒号 (:) 开头。</span><span class="sxs-lookup"><span data-stu-id="50d91-118">A well-formed smart tag type string does not contain white space, and it starts with a letter (a-z, A-Z), an underscore (_), or a colon (:).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="50d91-119">下面的代码示例演示如何在 Excel 外接程序项目中创建智能标记和操作。</span><span class="sxs-lookup"><span data-stu-id="50d91-119">The following code example demonstrates how to create a smart tag and an action in an Excel add-in project.</span></span> <span data-ttu-id="50d91-120">若要使用此示例，请在 `ThisAddIn` 类中运行代码。</span><span class="sxs-lookup"><span data-stu-id="50d91-120">To use this example, run the code from the `ThisAddIn` class.</span></span>  
  
 [!code-csharp[Trin_ExcelSmartTags#2](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelSmartTags/CS/Trin_ExcelSmartTags.cs#2)]
 [!code-vb[Trin_ExcelSmartTags#2](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelSmartTags/VB/ThisWorkbook.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="50d91-121"><paramref name="smartTagType" /> 或 <paramref name="caption" /> 为 <see langword="null" /> 或为空，或者 <paramref name="smartTagType" /> 无效。</span><span class="sxs-lookup"><span data-stu-id="50d91-121"><paramref name="smartTagType" /> or <paramref name="caption" /> is either <see langword="null" /> or empty, or <paramref name="smartTagType" /> is not valid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetVstoObject">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Tools.Excel.Workbook GetVstoObject (Microsoft.Office.Interop.Excel._Workbook workbook);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Tools.Excel.Workbook GetVstoObject(class Microsoft.Office.Interop.Excel._Workbook workbook) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.ApplicationFactory.GetVstoObject(Microsoft.Office.Interop.Excel._Workbook)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Tools.Excel.Workbook</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workbook" Type="Microsoft.Office.Interop.Excel._Workbook" />
      </Parameters>
      <Docs>
        <param name="workbook"><span data-ttu-id="50d91-122">要为其检索扩展对象的本机工作簿对象。</span><span class="sxs-lookup"><span data-stu-id="50d91-122">The native workbook object for which to retrieve the extended object.</span></span> <span data-ttu-id="50d91-123">虽然此参数的类型是 <see cref="T:Microsoft.Office.Interop.Excel._Workbook" />，但通常会将 <see cref="T:Microsoft.Office.Interop.Excel.Workbook" /> 对象传递到此方法。</span><span class="sxs-lookup"><span data-stu-id="50d91-123">Although this parameter is of type <see cref="T:Microsoft.Office.Interop.Excel._Workbook" />, you typically pass a <see cref="T:Microsoft.Office.Interop.Excel.Workbook" /> object to this method.</span></span></param>
        <summary><span data-ttu-id="50d91-124">返回 <see cref="T:Microsoft.Office.Tools.Excel.Workbook" /> 主机项，它将展开指定本机工作簿对象的功能。</span><span class="sxs-lookup"><span data-stu-id="50d91-124">Returns a <see cref="T:Microsoft.Office.Tools.Excel.Workbook" /> host item that extends the functionality of the specified native workbook object.</span></span></summary>
        <returns><span data-ttu-id="50d91-125">主机项可扩展本机工作簿对象的功能。</span><span class="sxs-lookup"><span data-stu-id="50d91-125">The host item that extends the functionality of the native workbook object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50d91-126">在应用程序级外接程序中调用此方法以自定义在 Excel 中打开的任何工作簿。</span><span class="sxs-lookup"><span data-stu-id="50d91-126">Call this method in an application-level add-in to customize any workbook that is open in Excel.</span></span> <span data-ttu-id="50d91-127">如果尚未生成此类<xref:Microsoft.Office.Tools.Excel.Workbook?displayProperty=fullName>对象, 则此方法将生成新的对象。</span><span class="sxs-lookup"><span data-stu-id="50d91-127">This method generates a new <xref:Microsoft.Office.Tools.Excel.Workbook?displayProperty=fullName> object if no such object has already been generated.</span></span> <span data-ttu-id="50d91-128">对此方法的后续调用会返回现有<xref:Microsoft.Office.Tools.Excel.Workbook?displayProperty=fullName>对象的缓存实例。</span><span class="sxs-lookup"><span data-stu-id="50d91-128">Subsequent calls to this method return the cached instance of the existing <xref:Microsoft.Office.Tools.Excel.Workbook?displayProperty=fullName> object.</span></span> <span data-ttu-id="50d91-129">有关更多信息，请参见 [Extending Word Documents and Excel Workbooks in VSTO Add-ins at Run Time](/visualstudio/vsto/extending-word-documents-and-excel-workbooks-in-vsto-add-ins-at-run-time)。</span><span class="sxs-lookup"><span data-stu-id="50d91-129">For more information, see [Extending Word Documents and Excel Workbooks in VSTO Add-ins at Run Time](/visualstudio/vsto/extending-word-documents-and-excel-workbooks-in-vsto-add-ins-at-run-time).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="50d91-130">如果设置为 "宏已启用" 或 "默认禁用宏", VSTO 将遵循 "自动化安全" Office 组策略设置。</span><span class="sxs-lookup"><span data-stu-id="50d91-130">VSTO follows the “Automation Security” Office group policy setting when it is set to “Macros enabled” or “Disable Macros by default”.</span></span> <span data-ttu-id="50d91-131">但是, 如果设置设置为 "使用应用程序宏安全级别", VSTO 将始终允许自动化运行, 而不考虑应用程序设置。</span><span class="sxs-lookup"><span data-stu-id="50d91-131">However, VSTO will always allow automation to run if the setting is set to “Use application macro security level”, regardless of the application setting.</span></span> <span data-ttu-id="50d91-132">若要阻止 VSTO 允许自动化运行, 请选择 "默认情况下禁用宏" 设置。</span><span class="sxs-lookup"><span data-stu-id="50d91-132">To prevent VSTO from allowing automation to run, choose the “Disable Macros by default” setting.</span></span>  
>   
>  <span data-ttu-id="50d91-133">参数的类型<xref:Microsoft.Office.Interop.Excel._Workbook?displayProperty=fullName>为, 它<xref:Microsoft.Office.Interop.Excel.Workbook?displayProperty=fullName>是的父接口。 `workbook`</span><span class="sxs-lookup"><span data-stu-id="50d91-133">The `workbook` parameter is of type <xref:Microsoft.Office.Interop.Excel._Workbook?displayProperty=fullName>, which is the parent interface of <xref:Microsoft.Office.Interop.Excel.Workbook?displayProperty=fullName>.</span></span> <span data-ttu-id="50d91-134">因此, 此方法可接受两种类型的对象<xref:Microsoft.Office.Interop.Excel._Workbook?displayProperty=fullName> : <xref:Microsoft.Office.Interop.Excel.Workbook?displayProperty=fullName>和。</span><span class="sxs-lookup"><span data-stu-id="50d91-134">Therefore, this method can accept objects of both types: <xref:Microsoft.Office.Interop.Excel._Workbook?displayProperty=fullName> and <xref:Microsoft.Office.Interop.Excel.Workbook?displayProperty=fullName>.</span></span> <span data-ttu-id="50d91-135">通常, 当你引用 Excel 工作簿时, 你将<xref:Microsoft.Office.Interop.Excel.Workbook?displayProperty=fullName>使用。</span><span class="sxs-lookup"><span data-stu-id="50d91-135">Typically, when you reference an Excel workbook, you use a <xref:Microsoft.Office.Interop.Excel.Workbook?displayProperty=fullName>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="50d91-136">下面的代码示例创建<xref:Microsoft.Office.Tools.Excel.Workbook?displayProperty=fullName>活动 Excel 工作簿的主机项。</span><span class="sxs-lookup"><span data-stu-id="50d91-136">The following code example creates a <xref:Microsoft.Office.Tools.Excel.Workbook?displayProperty=fullName> host item for the active Excel workbook.</span></span> <span data-ttu-id="50d91-137">若要使用此代码，请在针对 `ThisAddIn` 或 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]的 Excel 外接程序项目中从 [!INCLUDE[net_v45](~/includes/net-v45-md.md)] 类运行它。</span><span class="sxs-lookup"><span data-stu-id="50d91-137">To use this code, run it from the `ThisAddIn` class in an Excel add-in project that targets the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] or the [!INCLUDE[net_v45](~/includes/net-v45-md.md)].</span></span>  
  
 [!code-csharp[Trin_ExcelAddIn_Extensions#1](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelAddIn_Extensions/cs/ThisAddIn.cs#1)]
 [!code-vb[Trin_ExcelAddIn_Extensions#1](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelAddIn_Extensions/vb/ThisAddIn.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetVstoObject">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Tools.Excel.Worksheet GetVstoObject (Microsoft.Office.Interop.Excel._Worksheet worksheet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Tools.Excel.Worksheet GetVstoObject(class Microsoft.Office.Interop.Excel._Worksheet worksheet) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.ApplicationFactory.GetVstoObject(Microsoft.Office.Interop.Excel._Worksheet)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Tools.Excel.Worksheet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="worksheet" Type="Microsoft.Office.Interop.Excel._Worksheet" />
      </Parameters>
      <Docs>
        <param name="worksheet"><span data-ttu-id="50d91-138">要为其检索扩展对象的本机工作表对象。</span><span class="sxs-lookup"><span data-stu-id="50d91-138">The native worksheet object for which to retrieve the extended object.</span></span> <span data-ttu-id="50d91-139">虽然此参数的类型是 <see cref="T:Microsoft.Office.Interop.Excel._Worksheet" />，但通常会将 <see cref="T:Microsoft.Office.Interop.Excel.Worksheet" /> 对象传递到此方法。</span><span class="sxs-lookup"><span data-stu-id="50d91-139">Although this parameter is of type <see cref="T:Microsoft.Office.Interop.Excel._Worksheet" />, you typically pass a <see cref="T:Microsoft.Office.Interop.Excel.Worksheet" /> object to this method.</span></span></param>
        <summary><span data-ttu-id="50d91-140">返回 <see cref="T:Microsoft.Office.Tools.Excel.Worksheet" /> 主机项，它将展开指定本机工作簿对象的功能。</span><span class="sxs-lookup"><span data-stu-id="50d91-140">Returns a <see cref="T:Microsoft.Office.Tools.Excel.Worksheet" /> host item that extends the functionality of the specified native workbook object.</span></span></summary>
        <returns><span data-ttu-id="50d91-141">一个扩展本机工作表对象功能的宿主项。</span><span class="sxs-lookup"><span data-stu-id="50d91-141">The host item that extends the functionality of the native worksheet object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50d91-142">在应用程序级外接程序中调用此方法以自定义在 Excel 中打开的任何工作表。</span><span class="sxs-lookup"><span data-stu-id="50d91-142">Call this method in an application-level add-in to customize any worksheet that is open in Excel.</span></span> <span data-ttu-id="50d91-143">如果尚未生成此类<xref:Microsoft.Office.Tools.Excel.Worksheet?displayProperty=fullName>对象, 则此方法将生成新的对象。</span><span class="sxs-lookup"><span data-stu-id="50d91-143">This method generates a new <xref:Microsoft.Office.Tools.Excel.Worksheet?displayProperty=fullName> object if no such object has already been generated.</span></span> <span data-ttu-id="50d91-144">对此方法的后续调用会返回现有<xref:Microsoft.Office.Tools.Excel.Worksheet?displayProperty=fullName>对象的缓存实例。</span><span class="sxs-lookup"><span data-stu-id="50d91-144">Subsequent calls to this method return the cached instance of the existing <xref:Microsoft.Office.Tools.Excel.Worksheet?displayProperty=fullName> object.</span></span> <span data-ttu-id="50d91-145">有关更多信息，请参见 [Extending Word Documents and Excel Workbooks in VSTO Add-ins at Run Time](/visualstudio/vsto/extending-word-documents-and-excel-workbooks-in-vsto-add-ins-at-run-time)。</span><span class="sxs-lookup"><span data-stu-id="50d91-145">For more information, see [Extending Word Documents and Excel Workbooks in VSTO Add-ins at Run Time](/visualstudio/vsto/extending-word-documents-and-excel-workbooks-in-vsto-add-ins-at-run-time).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="50d91-146">参数的类型<xref:Microsoft.Office.Interop.Excel._Worksheet?displayProperty=fullName>为, 它<xref:Microsoft.Office.Interop.Excel.Worksheet?displayProperty=fullName>是的父接口。 `worksheet`</span><span class="sxs-lookup"><span data-stu-id="50d91-146">The `worksheet` parameter is of type <xref:Microsoft.Office.Interop.Excel._Worksheet?displayProperty=fullName>, which is the parent interface of <xref:Microsoft.Office.Interop.Excel.Worksheet?displayProperty=fullName>.</span></span> <span data-ttu-id="50d91-147">因此, 此方法可接受两种类型的对象<xref:Microsoft.Office.Interop.Excel._Worksheet?displayProperty=fullName> : <xref:Microsoft.Office.Interop.Excel.Worksheet?displayProperty=fullName>和。</span><span class="sxs-lookup"><span data-stu-id="50d91-147">Therefore, this method can accept objects of both types: <xref:Microsoft.Office.Interop.Excel._Worksheet?displayProperty=fullName> and <xref:Microsoft.Office.Interop.Excel.Worksheet?displayProperty=fullName>.</span></span> <span data-ttu-id="50d91-148">通常, 当您引用 Excel 工作表时, 您将<xref:Microsoft.Office.Interop.Excel.Worksheet?displayProperty=fullName>使用。</span><span class="sxs-lookup"><span data-stu-id="50d91-148">Typically, when you reference an Excel worksheet, you use a <xref:Microsoft.Office.Interop.Excel.Worksheet?displayProperty=fullName>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="50d91-149">下面的代码示例为具有<xref:Microsoft.Office.Tools.Excel.Worksheet?displayProperty=fullName>主机项的每<xref:Microsoft.Office.Interop.Excel.Workbook?displayProperty=fullName>个对象创建一个主机项。</span><span class="sxs-lookup"><span data-stu-id="50d91-149">The following code example creates a <xref:Microsoft.Office.Tools.Excel.Worksheet?displayProperty=fullName> host item for each <xref:Microsoft.Office.Interop.Excel.Workbook?displayProperty=fullName> object that has a host item.</span></span> <span data-ttu-id="50d91-150">若要使用此代码，请在针对 `ThisAddIn` 或 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]的 Excel 外接程序项目中从 [!INCLUDE[net_v45](~/includes/net-v45-md.md)] 类运行它。</span><span class="sxs-lookup"><span data-stu-id="50d91-150">To use this code, run it from the `ThisAddIn` class in an Excel add-in project that targets the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] or the [!INCLUDE[net_v45](~/includes/net-v45-md.md)].</span></span>  
  
 [!code-csharp[Trin_ExcelAddIn_Extensions#2](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelAddIn_Extensions/cs/ThisAddIn.cs#2)]
 [!code-vb[Trin_ExcelAddIn_Extensions#2](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelAddIn_Extensions/vb/ThisAddIn.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetVstoObject">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Tools.Excel.ListObject GetVstoObject (Microsoft.Office.Interop.Excel.ListObject listObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Tools.Excel.ListObject GetVstoObject(class Microsoft.Office.Interop.Excel.ListObject listObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.ApplicationFactory.GetVstoObject(Microsoft.Office.Interop.Excel.ListObject)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Tools.Excel.ListObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listObject" Type="Microsoft.Office.Interop.Excel.ListObject" />
      </Parameters>
      <Docs>
        <param name="listObject"><span data-ttu-id="50d91-151">要为其检索扩展对象的本机列表对象。</span><span class="sxs-lookup"><span data-stu-id="50d91-151">The native list object for which to retrieve the extended object.</span></span></param>
        <summary><span data-ttu-id="50d91-152">返回 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" />，它将展开指定的本机列表对象的功能。</span><span class="sxs-lookup"><span data-stu-id="50d91-152">Returns a <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> that extends the functionality of the specified native list object.</span></span></summary>
        <returns><span data-ttu-id="50d91-153">一个对象，可扩展本机列表对象的功能。</span><span class="sxs-lookup"><span data-stu-id="50d91-153">The object that extends the functionality of the native list object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50d91-154">在应用程序级外接程序中调用此方法以自定义 Excel 工作表中的任何列表对象。</span><span class="sxs-lookup"><span data-stu-id="50d91-154">Call this method in an application-level add-in to customize any list object in an Excel worksheet.</span></span> <span data-ttu-id="50d91-155">如果尚未生成此类<xref:Microsoft.Office.Tools.Excel.ListObject?displayProperty=fullName>对象, 则此方法将生成新的对象。</span><span class="sxs-lookup"><span data-stu-id="50d91-155">This method generates a new <xref:Microsoft.Office.Tools.Excel.ListObject?displayProperty=fullName> object if no such object has already been generated.</span></span> <span data-ttu-id="50d91-156">对此方法的后续调用会返回现有<xref:Microsoft.Office.Tools.Excel.ListObject?displayProperty=fullName>对象的缓存实例。</span><span class="sxs-lookup"><span data-stu-id="50d91-156">Subsequent calls to this method return the cached instance of the existing <xref:Microsoft.Office.Tools.Excel.ListObject?displayProperty=fullName> object.</span></span> <span data-ttu-id="50d91-157">有关更多信息，请参见 [Extending Word Documents and Excel Workbooks in VSTO Add-ins at Run Time](/visualstudio/vsto/extending-word-documents-and-excel-workbooks-in-vsto-add-ins-at-run-time)。</span><span class="sxs-lookup"><span data-stu-id="50d91-157">For more information, see [Extending Word Documents and Excel Workbooks in VSTO Add-ins at Run Time](/visualstudio/vsto/extending-word-documents-and-excel-workbooks-in-vsto-add-ins-at-run-time).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="50d91-158">下面的代码示例创建一个<xref:Microsoft.Office.Tools.Excel.ListObject?displayProperty=fullName>主机项。</span><span class="sxs-lookup"><span data-stu-id="50d91-158">The following code example creates a <xref:Microsoft.Office.Tools.Excel.ListObject?displayProperty=fullName> host item.</span></span> <span data-ttu-id="50d91-159">若要使用此代码，请在针对 `ThisAddIn` 或 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]的 Excel 外接程序项目中从 [!INCLUDE[net_v45](~/includes/net-v45-md.md)] 类运行它。</span><span class="sxs-lookup"><span data-stu-id="50d91-159">To use this code, run it from the `ThisAddIn` class in an Excel add-in project that targets the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] or the [!INCLUDE[net_v45](~/includes/net-v45-md.md)].</span></span>  
  
 [!code-csharp[Trin_ExcelAddIn_Extensions#4](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelAddIn_Extensions/cs/ThisAddIn.cs#4)]
 [!code-vb[Trin_ExcelAddIn_Extensions#4](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelAddIn_Extensions/vb/ThisAddIn.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasVstoObject">
      <MemberSignature Language="C#" Value="public bool HasVstoObject (Microsoft.Office.Interop.Excel._Workbook workbook);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HasVstoObject(class Microsoft.Office.Interop.Excel._Workbook workbook) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.ApplicationFactory.HasVstoObject(Microsoft.Office.Interop.Excel._Workbook)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workbook" Type="Microsoft.Office.Interop.Excel._Workbook" />
      </Parameters>
      <Docs>
        <param name="workbook"><span data-ttu-id="50d91-160">要测试的本机工作簿对象。</span><span class="sxs-lookup"><span data-stu-id="50d91-160">The native workbook object to test.</span></span> <span data-ttu-id="50d91-161">虽然此参数的类型是 <see cref="T:Microsoft.Office.Interop.Excel._Workbook" />，但通常会将 <see cref="T:Microsoft.Office.Interop.Excel.Workbook" /> 对象传递到此方法。</span><span class="sxs-lookup"><span data-stu-id="50d91-161">Although this parameter is of type <see cref="T:Microsoft.Office.Interop.Excel._Workbook" />, you typically pass a <see cref="T:Microsoft.Office.Interop.Excel.Workbook" /> object to this method.</span></span></param>
        <summary><span data-ttu-id="50d91-162">返回一个值，该值指示指定的 Excel 工作簿对象是否存在 <see cref="T:Microsoft.Office.Tools.Excel.Workbook" /> 宿主项。</span><span class="sxs-lookup"><span data-stu-id="50d91-162">Returns a value that indicates whether a <see cref="T:Microsoft.Office.Tools.Excel.Workbook" /> host item exists for the specified Excel workbook object.</span></span></summary>
        <returns><span data-ttu-id="50d91-163">如果指定的 <see cref="T:Microsoft.Office.Tools.Excel.Workbook" /> 对象存在 <see cref="T:Microsoft.Office.Interop.Excel.Workbook" /> 宿主项，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="50d91-163"><see langword="true" /> if a <see cref="T:Microsoft.Office.Tools.Excel.Workbook" /> host item exists for the specified <see cref="T:Microsoft.Office.Interop.Excel.Workbook" /> object; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50d91-164">您可以在应用程序级外接程序中调用此方法, 以测试在关闭或保存 Excel 工作簿之前是否存在您要保留的托管控件。</span><span class="sxs-lookup"><span data-stu-id="50d91-164">You can call this method in an application-level add-in to test for the existence of managed controls that you want to persist before closing or saving the Excel workbook.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="50d91-165">参数的类型<xref:Microsoft.Office.Interop.Excel._Workbook?displayProperty=fullName>为, 它<xref:Microsoft.Office.Interop.Excel.Workbook?displayProperty=fullName>是的父接口。 `workbook`</span><span class="sxs-lookup"><span data-stu-id="50d91-165">The `workbook` parameter is of type <xref:Microsoft.Office.Interop.Excel._Workbook?displayProperty=fullName>, which is the parent interface of <xref:Microsoft.Office.Interop.Excel.Workbook?displayProperty=fullName>.</span></span> <span data-ttu-id="50d91-166">因此, 此方法可接受两种类型的对象<xref:Microsoft.Office.Interop.Excel._Workbook?displayProperty=fullName> : <xref:Microsoft.Office.Interop.Excel.Workbook?displayProperty=fullName>和。</span><span class="sxs-lookup"><span data-stu-id="50d91-166">Therefore, this method can accept objects of both types: <xref:Microsoft.Office.Interop.Excel._Workbook?displayProperty=fullName> and <xref:Microsoft.Office.Interop.Excel.Workbook?displayProperty=fullName>.</span></span> <span data-ttu-id="50d91-167">通常, 当你引用 Excel 工作簿时, 你将<xref:Microsoft.Office.Interop.Excel.Workbook?displayProperty=fullName>使用。</span><span class="sxs-lookup"><span data-stu-id="50d91-167">Typically, when you reference an Excel workbook, you use a <xref:Microsoft.Office.Interop.Excel.Workbook?displayProperty=fullName>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="50d91-168">下面的代码示例检查当前工作簿是否具有关联的主机项。</span><span class="sxs-lookup"><span data-stu-id="50d91-168">The following code example checks whether the current workbook has an associated host item.</span></span> <span data-ttu-id="50d91-169">若要使用此代码，请在针对 `ThisAddIn` 或 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]的 Excel 外接程序项目中从 [!INCLUDE[net_v45](~/includes/net-v45-md.md)] 类运行它。</span><span class="sxs-lookup"><span data-stu-id="50d91-169">To use this code, run it from the `ThisAddIn` class in an Excel add-in project that targets the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] or the [!INCLUDE[net_v45](~/includes/net-v45-md.md)].</span></span>  
  
 [!code-csharp[Trin_ExcelAddIn_Extensions#2](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelAddIn_Extensions/cs/ThisAddIn.cs#2)]
 [!code-vb[Trin_ExcelAddIn_Extensions#2](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelAddIn_Extensions/vb/ThisAddIn.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasVstoObject">
      <MemberSignature Language="C#" Value="public bool HasVstoObject (Microsoft.Office.Interop.Excel._Worksheet worksheet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HasVstoObject(class Microsoft.Office.Interop.Excel._Worksheet worksheet) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.ApplicationFactory.HasVstoObject(Microsoft.Office.Interop.Excel._Worksheet)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="worksheet" Type="Microsoft.Office.Interop.Excel._Worksheet" />
      </Parameters>
      <Docs>
        <param name="worksheet"><span data-ttu-id="50d91-170">要测试的本机工作表对象。</span><span class="sxs-lookup"><span data-stu-id="50d91-170">The native worksheet object to test.</span></span> <span data-ttu-id="50d91-171">虽然此参数的类型是 <see cref="T:Microsoft.Office.Interop.Excel._Worksheet" />，但通常会将 <see cref="T:Microsoft.Office.Interop.Excel.Worksheet" /> 对象传递到此方法。</span><span class="sxs-lookup"><span data-stu-id="50d91-171">Although this parameter is of type <see cref="T:Microsoft.Office.Interop.Excel._Worksheet" />, you typically pass a <see cref="T:Microsoft.Office.Interop.Excel.Worksheet" /> object to this method.</span></span></param>
        <summary><span data-ttu-id="50d91-172">返回一个值，该值指示指定的 Excel 工作表对象是否存在 <see cref="T:Microsoft.Office.Tools.Excel.Worksheet" /> 宿主项。</span><span class="sxs-lookup"><span data-stu-id="50d91-172">Returns a value that indicates whether a <see cref="T:Microsoft.Office.Tools.Excel.Worksheet" /> host item exists for the specified Excel worksheet object.</span></span></summary>
        <returns><span data-ttu-id="50d91-173">如果指定的 <see cref="T:Microsoft.Office.Tools.Excel.Worksheet" /> 对象存在 <see cref="T:Microsoft.Office.Interop.Excel.Worksheet" /> 宿主项，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="50d91-173"><see langword="true" /> if a <see cref="T:Microsoft.Office.Tools.Excel.Worksheet" /> host item exists for the specified <see cref="T:Microsoft.Office.Interop.Excel.Worksheet" /> object; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="50d91-174">您可以在应用程序级外接程序中调用此方法, 以测试在关闭或保存 Excel 工作表之前是否存在您要保留的托管控件。</span><span class="sxs-lookup"><span data-stu-id="50d91-174">You can call this method in an application-level add-in to test for the existence of managed controls that you want to persist before closing or saving the Excel worksheet.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="50d91-175">参数的类型<xref:Microsoft.Office.Interop.Excel._Worksheet?displayProperty=fullName>为, 它<xref:Microsoft.Office.Interop.Excel.Worksheet?displayProperty=fullName>是的父接口。 `worksheet`</span><span class="sxs-lookup"><span data-stu-id="50d91-175">The `worksheet` parameter is of type <xref:Microsoft.Office.Interop.Excel._Worksheet?displayProperty=fullName>, which is the parent interface of <xref:Microsoft.Office.Interop.Excel.Worksheet?displayProperty=fullName>.</span></span> <span data-ttu-id="50d91-176">因此, 此方法可接受两种类型的对象<xref:Microsoft.Office.Interop.Excel._Worksheet?displayProperty=fullName> : <xref:Microsoft.Office.Interop.Excel.Worksheet?displayProperty=fullName>和。</span><span class="sxs-lookup"><span data-stu-id="50d91-176">Therefore, this method can accept objects of both types: <xref:Microsoft.Office.Interop.Excel._Worksheet?displayProperty=fullName> and <xref:Microsoft.Office.Interop.Excel.Worksheet?displayProperty=fullName>.</span></span> <span data-ttu-id="50d91-177">通常, 当您引用 Excel 工作表时, 您将<xref:Microsoft.Office.Interop.Excel.Worksheet?displayProperty=fullName>使用。</span><span class="sxs-lookup"><span data-stu-id="50d91-177">Typically, when you reference an Excel worksheet, you use a <xref:Microsoft.Office.Interop.Excel.Worksheet?displayProperty=fullName>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="50d91-178">下面的代码示例检查当前工作簿中的工作表是否具有关联的主机项。</span><span class="sxs-lookup"><span data-stu-id="50d91-178">The following code example checks whether worksheets in the current workbook have an associated host item.</span></span> <span data-ttu-id="50d91-179">若要使用此代码，请在针对 `ThisAddIn` 或 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]的 Excel 外接程序项目中从 [!INCLUDE[net_v45](~/includes/net-v45-md.md)] 类运行它。</span><span class="sxs-lookup"><span data-stu-id="50d91-179">To use this code, run it from the `ThisAddIn` class in an Excel add-in project that targets the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] or the [!INCLUDE[net_v45](~/includes/net-v45-md.md)].</span></span>  
  
 [!code-csharp[Trin_ExcelAddIn_Extensions#2](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelAddIn_Extensions/cs/ThisAddIn.cs#2)]
 [!code-vb[Trin_ExcelAddIn_Extensions#2](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelAddIn_Extensions/vb/ThisAddIn.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasVstoObject">
      <MemberSignature Language="C#" Value="public bool HasVstoObject (Microsoft.Office.Interop.Excel.ListObject listObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HasVstoObject(class Microsoft.Office.Interop.Excel.ListObject listObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.ApplicationFactory.HasVstoObject(Microsoft.Office.Interop.Excel.ListObject)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listObject" Type="Microsoft.Office.Interop.Excel.ListObject" />
      </Parameters>
      <Docs>
        <param name="listObject"><span data-ttu-id="50d91-180">要测试的本机 Excel 列表对象。</span><span class="sxs-lookup"><span data-stu-id="50d91-180">The native Excel list object to test.</span></span></param>
        <summary><span data-ttu-id="50d91-181">返回一个值，该值指示指定的本机列表对象是否存在 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" />。</span><span class="sxs-lookup"><span data-stu-id="50d91-181">Returns a value that indicates whether a <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> exists for the specified native list object.</span></span></summary>
        <returns><span data-ttu-id="50d91-182">如果指定的 <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> 对象存在 <see cref="T:Microsoft.Office.Interop.Excel.ListObject" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="50d91-182"><see langword="true" /> if a <see cref="T:Microsoft.Office.Tools.Excel.ListObject" /> exists for the specified <see cref="T:Microsoft.Office.Interop.Excel.ListObject" /> object; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="50d91-183">下面的代码示例检查工作表中的每个本机列表对象, 以确定列表对象是否具有关联的主机项。</span><span class="sxs-lookup"><span data-stu-id="50d91-183">The following code example checks each native list object in a worksheet to determine if the list object has an associated host item.</span></span> <span data-ttu-id="50d91-184">若要使用此代码，请在针对 `ThisAddIn` 或 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]的 Excel 外接程序项目中从 [!INCLUDE[net_v45](~/includes/net-v45-md.md)] 类运行它。</span><span class="sxs-lookup"><span data-stu-id="50d91-184">To use this code, run it from the `ThisAddIn` class in an Excel add-in project that targets the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] or the [!INCLUDE[net_v45](~/includes/net-v45-md.md)].</span></span>  
  
 [!code-csharp[Trin_ExcelAddIn_Extensions#5](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelAddIn_Extensions/cs/ThisAddIn.cs#5)]
 [!code-vb[Trin_ExcelAddIn_Extensions#5](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelAddIn_Extensions/vb/ThisAddIn.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
