<Type Name="WorksheetBase" FullName="Microsoft.Office.Tools.Excel.WorksheetBase">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="58c064d58f5c7d4d6282af02a839806546f0d0c3" />
    <Meta Name="ms.sourcegitcommit" Value="bb8a3a96823cedeffbdbcc0c41a8118399de8074" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="02/21/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class WorksheetBase : IDisposable, Microsoft.Office.Tools.Excel.IWorksheetExtension, System.ComponentModel.IComponent, System.ComponentModel.ISupportInitialize, System.Windows.Forms.IBindableComponent" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit WorksheetBase extends System.Object implements class Microsoft.Office.Tools.EntryPoint, class Microsoft.Office.Tools.Excel.IWorksheetExtension, class Microsoft.Office.Tools.IExtension, class System.ComponentModel.IComponent, class System.ComponentModel.ISupportInitialize, class System.IDisposable, class System.Windows.Forms.IBindableComponent" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Tools.Excel.WorksheetBase" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Office.Tools.Excel.IWorksheetExtension</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.IComponent</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Forms.IBindableComponent</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItem(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供 Microsoft Office Excel 的文档级项目中的 <c>Sheet</c>n 类的基类。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Tools.Excel.WorksheetBase>类是适用于基`Sheet` * n *通过使用 Visual Studio 创建的文档级 Excel 项目中的类。 使用`Sheet` * n *类以编程方式访问你的项目中的工作表。 <xref:Microsoft.Office.Tools.Excel.WorksheetBase>类是*主机项*表示文档级项目中的工作表。 有关详细信息，请参阅[主机项和主机控件概述](/visualstudio/vsto/host-items-and-host-controls-overview.md)和[工作表主机项](/visualstudio/vsto/worksheet-host-item.md)。  
  
 <xref:Microsoft.Office.Tools.Excel.WorksheetBase>类提供相同的成员<xref:Microsoft.Office.Interop.Excel.Worksheet?displayProperty=fullName>中 Excel 主互操作程序集，但它的类添加以下功能：  
  
-   <xref:Microsoft.Office.Tools.Excel.WorksheetBase.Controls%2A> 属性。 将托管的控件添加到 Excel 工作表，或删除控件，在运行时，请使用此属性。  
  
-   <xref:Microsoft.Office.Tools.Excel.WorksheetBase.InnerObject%2A> 属性。 使用此属性来获取基础<xref:Microsoft.Office.Interop.Excel.Worksheet?displayProperty=fullName>工作表主机项的对象。  
  
-   <xref:Microsoft.Office.Tools.Excel.WorksheetBase.GetAutomationObject%2A> 方法。 重写此方法以公开你的项目向工作表中的 VBA 代码中的类。  
  
-   文档级事件，如<xref:Microsoft.Office.Tools.Excel.WorksheetBase.ActivateEvent>和<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Change>，仅在 Excel 对象模型中的应用程序级别提供。 也就是说，在 Excel 对象模型中，这些事件中定义<xref:Microsoft.Office.Interop.Excel.Application?displayProperty=fullName>类而不是<xref:Microsoft.Office.Interop.Excel.Worksheet?displayProperty=fullName>类。  
  
## <a name="creating-worksheet-host-items"></a>创建工作表宿主项  
 无法创建<xref:Microsoft.Office.Tools.Excel.WorksheetBase>以编程方式在 Office 项目中的对象。  
  
 在文档级项目中， `Sheet` * n *类 (从其派生<xref:Microsoft.Office.Tools.Excel.WorksheetBase>) 自动实例化[!INCLUDE[vsto_runtime](~/includes/vsto-runtime-md.md)]当最终用户打开工作簿。 有关详细信息，请参阅[文档级自定义项编程](/visualstudio/vsto/programming-document-level-customizations.md)。  
  
 在应用程序级项目中，你可以创建工作表主机项以编程方式使用`GetVstoObject`方法。 创建工作表主机项是<xref:Microsoft.Office.Tools.Excel.Worksheet?displayProperty=fullName>对象，而不是<xref:Microsoft.Office.Tools.Excel.WorksheetBase>对象。 有关详细信息，请参阅[扩展 Word 文档和 Excel VSTO 外接程序在运行时中的工作簿](/visualstudio/vsto/extending-word-documents-and-excel-workbooks-in-vsto-add-ins-at-run-time.md)。  
  
## <a name="usage"></a>用法  
 [!INCLUDE[vsto_net4utilities](~/includes/vsto-net4utilities-md.md)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WorksheetBase (Microsoft.Office.Tools.Excel.Factory factory, IServiceProvider serviceProvider, string primaryCookie, string identifier);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Microsoft.Office.Tools.Excel.Factory factory, class System.IServiceProvider serviceProvider, string primaryCookie, string identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.#ctor(Microsoft.Office.Tools.Excel.Factory,System.IServiceProvider,System.String,System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="factory" Type="Microsoft.Office.Tools.Excel.Factory" />
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
        <Parameter Name="primaryCookie" Type="System.String" />
        <Parameter Name="identifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="factory">To be added.</param>
        <param name="serviceProvider">To be added.</param>
        <param name="primaryCookie">To be added.</param>
        <param name="identifier">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="_CodeName">
      <MemberSignature Language="C#" Value="public string _CodeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string _CodeName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase._CodeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="_DisplayRightToLeft">
      <MemberSignature Language="C#" Value="public int _DisplayRightToLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 _DisplayRightToLeft" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase._DisplayRightToLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Activate">
      <MemberSignature Language="C#" Value="public void Activate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Activate() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.Activate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ActivateEvent">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.DocEvents_ActivateEventHandler ActivateEvent;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.DocEvents_ActivateEventHandler ActivateEvent" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorksheetBase.ActivateEvent" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.DocEvents_ActivateEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在激活工作表时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示的处理程序<xref:Microsoft.Office.Tools.Excel.WorksheetBase.ActivateEvent>显示工作表的名称时，它将激活的事件。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#200](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#200)]
 [!code-vb[Trin_ExcelWorkSheet#200](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#200)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Application">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Application Application { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Application Application" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.Application" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Application</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个表示 Microsoft Office Excel 应用程序的 <see cref="T:Microsoft.Office.Interop.Excel.Application" /> 对象。</summary>
        <value>一个表示 Excel 应用程序的 <see cref="T:Microsoft.Office.Interop.Excel.Application" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Application%2A>重新排列应用程序窗口的属性。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#1](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#1)]
 [!code-vb[Trin_ExcelWorkSheet#1](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Arcs">
      <MemberSignature Language="C#" Value="public object Arcs (object index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Arcs(object index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.Arcs(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoFilter">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.AutoFilter AutoFilter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.AutoFilter AutoFilter" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.AutoFilter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.AutoFilter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>如果启用了筛选功能，则获取一个 <see cref="T:Microsoft.Office.Interop.Excel.AutoFilter" />，它提供工作表上的筛选列表的相关信息。 如果关闭了筛选功能，则获取 <see langword="null" />。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.AutoFilter" />，它提供工作表上的筛选列表的相关信息（如果启用了筛选功能）；否则为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要以编程方式启用筛选，请使用<xref:Microsoft.Office.Interop.Excel.Range.AutoFilter%2A>方法<xref:Microsoft.Office.Interop.Excel.Range>对象或<xref:Microsoft.Office.Tools.Excel.NamedRange.AutoFilter%2A>方法<xref:Microsoft.Office.Tools.Excel.NamedRange>对象。  
  
   
  
## Examples  
 下面的代码示例创建水果中的筛选的列表<xref:Microsoft.Office.Interop.Excel.Range>，然后使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.AutoFilter%2A>属性来显示列表的筛选条件。 然后，该示例提示用户关闭筛选器，通过使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.AutoFilterMode%2A>属性，并且最后使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.FilterMode%2A>属性来显示工作表是否能筛选的列表。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#2](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#2)]
 [!code-vb[Trin_ExcelWorkSheet#2](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoFilterMode">
      <MemberSignature Language="C#" Value="public bool AutoFilterMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoFilterMode" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.AutoFilterMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示当前是否在工作表上启用了筛选功能（即，当前是否显示了筛选器下拉箭头）。</summary>
        <value>
          如果当前已在工作表上启用筛选功能，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以将此属性设置为`false`禁用筛选 (即，若要删除的筛选器下拉箭头)，但不能将其设置为`true`。 启用筛选并创建筛选的列表，请使用<xref:Microsoft.Office.Interop.Excel.Range.AutoFilter%2A>方法<xref:Microsoft.Office.Interop.Excel.Range>对象，或使用<xref:Microsoft.Office.Tools.Excel.NamedRange.AutoFilter%2A>方法<xref:Microsoft.Office.Tools.Excel.NamedRange>对象。  
  
 此属性仅指示是否启用筛选;它不指示是否要筛选的任何数据。 若要确定表是否正在主动筛选数据，请使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.FilterMode%2A>属性。  
  
   
  
## Examples  
 下面的代码示例创建水果中的筛选的列表<xref:Microsoft.Office.Interop.Excel.Range>，然后使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.AutoFilter%2A>属性来显示列表的筛选条件。 然后，该示例提示用户关闭筛选器，通过使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.AutoFilterMode%2A>属性，并且最后使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.FilterMode%2A>属性来显示工作表是否能筛选的列表。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#2](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#2)]
 [!code-vb[Trin_ExcelWorkSheet#2](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Runtime.InteropServices.COMException">此属性设置为 <see langword="true" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Base">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Tools.Excel.Worksheet Base { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Tools.Excel.Worksheet Base" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.Base" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Tools.Excel.Worksheet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取此 <see cref="T:Microsoft.Office.Tools.Excel.Worksheet" /> 对象扩展的 <see cref="T:Microsoft.Office.Tools.Excel.WorksheetBase" /> 对象。</summary>
        <value>此 <see cref="T:Microsoft.Office.Tools.Excel.WorksheetBase" /> 对象扩展的对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Tools.Excel.WorksheetBase>类扩展<xref:Microsoft.Office.Tools.Excel.Worksheet>对象通过实现<xref:Microsoft.Office.Tools.Excel.IWorksheetExtension>接口。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeDoubleClick">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.DocEvents_BeforeDoubleClickEventHandler BeforeDoubleClick;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.DocEvents_BeforeDoubleClickEventHandler BeforeDoubleClick" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorksheetBase.BeforeDoubleClick" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.DocEvents_BeforeDoubleClickEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在双击工作表之后，默认的双击操作之前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此事件不会发生，当用户双击单元格的边框。  
  
   
  
## Examples  
 下面的代码示例演示的处理程序<xref:Microsoft.Office.Tools.Excel.WorksheetBase.BeforeDoubleClick>取消当前的工作表上双击操作的事件。 事件处理程序告知用户双击不允许进行的工作表，然后设置`Cancel`参数<xref:Microsoft.Office.Interop.Excel.DocEvents_BeforeDoubleClickEventHandler>事件处理程序`true`，以便 Microsoft Office Excel 取消双击操作。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#201](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#201)]
 [!code-vb[Trin_ExcelWorkSheet#201](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#201)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeRightClick">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.DocEvents_BeforeRightClickEventHandler BeforeRightClick;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.DocEvents_BeforeRightClickEventHandler BeforeRightClick" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorksheetBase.BeforeRightClick" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.DocEvents_BeforeRightClickEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在右击工作表之后，默认的右击操作之前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示的处理程序<xref:Microsoft.Office.Tools.Excel.WorksheetBase.BeforeRightClick>取消当前的工作表上右键单击操作的事件。 事件处理程序通知的用户，右键单击不允许的工作表，然后设置`Cancel`参数<xref:Microsoft.Office.Interop.Excel.DocEvents_BeforeRightClickEventHandler>事件处理程序`true`，以便 Microsoft Office Excel 取消右键单击操作。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#202](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#202)]
 [!code-vb[Trin_ExcelWorkSheet#202](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#202)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInit">
      <MemberSignature Language="C#" Value="public virtual void BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.BeginInit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingContext">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.BindingContext BindingContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.BindingContext BindingContext" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.BindingContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BindingContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingContextChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BindingContextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BindingContextChanged" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorksheetBase.BindingContextChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Buttons">
      <MemberSignature Language="C#" Value="public object Buttons (object index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Buttons(object index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.Buttons(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Calculate">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.DocEvents_CalculateEventHandler Calculate;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.DocEvents_CalculateEventHandler Calculate" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorksheetBase.Calculate" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.DocEvents_CalculateEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在重新计算工作表之后发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示的处理程序<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Calculate>显示工作表的名称，当计算出它时的事件。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#203](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#203)]
 [!code-vb[Trin_ExcelWorkSheet#203](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#203)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CalculateMethod">
      <MemberSignature Language="C#" Value="public void CalculateMethod ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CalculateMethod() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.CalculateMethod" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>计算工作表中的公式。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cells">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range Cells { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range Cells" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.Cells" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 对象，该对象表示工作表上的所有单元格（不仅仅是当前正在使用的单元格）。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 对象，表示工作表上的所有单元格（不仅仅是当前正在使用的单元格）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Cells%2A>属性可以在每个单元格设置名称、 大小和加粗字体的工作表上。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#3](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#3)]
 [!code-vb[Trin_ExcelWorkSheet#3](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.DocEvents_ChangeEventHandler Change;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.DocEvents_ChangeEventHandler Change" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorksheetBase.Change" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.DocEvents_ChangeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在 <see cref="T:Microsoft.Office.Tools.Excel.WorksheetBase" /> 单元格中的某些内容发生更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在重新计算期间更改单元格时，此事件不会发生。  
  
   
  
## Examples  
 下面的代码示例演示的处理程序<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Change>显示工作表的名称和已更改的单元格范围的事件。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#204](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#204)]
 [!code-vb[Trin_ExcelWorkSheet#204](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#204)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChartObjects">
      <MemberSignature Language="C#" Value="public object ChartObjects (object index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object ChartObjects(object index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.ChartObjects(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">图表的名称或编号。 此参数可以是一个数组，以指定多个图表。</param>
        <summary>获取一个对象，该对象表示工作表上的单个嵌入式图表（一个 <see cref="T:Microsoft.Office.Interop.Excel.ChartObject" />）或所有嵌入式图表的集合（一个 <see cref="T:Microsoft.Office.Interop.Excel.ChartObjects" />）。</summary>
        <returns>一个对象，表示工作表上的单个嵌入式图表（一个 <see cref="T:Microsoft.Office.Interop.Excel.ChartObject" />）或所有嵌入式图表的集合（一个 <see cref="T:Microsoft.Office.Interop.Excel.ChartObjects" />）。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法不是等效于<xref:Microsoft.Office.Tools.Excel.Workbook.Charts%2A>属性。 此方法返回嵌入的图表;<xref:Microsoft.Office.Tools.Excel.Workbook.Charts%2A>属性返回图表工作表。  
  
## <a name="optional-parameters"></a>可选参数  
 可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions.md)。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.ChartObjects%2A>方法以获取嵌入的图表和单个嵌入式的图表的集合。 该示例首先使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.ChartObjects%2A>方法以获取<xref:Microsoft.Office.Interop.Excel.ChartObjects?displayProperty=fullName>当前工作表的集合并创建新<xref:Microsoft.Office.Interop.Excel.ChartObject?displayProperty=fullName>。 格式化新后<xref:Microsoft.Office.Interop.Excel.ChartObject?displayProperty=fullName>并提供相关<xref:Microsoft.Office.Interop.Excel.ChartObject?displayProperty=fullName>一个名称，然后该示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.ChartObjects%2A>方法以获取新<xref:Microsoft.Office.Interop.Excel.ChartObject?displayProperty=fullName>（按其名称进行索引），并显示打印预览的图表。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#100](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#100)]
 [!code-vb[Trin_ExcelWorkSheet#100](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#100)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckBoxes">
      <MemberSignature Language="C#" Value="public object CheckBoxes (object index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object CheckBoxes(object index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.CheckBoxes(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckSpelling">
      <MemberSignature Language="C#" Value="public void CheckSpelling (object customDictionary, object ignoreUppercase, object alwaysSuggest, object spellLang);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CheckSpelling(object customDictionary, object ignoreUppercase, object alwaysSuggest, object spellLang) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.CheckSpelling(System.Object,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="customDictionary" Type="System.Object" />
        <Parameter Name="ignoreUppercase" Type="System.Object" />
        <Parameter Name="alwaysSuggest" Type="System.Object" />
        <Parameter Name="spellLang" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="customDictionary">To be added.</param>
        <param name="ignoreUppercase">To be added.</param>
        <param name="alwaysSuggest">To be added.</param>
        <param name="spellLang">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CircleInvalid">
      <MemberSignature Language="C#" Value="public void CircleInvalid ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CircleInvalid() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.CircleInvalid" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>圈释工作表上的无效条目。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CircularReference">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range CircularReference { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range CircularReference" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.CircularReference" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 对象，该对象表示包含表上第一个循环引用的范围，或者，如果表上不存在循环引用，则获取 <see langword="null" />。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 对象，表示包含表上第一个循环引用的范围，或者，如果表上不存在循环引用，则为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 必须删除循环引用，然后计算才能继续。  
  
   
  
## Examples  
 下面的代码示例通过设置单元格 A1 和 B1 解析为各自的值的公式创建一个循环引用。 然后该示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.CircularReference%2A>属性报告该工作表是否含有循环引用。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#4](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#4)]
 [!code-vb[Trin_ExcelWorkSheet#4](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearArrows">
      <MemberSignature Language="C#" Value="public void ClearArrows ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearArrows() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.ClearArrows" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从工作表清除跟踪箭头。 跟踪器箭头是通过使用审核功能添加的。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearCircles">
      <MemberSignature Language="C#" Value="public void ClearCircles ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearCircles() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.ClearCircles" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>清除工作表中无效条目上的标识圈。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.CircleInvalid%2A>到包含无效的数据的圆圈单元格的方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CodeName">
      <MemberSignature Language="C#" Value="public string CodeName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CodeName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.CodeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Columns">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range Columns { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range Columns" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.Columns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个表示工作表上一个或多个列的 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 对象。</summary>
        <value>一个表示工作表上一个或多个列的 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果使用不带参数，此属性返回<xref:Microsoft.Office.Interop.Excel.Range>对象，其中包含工作表上的所有列。  
  
 此属性可以使用以下可选参数，用于获取工作表上的特定列。 如果参数中使用此属性，返回值是必须强制转换为对象<xref:Microsoft.Office.Interop.Excel.Range>。  
  
|参数|描述|  
|---------------|-----------------|  
|`RowIndex`|若要获取的一个或多个列的索引。<br /><br /> 若要获取的单个列，请将以下对象之一传递给此参数：<br /><br /> 的一个整数，指定你想要获取的列的索引。 列索引从 1 开始。<br />的你想要获取的列的字母组成字符串。<br /><br /> 若要获取多个连续列，请传递与格式字符串"`first column letter`:`last column letter`"。 例如，若要获取列 A 到 E，传递"A:E"。 **注意：** 此参数的名称有误导性; 此参数指定你想要获取，不是行的列的索引。|  
|`ColumnIndex`|不使用此参数。 此属性将引发<xref:System.Runtime.InteropServices.COMException>如果你尝试将值传递给此参数。|  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Columns%2A>属性可以在第一列中设置颜色、 名称、 大小和加粗的字体的所有单元格，工作表上。  
  
 此示例适用于文档级自定义。 若要运行此代码，请将其复制到你的项目中的工作表类之一。  
  
 [!code-csharp[Trin_ExcelWorkSheet#5](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#5)]
 [!code-vb[Trin_ExcelWorkSheet#5](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Comments">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Comments Comments { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Comments Comments" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.Comments" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Comments</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个表示工作表的所有注释的 <see cref="T:Microsoft.Office.Interop.Excel.Comments" /> 集合。</summary>
        <value>一个表示工作表的所有注释的 <see cref="T:Microsoft.Office.Interop.Excel.Comments" /> 集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Comments%2A>属性之前和之后将注释添加到 A1 单元格当前工作表显示注释的数目。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#6](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#6)]
 [!code-vb[Trin_ExcelWorkSheet#6](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConsolidationFunction">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlConsolidationFunction ConsolidationFunction { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlConsolidationFunction ConsolidationFunction" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.ConsolidationFunction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlConsolidationFunction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取用于当前合并的函数代码。</summary>
        <value>
          <see cref="T:Microsoft.Office.Interop.Excel.XlConsolidationFunction" /> 值之一。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.ConsolidationFunction%2A>属性来确定哪个函数由合并工作表。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#7](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#7)]
 [!code-vb[Trin_ExcelWorkSheet#7](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConsolidationOptions">
      <MemberSignature Language="C#" Value="public object ConsolidationOptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ConsolidationOptions" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.ConsolidationOptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取合并选项的三元素 <see cref="T:System.Array" />。</summary>
        <value>合并选项的三元素 <see cref="T:System.Array" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果返回的数组中元素是`true`，则设置相应的选项。 数组中的三个元素为：  
  
|元素|含义|  
|-------------|-------------|  
|1|顶行中使用标签|  
|2|在左侧列中使用标签|  
|3|创建链接到源数据|  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.ConsolidationOptions%2A>属性，以显示当前工作表的合并选项的值。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#8](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#8)]
 [!code-vb[Trin_ExcelWorkSheet#8](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConsolidationSources">
      <MemberSignature Language="C#" Value="public object ConsolidationSources { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ConsolidationSources" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.ConsolidationSources" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取字符串的 <see cref="T:System.Array" />，这些字符串指定工作表的当前合并的源表和范围。</summary>
        <value>指定工作表的当前合并的源表和范围的字符串值的 <see cref="T:System.Array" />；如果表上不存在合并，则为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例在当前表上创建一个合并，然后使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.ConsolidationSources%2A>属性来显示合并的源。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#9](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#9)]
 [!code-vb[Trin_ExcelWorkSheet#9](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Controls">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Tools.Excel.ControlCollection Controls { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Tools.Excel.ControlCollection Controls" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.Controls" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Tools.Excel.ControlCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取工作表中包含的托管控件的集合。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Tools.Excel.ControlCollection" />，其中包含工作表上的所有托管控件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Office 解决方案中的工作表可以包含 Windows 窗体控件和主机控件。 有关详细信息，请参阅[Office 文档上的控件](/visualstudio/vsto/controls-on-office-documents.md)。  
  
 若要在运行时管理的工作表上的控件，请使用方法和属性<xref:Microsoft.Office.Tools.Excel.ControlCollection>返回对象<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Controls%2A>属性。 有关详细信息，请参阅[在运行时向 Office 文档添加控件](/visualstudio/vsto/adding-controls-to-office-documents-at-run-time.md)  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Controls%2A>属性来添加<xref:System.Windows.Forms.Button>到当前工作表。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#10](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#10)]
 [!code-vb[Trin_ExcelWorkSheet#10](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public void Copy (object before, object after);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Copy(object before, object after) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.Copy(System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="before" Type="System.Object" />
        <Parameter Name="after" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="before">将在其之前放置复制表的表。 如果指定 <c>After</c>，则不能指定 <c>Before</c>。</param>
        <param name="after">将在其之后放置复制表的表。 如果指定 <c>Before</c>，则不能指定 <c>After</c>。</param>
        <summary>将工作表复制到工作簿中的另一个位置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 新工作表是<xref:Microsoft.Office.Interop.Excel.Worksheet?displayProperty=fullName>对象，并且不具有工作表宿主项具有的代码或数据绑定功能。  
  
 如果不指定`Before`或`After`，Microsoft Office Excel 创建新的工作簿包含复制的表。  
  
## <a name="optional-parameters"></a>可选参数  
 可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions.md)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Copy%2A>方法来创建副本的当前工作表之前`Sheet1`后`Sheet3`。 该示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.InnerObject%2A>属性来访问基础<xref:Microsoft.Office.Interop.Excel.Worksheet?displayProperty=fullName>为`Sheet1`和`Sheet3`。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#102](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#102)]
 [!code-vb[Trin_ExcelWorkSheet#102](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#102)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Creator">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlCreator Creator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlCreator Creator" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.Creator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlCreator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示在其中创建工作表的应用程序。</summary>
        <value>如果工作表是在 Excel 中创建的，则此属性返回字符串“XCEL”，该字符串与十六进制数 5843454C 等效。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性用于在 Microsoft Office Excel 中用于的 Macintosh，其中每个应用程序具有四个字符创建者代码。 例如，Excel 具有接的创建者代码。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Creator%2A>属性来显示是否在 Microsoft Office Excel 中创建了当前工作表。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#11](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#11)]
 [!code-vb[Trin_ExcelWorkSheet#11](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomProperties">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.CustomProperties CustomProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.CustomProperties CustomProperties" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.CustomProperties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.CustomProperties</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.CustomProperties" /> 对象，该对象表示与工作表关联的标识符信息。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.CustomProperties" /> 对象，表示与工作表关联的标识符信息。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.CustomProperties%2A>属性来添加自定义属性名为"Microsoft"值"MSFT"到当前工作表。 直到找到"Microsoft"属性，并将此属性的值设置为 A1 单元格，该示例然后循环访问的自定义属性的集合。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#12](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#12)]
 [!code-vb[Trin_ExcelWorkSheet#12](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataBindings">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ControlBindingsCollection DataBindings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ControlBindingsCollection DataBindings" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.DataBindings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlBindingsCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataHost">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Tools.ICachedDataProvider DataHost { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Tools.ICachedDataProvider DataHost" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.DataHost" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Tools.ICachedDataProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Deactivate">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.DocEvents_DeactivateEventHandler Deactivate;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.DocEvents_DeactivateEventHandler Deactivate" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorksheetBase.Deactivate" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.DocEvents_DeactivateEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当工作表失去焦点时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示的处理程序<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Deactivate>显示工作表的名称，它被停用时的事件。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#205](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#205)]
 [!code-vb[Trin_ExcelWorkSheet#205](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#205)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public void Delete ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Delete() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.Delete" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>删除基础 <see cref="T:Microsoft.Office.Interop.Excel.Worksheet" /> 对象，但不删除主机项。 强烈建议不要使用此方法。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayAutomaticPageBreaks">
      <MemberSignature Language="C#" Value="public bool DisplayAutomaticPageBreaks { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DisplayAutomaticPageBreaks" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.DisplayAutomaticPageBreaks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayPageBreaks">
      <MemberSignature Language="C#" Value="public bool DisplayPageBreaks { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DisplayPageBreaks" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.DisplayPageBreaks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示分页符（自动和手动）是否显示在工作表上。</summary>
        <value>
          如果分页符（自动和手动）显示在表上，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果你没有安装打印机，不能设置此属性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayRightToLeft">
      <MemberSignature Language="C#" Value="public bool DisplayRightToLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DisplayRightToLeft" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.DisplayRightToLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否是从右向左，而不是从左向右显示工作表。</summary>
        <value>
          如果工作表是从右向左，而不是从左向右显示，则为 <see langword="true" />；如果该对象是从左向右显示，则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>释放 <see cref="T:Microsoft.Office.Tools.Excel.WorksheetBase" /> 类的当前实例所使用的所有资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不要调用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Dispose%2A>方法自己。 当关闭的文档级自定义项中的文档时，[!INCLUDE[vsto_runtime](~/includes/vsto-runtime-md.md)]清理使用自定义项的所有资源。  
  
 有关详细信息<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Dispose%2A>方法，请参阅[清洗向上非托管资源](http://msdn.microsoft.com/library/a17b0066-71c2-4ba4-9822-8e19332fc213)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Disposed">
      <MemberSignature Language="C#" Value="public event EventHandler Disposed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Disposed" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorksheetBase.Disposed" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawingObjects">
      <MemberSignature Language="C#" Value="public object DrawingObjects (object index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object DrawingObjects(object index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.DrawingObjects(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Drawings">
      <MemberSignature Language="C#" Value="public object Drawings (object index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Drawings(object index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.Drawings(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DropDowns">
      <MemberSignature Language="C#" Value="public object DropDowns (object index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object DropDowns(object index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.DropDowns(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableAutoFilter">
      <MemberSignature Language="C#" Value="public bool EnableAutoFilter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableAutoFilter" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.EnableAutoFilter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示当打开仅限用户界面保护时是否启用“自动筛选”箭头。</summary>
        <value>
          如果在打开仅限用户界面保护时启用“自动筛选”箭头，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性适用于每个工作表，并且不与工作表或会话一起保存。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableCalculation">
      <MemberSignature Language="C#" Value="public bool EnableCalculation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableCalculation" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.EnableCalculation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示 Microsoft Office Excel 是否在必要时自动重新计算工作表。</summary>
        <value>
          如果 Excel 在必要时自动重新计算工作表，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性的值时`false`，不能请求重新计算。 当你更改的值从`false`到`true`，Excel 会重新计算工作表。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableFormatConditionsCalculation">
      <MemberSignature Language="C#" Value="public bool EnableFormatConditionsCalculation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableFormatConditionsCalculation" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.EnableFormatConditionsCalculation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值确定条件格式是否将自动发生。</summary>
        <value>
          如果条件格式的计算将自动发生，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当<xref:Microsoft.Office.Tools.Excel.WorksheetBase.EnableFormatConditionsCalculation%2A>属性设置为`false`，不会重新评估现有的条件格式。 任何以前应用的条件格式设置将仍是可见的但不是会作为单元格的值更新或更改 AppliesTo 范围。  
  
 将此属性设置为`true`以对其进行评估之前完全配置一个规则。 如果对其应用条件的范围很大，这可能导致性能增加。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableOutlining">
      <MemberSignature Language="C#" Value="public bool EnableOutlining { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableOutlining" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.EnableOutlining" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示当打开仅限用户界面保护时是否启用大纲显示符号。 [!INCLUDE[vsto_smart_tags](~/includes/vsto-smart-tags-md.md)]。 [!INCLUDE[vsto_smart_tags](~/includes/vsto-smart-tags-md.md)]。</summary>
        <value>
          如果在打开仅限用户界面保护时启用大纲显示符号，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性适用于每个工作表，并且不与工作表或会话一起保存。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnablePivotTable">
      <MemberSignature Language="C#" Value="public bool EnablePivotTable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnablePivotTable" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.EnablePivotTable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示当打开仅限用户界面保护时是否启用数据透视表控件及操作。</summary>
        <value>
          如果在打开仅限用户界面保护时启用数据透视表控件及操作，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性适用于每个工作表，并且不与工作表或会话一起保存。  
  
 必须有足够数量的未锁定的单元格下方，并重新计算和显示数据透视表报告的 Microsoft Office excel 数据透视表的右侧。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableSelection">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlEnableSelection EnableSelection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlEnableSelection EnableSelection" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.EnableSelection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlEnableSelection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示在工作表上可以选择哪些单元格。</summary>
        <value>
          <see cref="T:Microsoft.Office.Interop.Excel.XlEnableSelection" /> 值之一。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性仅在受保护工作表时，才起作用：<xref:Microsoft.Office.Interop.Excel.XlEnableSelection.xlNoSelection>可防止在表中，任何所选内容<xref:Microsoft.Office.Interop.Excel.XlEnableSelection.xlUnlockedCells>允许未锁定要选择这些单元格和<xref:Microsoft.Office.Interop.Excel.XlEnableSelection.xlNoRestrictions>允许要选择的任何单元格。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Protect%2A>方法来保护工作表，然后使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.EnableSelection%2A>属性以防止工作表中的任意单元格选择。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#13](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#13)]
 [!code-vb[Trin_ExcelWorkSheet#13](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndInit">
      <MemberSignature Language="C#" Value="public virtual void EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.EndInit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Evaluate">
      <MemberSignature Language="C#" Value="public object Evaluate (object name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Evaluate(object name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.Evaluate(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">对象的名称（使用 Excel 的命名约定）。</param>
        <summary>将 Microsoft Office Excel 名称转换为对象或值。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此方法，可以使用以下类型的名称在 Excel 中：  
  
-   定义的名称。 您可以指定任何名称。  
  
-   外部引用。 你可以使用 ！ 若要引用在另一个工作簿中定义的工作表的运算符。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Evaluate%2A>方法的值进行比较的 A1 单元格作为输入到 Excel`SIN`函数。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#103](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#103)]
 [!code-vb[Trin_ExcelWorkSheet#103](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#103)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExportAsFixedFormat">
      <MemberSignature Language="C#" Value="public void ExportAsFixedFormat (Microsoft.Office.Interop.Excel.XlFixedFormatType type, object filename, object quality, object includeDocProperties, object ignorePrintAreas, object from, object to, object openAfterPublish, object fixedFormatExtClassPtr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExportAsFixedFormat(valuetype Microsoft.Office.Interop.Excel.XlFixedFormatType type, object filename, object quality, object includeDocProperties, object ignorePrintAreas, object from, object to, object openAfterPublish, object fixedFormatExtClassPtr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.ExportAsFixedFormat(Microsoft.Office.Interop.Excel.XlFixedFormatType,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.Office.Interop.Excel.XlFixedFormatType" />
        <Parameter Name="filename" Type="System.Object" />
        <Parameter Name="quality" Type="System.Object" />
        <Parameter Name="includeDocProperties" Type="System.Object" />
        <Parameter Name="ignorePrintAreas" Type="System.Object" />
        <Parameter Name="from" Type="System.Object" />
        <Parameter Name="to" Type="System.Object" />
        <Parameter Name="openAfterPublish" Type="System.Object" />
        <Parameter Name="fixedFormatExtClassPtr" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="type">其中一个 <see langword="Microsoft.Office.Interop.Excel.XlFixedFormatType" /> 值，该值指定是否要将工作簿保存为 PDF 或 XPS 格式。</param>
        <param name="filename">新 PDF 或 XPS 文件的完整路径。 如果省略此参数，Excel 会将文件保存在当前文件夹中。</param>
        <param name="quality">其中一个 <see langword="Microsoft.Office.Interop.Excel.XlFixedFormatQuality" /> 值，该值指定导出文件的质量。</param>
        <param name="includeDocProperties">
          如果要在导出的文件中包含文档属性，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <param name="ignorePrintAreas">
          若要在导出时忽略任何打印区域设置，请使用 <see langword="true" />；否则使用 <see langword="false" />。</param>
        <param name="from">要从其处开始导出的页码。 若忽略此参数，则从第一页开始导出。</param>
        <param name="to">要导出的最后一页的页码。 若忽略此参数，则导出至最后一页。</param>
        <param name="openAfterPublish">
          如果立即在查看器中显示文件，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <param name="fixedFormatExtClassPtr">一个指向 <see langword="IMsoDocExporter" /> 接口的实现的指针，可使工作簿保存为另一种固定格式。 有关详细信息，请参阅“扩展 Office (2007) 固定格式导出功能”。</param>
        <summary>导出到指定格式的文件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法还支持初始化外接程序将文件导出到固定格式文件。 例如，如果存在转换器，则 Excel 将执行文件的格式转换。 通常由用户启动转换。  
  
   
  
## Examples  
 下面的代码示例将工作表的内容保存`Sheet1`以 PDF 格式，最多前四个页并 （忽略打印区域）。 PDF 文件保存到指定的文件路径和文件的名称，使用标准质量分辨率。 该文件包含工作簿属性。 若要运行此代码示例，你的工作簿必须包含一些数据的名为 Sheet1 的表。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkbook_Additional#9](~/snippets/csharp/VS_Snippets_OfficeSP/trin_excelworkbook_additional/cs/ThisWorkbook.cs#9)]
 [!code-vb[Trin_ExcelWorkbook_Additional#9](~/snippets/visualbasic/VS_Snippets_OfficeSP/trin_excelworkbook_additional/vb/ThisWorkbook.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterMode">
      <MemberSignature Language="C#" Value="public bool FilterMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool FilterMode" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.FilterMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示工作表是否正在主动筛选数据。</summary>
        <value>
          如果工作表正在主动筛选数据，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要确定是否可以使用筛选当前已启用 （即，是否在工作表中显示的筛选器下拉箭头），请使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.AutoFilterMode%2A>属性。  
  
 启用筛选并创建筛选的列表，请使用<xref:Microsoft.Office.Interop.Excel.Range.AutoFilter%2A>方法<xref:Microsoft.Office.Interop.Excel.Range>对象，或使用<xref:Microsoft.Office.Tools.Excel.NamedRange.AutoFilter%2A>方法<xref:Microsoft.Office.Tools.Excel.NamedRange>对象。  
  
 此属性是`true`如果工作表包含其中有隐藏的行的筛选的列表。  
  
   
  
## Examples  
 下面的代码示例创建水果中的筛选的列表<xref:Microsoft.Office.Interop.Excel.Range>，然后使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.AutoFilter%2A>属性来显示列表的筛选条件。 然后，该示例提示用户关闭筛选器，通过使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.AutoFilterMode%2A>属性，并且最后使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.FilterMode%2A>属性来显示工作表是否能筛选的列表。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#2](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#2)]
 [!code-vb[Trin_ExcelWorkSheet#2](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FinishInitialization">
      <MemberSignature Language="C#" Value="protected virtual void FinishInitialization ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void FinishInitialization() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.FinishInitialization" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FollowHyperlink">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.DocEvents_FollowHyperlinkEventHandler FollowHyperlink;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.DocEvents_FollowHyperlinkEventHandler FollowHyperlink" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorksheetBase.FollowHyperlink" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.DocEvents_FollowHyperlinkEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在单击工作表上的任意超链接时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示的处理程序<xref:Microsoft.Office.Tools.Excel.WorksheetBase.FollowHyperlink>保留已单击当前工作簿中所有超链接的列表的事件以及包含这些超链接，在工作表名称<xref:System.Windows.Forms.ListBox>控件。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#206](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#206)]
 [!code-vb[Trin_ExcelWorkSheet#206](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#206)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAutomationObject">
      <MemberSignature Language="C#" Value="protected virtual object GetAutomationObject ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object GetAutomationObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.GetAutomationObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>由 [!INCLUDE[vsto_runtime](~/includes/vsto-runtime-md.md)] 调用，用于获取可由工作表中的 VBA 代码使用的对象。</summary>
        <returns>文档级自定义项中的一个对象，可由工作表中的 VBA 代码使用。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 重写此方法以返回到工作表中的 VBA 代码的已公开的类的实例。 有关详细信息，请参阅[结合 VBA 和文档级自定义项](/visualstudio/vsto/combining-vba-and-document-level-customizations.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GroupBoxes">
      <MemberSignature Language="C#" Value="public object GroupBoxes (object index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GroupBoxes(object index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.GroupBoxes(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GroupObjects">
      <MemberSignature Language="C#" Value="public object GroupObjects (object index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GroupObjects(object index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.GroupObjects(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HostContext">
      <MemberSignature Language="C#" Value="public IServiceProvider HostContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IServiceProvider HostContext" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.HostContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IServiceProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HPageBreaks">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.HPageBreaks HPageBreaks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.HPageBreaks HPageBreaks" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.HPageBreaks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.HPageBreaks</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.HPageBreaks" /> 集合，该集合表示表上的水平分页符。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.HPageBreaks" /> 集合，表示表上的水平分页符。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 没有 1026年水平上每个表的分页符限制。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.HPageBreaks%2A>属性在单元格 C5 处添加水平分页符。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#14](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#14)]
 [!code-vb[Trin_ExcelWorkSheet#14](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Hyperlinks">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Hyperlinks Hyperlinks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Hyperlinks Hyperlinks" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.Hyperlinks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Hyperlinks</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Hyperlinks" /> 集合，该集合表示范围或工作表的超链接。</summary>
        <value>
          <see cref="T:Microsoft.Office.Interop.Excel.Hyperlinks" /> 集合，表示范围或工作表的超链接。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Hyperlinks%2A>属性添加到超链接<xref:Microsoft.Office.Interop.Excel.Hyperlinks?displayProperty=fullName>工作表的集合。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#15](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#15)]
 [!code-vb[Trin_ExcelWorkSheet#15](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Index">
      <MemberSignature Language="C#" Value="public int Index { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Index" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.Index" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取工作表集合中工作表的索引号。</summary>
        <value>工作表集合中工作表的索引号。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Index%2A>属性之前和之后到最后一个移动工作表中显示当前工作表的索引号来定位工作簿中使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Move%2A>方法。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#16](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#16)]
 [!code-vb[Trin_ExcelWorkSheet#16](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#16)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="protected virtual void Initialize ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Initialize() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.Initialize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeDataBindings">
      <MemberSignature Language="C#" Value="protected virtual void InitializeDataBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InitializeDataBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.InitializeDataBindings" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InnerObject">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Worksheet InnerObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Worksheet InnerObject" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.InnerObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Worksheet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Worksheet" />，表示 <see cref="T:Microsoft.Office.Tools.Excel.WorksheetBase" /> 的基础本机对象。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.Worksheet" />，表示 <see cref="T:Microsoft.Office.Tools.Excel.WorksheetBase" /> 的基础本机对象。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemProvider">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Tools.IHostItemProvider ItemProvider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Tools.IHostItemProvider ItemProvider" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.ItemProvider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Tools.IHostItemProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Labels">
      <MemberSignature Language="C#" Value="public object Labels (object index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Labels(object index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.Labels(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lines">
      <MemberSignature Language="C#" Value="public object Lines (object index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Lines(object index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.Lines(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ListBoxes">
      <MemberSignature Language="C#" Value="public object ListBoxes (object index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object ListBoxes(object index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.ListBoxes(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ListObjects">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.ListObjects ListObjects { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.ListObjects ListObjects" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.ListObjects" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.ListObjects</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取工作表中 <see cref="T:Microsoft.Office.Interop.Excel.ListObject" /> 对象的集合。</summary>
        <value>工作表的 <see cref="T:Microsoft.Office.Interop.Excel.ListObjects" /> 集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.ListObjects%2A>属性来添加<xref:Microsoft.Office.Interop.Excel.ListObject?displayProperty=fullName>到当前工作表。  
  
 此示例适用于文档级自定义。  
  
 Trin_ExcelWorkSheet#17  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MailEnvelope">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Core.MsoEnvelope MailEnvelope { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Core.MsoEnvelope MailEnvelope" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.MailEnvelope" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Core.MsoEnvelope</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取工作表的电子邮件头。</summary>
        <value>工作表的电子邮件头。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.MailEnvelope%2A>要分配属性<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Name%2A>简介电子邮件标头的工作表的工作表。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#18](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#18)]
 [!code-vb[Trin_ExcelWorkSheet#18](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#18)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Office.Tools.EntryPoint.BeginInit">
      <MemberSignature Language="C#" Value="void EntryPoint.BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.Office.Tools.EntryPoint.BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.Microsoft#Office#Tools#EntryPoint#BeginInit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Office.Tools.EntryPoint.EndInit">
      <MemberSignature Language="C#" Value="void EntryPoint.EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.Office.Tools.EntryPoint.EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.Microsoft#Office#Tools#EntryPoint#EndInit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Office.Tools.EntryPoint.FinishInitialization">
      <MemberSignature Language="C#" Value="void EntryPoint.FinishInitialization ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.Office.Tools.EntryPoint.FinishInitialization() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.Microsoft#Office#Tools#EntryPoint#FinishInitialization" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Office.Tools.EntryPoint.Initialize">
      <MemberSignature Language="C#" Value="void EntryPoint.Initialize ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.Office.Tools.EntryPoint.Initialize() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.Microsoft#Office#Tools#EntryPoint#Initialize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Office.Tools.EntryPoint.InitializeDataBindings">
      <MemberSignature Language="C#" Value="void EntryPoint.InitializeDataBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.Office.Tools.EntryPoint.InitializeDataBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.Microsoft#Office#Tools#EntryPoint#InitializeDataBindings" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Office.Tools.EntryPoint.OnShutdown">
      <MemberSignature Language="C#" Value="void EntryPoint.OnShutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.Office.Tools.EntryPoint.OnShutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.Microsoft#Office#Tools#EntryPoint#OnShutdown" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Office.Tools.EntryPoint.OnStartup">
      <MemberSignature Language="C#" Value="void EntryPoint.OnStartup ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.Office.Tools.EntryPoint.OnStartup() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.Microsoft#Office#Tools#EntryPoint#OnStartup" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Office.Tools.Excel.IWorksheetExtension.GetAutomationObject">
      <MemberSignature Language="C#" Value="object IWorksheetExtension.GetAutomationObject ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object Microsoft.Office.Tools.Excel.IWorksheetExtension.GetAutomationObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.Microsoft#Office#Tools#Excel#IWorksheetExtension#GetAutomationObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Office.Tools.IExtension.ExtensionBase">
      <MemberSignature Language="C#" Value="object Microsoft.Office.Tools.IExtension.ExtensionBase { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Microsoft.Office.Tools.IExtension.ExtensionBase" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.Microsoft#Office#Tools#IExtension#ExtensionBase" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Move">
      <MemberSignature Language="C#" Value="public void Move (object before, object after);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Move(object before, object after) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.Move(System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="before" Type="System.Object" />
        <Parameter Name="after" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="before">移动工作表的放置位置之后的工作表。 如果指定 <c>After</c>，则不能指定 <c>Before</c>。</param>
        <param name="after">移动工作表的放置位置之前的工作表。 如果指定 <c>Before</c>，则不能指定 <c>After</c>。</param>
        <summary>将工作表移动到工作簿中的另一个位置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果不指定`Before`或`After`，Microsoft Office Excel 创建新的工作簿包含移动的工作表。  
  
## <a name="optional-parameters"></a>可选参数  
 可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions.md)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Index%2A>属性之前和之后到最后一个移动工作表中显示当前工作表的索引号来定位工作簿中使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Move%2A>方法。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#16](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#16)]
 [!code-vb[Trin_ExcelWorkSheet#16](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#16)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置工作表的名称。</summary>
        <value>工作表的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.MailEnvelope%2A>要分配属性<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Name%2A>简介电子邮件标头的工作表的工作表。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#18](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#18)]
 [!code-vb[Trin_ExcelWorkSheet#18](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#18)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Names">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Names Names { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Names Names" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.Names" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Names</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Names" /> 集合，该集合表示所有工作表特定的名称（以“WorksheetName!” 前缀定义名称）。</summary>
        <value>A<see cref="T:Microsoft.Office.Interop.Excel.Names" />集合，表示所有特定于工作表的名称 （使用"WorksheetName ！"定义的名称 前缀）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Names%2A>属性添加到工作表的名称。 然后该示例显示**定义名称**对话框来验证是否已添加该名称。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#19](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#19)]
 [!code-vb[Trin_ExcelWorkSheet#19](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#19)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Next">
      <MemberSignature Language="C#" Value="public object Next { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Next" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.Next" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取表示下一个表的 <see cref="T:Microsoft.Office.Interop.Excel.Worksheet" />。</summary>
        <value>表示下一个表的 <see cref="T:Microsoft.Office.Interop.Excel.Worksheet" />；如果当前工作表是工作簿中的最后一个表，则为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Next%2A>属性来确定是否当前<xref:Microsoft.Office.Tools.Excel.WorksheetBase>是工作簿中的最后一个表。 如果当前<xref:Microsoft.Office.Tools.Excel.WorksheetBase>不是最后一个表，则显示下一个工作表的名称。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#20](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#20)]
 [!code-vb[Trin_ExcelWorkSheet#20](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#20)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OLEObjects">
      <MemberSignature Language="C#" Value="public object OLEObjects (object index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object OLEObjects(object index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.OLEObjects(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">OLE 对象的名称或编号。</param>
        <summary>获取一个对象，该对象表示工作表上的单个 OLE 对象（一个 <see cref="T:Microsoft.Office.Interop.Excel.OLEObject" />）或所有 OLE 对象的集合（一个 <see cref="T:Microsoft.Office.Interop.Excel.OLEObjects" /> 集合）。</summary>
        <returns>一个对象，表示工作表上的单个 OLE 对象（一个 <see cref="T:Microsoft.Office.Interop.Excel.OLEObject" />）或所有 OLE 对象的集合（一个 <see cref="T:Microsoft.Office.Interop.Excel.OLEObjects" /> 集合）。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a>可选参数  
 可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions.md)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.OLEObjects%2A>当前工作表中的方法来显示 OLE 对象。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#104](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#104)]
 [!code-vb[Trin_ExcelWorkSheet#104](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#104)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCalculate">
      <MemberSignature Language="C#" Value="public string OnCalculate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OnCalculate" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.OnCalculate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnData">
      <MemberSignature Language="C#" Value="public string OnData { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OnData" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.OnData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDoubleClick">
      <MemberSignature Language="C#" Value="public string OnDoubleClick { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OnDoubleClick" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.OnDoubleClick" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnEntry">
      <MemberSignature Language="C#" Value="public string OnEntry { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OnEntry" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.OnEntry" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSheetActivate">
      <MemberSignature Language="C#" Value="public string OnSheetActivate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OnSheetActivate" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.OnSheetActivate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSheetDeactivate">
      <MemberSignature Language="C#" Value="public string OnSheetDeactivate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OnSheetDeactivate" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.OnSheetDeactivate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnShutdown">
      <MemberSignature Language="C#" Value="protected virtual void OnShutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnShutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.OnShutdown" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnStartup">
      <MemberSignature Language="C#" Value="protected virtual void OnStartup ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStartup() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.OnStartup" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OptionButtons">
      <MemberSignature Language="C#" Value="public object OptionButtons (object index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object OptionButtons(object index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.OptionButtons(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Outline">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Outline Outline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Outline Outline" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.Outline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Outline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个表示工作表大纲的 <see cref="T:Microsoft.Office.Interop.Excel.Outline" />。</summary>
        <value>一个表示工作表大纲的 <see cref="T:Microsoft.Office.Interop.Excel.Outline" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Outline%2A>属性以使概要中的当前工作表使用自动样式。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#21](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#21)]
 [!code-vb[Trin_ExcelWorkSheet#21](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ovals">
      <MemberSignature Language="C#" Value="public object Ovals (object index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Ovals(object index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.Ovals(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PageSetup">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.PageSetup PageSetup { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.PageSetup PageSetup" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.PageSetup" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.PageSetup</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.PageSetup" />，其中包含工作表的页面设置的所有设置。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.PageSetup" />，其中包含工作表的页面设置的所有设置。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.PageSetup%2A>属性设置的下边缘和标头的边距，第一页号，和 center 页眉和页脚工作表。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#22](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#22)]
 [!code-vb[Trin_ExcelWorkSheet#22](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public object Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Parent" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取工作表的父对象。</summary>
        <value>工作表的父对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Parent%2A>属性来确定是否当前<xref:Microsoft.Office.Tools.Excel.WorksheetBase>有父项。 如果当前<xref:Microsoft.Office.Tools.Excel.WorksheetBase>有父级，则显示父工作簿的名称。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#23](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#23)]
 [!code-vb[Trin_ExcelWorkSheet#23](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Paste">
      <MemberSignature Language="C#" Value="public void Paste (object destination, object link);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Paste(object destination, object link) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.Paste(System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Object" />
        <Parameter Name="link" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="destination">一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 对象，指定应粘贴剪贴板内容的位置。 如果省略此参数，则使用当前选择。 仅当可将剪贴板的内容粘贴到范围中时，才能指定此参数。 如果指定了此参数，则无法使用 <c>Link</c> 参数。</param>
        <param name="link">
          为 <see langword="true" /> 可建立指向粘贴数据的源的链接。 如果指定了此参数，则无法使用 <c>Destination</c> 参数。 默认值为 <see langword="false" />。</param>
        <summary>将剪贴板的内容粘贴到工作表上。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果不指定`Destination`自变量，你必须选择目标范围之前使用此方法。  
  
 此方法可以修改表的选定区域，具体取决于剪贴板的内容。  
  
## <a name="optional-parameters"></a>可选参数  
 可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions.md)。  
  
   
  
## Examples  
 下面的代码示例将文本到剪贴板上的"粘贴示例"，然后使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Paste%2A>方法以将剪贴板内容粘贴到 A1 单元格。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#105](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#105)]
 [!code-vb[Trin_ExcelWorkSheet#105](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#105)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PasteSpecial">
      <MemberSignature Language="C#" Value="public void PasteSpecial (object format, object link, object displayAsIcon, object iconFileName, object iconIndex, object iconLabel, object noHTMLFormatting);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PasteSpecial(object format, object link, object displayAsIcon, object iconFileName, object iconIndex, object iconLabel, object noHTMLFormatting) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.PasteSpecial(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Object" />
        <Parameter Name="link" Type="System.Object" />
        <Parameter Name="displayAsIcon" Type="System.Object" />
        <Parameter Name="iconFileName" Type="System.Object" />
        <Parameter Name="iconIndex" Type="System.Object" />
        <Parameter Name="iconLabel" Type="System.Object" />
        <Parameter Name="noHTMLFormatting" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">一个字符串，指定数据的剪贴板格式。 常见格式字符串包括“HTML”、“位图”、“超链接”、“Unicode 文本”和“文本”。</param>
        <param name="link">
          为 <see langword="true" /> 可建立指向粘贴数据的源的链接。 如果源数据不适合链接或源应用程序不支持链接，则忽略此参数。 默认值为 <see langword="false" />。</param>
        <param name="displayAsIcon">
          为 <see langword="true" /> 可以图标形式显示粘贴的对象。 默认值为 <see langword="false" />。</param>
        <param name="iconFileName">如果 <c>DisplayAsIcon</c> 为 <see langword="true" />，则为包含要使用的图标的文件的名称。</param>
        <param name="iconIndex">图标文件中该图标的索引号。</param>
        <param name="iconLabel">图标的文本标签。</param>
        <param name="noHTMLFormatting">
          为 <see langword="true" /> 可从 HTML 移除所有格式设置、超链接和图像；为 <see langword="false" /> 可按原样粘贴 HTML。 默认值为 <see langword="false" />。</param>
        <summary>使用指定的格式将剪贴板的内容粘贴到工作表上。 使用此方法可粘贴来自其他应用程序的数据或以特定格式粘贴数据。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果不知道要传递给该格式参数的字符串，则可以查看尝试在 Excel 中的粘贴命令与在剪贴板上的数据兼容的字符串。 将数据复制到剪贴板，使用**选择性粘贴**在 Excel 中，命令，然后查看中列出的格式**选择性粘贴**对话框。  
  
 `NoHTMLFormatting` 将仅一回事时`Format`="HTML"。 在所有其他情况下，`NoHTMLFormatting`将被忽略。  
  
 使用此方法之前，您必须选择目标范围。  
  
 此方法可以修改表的选定区域，具体取决于剪贴板的内容。  
  
## <a name="optional-parameters"></a>可选参数  
 可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions.md)。  
  
   
  
## Examples  
 下面的代码示例将 HTML 放置到剪贴板，然后使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.PasteSpecial%2A>方法以将剪贴板内容粘贴到 A1 单元格。 请注意此示例选择之前调用范围<xref:Microsoft.Office.Tools.Excel.WorksheetBase.PasteSpecial%2A>方法。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#106](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#106)]
 [!code-vb[Trin_ExcelWorkSheet#106](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#106)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pictures">
      <MemberSignature Language="C#" Value="public object Pictures (object index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Pictures(object index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.Pictures(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PivotTableAfterValueChange">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.DocEvents_PivotTableAfterValueChangeEventHandler PivotTableAfterValueChange;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.DocEvents_PivotTableAfterValueChangeEventHandler PivotTableAfterValueChange" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorksheetBase.PivotTableAfterValueChange" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.DocEvents_PivotTableAfterValueChangeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在对数据透视表内的单元格或单元格范围进行编辑或重新计算（针对包含公式的单元格）后发生。 此事件只能用于 [!INCLUDE[Excel_14_short](~/includes/excel-14-short-md.md)] 项目中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Tools.Excel.WorksheetBase.PivotTableAfterValueChange>事件不会在编辑或重新计算单元格以外的任何情况下发生。 例如，它时不会出现数据透视表是刷新、 排序、 筛选，或向下钻取，即使这些操作移动单元格，并可能从 OLAP 数据源中检索新值。  
  
> [!NOTE]
>  此事件出现在 IntelliSense Excel 2007 项目中面向[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]。 但是，不能在 Excel 2007 项目中使用此事件。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MissingMemberException">此事件在 Excel 2007 项目中使用。</exception>
      </Docs>
    </Member>
    <Member MemberName="PivotTableBeforeAllocateChanges">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.DocEvents_PivotTableBeforeAllocateChangesEventHandler PivotTableBeforeAllocateChanges;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.DocEvents_PivotTableBeforeAllocateChangesEventHandler PivotTableBeforeAllocateChanges" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorksheetBase.PivotTableBeforeAllocateChanges" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.DocEvents_PivotTableBeforeAllocateChangesEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在将更改应用于数据透视表之前发生。 此事件只能用于 [!INCLUDE[Excel_14_short](~/includes/excel-14-short-md.md)] 项目中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Tools.Excel.WorksheetBase.PivotTableBeforeAllocateChanges> Excel 立即执行 UPDATE CUBE 语句以将所有更改都应用到数据透视表的 OLAP 数据源之前, 和用户已选择的用户界面以都应用更改后立即时发生事件。  
  
> [!NOTE]
>  此事件出现在 IntelliSense Excel 2007 项目中面向[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]。 但是，不能在 Excel 2007 项目中使用此事件。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MissingMemberException">此事件在 Excel 2007 项目中使用。</exception>
      </Docs>
    </Member>
    <Member MemberName="PivotTableBeforeCommitChanges">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.DocEvents_PivotTableBeforeCommitChangesEventHandler PivotTableBeforeCommitChanges;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.DocEvents_PivotTableBeforeCommitChangesEventHandler PivotTableBeforeCommitChanges" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorksheetBase.PivotTableBeforeCommitChanges" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.DocEvents_PivotTableBeforeCommitChangesEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在针对 OLAP 数据源提交数据透视表的更改之前发生。 此事件只能用于 [!INCLUDE[Excel_14_short](~/includes/excel-14-short-md.md)] 项目中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Tools.Excel.WorksheetBase.PivotTableBeforeCommitChanges> Excel 立即执行针对数据透视表的 OLAP 数据源，提交事务之前，用户已选择为整个数据透视表中保存更改后立即发生的事件。  
  
> [!NOTE]
>  此事件出现在 IntelliSense Excel 2007 项目中面向[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]。 但是，不能在 Excel 2007 项目中使用此事件。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MissingMemberException">此事件在 Excel 2007 项目中使用。</exception>
      </Docs>
    </Member>
    <Member MemberName="PivotTableBeforeDiscardChanges">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.DocEvents_PivotTableBeforeDiscardChangesEventHandler PivotTableBeforeDiscardChanges;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.DocEvents_PivotTableBeforeDiscardChangesEventHandler PivotTableBeforeDiscardChanges" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorksheetBase.PivotTableBeforeDiscardChanges" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.DocEvents_PivotTableBeforeDiscardChangesEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在放弃对数据透视表的更改之前发生。 此事件只能用于 [!INCLUDE[Excel_14_short](~/includes/excel-14-short-md.md)] 项目中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Excel 执行针对 OLAP 数据源，ROLLBACK TRANSACTION 语句，如果在事务仍处于活动状态，且然后用户已选择放弃所做的更改之后将丢弃所有数据透视表中, 编辑过的值之前立即发生。  
  
> [!NOTE]
>  此事件出现在 IntelliSense Excel 2007 项目中面向[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]。 但是，不能在 Excel 2007 项目中使用此事件。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MissingMemberException">此事件在 Excel 2007 项目中使用。</exception>
      </Docs>
    </Member>
    <Member MemberName="PivotTableChangeSync">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.DocEvents_PivotTableChangeSyncEventHandler PivotTableChangeSync;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.DocEvents_PivotTableChangeSyncEventHandler PivotTableChangeSync" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorksheetBase.PivotTableChangeSync" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.DocEvents_PivotTableChangeSyncEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在对数据透视表进行更改后发生。 此事件只能用于 [!INCLUDE[Excel_14_short](~/includes/excel-14-short-md.md)] 项目中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Tools.Excel.WorksheetBase.PivotTableChangeSync>过程中发生的大多数更改在数据透视表，以便你可以编写代码以响应用户操作，例如清除、 分组或刷新数据透视表中的项。  
  
> [!NOTE]
>  此事件出现在 IntelliSense Excel 2007 项目中面向[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]。 但是，不能在 Excel 2007 项目中使用此事件。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MissingMemberException">此属性用于 Excel 2007 项目。</exception>
      </Docs>
    </Member>
    <Member MemberName="PivotTables">
      <MemberSignature Language="C#" Value="public object PivotTables (object index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object PivotTables(object index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.PivotTables(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">报表的名称或编号。</param>
        <summary>获取一个对象，该对象表示工作表上的单个数据透视表（一个 <see cref="T:Microsoft.Office.Interop.Excel.PivotTable" /> 对象）或所有数据透视表的集合（一个 <see cref="T:Microsoft.Office.Interop.Excel.PivotTables" /> 对象）。</summary>
        <returns>一个对象，表示工作表上的单个数据透视表（一个 <see cref="T:Microsoft.Office.Interop.Excel.PivotTable" /> 对象）或所有数据透视表的集合（一个 <see cref="T:Microsoft.Office.Interop.Excel.PivotTables" /> 对象）。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a>可选参数  
 可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions.md)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.PivotTables%2A>方法以获取<xref:Microsoft.Office.Interop.Excel.PivotTables?displayProperty=fullName>当前工作表的集合，并刷新集合中的每个数据透视表  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#107](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#107)]
 [!code-vb[Trin_ExcelWorkSheet#107](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#107)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PivotTableUpdate">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.DocEvents_PivotTableUpdateEventHandler PivotTableUpdate;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.DocEvents_PivotTableUpdateEventHandler PivotTableUpdate" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorksheetBase.PivotTableUpdate" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.DocEvents_PivotTableUpdateEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在工作表上更新数据透视表之后发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示的处理程序<xref:Microsoft.Office.Tools.Excel.WorksheetBase.PivotTableUpdate>已更新数据透视表时显示一条消息的事件。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#207](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#207)]
 [!code-vb[Trin_ExcelWorkSheet#207](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#207)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PivotTableWizard">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.PivotTable PivotTableWizard (object sourceType, object sourceData, object tableDestination, object tableName, object rowGrand, object columnGrand, object saveData, object hasAutoFormat, object autoPage, object reserved, object backgroundQuery, object optimizeCache, object pageFieldOrder, object pageFieldWrapCount, object readData, object connection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Office.Interop.Excel.PivotTable PivotTableWizard(object sourceType, object sourceData, object tableDestination, object tableName, object rowGrand, object columnGrand, object saveData, object hasAutoFormat, object autoPage, object reserved, object backgroundQuery, object optimizeCache, object pageFieldOrder, object pageFieldWrapCount, object readData, object connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.PivotTableWizard(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.PivotTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceType" Type="System.Object" />
        <Parameter Name="sourceData" Type="System.Object" />
        <Parameter Name="tableDestination" Type="System.Object" />
        <Parameter Name="tableName" Type="System.Object" />
        <Parameter Name="rowGrand" Type="System.Object" />
        <Parameter Name="columnGrand" Type="System.Object" />
        <Parameter Name="saveData" Type="System.Object" />
        <Parameter Name="hasAutoFormat" Type="System.Object" />
        <Parameter Name="autoPage" Type="System.Object" />
        <Parameter Name="reserved" Type="System.Object" />
        <Parameter Name="backgroundQuery" Type="System.Object" />
        <Parameter Name="optimizeCache" Type="System.Object" />
        <Parameter Name="pageFieldOrder" Type="System.Object" />
        <Parameter Name="pageFieldWrapCount" Type="System.Object" />
        <Parameter Name="readData" Type="System.Object" />
        <Parameter Name="connection" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="sourceType">一个 <see cref="T:Microsoft.Office.Interop.Excel.XlPivotTableSourceType" /> 值。 报表数据的源。</param>
        <param name="sourceData">新报表的数据。 可以是 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 对象、范围数组或表示其他报表的名称的文本常数。 对于外部数据库，<c>SourceData</c> 是包含 SQL 查询字符串的字符串数组，其中每个元素的最大长度为 255 个字符。 应使用 <c>Connection</c> 参数指定 ODBC 连接字符串。 为了与较早版本的 Excel 兼容，<c>SourceData</c> 可以是二元素数组。 第一个元素是指定数据的 ODBC 源的连接字符串。 第二个元素是用于获取数据的 SQL 查询字符串。 如果指定 <c>SourceData</c>，还必须指定 <c>SourceType</c>。 如果活动单元格在 <c>SourceData</c> 范围内，则还必须指定 <c>TableDestination</c>。</param>
        <param name="tableDestination">一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 对象，指定应在工作表上放置报表的位置。 如果省略此参数，则报表将放置在活动单元格上。</param>
        <param name="tableName">新报表的名称。</param>
        <param name="rowGrand">
          为 <see langword="true" /> 可显示报表中的总行数。</param>
        <param name="columnGrand">
          为 <see langword="true" /> 可显示报表中的总列数。</param>
        <param name="saveData">
          为 <see langword="true" />，则保存报表数据；为 <see langword="false" />，则仅保存报表定义。</param>
        <param name="hasAutoFormat">
          如果为 <see langword="true" />，则 Microsoft Office Excel 可在刷新报表或移动字段后自动设置报表格式。</param>
        <param name="autoPage">仅当 <c>SourceType</c> 为 <see cref="F:Microsoft.Office.Interop.Excel.XlPivotTableSourceType.xlConsolidation" /> 时才有效。 如果让 Excel 创建一个用于合并的页字段，则为 <see langword="true" />。 如果 <c>AutoPage</c> 为 <see langword="false" />，则必须创建一个或多个页字段。</param>
        <param name="reserved">Excel 不使用。</param>
        <param name="backgroundQuery">
          如果为 <see langword="true" />，则 Excel 可异步执行（在后台）报表查询。 默认值为 <see langword="false" />。</param>
        <param name="optimizeCache">
          如果为 <see langword="true" />，则可在构造数据透视表时对其缓存进行优化。 默认值为 <see langword="false" />。</param>
        <param name="pageFieldOrder">向数据透视表的布局添加页字段的顺序。 可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlOrder" /> 常数之一：<see cref="F:Microsoft.Office.Interop.Excel.XlOrder.xlDownThenOver" /> 或 <see cref="F:Microsoft.Office.Interop.Excel.XlOrder.xlOverThenDown" />。 默认值为 <see cref="F:Microsoft.Office.Interop.Excel.XlOrder.xlDownThenOver" />。</param>
        <param name="pageFieldWrapCount">数据透视表中每列或每行中的页字段数。 默认值为 0（零）。</param>
        <param name="readData">
          如果为 <see langword="true" />，则可创建包含外部数据库所有记录的数据透视表缓存；此缓存可能很大。 如果 <c>ReadData</c> 为 <see langword="false" />，则可以在实际读取数据前，将某些字段设置为基于服务器的页字段。</param>
        <param name="connection">一个字符串，包含使 Excel 连接到 ODBC 数据源的 ODBC 设置。 连接字符串具有格式“ODBC;&lt;连接字符串&gt;”。 此参数重写 <see cref="T:Microsoft.Office.Interop.Excel.PivotCache" /> 对象的 <see cref="P:Microsoft.Office.Interop.Excel.PivotCache.Connection" /> 属性的所有以前的设置。</param>
        <summary>创建一个 <see cref="T:Microsoft.Office.Interop.Excel.PivotTable" /> 对象。</summary>
        <returns>
          <see cref="T:Microsoft.Office.Interop.Excel.PivotTable" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法不显示数据透视表向导。 此方法不是可用于 OLE DB 数据源。 使用<xref:Microsoft.Office.Interop.Excel.Worksheets.Add%2A>方法可添加数据透视表缓存中，然后创建一个数据透视表报告基于该高速缓存。  
  
## <a name="optional-parameters"></a>可选参数  
 可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions.md)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.PivotTableWizard%2A>方法来创建数据透视表基于范围的 A1 至 C4 当前工作表的单元格的内容。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#108](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#108)]
 [!code-vb[Trin_ExcelWorkSheet#108](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#108)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Previous">
      <MemberSignature Language="C#" Value="public object Previous { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Previous" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.Previous" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取表示上一个表的 <see cref="T:Microsoft.Office.Interop.Excel.Worksheet" />。</summary>
        <value>表示上一个表的 <see cref="T:Microsoft.Office.Interop.Excel.Worksheet" />；如果当前工作表是工作簿中的第一个表，则为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Previous%2A>属性来确定是否当前<xref:Microsoft.Office.Tools.Excel.WorksheetBase>是工作簿中的第一个表。 如果当前<xref:Microsoft.Office.Tools.Excel.WorksheetBase>不是第一个表，则显示上一个工作表的名称。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#24](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#24)]
 [!code-vb[Trin_ExcelWorkSheet#24](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#24)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PrintedCommentPages">
      <MemberSignature Language="C#" Value="public int PrintedCommentPages { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PrintedCommentPages" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.PrintedCommentPages" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取要为当前工作表打印的注释页的数目。 此属性只能用于 [!INCLUDE[Excel_14_short](~/includes/excel-14-short-md.md)] 对象。</summary>
        <value>要为当前工作表打印的注释页的数目。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Tools.Excel.WorksheetBase.PrintedCommentPages%2A>属性仅将返回一个数字大于零如果**注释**上设置**表**选项卡**页面设置**对话框中设置为**在表的末尾**。 如果表是图表工作表或 MS Excel 5.0 对话框工作表，此属性将返回零。  
  
> [!NOTE]
>  此属性将出现在 IntelliSense Excel 2007 项目中面向[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]。 但是，不能在 Excel 2007 项目中使用此属性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MissingMemberException">此属性用于 Excel 2007 项目。</exception>
      </Docs>
    </Member>
    <Member MemberName="PrintOut">
      <MemberSignature Language="C#" Value="public void PrintOut (object from, object to, object copies, object preview, object activePrinter, object printToFile, object collate, object prToFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PrintOut(object from, object to, object copies, object preview, object activePrinter, object printToFile, object collate, object prToFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.PrintOut(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="from" Type="System.Object" />
        <Parameter Name="to" Type="System.Object" />
        <Parameter Name="copies" Type="System.Object" />
        <Parameter Name="preview" Type="System.Object" />
        <Parameter Name="activePrinter" Type="System.Object" />
        <Parameter Name="printToFile" Type="System.Object" />
        <Parameter Name="collate" Type="System.Object" />
        <Parameter Name="prToFileName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="from">To be added.</param>
        <param name="to">To be added.</param>
        <param name="copies">To be added.</param>
        <param name="preview">To be added.</param>
        <param name="activePrinter">To be added.</param>
        <param name="printToFile">To be added.</param>
        <param name="collate">To be added.</param>
        <param name="prToFileName">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrintOutEx">
      <MemberSignature Language="C#" Value="public void PrintOutEx (object from, object to, object copies, object preview, object activePrinter, object printToFile, object collate, object prToFileName, object ignorePrintAreas);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PrintOutEx(object from, object to, object copies, object preview, object activePrinter, object printToFile, object collate, object prToFileName, object ignorePrintAreas) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.PrintOutEx(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="from" Type="System.Object" />
        <Parameter Name="to" Type="System.Object" />
        <Parameter Name="copies" Type="System.Object" />
        <Parameter Name="preview" Type="System.Object" />
        <Parameter Name="activePrinter" Type="System.Object" />
        <Parameter Name="printToFile" Type="System.Object" />
        <Parameter Name="collate" Type="System.Object" />
        <Parameter Name="prToFileName" Type="System.Object" />
        <Parameter Name="ignorePrintAreas" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="from">要从其处开始打印的页码。 如果省略此参数，则打印从第一页开始。</param>
        <param name="to">要打印的最后一页的页码。 若忽略此参数，则打印至最后一页。</param>
        <param name="copies">要打印的份数。 如果忽略此参数，则打印一份。</param>
        <param name="preview">
          若要在打印对象前让 Microsoft Office Excel 调用打印预览，请使用 <see langword="true" />。 若要立即打印对象，请使用 <see langword="false" />。</param>
        <param name="activePrinter">设置活动打印机的名称。</param>
        <param name="printToFile">
          若要打印到文件，请使用 <see langword="true" />。 若未指定 <c>PrToFileName</c>，则 Excel 会提示用户输入输出文件的名称。</param>
        <param name="collate">
          若逐份打印多个副本，请使用 <see langword="true" />。</param>
        <param name="prToFileName">如果 <c>PrintToFile</c> 设为 <see langword="true" />，则此参数指定要打印到的文件的名称。</param>
        <param name="ignorePrintAreas">
          如果要忽略打印区域并打印整个工作簿，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <summary>打印工作表。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 "页"中的说明`From`和`To`指打印的页面，不适用于表或工作簿中的全部页。  
  
## <a name="optional-parameters"></a>可选参数  
 可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions.md)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.PrintOutEx%2A>方法打印到默认打印机工作表的前两个页的两个已设置排序规则的副本。 若要运行此代码示例，你的工作簿必须包含名为工作表`Sheet1`的某些数据。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkBook_Additional#13](~/snippets/csharp/VS_Snippets_OfficeSP/trin_excelworkbook_additional/cs/ThisWorkbook.cs#13)]
 [!code-vb[Trin_ExcelWorkBook_Additional#13](~/snippets/visualbasic/VS_Snippets_OfficeSP/trin_excelworkbook_additional/vb/ThisWorkbook.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PrintPreview">
      <MemberSignature Language="C#" Value="public void PrintPreview (object enableChanges);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PrintPreview(object enableChanges) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.PrintPreview(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enableChanges" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="enableChanges">To be added.</param>
        <summary>显示工作表打印效果的预览。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a>可选参数  
 可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions.md)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.PrintPreview%2A>方法以显示当前工作表的打印预览。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#110](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#110)]
 [!code-vb[Trin_ExcelWorkSheet#110](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#110)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Protect">
      <MemberSignature Language="C#" Value="public void Protect (object password, object drawingObjects, object contents, object scenarios, object userInterfaceOnly, object allowFormattingCells, object allowFormattingColumns, object allowFormattingRows, object allowInsertingColumns, object allowInsertingRows, object allowInsertingHyperlinks, object allowDeletingColumns, object allowDeletingRows, object allowSorting, object allowFiltering, object allowUsingPivotTables);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Protect(object password, object drawingObjects, object contents, object scenarios, object userInterfaceOnly, object allowFormattingCells, object allowFormattingColumns, object allowFormattingRows, object allowInsertingColumns, object allowInsertingRows, object allowInsertingHyperlinks, object allowDeletingColumns, object allowDeletingRows, object allowSorting, object allowFiltering, object allowUsingPivotTables) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.Protect(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="password" Type="System.Object" />
        <Parameter Name="drawingObjects" Type="System.Object" />
        <Parameter Name="contents" Type="System.Object" />
        <Parameter Name="scenarios" Type="System.Object" />
        <Parameter Name="userInterfaceOnly" Type="System.Object" />
        <Parameter Name="allowFormattingCells" Type="System.Object" />
        <Parameter Name="allowFormattingColumns" Type="System.Object" />
        <Parameter Name="allowFormattingRows" Type="System.Object" />
        <Parameter Name="allowInsertingColumns" Type="System.Object" />
        <Parameter Name="allowInsertingRows" Type="System.Object" />
        <Parameter Name="allowInsertingHyperlinks" Type="System.Object" />
        <Parameter Name="allowDeletingColumns" Type="System.Object" />
        <Parameter Name="allowDeletingRows" Type="System.Object" />
        <Parameter Name="allowSorting" Type="System.Object" />
        <Parameter Name="allowFiltering" Type="System.Object" />
        <Parameter Name="allowUsingPivotTables" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="password">工作表的密码，区分大小写。 如果省略此参数，则无需使用密码即可取消对工作表的保护。 否则，您必须指定密码才能取消对工作表的保护。 如果忘记密码，则无法取消对工作表的保护。 最好将密码及其对应文档名的列表保存在安全的位置。</param>
        <param name="drawingObjects">
          为 <see langword="true" /> 时保护形状。 默认值为 <see langword="false" />。</param>
        <param name="contents">
          为 <see langword="true" /> 可保护锁定单元格中的内容。 默认值为 <see langword="true" />。</param>
        <param name="scenarios">
          为 <see langword="true" /> 时保护方案。 默认值为 <see langword="true" />。</param>
        <param name="userInterfaceOnly">
          为 <see langword="true" /> 可保护用户界面，但不保护宏。 如果省略此参数，则同时对宏和用户界面应用保护。</param>
        <param name="allowFormattingCells">
          为 <see langword="true" />，则允许用户格式化受保护的工作表上的任何单元格。 默认值为 <see langword="false" />。</param>
        <param name="allowFormattingColumns">
          为 <see langword="true" />，则允许用户格式化受保护的工作表上的任何列。 默认值为 <see langword="false" />。</param>
        <param name="allowFormattingRows">
          为 <see langword="true" />，则允许用户格式化受保护的工作表上的任何行。 默认值为 <see langword="false" />。</param>
        <param name="allowInsertingColumns">
          为 <see langword="true" />，则允许用户在受保护的工作表上插入列。 默认值为 <see langword="false" />。</param>
        <param name="allowInsertingRows">
          为 <see langword="true" />，则允许用户在受保护的工作表上插入行。 默认值为 <see langword="false" />。</param>
        <param name="allowInsertingHyperlinks">
          为 <see langword="true" />，则允许用户在工作表上插入超链接。 默认值为 <see langword="false" />。</param>
        <param name="allowDeletingColumns">
          为 <see langword="true" />，则允许用户在受保护的工作表上删除列，此处要删除的列中的每个单元格都已被解除锁定。 默认值为 <see langword="false" />。</param>
        <param name="allowDeletingRows">
          为 <see langword="true" />，则允许用户在受保护的工作表上删除行，此处要删除的行中的每个单元格都已被解除锁定。 默认值为 <see langword="false" />。</param>
        <param name="allowSorting">
          为 <see langword="true" />，则允许用户在受保护的工作表上进行排序。 排序范围中的每个单元格都必须已解除锁定或不受保护。 默认值为 <see langword="false" />。</param>
        <param name="allowFiltering">
          为 <see langword="true" />，则允许用户在受保护的工作表上设置筛选器。 用户可以更改筛选条件，但不能启用或禁用自动筛选。 用户可以在现有的自动筛选上设置筛选器。 默认值为 <see langword="false" />。</param>
        <param name="allowUsingPivotTables">
          为 <see langword="true" />，则允许用户在受保护的工作表上使用数据透视表。 默认值为 <see langword="false" />。</param>
        <summary>保护工作表使其无法修改。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果将应用此方法与`UserInterfaceOnly`参数设置为`true`以及然后保存该工作簿，整张工作表 （而不仅仅是接口） 将完全保护时重新打开工作簿。 若要打开工作簿后，重新启用用户界面保护，必须再次应用使用此方法`UserInterfaceOnly`设置为`true`。  
  
 可对受保护工作表进行更改，如果提供密码。 此外，另一种方法将取消保护工作表，进行必要的更改，然后然后再次保护工作表。  
  
> [!NOTE]
>  未受保护，则表示可能会锁定该单元格 (**设置单元格格式**对话框)，但包括在中定义的范围**允许用户编辑范围**对话框中，并且用户已取消保护具有密码的范围或已验证通过 NT 权限。  
  
## <a name="optional-parameters"></a>可选参数  
 可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions.md)。  
  
   
  
## Examples  
 下面的代码示例获取的值<xref:Microsoft.Office.Tools.Excel.WorksheetBase.ProtectContents%2A>属性以确定是否受保护工作表内容。 如果内容未受保护，则<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Protect%2A>方法调用与`Contents`参数设置为`true`以便保护内容。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#25](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#25)]
 [!code-vb[Trin_ExcelWorkSheet#25](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#25)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectContents">
      <MemberSignature Language="C#" Value="public bool ProtectContents { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ProtectContents" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.ProtectContents" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示工作表的内容（单个单元格）是否受保护。</summary>
        <value>
          如果表的内容受保护，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例获取的值<xref:Microsoft.Office.Tools.Excel.WorksheetBase.ProtectContents%2A>属性以确定是否受保护工作表内容。 如果内容未受保护，则<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Protect%2A>方法调用与`Contents`参数设置为`true`以便保护内容。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#25](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#25)]
 [!code-vb[Trin_ExcelWorkSheet#25](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#25)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectDrawingObjects">
      <MemberSignature Language="C#" Value="public bool ProtectDrawingObjects { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ProtectDrawingObjects" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.ProtectDrawingObjects" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示形状是否受保护。</summary>
        <value>
          如果形状受保护，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例获取的值<xref:Microsoft.Office.Tools.Excel.WorksheetBase.ProtectDrawingObjects%2A>属性以确定是否受保护工作表上的形状。 如果形状未受保护，则<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Protect%2A>方法调用与`DrawingObjects`参数设置为`true`以便图形处于保护状态。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#26](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#26)]
 [!code-vb[Trin_ExcelWorkSheet#26](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#26)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Protection">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Protection Protection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Protection Protection" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.Protection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Protection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Protection" /> 对象，该对象表示工作表的保护选项。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.Protection" /> 对象，表示工作表的保护选项。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例获取的值<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Protection%2A>属性来确定是否当前允许单元格格式。 如果不允许单元格格式，则<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Protect%2A>方法调用与`AllowFormattingCells`参数设置为`true`以便单元格可进行格式设置。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#27](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#27)]
 [!code-vb[Trin_ExcelWorkSheet#27](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#27)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectionMode">
      <MemberSignature Language="C#" Value="public bool ProtectionMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ProtectionMode" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.ProtectionMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示是否打开仅限用户界面保护。</summary>
        <value>
          如果打开仅限用户界面保护，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要打开用户界面保护，使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Protect%2A>方法替换`UserInterfaceOnly`参数设置为`true`。  
  
   
  
## Examples  
 下面的代码示例获取的值<xref:Microsoft.Office.Tools.Excel.WorksheetBase.ProtectionMode%2A>属性来确定是否受到保护的用户界面。 如果用户界面未受保护，则<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Protect%2A>方法调用与`UserInterfaceOnly`参数设置为`true`这样的用户界面会受到保护。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#28](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#28)]
 [!code-vb[Trin_ExcelWorkSheet#28](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#28)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectScenarios">
      <MemberSignature Language="C#" Value="public bool ProtectScenarios { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ProtectScenarios" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.ProtectScenarios" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示工作表方案是否受保护。</summary>
        <value>
          如果工作表方案受保护，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例获取的值<xref:Microsoft.Office.Tools.Excel.WorksheetBase.ProtectScenarios%2A>属性以确定是否受保护工作表方案。 如果方案不受保护，则<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Protect%2A>方法调用与`Scenarios`参数设置为`true`以便方案处于保护状态。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#29](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#29)]
 [!code-vb[Trin_ExcelWorkSheet#29](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#29)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryTables">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.QueryTables QueryTables { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.QueryTables QueryTables" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.QueryTables" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.QueryTables</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.QueryTables" /> 集合，该集合表示工作表上的所有查询表。</summary>
        <value>
          <see cref="T:Microsoft.Office.Interop.Excel.QueryTables" /> 集合，表示工作表上的所有查询表。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.QueryTables%2A>属性刷新中的数据每个<xref:Microsoft.Office.Interop.Excel.QueryTable?displayProperty=fullName>上当前工作表。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#30](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#30)]
 [!code-vb[Trin_ExcelWorkSheet#30](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#30)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Range">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Tools.Excel.Worksheet_RangeType Range { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Tools.Excel.Worksheet_RangeType Range" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.Range" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Tools.Excel.Worksheet_RangeType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 对象，该对象表示一个单元格或一定单元格范围。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 对象，表示一个单元格或单元格范围。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Tools.Excel.WorksheetBase.Range%2A>属性应与以下参数一起使用。  
  
|参数|描述|  
|---------------|-----------------|  
|`Cell1`|采用应用程序语言的以 A1 样式表示法表示的范围名称。 范围名称可以包括范围运算符（冒号）、交集运算符（空格）或并集运算符（逗号）。 范围名称还可以包括货币符号，但是这些符号被忽略。 可以在范围的任何部分中使用本地定义的名称。 如果使用一个名称，则假定该名称使用的是应用程序的语言。 此参数是必需的。|  
|`Cell2`|范围右下角的单元格。 可以是一个包含单个单元格、整列、整行的 <xref:Microsoft.Office.Interop.Excel.Range?displayProperty=fullName>，或者可以是一个以应用程序的语言命名单个单元格的字符串。 此参数在 Visual Basic 中是可选的。|  
  
 如果你尝试使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Range%2A>而不指定任何参数，<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Range%2A>将获取<xref:Microsoft.Office.Tools.Excel.Worksheet._RangeType>对象，是 Visual Studio 基础结构的一部分和不应在代码中直接使用。  
  
## <a name="optional-parameters"></a>可选参数  
 可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions.md)。  
  
   
  
## Examples  
 下面的代码示例演示使用不同方式<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Range%2A>属性来访问单个或多个单元格。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#42](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#42)]
 [!code-vb[Trin_ExcelWorkSheet#42](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#42)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rectangles">
      <MemberSignature Language="C#" Value="public object Rectangles (object index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Rectangles(object index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.Rectangles(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetAllPageBreaks">
      <MemberSignature Language="C#" Value="public void ResetAllPageBreaks ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetAllPageBreaks() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.ResetAllPageBreaks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>重置指定工作表上的所有分页符。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Rows">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range Rows { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range Rows" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.Rows" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个表示工作表上一个或多个行的 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 对象。</summary>
        <value>一个表示工作表上一个或多个行的 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果使用不带参数，此属性返回<xref:Microsoft.Office.Interop.Excel.Range>对象，其中包含工作表上的所有行。  
  
 此属性可以使用以下可选参数，用于获取工作表上的特定行。 如果参数中使用此属性，返回值是必须强制转换为对象<xref:Microsoft.Office.Interop.Excel.Range>。  
  
|参数|描述|  
|---------------|-----------------|  
|`RowIndex`|若要获取的一个或多个行的索引。<br /><br /> 若要获取单个行，请传递一个整数，指定你想要获取的行的索引。 从 1 开始的行索引。<br /><br /> 若要获取多个连续行，请传递与格式字符串"`first row`:`last row`"。 例如，若要获取行 1 至 5，可传递"1:5"。|  
|`ColumnIndex`|不使用此参数。 此属性将引发<xref:System.Runtime.InteropServices.COMException>如果你尝试将值传递给此参数。|  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Rows%2A>属性设置颜色、 名称、 大小和加粗的字体的所有单元格的前五个行中，工作表上。  
  
 此示例适用于文档级自定义。 若要运行此代码，请将其复制到你的项目中的工作表类之一。  
  
 [!code-csharp[Trin_ExcelWorkSheet#31](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#31)]
 [!code-vb[Trin_ExcelWorkSheet#31](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#31)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveAs">
      <MemberSignature Language="C#" Value="public void SaveAs (string filename, object fileFormat, object password, object writeResPassword, object readOnlyRecommended, object createBackup, object addToMru, object textCodepage, object textVisualLayout, object local);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SaveAs(string filename, object fileFormat, object password, object writeResPassword, object readOnlyRecommended, object createBackup, object addToMru, object textCodepage, object textVisualLayout, object local) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.SaveAs(System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
        <Parameter Name="fileFormat" Type="System.Object" />
        <Parameter Name="password" Type="System.Object" />
        <Parameter Name="writeResPassword" Type="System.Object" />
        <Parameter Name="readOnlyRecommended" Type="System.Object" />
        <Parameter Name="createBackup" Type="System.Object" />
        <Parameter Name="addToMru" Type="System.Object" />
        <Parameter Name="textCodepage" Type="System.Object" />
        <Parameter Name="textVisualLayout" Type="System.Object" />
        <Parameter Name="local" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="filename">要保存的文件的名称。 可以包含完整路径；否则，Microsoft Office Excel 将文件保存在当前文件夹中。</param>
        <param name="fileFormat">保存文件时要使用的文件格式。 有关有效选项的列表，请参见 <see cref="P:Microsoft.Office.Tools.Excel.Workbook.FileFormat" /> 属性。 对于现有文件，默认格式为最后一种指定文件格式；对于新文件，默认格式为所用 Excel 版本的格式。</param>
        <param name="password">一个区分大小写的字符串（不超过 15 个字符），指示为文件指定的保护密码。</param>
        <param name="writeResPassword">文件的写保护密码。 如果保存文件时指定了密码，但打开文件时没有提供密码，则该文件以只读方式打开。</param>
        <param name="readOnlyRecommended">
          如果为 <see langword="true" />，则在打开该文件时显示一条消息，建议以只读方式打开该文件。</param>
        <param name="createBackup">
          如果为 <see langword="true" />，则创建备份文件。</param>
        <param name="addToMru">
          如果为 <see langword="true" />，则将工作簿添加到最近使用的文件列表中。 默认值为 <see langword="false" />。</param>
        <param name="textCodepage">不在美国使用英语 Excel。</param>
        <param name="textVisualLayout">不在美国使用英语 Excel。</param>
        <param name="local">
          如果为 <see langword="true" />，则针对 Excel 语言保存文件（包括控制面板设置）；如果为 <see langword="false" />（默认），则针对 Visual Basic for Applications (VBA) 语言保存文件。</param>
        <summary>在另一个文件中保存对工作表所做的更改。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a>可选参数  
 可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions.md)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.SaveAs%2A>方法以将保存当前工作表的新副本。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#111](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#111)]
 [!code-vb[Trin_ExcelWorkSheet#111](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#111)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Scenarios">
      <MemberSignature Language="C#" Value="public object Scenarios (object index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Scenarios(object index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.Scenarios(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">方案的名称或编号。 使用数组可指定多个方案。</param>
        <summary>获取一个对象，该对象表示工作表上的单个方案（一个 <see cref="T:Microsoft.Office.Interop.Excel.Scenario" /> 对象）或方案的集合（一个 <see cref="T:Microsoft.Office.Interop.Excel.Scenarios" /> 对象）。</summary>
        <returns>一个对象，表示工作表上的单个方案（一个 <see cref="T:Microsoft.Office.Interop.Excel.Scenario" /> 对象）或方案的集合（一个 <see cref="T:Microsoft.Office.Interop.Excel.Scenarios" /> 对象）。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Scenarios%2A>方法将一个新的方案添加到当前工作表，并显示**方案 Manager**对话框来验证是否添加了该方案。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#112](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#112)]
 [!code-vb[Trin_ExcelWorkSheet#112](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#112)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Scripts">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Core.Scripts Scripts { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Core.Scripts Scripts" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.Scripts" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Core.Scripts</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScrollArea">
      <MemberSignature Language="C#" Value="public string ScrollArea { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ScrollArea" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.ScrollArea" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置允许滚动的范围，作为 A1 样式范围引用。</summary>
        <value>允许滚动的范围，作为 A1 样式范围引用。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不能选择滚动区域以外的单元格。  
  
 将此属性设置为空字符串 ("") 以启用整张工作表的单元格选定区域。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.ScrollArea%2A>属性 a1 至 Z100 将当前工作表的滚动区域设置为的单元格范围。  
  
 此示例适用于  
  
 文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#34](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#34)]
 [!code-vb[Trin_ExcelWorkSheet#34](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#34)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScrollBars">
      <MemberSignature Language="C#" Value="public object ScrollBars (object index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object ScrollBars(object index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.ScrollBars(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public void Select (object replace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Select(object replace) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.Select(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="replace" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="replace">
          如果设置为 <see langword="true" />，则移除当前选择并转为选择该工作表；如果设置为 <see langword="false" />，则扩展当前选定内容以包括任何之前选定的对象和该工作表。</param>
        <summary>选择工作表。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a>可选参数  
 可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions.md)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Select%2A>方法来选择`Sheet1`，，然后将扩展以包括所选内容`Sheet2`和`Sheet3`。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#113](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#113)]
 [!code-vb[Trin_ExcelWorkSheet#113](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#113)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectionChange">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.DocEvents_SelectionChangeEventHandler SelectionChange;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.DocEvents_SelectionChangeEventHandler SelectionChange" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorksheetBase.SelectionChange" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.DocEvents_SelectionChangeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在工作表上的所选内容发生更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示的处理程序<xref:Microsoft.Office.Tools.Excel.WorksheetBase.SelectionChange>状态栏中显示的表名称和地址的所选范围内的事件。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#208](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#208)]
 [!code-vb[Trin_ExcelWorkSheet#208](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#208)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBackgroundPicture">
      <MemberSignature Language="C#" Value="public void SetBackgroundPicture (string filename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetBackgroundPicture(string filename) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.SetBackgroundPicture(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">图形文件的名称。</param>
        <summary>设置工作表的背景图形。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.SetBackgroundPicture%2A>方法以设置到名为 image1.jpg 工作表的背景图像。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#114](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#114)]
 [!code-vb[Trin_ExcelWorkSheet#114](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#114)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Shapes">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Shapes Shapes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Shapes Shapes" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.Shapes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Shapes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个表示工作表上的所有形状的 <see cref="T:Microsoft.Office.Interop.Excel.Shapes" /> 对象。</summary>
        <value>一个表示工作表上的所有形状的 <see cref="T:Microsoft.Office.Interop.Excel.Shapes" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Shapes%2A>属性将圆环图形状添加到当前工作表。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#33](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#33)]
 [!code-vb[Trin_ExcelWorkSheet#33](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowAllData">
      <MemberSignature Language="C#" Value="public void ShowAllData ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ShowAllData() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.ShowAllData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>使当前经过筛选的列表的所有行可见。 如果正在使用自动筛选，则此方法会将箭头更改为“所有”。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowDataForm">
      <MemberSignature Language="C#" Value="public void ShowDataForm ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ShowDataForm() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.ShowDataForm" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>显示与工作表关联的数据窗体。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 尽管你使用数据窗体，将暂停执行。 在之后的行时关闭数据窗体，请继续执行<xref:Microsoft.Office.Tools.Excel.WorksheetBase.ShowDataForm%2A>方法。  
  
 如果存在，此方法将自定义数据窗体上，运行。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Shutdown">
      <MemberSignature Language="C#" Value="public event EventHandler Shutdown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Shutdown" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorksheetBase.Shutdown" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在工作表宿主项关闭时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 这是要在中调用的最后一个事件<xref:Microsoft.Office.Tools.Excel.WorksheetBase>类作为<xref:Microsoft.Office.Tools.Excel.WorksheetBase>类卸载。 此事件用于任何其他清理过程。  
  
 文档级自定义项，工作表主机项关闭时，将卸载程序集的应用程序域。  
  
 在应用程序级外接程序，工作表主机项关闭时，不会不卸载应用程序域。 此外，基础的工作表对象将不再可用。 若要访问该工作表关闭使用之前<xref:Microsoft.Office.Tools.Excel.Workbook.BeforeClose>相反。  
  
   
  
## Examples  
 下面的代码示例演示的处理程序<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Shutdown>显示一条消息的事件时<xref:Microsoft.Office.Tools.Excel.WorksheetBase>类卸载。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#209](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#209)]
 [!code-vb[Trin_ExcelWorkSheet#209](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#209)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Site">
      <MemberSignature Language="C#" Value="public System.ComponentModel.ISite Site { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISite Site" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.Site" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SmartTags">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.SmartTags SmartTags { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.SmartTags SmartTags" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.SmartTags" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.SmartTags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Sort Sort { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Sort Sort" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.Sort" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Sort</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前工作表中经过排序的值。</summary>
        <value>当前工作表中经过排序的值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例填充标头和员工名称与当前工作表中的范围。 接下来，该示例访问<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Sort%2A>包括要作为排序依据的列范围和排序顺序的工作表并设置属性的属性。 最后，该代码调用`Microsoft.Office.Interop.Excel.Sort.Apply`方法指定的工作表数据进行排序。 运行此代码时，员工数据将进行排序以升序基于雇员的名字。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_Excelworkbook_Additional#31](~/snippets/csharp/VS_Snippets_OfficeSP/trin_excelworkbook_additional/cs/Sheet3.cs#31)]
 [!code-vb[Trin_Excelworkbook_Additional#31](~/snippets/visualbasic/VS_Snippets_OfficeSP/trin_excelworkbook_additional/vb/Sheet3.vb#31)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Spinners">
      <MemberSignature Language="C#" Value="public object Spinners (object index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Spinners(object index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.Spinners(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StandardHeight">
      <MemberSignature Language="C#" Value="public double StandardHeight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 StandardHeight" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.StandardHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取工作表中所有行的标准（默认）高度（以磅为单位）。</summary>
        <value>工作表中所有行的标准（默认）高度（以磅为单位）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.StandardHeight%2A>属性在当前工作表中显示的所有行的默认高度。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#36](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#36)]
 [!code-vb[Trin_ExcelWorkSheet#36](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#36)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StandardWidth">
      <MemberSignature Language="C#" Value="public double StandardWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 StandardWidth" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.StandardWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置工作表中所有列的标准（默认）宽度。</summary>
        <value>工作表中所有列的标准（默认）宽度。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一个单元的列宽度等于正文样式中的一个字符的宽度。 对于非等宽字体使用的字符 0 （零） 的宽度。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.StandardWidth%2A>属性在当前工作表中显示所有列的默认宽度。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#37](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#37)]
 [!code-vb[Trin_ExcelWorkSheet#37](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#37)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Startup">
      <MemberSignature Language="C#" Value="public event EventHandler Startup;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Startup" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorksheetBase.Startup" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tab">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Tab Tab { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Tab Tab" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.Tab" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Tab</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取工作表的一个 <see cref="T:Microsoft.Office.Interop.Excel.Tab" />。</summary>
        <value>工作表的一个 <see cref="T:Microsoft.Office.Interop.Excel.Tab" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Tab%2A>属性设置为蓝色的工作表的选项卡的主色。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#38](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#38)]
 [!code-vb[Trin_ExcelWorkSheet#38](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#38)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置包含有关工作表的数据的对象。</summary>
        <value>包含有关工作表的数据的对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一个常见用途<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Tag%2A>属性是用于存储与工作表密切关联的数据。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextBoxes">
      <MemberSignature Language="C#" Value="public object TextBoxes (object index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object TextBoxes(object index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.TextBoxes(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TransitionExpEval">
      <MemberSignature Language="C#" Value="public bool TransitionExpEval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TransitionExpEval" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.TransitionExpEval" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示 Microsoft Office Excel 是否对工作表使用 Lotus 1-2-3 表达式计算规则。</summary>
        <value>
          如果 Excel 对工作表使用 Lotus 1-2-3 表达式计算规则，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 执行与相同的功能**转换输入公式**选项**转换**选项卡**选项**对话框。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TransitionFormEntry">
      <MemberSignature Language="C#" Value="public bool TransitionFormEntry { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TransitionFormEntry" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.TransitionFormEntry" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示 Microsoft Office Excel 是否对工作表使用 Lotus 1-2-3 公式规则。</summary>
        <value>
          如果 Excel 对工作表使用 Lotus 1-2-3 公式规则，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlSheetType Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlSheetType Type" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlSheetType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取工作表类型。</summary>
        <value>
          <see cref="T:Microsoft.Office.Interop.Excel.XlSheetType" /> 值之一。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Type%2A>属性来显示当前工作表是否工作表，对话表或一个消息框中的图表。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#40](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#40)]
 [!code-vb[Trin_ExcelWorkSheet#40](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#40)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unprotect">
      <MemberSignature Language="C#" Value="public void Unprotect (object password);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Unprotect(object password) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.Unprotect(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="password" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="password">用于取消保护工作表的密码，区分大小写。 如果工作表未使用密码保护，则忽略此参数。 如果对有密码保护的工作表忽略此参数，则将提示您输入密码。</param>
        <summary>移除对工作表的保护。 此方法在工作表不受保护时无效。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果忘记密码，则无法取消对工作表的保护。 最好将密码及其对应文档名的列表保存在安全的位置。  
  
## <a name="optional-parameters"></a>可选参数  
 可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions.md)。  
  
   
  
## Examples  
 下面的代码示例确定是否当前的工作表的单元格内容受保护。 如果受保护的单元格内容，则该示例将提示用户取消单元格内容保护使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Unprotect%2A>方法。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#115](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#115)]
 [!code-vb[Trin_ExcelWorkSheet#115](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#115)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UsedRange">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range UsedRange { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range UsedRange" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.UsedRange" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 对象，该对象表示在任何时候都包含值的所有单元格。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 对象，表示在任何时候都包含值的所有单元格。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用的范围还包括曾经使用任何单元格。 例如，如果单元格**A1**包含一个值，然后删除值，则单元格**A1**被视为使用。 在这种情况下，<xref:Microsoft.Office.Tools.Excel.WorksheetBase.UsedRange%2A>属性将返回一系列，包括单元格**A1**。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.UsedRange%2A>属性选择的范围使用工作表上的单元格。 本示例首先设置单元格的范围从 A1 为 C3 在为 23 的值的当前工作表。 如果工作表是可见的则该示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.UsedRange%2A>属性以选择<xref:Microsoft.Office.Interop.Excel.Range?displayProperty=fullName>使用的单元格。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#41](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#41)]
 [!code-vb[Trin_ExcelWorkSheet#41](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#41)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Visible">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlSheetVisibility Visible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlSheetVisibility Visible" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.Visible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlSheetVisibility</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个 <see cref="T:Microsoft.Office.Interop.Excel.XlSheetVisibility" /> 值，该值确定该对象是否可见。</summary>
        <value>
          <see cref="T:Microsoft.Office.Interop.Excel.XlSheetVisibility" /> 值之一。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Visible%2A>属性，以帮助选择的范围使用工作表上的单元格。 本示例首先设置单元格的范围从 A1 为 C3 在为 23 的值的当前工作表。 如果<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Visible%2A>属性指示工作表是可见的则该示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.UsedRange%2A>属性以选择<xref:Microsoft.Office.Interop.Excel.Range?displayProperty=fullName>使用的单元格。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#41](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#41)]
 [!code-vb[Trin_ExcelWorkSheet#41](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#41)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VPageBreaks">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.VPageBreaks VPageBreaks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.VPageBreaks VPageBreaks" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.VPageBreaks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.VPageBreaks</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.VPageBreaks" /> 集合，该集合表示表上的垂直分页符。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.VPageBreaks" /> 集合，表示表上的垂直分页符。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.VPageBreaks%2A>属性在单元格 C5 处添加垂直分页符。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#14](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#14)]
 [!code-vb[Trin_ExcelWorkSheet#14](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDataQuery">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range XmlDataQuery (string xPath, object selectionNamespaces, object map);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Office.Interop.Excel.Range XmlDataQuery(string xPath, object selectionNamespaces, object map) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.XmlDataQuery(System.String,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xPath" Type="System.String" />
        <Parameter Name="selectionNamespaces" Type="System.Object" />
        <Parameter Name="map" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="xPath">要查询的 XPath。</param>
        <param name="selectionNamespaces">一个以空格分隔的字符串，其中包含在 XPath 参数中引用的命名空间。 如果无法解析指定的命名空间之一，则产生运行时错误。</param>
        <param name="map">一个 <see cref="T:Microsoft.Office.Interop.Excel.XmlMap" />。 如果要在特定映射中查询 XPath，请指定 XML 映射。</param>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 对象，该对象表示映射到特定 XPath 的单元格。 如果指定的 XPath 未映射到工作表，或者如果映射的范围为空，则获取 <see langword="null" />。</summary>
        <returns>一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 对象，表示映射到特定 XPath 的单元格；如果指定的 XPath 未映射到工作表，或者如果映射的范围为空，则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 XML 功能，除了将文件保存 XML 电子表格格式，将仅在 Microsoft Office Professional Edition 2003 和 Microsoft Office Excel 2003 中可用。  
  
 如果 XPath 中的 XML 列表中中的列存在则<xref:Microsoft.Office.Interop.Excel.Range>返回的对象是否不包含标头行或插入行。  
  
## <a name="optional-parameters"></a>可选参数  
 可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions.md)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.XmlDataQuery%2A>方法以获取<xref:Microsoft.Office.Interop.Excel.Range>映射到特定的 XPath 的单元格。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#116](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#116)]
 [!code-vb[Trin_ExcelWorkSheet#116](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#116)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlMapQuery">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range XmlMapQuery (string xPath, object selectionNamespaces, object map);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Office.Interop.Excel.Range XmlMapQuery(string xPath, object selectionNamespaces, object map) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.XmlMapQuery(System.String,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xPath" Type="System.String" />
        <Parameter Name="selectionNamespaces" Type="System.Object" />
        <Parameter Name="map" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="xPath">要查询的 XPath。</param>
        <param name="selectionNamespaces">一个以空格分隔的字符串，其中包含在 XPath 参数中引用的命名空间。 如果无法解析指定的命名空间之一，则产生运行时错误。</param>
        <param name="map">一个 <see cref="T:Microsoft.Office.Interop.Excel.XmlMap" />。 如果要在特定映射中查询 XPath，请指定 XML 映射。</param>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 对象，该对象表示映射到特定 XPath 的单元格。 如果指定的 XPath 未映射到工作表，则获取 <see langword="null" />。</summary>
        <returns>一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 对象，表示映射到特定 XPath 的单元格；如果指定的 XPath 未映射到工作表，则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 XML 功能，除了将文件保存 XML 电子表格格式，将仅在 Microsoft Office Professional Edition 2003 和 Microsoft Office Excel 2003 中可用。  
  
 与不同<xref:Microsoft.Office.Tools.Excel.WorksheetBase.XmlDataQuery%2A>方法，<xref:Microsoft.Office.Tools.Excel.WorksheetBase.XmlMapQuery%2A>方法返回的 XML 列表，包括标题行和插入行的整个列。  
  
## <a name="optional-parameters"></a>可选参数  
 可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions.md)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.XmlMapQuery%2A>方法以获取<xref:Microsoft.Office.Interop.Excel.Range>映射到特定的 XPath 的单元格。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWorkSheet#117](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#117)]
 [!code-vb[Trin_ExcelWorkSheet#117](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#117)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>