<Type Name="WorksheetBase" FullName="Microsoft.Office.Tools.Excel.WorksheetBase">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8daff1c4b452253a0b7e2d8f1106786f00f6b1c6" /><Meta Name="ms.sourcegitcommit" Value="7439021cdeee6a9ef5d4640250701344f6cbba15" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="08/13/2019" /><Meta Name="ms.locfileid" Value="69004231" /></Metadata><TypeSignature Language="C#" Value="public abstract class WorksheetBase : IDisposable, Microsoft.Office.Tools.Excel.IWorksheetExtension, System.ComponentModel.IComponent, System.ComponentModel.ISupportInitialize, System.Windows.Forms.IBindableComponent" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit WorksheetBase extends System.Object implements class Microsoft.Office.Tools.EntryPoint, class Microsoft.Office.Tools.Excel.IWorksheetExtension, class Microsoft.Office.Tools.IExtension, class System.ComponentModel.IComponent, class System.ComponentModel.ISupportInitialize, class System.IDisposable, class System.Windows.Forms.IBindableComponent" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Tools.Excel.WorksheetBase" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Office.Tools.EntryPoint</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.Office.Tools.Excel.IWorksheetExtension</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.Office.Tools.IExtension</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.IComponent</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Forms.IBindableComponent</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItem(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供 Microsoft Office Excel 的文档级项目中 Sheetn 类的基类<c></c>。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 类是使用 Visual Studio 创建的文档`Sheet`级 Excel 项目中的 n 类的基类。  <xref:Microsoft.Office.Tools.Excel.WorksheetBase> 使用 n 类以编程方式访问项目中的工作表。  `Sheet` 类是表示文档级项目中的工作表的*主机项。* <xref:Microsoft.Office.Tools.Excel.WorksheetBase> 有关详细信息, 请参阅[主机项和主机控件概述](/visualstudio/vsto/host-items-and-host-controls-overview)和[工作表主机项](/visualstudio/vsto/worksheet-host-item)。  
  
 该类提供与 Excel 主互操作程序集中的类相同的成员,但它添加了以下功能:<xref:Microsoft.Office.Interop.Excel.Worksheet?displayProperty=fullName> <xref:Microsoft.Office.Tools.Excel.WorksheetBase>  
  
-   <xref:Microsoft.Office.Tools.Excel.WorksheetBase.Controls%2A> 属性。 使用此属性可以在运行时将托管控件添加到 Excel 工作表或删除控件。  
  
-   <xref:Microsoft.Office.Tools.Excel.WorksheetBase.InnerObject%2A> 属性。 使用此属性可获取工作表<xref:Microsoft.Office.Interop.Excel.Worksheet?displayProperty=fullName>宿主项的基础对象。  
  
-   <xref:Microsoft.Office.Tools.Excel.WorksheetBase.GetAutomationObject%2A> 方法。 重写此方法以向工作表中的 VBA 代码公开项目中的类。  
  
-   文档级事件 (例如<xref:Microsoft.Office.Tools.Excel.WorksheetBase.ActivateEvent>和<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Change>), 仅在 Excel 对象模型中的应用程序级别提供。 也就是说, 在 Excel 对象模型中, 这些事件是在<xref:Microsoft.Office.Interop.Excel.Application?displayProperty=fullName>类而不<xref:Microsoft.Office.Interop.Excel.Worksheet?displayProperty=fullName>是类中定义的。  
  
## <a name="creating-worksheet-host-items"></a>创建工作表主机项  
 不能在<xref:Microsoft.Office.Tools.Excel.WorksheetBase> Office 项目中以编程方式创建对象。  
  
 在文档级`Sheet`项目中, [!INCLUDE[vsto_runtime](~/includes/vsto-runtime-md.md)]当最终用户打开工作簿时<xref:Microsoft.Office.Tools.Excel.WorksheetBase>, 将自动实例化*n*类 (派生自)。 有关详细信息，请参阅 [Programming Document-Level Customizations](/visualstudio/vsto/programming-document-level-customizations)。  
  
 在应用程序级项目中, 您可以使用`GetVstoObject`方法以编程方式创建工作表宿主项。 你创建的工作表宿主项是<xref:Microsoft.Office.Tools.Excel.Worksheet?displayProperty=fullName>一个对象, 而不<xref:Microsoft.Office.Tools.Excel.WorksheetBase>是一个对象。 有关更多信息，请参见 [Extending Word Documents and Excel Workbooks in VSTO Add-ins at Run Time](/visualstudio/vsto/extending-word-documents-and-excel-workbooks-in-vsto-add-ins-at-run-time)。  
  
## <a name="usage"></a>用法  
 [!INCLUDE[vsto_net4utilities](~/includes/vsto-net4utilities-md.md)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WorksheetBase (Microsoft.Office.Tools.Excel.Factory factory, IServiceProvider serviceProvider, string primaryCookie, string identifier);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Microsoft.Office.Tools.Excel.Factory factory, class System.IServiceProvider serviceProvider, string primaryCookie, string identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.#ctor(Microsoft.Office.Tools.Excel.Factory,System.IServiceProvider,System.String,System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="factory" Type="Microsoft.Office.Tools.Excel.Factory" />
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
        <Parameter Name="primaryCookie" Type="System.String" />
        <Parameter Name="identifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="factory">To be added.</param>
        <param name="serviceProvider">To be added.</param>
        <param name="primaryCookie">To be added.</param>
        <param name="identifier">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="_CodeName">
      <MemberSignature Language="C#" Value="public string _CodeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string _CodeName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase._CodeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="_DisplayRightToLeft">
      <MemberSignature Language="C#" Value="public int _DisplayRightToLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 _DisplayRightToLeft" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase._DisplayRightToLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Activate">
      <MemberSignature Language="C#" Value="public void Activate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Activate() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.Activate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ActivateEvent">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.DocEvents_ActivateEventHandler ActivateEvent;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.DocEvents_ActivateEventHandler ActivateEvent" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorksheetBase.ActivateEvent" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.DocEvents_ActivateEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在激活工作表时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示了一个<xref:Microsoft.Office.Tools.Excel.WorksheetBase.ActivateEvent>事件的处理程序, 该事件在激活工作表时显示该工作表的名称。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#200](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#200)]
 [!code-vb[Trin_ExcelWorkSheet#200](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#200)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Application">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Application Application { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Application Application" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.Application" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Application</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个表示 Microsoft Office Excel 应用程序的 <see cref="T:Microsoft.Office.Interop.Excel.Application" /> 对象。</summary>
        <value>一个表示 Excel 应用程序的 <see cref="T:Microsoft.Office.Interop.Excel.Application" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Application%2A>属性重新排列应用程序窗口。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#1](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#1)]
 [!code-vb[Trin_ExcelWorkSheet#1](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Arcs">
      <MemberSignature Language="C#" Value="public object Arcs (object index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Arcs(object index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.Arcs(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoFilter">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.AutoFilter AutoFilter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.AutoFilter AutoFilter" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.AutoFilter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.AutoFilter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>如果启用了筛选功能，则获取一个 <see cref="T:Microsoft.Office.Interop.Excel.AutoFilter" />，它提供工作表上的筛选列表的相关信息。 如果关闭了筛选功能，则获取 <see langword="null" />。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.AutoFilter" />，它提供工作表上的筛选列表的相关信息（如果启用了筛选功能）；否则为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要以编程方式启用筛选<xref:Microsoft.Office.Interop.Excel.Range.AutoFilter%2A> , 请使用<xref:Microsoft.Office.Interop.Excel.Range>对象的方法<xref:Microsoft.Office.Tools.Excel.NamedRange.AutoFilter%2A> <xref:Microsoft.Office.Tools.Excel.NamedRange>或对象的方法。  
  
   
  
## Examples  
 下面的代码示例在中<xref:Microsoft.Office.Interop.Excel.Range>创建水果的筛选列表, 然后<xref:Microsoft.Office.Tools.Excel.WorksheetBase.AutoFilter%2A>使用属性显示列表的筛选条件。 然后, 该示例通过使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.AutoFilterMode%2A>属性提示用户关闭筛选器, 最后<xref:Microsoft.Office.Tools.Excel.WorksheetBase.FilterMode%2A>使用属性显示工作表是否具有筛选后的列表。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#2](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#2)]
 [!code-vb[Trin_ExcelWorkSheet#2](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoFilterMode">
      <MemberSignature Language="C#" Value="public bool AutoFilterMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoFilterMode" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.AutoFilterMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示当前是否在工作表上启用了筛选功能（即，当前是否显示了筛选器下拉箭头）。</summary>
        <value>如果当前已在工作表上启用筛选功能，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以将此属性设置`false`为以禁用筛选 (也就是说, 删除筛选器下拉箭头), 但不能将其设置为。 `true` 若要启用筛选并创建筛选列表, 请使用<xref:Microsoft.Office.Interop.Excel.Range.AutoFilter%2A> <xref:Microsoft.Office.Interop.Excel.Range> <xref:Microsoft.Office.Tools.Excel.NamedRange.AutoFilter%2A>对象的方法, 或<xref:Microsoft.Office.Tools.Excel.NamedRange>使用对象的方法。  
  
 此属性仅指示是否启用了筛选;它不指示是否正在筛选任何数据。 若要确定工作表是否正在主动筛选数据, 请<xref:Microsoft.Office.Tools.Excel.WorksheetBase.FilterMode%2A>使用属性。  
  
   
  
## Examples  
 下面的代码示例在中<xref:Microsoft.Office.Interop.Excel.Range>创建水果的筛选列表, 然后<xref:Microsoft.Office.Tools.Excel.WorksheetBase.AutoFilter%2A>使用属性显示列表的筛选条件。 然后, 该示例通过使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.AutoFilterMode%2A>属性提示用户关闭筛选器, 最后<xref:Microsoft.Office.Tools.Excel.WorksheetBase.FilterMode%2A>使用属性显示工作表是否具有筛选后的列表。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#2](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#2)]
 [!code-vb[Trin_ExcelWorkSheet#2](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Runtime.InteropServices.COMException">此属性设置为 <see langword="true" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Base">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Tools.Excel.Worksheet Base { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Tools.Excel.Worksheet Base" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.Base" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Tools.Excel.Worksheet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取此 <see cref="T:Microsoft.Office.Tools.Excel.Worksheet" /> 对象扩展的 <see cref="T:Microsoft.Office.Tools.Excel.WorksheetBase" /> 对象。</summary>
        <value>此 <see cref="T:Microsoft.Office.Tools.Excel.WorksheetBase" /> 对象扩展的对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 类通过<xref:Microsoft.Office.Tools.Excel.Worksheet> 实现<xref:Microsoft.Office.Tools.Excel.IWorksheetExtension>接口来扩展对象。 <xref:Microsoft.Office.Tools.Excel.WorksheetBase>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeDoubleClick">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.DocEvents_BeforeDoubleClickEventHandler BeforeDoubleClick;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.DocEvents_BeforeDoubleClickEventHandler BeforeDoubleClick" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorksheetBase.BeforeDoubleClick" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.DocEvents_BeforeDoubleClickEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在双击工作表之后，默认的双击操作之前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当用户双击单元格的边框时, 此事件不会发生。  
  
   
  
## Examples  
 下面的代码示例演示了在当前工作<xref:Microsoft.Office.Tools.Excel.WorksheetBase.BeforeDoubleClick>表上取消双击操作的事件的处理程序。 事件处理程序通知用户不允许对工作表进行双击, 然后将`Cancel` <xref:Microsoft.Office.Interop.Excel.DocEvents_BeforeDoubleClickEventHandler>事件处理程序的参数设置为`true` , 以便 Microsoft Office Excel 取消双击操作。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#201](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#201)]
 [!code-vb[Trin_ExcelWorkSheet#201](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#201)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeRightClick">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.DocEvents_BeforeRightClickEventHandler BeforeRightClick;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.DocEvents_BeforeRightClickEventHandler BeforeRightClick" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorksheetBase.BeforeRightClick" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.DocEvents_BeforeRightClickEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在右击工作表之后，默认的右击操作之前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示了在当前工作<xref:Microsoft.Office.Tools.Excel.WorksheetBase.BeforeRightClick>表上取消右键单击操作的事件的处理程序。 事件处理程序通知用户: 对于工作表不允许右键单击, 然后将`Cancel` <xref:Microsoft.Office.Interop.Excel.DocEvents_BeforeRightClickEventHandler>事件处理程序的参数设置为`true` , 以便 Microsoft Office Excel 取消右键单击操作。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#202](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#202)]
 [!code-vb[Trin_ExcelWorkSheet#202](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#202)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInit">
      <MemberSignature Language="C#" Value="public virtual void BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.BeginInit" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Tools.EntryPoint.BeginInit</InterfaceMember>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.BeginInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingContext">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.BindingContext BindingContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.BindingContext BindingContext" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.BindingContext" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Forms.IBindableComponent.BindingContext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BindingContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingContextChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BindingContextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BindingContextChanged" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorksheetBase.BindingContextChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Buttons">
      <MemberSignature Language="C#" Value="public object Buttons (object index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Buttons(object index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.Buttons(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Calculate">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.DocEvents_CalculateEventHandler Calculate;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.DocEvents_CalculateEventHandler Calculate" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorksheetBase.Calculate" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.DocEvents_CalculateEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在重新计算工作表之后发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Calculate>事件的处理程序, 该事件在计算工作表时显示其名称。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#203](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#203)]
 [!code-vb[Trin_ExcelWorkSheet#203](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#203)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CalculateMethod">
      <MemberSignature Language="C#" Value="public void CalculateMethod ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CalculateMethod() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.CalculateMethod" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>计算工作表中的公式。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cells">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range Cells { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range Cells" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.Cells" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 对象，该对象表示工作表上的所有单元格（不仅仅是当前正在使用的单元格）。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 对象，表示工作表上的所有单元格（不仅仅是当前正在使用的单元格）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Cells%2A>属性设置工作表的每个单元格中字体的名称、大小和加粗程度。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#3](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#3)]
 [!code-vb[Trin_ExcelWorkSheet#3](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.DocEvents_ChangeEventHandler Change;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.DocEvents_ChangeEventHandler Change" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorksheetBase.Change" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.DocEvents_ChangeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在 <see cref="T:Microsoft.Office.Tools.Excel.WorksheetBase" /> 单元格中的某些内容发生更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当在重新计算期间更改单元格时, 不会发生此事件。  
  
   
  
## Examples  
 下面的代码示例演示了一个<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Change>事件的处理程序, 该事件显示工作表的名称和已更改的单元格范围。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#204](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#204)]
 [!code-vb[Trin_ExcelWorkSheet#204](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#204)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChartObjects">
      <MemberSignature Language="C#" Value="public object ChartObjects (object index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object ChartObjects(object index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.ChartObjects(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">图表的名称或编号。 此参数可以是一个数组，以指定多个图表。</param>
        <summary>获取一个对象，该对象表示工作表上的单个嵌入式图表（一个 <see cref="T:Microsoft.Office.Interop.Excel.ChartObject" />）或所有嵌入式图表的集合（一个 <see cref="T:Microsoft.Office.Interop.Excel.ChartObjects" />）。</summary>
        <returns>一个对象，表示工作表上的单个嵌入式图表（一个 <see cref="T:Microsoft.Office.Interop.Excel.ChartObject" />）或所有嵌入式图表的集合（一个 <see cref="T:Microsoft.Office.Interop.Excel.ChartObjects" />）。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法与<xref:Microsoft.Office.Tools.Excel.Workbook.Charts%2A>属性不等效。 此方法返回嵌入的图表;<xref:Microsoft.Office.Tools.Excel.Workbook.Charts%2A>属性返回图表工作表。  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.ChartObjects%2A>方法来获取嵌入图表和单个嵌入图表的集合。 该示例首先使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.ChartObjects%2A>方法<xref:Microsoft.Office.Interop.Excel.ChartObjects?displayProperty=fullName>获取当前工作表的集合, 然后创建新<xref:Microsoft.Office.Interop.Excel.ChartObject?displayProperty=fullName>的。 设置新<xref:Microsoft.Office.Interop.Excel.ChartObject?displayProperty=fullName>的格式并<xref:Microsoft.Office.Interop.Excel.ChartObject?displayProperty=fullName>赋予名称后, <xref:Microsoft.Office.Tools.Excel.WorksheetBase.ChartObjects%2A>该示例使用方法来获取新<xref:Microsoft.Office.Interop.Excel.ChartObject?displayProperty=fullName>的 (按名称编制索引), 并显示图表的打印预览。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#100](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#100)]
 [!code-vb[Trin_ExcelWorkSheet#100](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#100)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckBoxes">
      <MemberSignature Language="C#" Value="public object CheckBoxes (object index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object CheckBoxes(object index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.CheckBoxes(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckSpelling">
      <MemberSignature Language="C#" Value="public void CheckSpelling (object customDictionary, object ignoreUppercase, object alwaysSuggest, object spellLang);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CheckSpelling(object customDictionary, object ignoreUppercase, object alwaysSuggest, object spellLang) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.CheckSpelling(System.Object,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="customDictionary" Type="System.Object" />
        <Parameter Name="ignoreUppercase" Type="System.Object" />
        <Parameter Name="alwaysSuggest" Type="System.Object" />
        <Parameter Name="spellLang" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="customDictionary">To be added.</param>
        <param name="ignoreUppercase">To be added.</param>
        <param name="alwaysSuggest">To be added.</param>
        <param name="spellLang">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CircleInvalid">
      <MemberSignature Language="C#" Value="public void CircleInvalid ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CircleInvalid() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.CircleInvalid" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>圈释工作表上的无效条目。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CircularReference">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range CircularReference { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range CircularReference" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.CircularReference" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 对象，该对象表示包含表上第一个循环引用的范围，或者，如果表上不存在循环引用，则获取 <see langword="null" />。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 对象，表示包含表上第一个循环引用的范围，或者，如果表上不存在循环引用，则为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 必须先删除循环引用, 然后才能继续进行计算。  
  
   
  
## Examples  
 下面的代码示例通过设置单元格 A1 和 B1 的公式来创建循环引用, 以解析为彼此的值。 然后, 该示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.CircularReference%2A>属性报告工作表是否具有循环引用。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#4](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#4)]
 [!code-vb[Trin_ExcelWorkSheet#4](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearArrows">
      <MemberSignature Language="C#" Value="public void ClearArrows ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearArrows() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.ClearArrows" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从工作表清除跟踪箭头。 跟踪器箭头是通过使用审核功能添加的。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearCircles">
      <MemberSignature Language="C#" Value="public void ClearCircles ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearCircles() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.ClearCircles" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>清除工作表中无效条目上的标识圈。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Tools.Excel.WorksheetBase.CircleInvalid%2A>使用方法可对包含无效数据的单元格进行圈释。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CodeName">
      <MemberSignature Language="C#" Value="public string CodeName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CodeName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.CodeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Columns">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range Columns { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range Columns" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.Columns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个表示工作表上一个或多个列的 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 对象。</summary>
        <value>一个表示工作表上一个或多个列的 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当未使用参数时, 此属性将<xref:Microsoft.Office.Interop.Excel.Range>返回一个对象, 该对象包含工作表中的所有列。  
  
 此属性可与以下可选参数一起使用, 以获取工作表中的特定列。 如果将此属性与参数一起使用, 则返回值是必须强制转换为的<xref:Microsoft.Office.Interop.Excel.Range>对象。  
  
|参数|说明|  
|---------------|-----------------|  
|`RowIndex`|要获取的一个或多个列的索引。<br /><br /> 若要获取单列, 请将以下对象之一传递到此参数:<br /><br /> -一个整数, 它指定要获取的列的索引。 列索引从1开始。<br />-一个字符串, 包含要获取的列的字母。<br /><br /> 若要获取多个连续列, 请传递 "`first column letter`:`last column letter`" 格式的字符串。 例如, 若要获取 A 到 E 列, 请传递 "A:E"。 **注意：** 此参数的名称是误导的;此参数指定要获取的列的索引, 而不是行的索引。|  
|`ColumnIndex`|不使用此参数。 <xref:System.Runtime.InteropServices.COMException>如果尝试向此参数传递值, 则此属性将引发。|  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Columns%2A>属性设置工作表的第一列中所有单元格的字体的颜色、名称、大小和加粗程度。  
  
 此示例适用于文档级自定义项。 若要运行此代码, 请将其复制到项目中的一个工作表类。  
  
 [!code-csharp[Trin_ExcelWorkSheet#5](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#5)]
 [!code-vb[Trin_ExcelWorkSheet#5](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Comments">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Comments Comments { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Comments Comments" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.Comments" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Comments</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个表示工作表的所有注释的 <see cref="T:Microsoft.Office.Interop.Excel.Comments" /> 集合。</summary>
        <value>一个表示工作表的所有注释的 <see cref="T:Microsoft.Office.Interop.Excel.Comments" /> 集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Comments%2A>属性来显示在将注释添加到单元格 A1 之前和之后当前工作表上的注释数。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#6](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#6)]
 [!code-vb[Trin_ExcelWorkSheet#6](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConsolidationFunction">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlConsolidationFunction ConsolidationFunction { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlConsolidationFunction ConsolidationFunction" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.ConsolidationFunction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlConsolidationFunction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取用于当前合并的函数代码。</summary>
        <value><see cref="T:Microsoft.Office.Interop.Excel.XlConsolidationFunction" /> 值之一。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.ConsolidationFunction%2A>属性来确定工作表用于合并的函数。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#7](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#7)]
 [!code-vb[Trin_ExcelWorkSheet#7](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConsolidationOptions">
      <MemberSignature Language="C#" Value="public object ConsolidationOptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ConsolidationOptions" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.ConsolidationOptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取合并选项的三元素 <see cref="T:System.Array" />。</summary>
        <value>合并选项的三元素 <see cref="T:System.Array" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果返回的数组中的元素为`true`, 则设置相应的选项。 数组中有三个元素:  
  
|元素|含义|  
|-------------|-------------|  
|1|在顶行使用标签|  
|2|使用左栏中的标签|  
|3|创建指向源数据的链接|  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.ConsolidationOptions%2A>属性来显示当前工作表的合并选项的值。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#8](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#8)]
 [!code-vb[Trin_ExcelWorkSheet#8](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConsolidationSources">
      <MemberSignature Language="C#" Value="public object ConsolidationSources { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ConsolidationSources" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.ConsolidationSources" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取字符串的 <see cref="T:System.Array" />，这些字符串指定工作表的当前合并的源表和范围。</summary>
        <value>指定工作表的当前合并的源表和范围的字符串值的 <see cref="T:System.Array" />；如果表上不存在合并，则为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例在当前工作表上创建合并, 然后使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.ConsolidationSources%2A>属性显示合并的源。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#9](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#9)]
 [!code-vb[Trin_ExcelWorkSheet#9](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Controls">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Tools.Excel.ControlCollection Controls { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Tools.Excel.ControlCollection Controls" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.Controls" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Tools.Excel.ControlCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取工作表中包含的托管控件的集合。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Tools.Excel.ControlCollection" />，其中包含工作表上的所有托管控件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Office 解决方案中的工作表可以包含 Windows 窗体控件和宿主控件。 有关详细信息, 请参阅[Office 文档中的控件](/visualstudio/vsto/controls-on-office-documents)。  
  
 若要在运行时管理工作表上的控件, 请使用<xref:Microsoft.Office.Tools.Excel.ControlCollection> <xref:Microsoft.Office.Tools.Excel.WorksheetBase.Controls%2A>属性返回的对象的方法和属性。 有关详细信息, 请参阅[在运行时将控件添加到 Office 文档](/visualstudio/vsto/adding-controls-to-office-documents-at-run-time)  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Controls%2A>属性<xref:System.Windows.Forms.Button>将添加到当前工作表。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#10](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#10)]
 [!code-vb[Trin_ExcelWorkSheet#10](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public void Copy (object before, object after);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Copy(object before, object after) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.Copy(System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="before" Type="System.Object" />
        <Parameter Name="after" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="before">将在其之前放置复制表的表。 如果指定 <c>After</c>，则不能指定 <c>Before</c>。</param>
        <param name="after">将在其之后放置复制表的表。 如果指定 <c>Before</c>，则不能指定 <c>After</c>。</param>
        <summary>将工作表复制到工作簿中的另一个位置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 新工作表是一个<xref:Microsoft.Office.Interop.Excel.Worksheet?displayProperty=fullName>对象, 并且没有工作表主机项具有的代码或数据绑定功能。  
  
 如果未指定`Before`或`After`, 则 Microsoft Office Excel 将创建包含复制的工作表的新工作簿。  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Copy%2A>方法在之前`Sheet1`和之后`Sheet3`创建当前工作表的副本。 该示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.InnerObject%2A>属性来`Sheet1`访问和`Sheet3`的基础<xref:Microsoft.Office.Interop.Excel.Worksheet?displayProperty=fullName> 。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#102](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#102)]
 [!code-vb[Trin_ExcelWorkSheet#102](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#102)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Creator">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlCreator Creator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlCreator Creator" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.Creator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlCreator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示在其中创建工作表的应用程序。</summary>
        <value>如果工作表是在 Excel 中创建的，则此属性返回字符串“XCEL”，该字符串与十六进制数 5843454C 等效。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性设计为适用于 Macintosh Microsoft Office Excel 中, 其中每个应用程序都有一个四字符创建者代码。 例如, Excel 的创建者代码为 x。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Creator%2A>属性来显示当前工作表是否是在 Microsoft Office Excel 中创建的。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#11](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#11)]
 [!code-vb[Trin_ExcelWorkSheet#11](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomProperties">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.CustomProperties CustomProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.CustomProperties CustomProperties" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.CustomProperties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.CustomProperties</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.CustomProperties" /> 对象，该对象表示与工作表关联的标识符信息。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.CustomProperties" /> 对象，表示与工作表关联的标识符信息。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.CustomProperties%2A>属性, 将名为 "Microsoft" 的自定义属性 (值为 "MSFT") 添加到当前工作表。 然后, 该示例遍历自定义属性的集合, 直到找到 "Microsoft" 属性, 并将此属性的值设置为单元格 A1。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#12](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#12)]
 [!code-vb[Trin_ExcelWorkSheet#12](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataBindings">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ControlBindingsCollection DataBindings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ControlBindingsCollection DataBindings" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.DataBindings" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Forms.IBindableComponent.DataBindings</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlBindingsCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataHost">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Tools.ICachedDataProvider DataHost { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Tools.ICachedDataProvider DataHost" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.DataHost" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Tools.ICachedDataProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Deactivate">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.DocEvents_DeactivateEventHandler Deactivate;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.DocEvents_DeactivateEventHandler Deactivate" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorksheetBase.Deactivate" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.DocEvents_DeactivateEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当工作表失去焦点时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Deactivate>事件的处理程序, 该事件在停用时显示工作表的名称。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#205](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#205)]
 [!code-vb[Trin_ExcelWorkSheet#205](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#205)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public void Delete ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Delete() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.Delete" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>删除基础 <see cref="T:Microsoft.Office.Interop.Excel.Worksheet" /> 对象，但不删除主机项。 强烈建议不要使用此方法。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayAutomaticPageBreaks">
      <MemberSignature Language="C#" Value="public bool DisplayAutomaticPageBreaks { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DisplayAutomaticPageBreaks" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.DisplayAutomaticPageBreaks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayPageBreaks">
      <MemberSignature Language="C#" Value="public bool DisplayPageBreaks { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DisplayPageBreaks" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.DisplayPageBreaks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示分页符（自动和手动）是否显示在工作表上。</summary>
        <value>如果分页符（自动和手动）显示在表上，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果未安装打印机, 则不能设置此属性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayRightToLeft">
      <MemberSignature Language="C#" Value="public bool DisplayRightToLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DisplayRightToLeft" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.DisplayRightToLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否是从右向左，而不是从左向右显示工作表。</summary>
        <value>如果工作表是从右向左，而不是从左向右显示，则为 <see langword="true" />；如果该对象是从左向右显示，则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.Dispose" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>释放 <see cref="T:Microsoft.Office.Tools.Excel.WorksheetBase" /> 类的当前实例所使用的所有资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不要自己调用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Dispose%2A>方法。 关闭文档级自定义项中的文档时, 将清理[!INCLUDE[vsto_runtime](~/includes/vsto-runtime-md.md)]自定义项所使用的所有资源。  
  
 有关<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Dispose%2A>方法的详细信息, 请参阅[清理非托管资源](http://msdn.microsoft.com/library/a17b0066-71c2-4ba4-9822-8e19332fc213)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Disposed">
      <MemberSignature Language="C#" Value="public event EventHandler Disposed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Disposed" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorksheetBase.Disposed" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.ComponentModel.IComponent.Disposed</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawingObjects">
      <MemberSignature Language="C#" Value="public object DrawingObjects (object index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object DrawingObjects(object index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.DrawingObjects(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Drawings">
      <MemberSignature Language="C#" Value="public object Drawings (object index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Drawings(object index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.Drawings(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DropDowns">
      <MemberSignature Language="C#" Value="public object DropDowns (object index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object DropDowns(object index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.DropDowns(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableAutoFilter">
      <MemberSignature Language="C#" Value="public bool EnableAutoFilter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableAutoFilter" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.EnableAutoFilter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示当打开仅限用户界面保护时是否启用“自动筛选”箭头。</summary>
        <value>如果在打开仅限用户界面保护时启用“自动筛选”箭头，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性应用于每个工作表, 不会与工作表或会话一起保存。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableCalculation">
      <MemberSignature Language="C#" Value="public bool EnableCalculation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableCalculation" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.EnableCalculation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示 Microsoft Office Excel 是否在必要时自动重新计算工作表。</summary>
        <value>如果 Excel 在必要时自动重新计算工作表，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果此属性的值为`false`, 则不能请求重新计算。 将的值从`false`更改为`true`时, Excel 将重新计算工作表。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableFormatConditionsCalculation">
      <MemberSignature Language="C#" Value="public bool EnableFormatConditionsCalculation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableFormatConditionsCalculation" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.EnableFormatConditionsCalculation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值确定条件格式是否将自动发生。</summary>
        <value>如果条件格式的计算将自动发生，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当属性设置为`false`时, 不会重新计算现有的条件格式。 <xref:Microsoft.Office.Tools.Excel.WorksheetBase.EnableFormatConditionsCalculation%2A> 所有以前应用的条件格式仍将可见, 但将不会更新为单元值或 AppliesTo 范围更改。  
  
 将此属性设置`true`为, 以在评估规则之前完全配置规则。 如果应用条件的范围很大, 则这可能会提高性能。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableOutlining">
      <MemberSignature Language="C#" Value="public bool EnableOutlining { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableOutlining" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.EnableOutlining" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示当打开仅限用户界面保护时是否启用大纲显示符号。 [!INCLUDE[vsto_smart_tags](~/includes/vsto-smart-tags-md.md)]。 [!INCLUDE[vsto_smart_tags](~/includes/vsto-smart-tags-md.md)]。</summary>
        <value>如果在打开仅限用户界面保护时启用大纲显示符号，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性应用于每个工作表, 不会与工作表或会话一起保存。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnablePivotTable">
      <MemberSignature Language="C#" Value="public bool EnablePivotTable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnablePivotTable" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.EnablePivotTable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示当打开仅限用户界面保护时是否启用数据透视表控件及操作。</summary>
        <value>如果在打开仅限用户界面保护时启用数据透视表控件及操作，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性应用于每个工作表, 不会与工作表或会话一起保存。  
  
 在 Microsoft Office Excel 的数据透视表的数据透视表中, 数据透视表的数量必须足够多, 并显示数据透视表。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableSelection">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlEnableSelection EnableSelection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlEnableSelection EnableSelection" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.EnableSelection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlEnableSelection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示在工作表上可以选择哪些单元格。</summary>
        <value><see cref="T:Microsoft.Office.Interop.Excel.XlEnableSelection" /> 值之一。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性仅在工作表受保护时才会<xref:Microsoft.Office.Interop.Excel.XlEnableSelection.xlNoSelection>生效: 禁止在工作表中<xref:Microsoft.Office.Interop.Excel.XlEnableSelection.xlUnlockedCells>选择任何内容, 只允许选择未锁定的单元格, <xref:Microsoft.Office.Interop.Excel.XlEnableSelection.xlNoRestrictions>并允许选择任何单元格。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Protect%2A>方法来保护工作表, 然后<xref:Microsoft.Office.Tools.Excel.WorksheetBase.EnableSelection%2A>使用属性阻止选中工作表上的任何单元格。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#13](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#13)]
 [!code-vb[Trin_ExcelWorkSheet#13](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndInit">
      <MemberSignature Language="C#" Value="public virtual void EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.EndInit" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Tools.EntryPoint.EndInit</InterfaceMember>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.EndInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Evaluate">
      <MemberSignature Language="C#" Value="public object Evaluate (object name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Evaluate(object name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.Evaluate(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">对象的名称（使用 Excel 的命名约定）。</param>
        <summary>将 Microsoft Office Excel 名称转换为对象或值。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在 Excel 中, 可以将以下类型的名称用于此方法:  
  
-   定义的名称。 可以指定任意名称。  
  
-   外部引用。 您可以使用! 运算符引用在另一个工作簿中定义的工作表。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Evaluate%2A>方法来计算单元格 A1 的值作为 Excel `SIN`函数的输入。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#103](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#103)]
 [!code-vb[Trin_ExcelWorkSheet#103](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#103)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExportAsFixedFormat">
      <MemberSignature Language="C#" Value="public void ExportAsFixedFormat (Microsoft.Office.Interop.Excel.XlFixedFormatType type, object filename, object quality, object includeDocProperties, object ignorePrintAreas, object from, object to, object openAfterPublish, object fixedFormatExtClassPtr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExportAsFixedFormat(valuetype Microsoft.Office.Interop.Excel.XlFixedFormatType type, object filename, object quality, object includeDocProperties, object ignorePrintAreas, object from, object to, object openAfterPublish, object fixedFormatExtClassPtr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.ExportAsFixedFormat(Microsoft.Office.Interop.Excel.XlFixedFormatType,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Microsoft.Office.Interop.Excel.XlFixedFormatType" />
        <Parameter Name="filename" Type="System.Object" />
        <Parameter Name="quality" Type="System.Object" />
        <Parameter Name="includeDocProperties" Type="System.Object" />
        <Parameter Name="ignorePrintAreas" Type="System.Object" />
        <Parameter Name="from" Type="System.Object" />
        <Parameter Name="to" Type="System.Object" />
        <Parameter Name="openAfterPublish" Type="System.Object" />
        <Parameter Name="fixedFormatExtClassPtr" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="type">其中一个 <see langword="Microsoft.Office.Interop.Excel.XlFixedFormatType" /> 值，该值指定是否要将工作簿保存为 PDF 或 XPS 格式。</param>
        <param name="filename">新 PDF 或 XPS 文件的完整路径。 如果省略此参数，Excel 会将文件保存在当前文件夹中。</param>
        <param name="quality">其中一个 <see langword="Microsoft.Office.Interop.Excel.XlFixedFormatQuality" /> 值，该值指定导出文件的质量。</param>
        <param name="includeDocProperties">如果要在导出的文件中包含文档属性，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <param name="ignorePrintAreas">若要在导出时忽略任何打印区域设置，请使用 <see langword="true" />；否则使用 <see langword="false" />。</param>
        <param name="from">要从其处开始导出的页码。 若忽略此参数，则从第一页开始导出。</param>
        <param name="to">要导出的最后一页的页码。 若忽略此参数，则导出至最后一页。</param>
        <param name="openAfterPublish">如果立即在查看器中显示文件，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <param name="fixedFormatExtClassPtr">一个指向 <see langword="IMsoDocExporter" /> 接口的实现的指针，可使工作簿保存为另一种固定格式。 有关详细信息，请参阅“扩展 Office (2007) 固定格式导出功能”。</param>
        <summary>导出到指定格式的文件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法还支持初始化外接程序以将文件导出到固定格式的文件。 例如, 如果存在转换器, Excel 将执行文件格式转换。 转换通常由用户启动。  
  
   
  
## Examples  
 下面的代码示例将工作表`Sheet1`的内容保存为 PDF 格式, 最多显示前四页 (忽略打印区域)。 PDF 文件使用标准质量分辨率保存到指定的文件路径和文件名。 文件包含工作簿属性。 若要运行此代码示例, 工作簿必须包含一个名为 Sheet1 的工作表以及一些数据。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkbook_Additional#9](~/snippets/csharp/VS_Snippets_OfficeSP/trin_excelworkbook_additional/cs/ThisWorkbook.cs#9)]
 [!code-vb[Trin_ExcelWorkbook_Additional#9](~/snippets/visualbasic/VS_Snippets_OfficeSP/trin_excelworkbook_additional/vb/ThisWorkbook.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterMode">
      <MemberSignature Language="C#" Value="public bool FilterMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool FilterMode" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.FilterMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示工作表是否正在主动筛选数据。</summary>
        <value>如果工作表正在主动筛选数据，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要确定筛选当前是否已启用 (即, 筛选器下拉箭头是否显示在工作表上), 请使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.AutoFilterMode%2A>属性。  
  
 若要启用筛选并创建筛选列表, 请使用<xref:Microsoft.Office.Interop.Excel.Range.AutoFilter%2A> <xref:Microsoft.Office.Interop.Excel.Range> <xref:Microsoft.Office.Tools.Excel.NamedRange.AutoFilter%2A>对象的方法, 或<xref:Microsoft.Office.Tools.Excel.NamedRange>使用对象的方法。  
  
 如果工作表`true`包含隐藏行的筛选列表, 则此属性为。  
  
   
  
## Examples  
 下面的代码示例在中<xref:Microsoft.Office.Interop.Excel.Range>创建水果的筛选列表, 然后<xref:Microsoft.Office.Tools.Excel.WorksheetBase.AutoFilter%2A>使用属性显示列表的筛选条件。 然后, 该示例通过使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.AutoFilterMode%2A>属性提示用户关闭筛选器, 最后<xref:Microsoft.Office.Tools.Excel.WorksheetBase.FilterMode%2A>使用属性显示工作表是否具有筛选后的列表。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#2](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#2)]
 [!code-vb[Trin_ExcelWorkSheet#2](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FinishInitialization">
      <MemberSignature Language="C#" Value="protected virtual void FinishInitialization ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void FinishInitialization() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.FinishInitialization" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Tools.EntryPoint.FinishInitialization</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FollowHyperlink">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.DocEvents_FollowHyperlinkEventHandler FollowHyperlink;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.DocEvents_FollowHyperlinkEventHandler FollowHyperlink" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorksheetBase.FollowHyperlink" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.DocEvents_FollowHyperlinkEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在单击工作表上的任意超链接时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示了一个<xref:Microsoft.Office.Tools.Excel.WorksheetBase.FollowHyperlink>事件的处理程序, 该事件在<xref:System.Windows.Forms.ListBox>控件中保留当前工作簿中已单击的所有超链接的列表以及包含这些超链接的工作表的名称。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#206](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#206)]
 [!code-vb[Trin_ExcelWorkSheet#206](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#206)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="get_Range">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range get_Range (object cell1, object cell2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Office.Interop.Excel.Range get_Range(object cell1, object cell2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.get_Range(System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cell1" Type="System.Object" />
        <Parameter Name="cell2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="cell1">To be added.</param>
        <param name="cell2">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAutomationObject">
      <MemberSignature Language="C#" Value="protected virtual object GetAutomationObject ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object GetAutomationObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.GetAutomationObject" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Tools.Excel.IWorksheetExtension.GetAutomationObject</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>由 [!INCLUDE[vsto_runtime](~/includes/vsto-runtime-md.md)] 调用，用于获取可由工作表中的 VBA 代码使用的对象。</summary>
        <returns>文档级自定义项中的一个对象，可由工作表中的 VBA 代码使用。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 重写此方法以返回您向工作表中的 VBA 代码公开的类的实例。 有关详细信息，请参阅 [Combining VBA and Document-Level Customizations](/visualstudio/vsto/combining-vba-and-document-level-customizations)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GroupBoxes">
      <MemberSignature Language="C#" Value="public object GroupBoxes (object index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GroupBoxes(object index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.GroupBoxes(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GroupObjects">
      <MemberSignature Language="C#" Value="public object GroupObjects (object index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GroupObjects(object index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.GroupObjects(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HostContext">
      <MemberSignature Language="C#" Value="public IServiceProvider HostContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IServiceProvider HostContext" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.HostContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IServiceProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HPageBreaks">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.HPageBreaks HPageBreaks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.HPageBreaks HPageBreaks" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.HPageBreaks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.HPageBreaks</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.HPageBreaks" /> 集合，该集合表示表上的水平分页符。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.HPageBreaks" /> 集合，表示表上的水平分页符。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每个工作表的水平分页符限制为1026。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.HPageBreaks%2A>属性在单元格 C5 处添加水平分页符。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#14](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#14)]
 [!code-vb[Trin_ExcelWorkSheet#14](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Hyperlinks">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Hyperlinks Hyperlinks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Hyperlinks Hyperlinks" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.Hyperlinks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Hyperlinks</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Hyperlinks" /> 集合，该集合表示范围或工作表的超链接。</summary>
        <value><see cref="T:Microsoft.Office.Interop.Excel.Hyperlinks" /> 集合，表示范围或工作表的超链接。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Hyperlinks%2A>属性将超链接添加<xref:Microsoft.Office.Interop.Excel.Hyperlinks?displayProperty=fullName>到工作表的集合。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#15](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#15)]
 [!code-vb[Trin_ExcelWorkSheet#15](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Index">
      <MemberSignature Language="C#" Value="public int Index { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Index" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.Index" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取工作表集合中工作表的索引号。</summary>
        <value>工作表集合中工作表的索引号。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Index%2A>属性, 在将工作表移动到工作簿<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Move%2A>中的最后一个位置之前和之后, 使用方法显示当前工作表的索引号。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#16](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#16)]
 [!code-vb[Trin_ExcelWorkSheet#16](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#16)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="protected virtual void Initialize ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Initialize() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.Initialize" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Tools.EntryPoint.Initialize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeDataBindings">
      <MemberSignature Language="C#" Value="protected virtual void InitializeDataBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InitializeDataBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.InitializeDataBindings" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Tools.EntryPoint.InitializeDataBindings</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InnerObject">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Worksheet InnerObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Worksheet InnerObject" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.InnerObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Worksheet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Worksheet" />，表示 <see cref="T:Microsoft.Office.Tools.Excel.WorksheetBase" /> 的基础本机对象。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.Worksheet" />，表示 <see cref="T:Microsoft.Office.Tools.Excel.WorksheetBase" /> 的基础本机对象。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemProvider">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Tools.IHostItemProvider ItemProvider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Tools.IHostItemProvider ItemProvider" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.ItemProvider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Tools.IHostItemProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Labels">
      <MemberSignature Language="C#" Value="public object Labels (object index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Labels(object index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.Labels(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lines">
      <MemberSignature Language="C#" Value="public object Lines (object index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Lines(object index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.Lines(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ListBoxes">
      <MemberSignature Language="C#" Value="public object ListBoxes (object index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object ListBoxes(object index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.ListBoxes(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ListObjects">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.ListObjects ListObjects { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.ListObjects ListObjects" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.ListObjects" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.ListObjects</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取工作表中 <see cref="T:Microsoft.Office.Interop.Excel.ListObject" /> 对象的集合。</summary>
        <value>工作表的 <see cref="T:Microsoft.Office.Interop.Excel.ListObjects" /> 集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.ListObjects%2A>属性<xref:Microsoft.Office.Interop.Excel.ListObject?displayProperty=fullName>将添加到当前工作表。  
  
 此示例适用于文档级自定义项。  
  
 Trin_ExcelWorkSheet#17  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MailEnvelope">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Core.MsoEnvelope MailEnvelope { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Core.MsoEnvelope MailEnvelope" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.MailEnvelope" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Core.MsoEnvelope</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取工作表的电子邮件头。</summary>
        <value>工作表的电子邮件头。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.MailEnvelope%2A>属性<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Name%2A>将工作表的指定给工作表的电子邮件头的引入。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#18](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#18)]
 [!code-vb[Trin_ExcelWorkSheet#18](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#18)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Office.Tools.EntryPoint.BeginInit">
      <MemberSignature Language="C#" Value="void EntryPoint.BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.Office.Tools.EntryPoint.BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.Microsoft#Office#Tools#EntryPoint#BeginInit" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Tools.EntryPoint.BeginInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Office.Tools.EntryPoint.EndInit">
      <MemberSignature Language="C#" Value="void EntryPoint.EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.Office.Tools.EntryPoint.EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.Microsoft#Office#Tools#EntryPoint#EndInit" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Tools.EntryPoint.EndInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Office.Tools.EntryPoint.FinishInitialization">
      <MemberSignature Language="C#" Value="void EntryPoint.FinishInitialization ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.Office.Tools.EntryPoint.FinishInitialization() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.Microsoft#Office#Tools#EntryPoint#FinishInitialization" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Tools.EntryPoint.FinishInitialization</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Office.Tools.EntryPoint.Initialize">
      <MemberSignature Language="C#" Value="void EntryPoint.Initialize ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.Office.Tools.EntryPoint.Initialize() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.Microsoft#Office#Tools#EntryPoint#Initialize" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Tools.EntryPoint.Initialize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Office.Tools.EntryPoint.InitializeDataBindings">
      <MemberSignature Language="C#" Value="void EntryPoint.InitializeDataBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.Office.Tools.EntryPoint.InitializeDataBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.Microsoft#Office#Tools#EntryPoint#InitializeDataBindings" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Tools.EntryPoint.InitializeDataBindings</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Office.Tools.EntryPoint.OnShutdown">
      <MemberSignature Language="C#" Value="void EntryPoint.OnShutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.Office.Tools.EntryPoint.OnShutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.Microsoft#Office#Tools#EntryPoint#OnShutdown" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Tools.EntryPoint.OnShutdown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Office.Tools.EntryPoint.OnStartup">
      <MemberSignature Language="C#" Value="void EntryPoint.OnStartup ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void Microsoft.Office.Tools.EntryPoint.OnStartup() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.Microsoft#Office#Tools#EntryPoint#OnStartup" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Tools.EntryPoint.OnStartup</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Office.Tools.Excel.IWorksheetExtension.GetAutomationObject">
      <MemberSignature Language="C#" Value="object IWorksheetExtension.GetAutomationObject ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object Microsoft.Office.Tools.Excel.IWorksheetExtension.GetAutomationObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.Microsoft#Office#Tools#Excel#IWorksheetExtension#GetAutomationObject" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Tools.Excel.IWorksheetExtension.GetAutomationObject</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.Office.Tools.IExtension.ExtensionBase">
      <MemberSignature Language="C#" Value="object Microsoft.Office.Tools.IExtension.ExtensionBase { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Microsoft.Office.Tools.IExtension.ExtensionBase" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.Microsoft#Office#Tools#IExtension#ExtensionBase" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.Office.Tools.IExtension.ExtensionBase</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Move">
      <MemberSignature Language="C#" Value="public void Move (object before, object after);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Move(object before, object after) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.Move(System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="before" Type="System.Object" />
        <Parameter Name="after" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="before">移动工作表的放置位置之后的工作表。 如果指定 <c>After</c>，则不能指定 <c>Before</c>。</param>
        <param name="after">移动工作表的放置位置之前的工作表。 如果指定 <c>Before</c>，则不能指定 <c>After</c>。</param>
        <summary>将工作表移动到工作簿中的另一个位置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果未指定`Before`或`After`, 则 Microsoft Office Excel 将创建包含已移动的工作表的新工作簿。  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Index%2A>属性, 在将工作表移动到工作簿<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Move%2A>中的最后一个位置之前和之后, 使用方法显示当前工作表的索引号。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#16](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#16)]
 [!code-vb[Trin_ExcelWorkSheet#16](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#16)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置工作表的名称。</summary>
        <value>工作表的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.MailEnvelope%2A>属性<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Name%2A>将工作表的指定给工作表的电子邮件头的引入。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#18](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#18)]
 [!code-vb[Trin_ExcelWorkSheet#18](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#18)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Names">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Names Names { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Names Names" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.Names" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Names</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Names" /> 集合，该集合表示所有工作表特定的名称（以“WorksheetName!” 前缀定义名称）。</summary>
        <value>一个<see cref="T:Microsoft.Office.Interop.Excel.Names" />集合, 该集合表示所有工作表特定的名称 (使用 "WorksheetName!" 定义的名称) 前缀定义名称）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Names%2A>属性将名称添加到工作表中。 然后, 该示例将显示 "**定义名称**" 对话框以验证是否已添加该名称。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#19](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#19)]
 [!code-vb[Trin_ExcelWorkSheet#19](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#19)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Next">
      <MemberSignature Language="C#" Value="public object Next { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Next" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.Next" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取表示下一个表的 <see cref="T:Microsoft.Office.Interop.Excel.Worksheet" />。</summary>
        <value>表示下一个表的 <see cref="T:Microsoft.Office.Interop.Excel.Worksheet" />；如果当前工作表是工作簿中的最后一个表，则为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Next%2A>属性来确定当前<xref:Microsoft.Office.Tools.Excel.WorksheetBase>是否为工作簿中的最后一个工作表。 如果当前<xref:Microsoft.Office.Tools.Excel.WorksheetBase>不是最后一页, 则显示下一个工作表的名称。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#20](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#20)]
 [!code-vb[Trin_ExcelWorkSheet#20](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#20)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OLEObjects">
      <MemberSignature Language="C#" Value="public object OLEObjects (object index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object OLEObjects(object index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.OLEObjects(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">OLE 对象的名称或编号。</param>
        <summary>获取一个对象，该对象表示工作表上的单个 OLE 对象（一个 <see cref="T:Microsoft.Office.Interop.Excel.OLEObject" />）或所有 OLE 对象的集合（一个 <see cref="T:Microsoft.Office.Interop.Excel.OLEObjects" /> 集合）。</summary>
        <returns>一个对象，表示工作表上的单个 OLE 对象（一个 <see cref="T:Microsoft.Office.Interop.Excel.OLEObject" />）或所有 OLE 对象的集合（一个 <see cref="T:Microsoft.Office.Interop.Excel.OLEObjects" /> 集合）。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.OLEObjects%2A>方法来显示当前工作表中 OLE 对象的数量。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#104](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#104)]
 [!code-vb[Trin_ExcelWorkSheet#104](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#104)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCalculate">
      <MemberSignature Language="C#" Value="public string OnCalculate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OnCalculate" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.OnCalculate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnData">
      <MemberSignature Language="C#" Value="public string OnData { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OnData" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.OnData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDoubleClick">
      <MemberSignature Language="C#" Value="public string OnDoubleClick { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OnDoubleClick" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.OnDoubleClick" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnEntry">
      <MemberSignature Language="C#" Value="public string OnEntry { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OnEntry" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.OnEntry" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSheetActivate">
      <MemberSignature Language="C#" Value="public string OnSheetActivate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OnSheetActivate" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.OnSheetActivate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSheetDeactivate">
      <MemberSignature Language="C#" Value="public string OnSheetDeactivate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OnSheetDeactivate" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.OnSheetDeactivate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnShutdown">
      <MemberSignature Language="C#" Value="protected virtual void OnShutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnShutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.OnShutdown" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Tools.EntryPoint.OnShutdown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnStartup">
      <MemberSignature Language="C#" Value="protected virtual void OnStartup ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStartup() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.OnStartup" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Office.Tools.EntryPoint.OnStartup</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OptionButtons">
      <MemberSignature Language="C#" Value="public object OptionButtons (object index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object OptionButtons(object index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.OptionButtons(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Outline">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Outline Outline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Outline Outline" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.Outline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Outline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个表示工作表大纲的 <see cref="T:Microsoft.Office.Interop.Excel.Outline" />。</summary>
        <value>一个表示工作表大纲的 <see cref="T:Microsoft.Office.Interop.Excel.Outline" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Outline%2A>属性使当前工作表的轮廓使用自动样式。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#21](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#21)]
 [!code-vb[Trin_ExcelWorkSheet#21](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ovals">
      <MemberSignature Language="C#" Value="public object Ovals (object index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Ovals(object index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.Ovals(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PageSetup">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.PageSetup PageSetup { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.PageSetup PageSetup" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.PageSetup" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.PageSetup</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.PageSetup" />，其中包含工作表的页面设置的所有设置。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.PageSetup" />，其中包含工作表的页面设置的所有设置。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.PageSetup%2A>属性设置工作表的底端边距和页眉边距、第一个页码以及居中页眉和页脚。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#22](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#22)]
 [!code-vb[Trin_ExcelWorkSheet#22](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public object Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Parent" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取工作表的父对象。</summary>
        <value>工作表的父对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Parent%2A>属性来确定当前<xref:Microsoft.Office.Tools.Excel.WorksheetBase>是否有父级。 如果当前<xref:Microsoft.Office.Tools.Excel.WorksheetBase>有父级, 则显示父工作簿的名称。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#23](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#23)]
 [!code-vb[Trin_ExcelWorkSheet#23](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Paste">
      <MemberSignature Language="C#" Value="public void Paste (object destination, object link);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Paste(object destination, object link) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.Paste(System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Object" />
        <Parameter Name="link" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="destination">一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 对象，指定应粘贴剪贴板内容的位置。 如果省略此参数，则使用当前选择。 仅当可将剪贴板的内容粘贴到范围中时，才能指定此参数。 如果指定了此参数，则无法使用 <c>Link</c> 参数。</param>
        <param name="link">为 <see langword="true" /> 可建立指向粘贴数据的源的链接。 如果指定了此参数，则无法使用 <c>Destination</c> 参数。 默认值为 <see langword="false" />。</param>
        <summary>将剪贴板的内容粘贴到工作表上。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果未指定`Destination`参数, 则必须先选择目标范围, 然后才能使用此方法。  
  
 此方法可能会根据剪贴板的内容修改工作表选择。  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例将文本 "Paste example" 放到剪贴板上, 然后使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Paste%2A>方法将剪贴板的内容粘贴到 A1 单元格。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#105](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#105)]
 [!code-vb[Trin_ExcelWorkSheet#105](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#105)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PasteSpecial">
      <MemberSignature Language="C#" Value="public void PasteSpecial (object format, object link, object displayAsIcon, object iconFileName, object iconIndex, object iconLabel, object noHTMLFormatting);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PasteSpecial(object format, object link, object displayAsIcon, object iconFileName, object iconIndex, object iconLabel, object noHTMLFormatting) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.PasteSpecial(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Object" />
        <Parameter Name="link" Type="System.Object" />
        <Parameter Name="displayAsIcon" Type="System.Object" />
        <Parameter Name="iconFileName" Type="System.Object" />
        <Parameter Name="iconIndex" Type="System.Object" />
        <Parameter Name="iconLabel" Type="System.Object" />
        <Parameter Name="noHTMLFormatting" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">一个字符串，指定数据的剪贴板格式。 常见格式字符串包括“HTML”、“位图”、“超链接”、“Unicode 文本”和“文本”。</param>
        <param name="link">为 <see langword="true" /> 可建立指向粘贴数据的源的链接。 如果源数据不适合链接或源应用程序不支持链接，则忽略此参数。 默认值为 <see langword="false" />。</param>
        <param name="displayAsIcon">为 <see langword="true" /> 可以图标形式显示粘贴的对象。 默认值为 <see langword="false" />。</param>
        <param name="iconFileName">如果 <c>DisplayAsIcon</c> 为 <see langword="true" />，则为包含要使用的图标的文件的名称。</param>
        <param name="iconIndex">图标文件中该图标的索引号。</param>
        <param name="iconLabel">图标的文本标签。</param>
        <param name="noHTMLFormatting">为 <see langword="true" /> 可从 HTML 移除所有格式设置、超链接和图像；为 <see langword="false" /> 可按原样粘贴 HTML。 默认值为 <see langword="false" />。</param>
        <summary>使用指定的格式将剪贴板的内容粘贴到工作表上。 使用此方法可粘贴来自其他应用程序的数据或以特定格式粘贴数据。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果不知道要传递到 Format 参数的字符串, 可以通过在 Excel 中尝试 "粘贴" 命令, 查看与剪贴板上的数据兼容的字符串。 将数据复制到剪贴板, 使用 Excel 中的 "**选择性粘贴**" 命令, 然后查看 "**选择性粘贴**" 对话框中列出的格式。  
  
 `NoHTMLFormatting`仅在 = " `Format` HTML" 时才有意义。 在所有其他情况下`NoHTMLFormatting` , 都将被忽略。  
  
 使用此方法之前, 必须选择目标范围。  
  
 此方法可能会根据剪贴板的内容修改工作表选择。  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例将 HTML 置于剪贴板上, 然后使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.PasteSpecial%2A>方法将剪贴板的内容粘贴到 A1 单元格。 请注意, 该示例在调用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.PasteSpecial%2A>方法之前选择范围。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#106](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#106)]
 [!code-vb[Trin_ExcelWorkSheet#106](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#106)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pictures">
      <MemberSignature Language="C#" Value="public object Pictures (object index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Pictures(object index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.Pictures(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PivotTableAfterValueChange">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.DocEvents_PivotTableAfterValueChangeEventHandler PivotTableAfterValueChange;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.DocEvents_PivotTableAfterValueChangeEventHandler PivotTableAfterValueChange" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorksheetBase.PivotTableAfterValueChange" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.DocEvents_PivotTableAfterValueChangeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在对数据透视表内的单元格或单元格范围进行编辑或重新计算（针对包含公式的单元格）后发生。 此事件只能用于 [!INCLUDE[Excel_14_short](~/includes/excel-14-short-md.md)] 项目中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在<xref:Microsoft.Office.Tools.Excel.WorksheetBase.PivotTableAfterValueChange>编辑或重新计算单元格以外的任何情况下, 事件不会发生。 例如, 如果对数据透视表进行刷新、排序、筛选或深化, 则不会发生这种情况, 即使这些操作移动单元格并且可能从 OLAP 数据源检索新值也是如此。  
  
> [!NOTE]
>  此事件显示在面向的[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]Excel 2007 项目中的 IntelliSense 中。 但是, 在 Excel 2007 项目中不能使用此事件。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MissingMemberException">此事件在 Excel 2007 项目中使用。</exception>
      </Docs>
    </Member>
    <Member MemberName="PivotTableBeforeAllocateChanges">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.DocEvents_PivotTableBeforeAllocateChangesEventHandler PivotTableBeforeAllocateChanges;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.DocEvents_PivotTableBeforeAllocateChangesEventHandler PivotTableBeforeAllocateChanges" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorksheetBase.PivotTableBeforeAllocateChanges" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.DocEvents_PivotTableBeforeAllocateChangesEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在将更改应用于数据透视表之前发生。 此事件只能用于 [!INCLUDE[Excel_14_short](~/includes/excel-14-short-md.md)] 项目中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Tools.Excel.WorksheetBase.PivotTableBeforeAllocateChanges>事件在 Excel 执行 UPDATE CUBE 语句之前立即发生, 以将所有更改应用于数据透视表的 OLAP 数据源, 并在用户选择在用户界面中应用更改之后立即发生。  
  
> [!NOTE]
>  此事件显示在面向的[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]Excel 2007 项目中的 IntelliSense 中。 但是, 在 Excel 2007 项目中不能使用此事件。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MissingMemberException">此事件在 Excel 2007 项目中使用。</exception>
      </Docs>
    </Member>
    <Member MemberName="PivotTableBeforeCommitChanges">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.DocEvents_PivotTableBeforeCommitChangesEventHandler PivotTableBeforeCommitChanges;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.DocEvents_PivotTableBeforeCommitChangesEventHandler PivotTableBeforeCommitChanges" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorksheetBase.PivotTableBeforeCommitChanges" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.DocEvents_PivotTableBeforeCommitChangesEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在针对 OLAP 数据源提交数据透视表的更改之前发生。 此事件只能用于 [!INCLUDE[Excel_14_short](~/includes/excel-14-short-md.md)] 项目中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此<xref:Microsoft.Office.Tools.Excel.WorksheetBase.PivotTableBeforeCommitChanges>事件在 Excel 针对数据透视表的 OLAP 数据源执行 COMMIT TRANSACTION 之前发生, 并在用户选择保存整个数据透视表的更改之后立即发生。  
  
> [!NOTE]
>  此事件显示在面向的[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]Excel 2007 项目中的 IntelliSense 中。 但是, 在 Excel 2007 项目中不能使用此事件。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MissingMemberException">此事件在 Excel 2007 项目中使用。</exception>
      </Docs>
    </Member>
    <Member MemberName="PivotTableBeforeDiscardChanges">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.DocEvents_PivotTableBeforeDiscardChangesEventHandler PivotTableBeforeDiscardChanges;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.DocEvents_PivotTableBeforeDiscardChangesEventHandler PivotTableBeforeDiscardChanges" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorksheetBase.PivotTableBeforeDiscardChanges" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.DocEvents_PivotTableBeforeDiscardChangesEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在放弃对数据透视表的更改之前发生。 此事件只能用于 [!INCLUDE[Excel_14_short](~/includes/excel-14-short-md.md)] 项目中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果事务仍处于活动状态, 则在 Excel 对 OLAP 数据源执行 ROLLBACK TRANSACTION 语句之前立即发生, 然后在用户选择放弃更改后丢弃数据透视表中的所有编辑值。  
  
> [!NOTE]
>  此事件显示在面向的[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]Excel 2007 项目中的 IntelliSense 中。 但是, 在 Excel 2007 项目中不能使用此事件。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MissingMemberException">此事件在 Excel 2007 项目中使用。</exception>
      </Docs>
    </Member>
    <Member MemberName="PivotTableChangeSync">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.DocEvents_PivotTableChangeSyncEventHandler PivotTableChangeSync;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.DocEvents_PivotTableChangeSyncEventHandler PivotTableChangeSync" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorksheetBase.PivotTableChangeSync" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.DocEvents_PivotTableChangeSyncEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在对数据透视表进行更改后发生。 此事件只能用于 [!INCLUDE[Excel_14_short](~/includes/excel-14-short-md.md)] 项目中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在<xref:Microsoft.Office.Tools.Excel.WorksheetBase.PivotTableChangeSync>对数据透视表进行大多数更改期间发生, 以便您可以编写代码来响应用户操作, 如清除、分组或刷新数据透视表中的项。  
  
> [!NOTE]
>  此事件显示在面向的[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]Excel 2007 项目中的 IntelliSense 中。 但是, 在 Excel 2007 项目中不能使用此事件。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MissingMemberException">此属性用于 Excel 2007 项目。</exception>
      </Docs>
    </Member>
    <Member MemberName="PivotTables">
      <MemberSignature Language="C#" Value="public object PivotTables (object index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object PivotTables(object index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.PivotTables(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">报表的名称或编号。</param>
        <summary>获取一个对象，该对象表示工作表上的单个数据透视表（一个 <see cref="T:Microsoft.Office.Interop.Excel.PivotTable" /> 对象）或所有数据透视表的集合（一个 <see cref="T:Microsoft.Office.Interop.Excel.PivotTables" /> 对象）。</summary>
        <returns>一个对象，表示工作表上的单个数据透视表（一个 <see cref="T:Microsoft.Office.Interop.Excel.PivotTable" /> 对象）或所有数据透视表的集合（一个 <see cref="T:Microsoft.Office.Interop.Excel.PivotTables" /> 对象）。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.PivotTables%2A>方法<xref:Microsoft.Office.Interop.Excel.PivotTables?displayProperty=fullName>获取当前工作表的集合, 并刷新该集合中的每个数据透视表  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#107](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#107)]
 [!code-vb[Trin_ExcelWorkSheet#107](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#107)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PivotTableUpdate">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.DocEvents_PivotTableUpdateEventHandler PivotTableUpdate;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.DocEvents_PivotTableUpdateEventHandler PivotTableUpdate" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorksheetBase.PivotTableUpdate" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.DocEvents_PivotTableUpdateEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在工作表上更新数据透视表之后发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示了一个<xref:Microsoft.Office.Tools.Excel.WorksheetBase.PivotTableUpdate>事件的处理程序, 该处理程序用于在数据透视表更新时显示一条消息。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#207](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#207)]
 [!code-vb[Trin_ExcelWorkSheet#207](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#207)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PivotTableWizard">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.PivotTable PivotTableWizard (object sourceType, object sourceData, object tableDestination, object tableName, object rowGrand, object columnGrand, object saveData, object hasAutoFormat, object autoPage, object reserved, object backgroundQuery, object optimizeCache, object pageFieldOrder, object pageFieldWrapCount, object readData, object connection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Office.Interop.Excel.PivotTable PivotTableWizard(object sourceType, object sourceData, object tableDestination, object tableName, object rowGrand, object columnGrand, object saveData, object hasAutoFormat, object autoPage, object reserved, object backgroundQuery, object optimizeCache, object pageFieldOrder, object pageFieldWrapCount, object readData, object connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.PivotTableWizard(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.PivotTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceType" Type="System.Object" />
        <Parameter Name="sourceData" Type="System.Object" />
        <Parameter Name="tableDestination" Type="System.Object" />
        <Parameter Name="tableName" Type="System.Object" />
        <Parameter Name="rowGrand" Type="System.Object" />
        <Parameter Name="columnGrand" Type="System.Object" />
        <Parameter Name="saveData" Type="System.Object" />
        <Parameter Name="hasAutoFormat" Type="System.Object" />
        <Parameter Name="autoPage" Type="System.Object" />
        <Parameter Name="reserved" Type="System.Object" />
        <Parameter Name="backgroundQuery" Type="System.Object" />
        <Parameter Name="optimizeCache" Type="System.Object" />
        <Parameter Name="pageFieldOrder" Type="System.Object" />
        <Parameter Name="pageFieldWrapCount" Type="System.Object" />
        <Parameter Name="readData" Type="System.Object" />
        <Parameter Name="connection" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="sourceType">一个 <see cref="T:Microsoft.Office.Interop.Excel.XlPivotTableSourceType" /> 值。 报表数据的源。</param>
        <param name="sourceData">新报表的数据。 可以是 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 对象、范围数组或表示其他报表的名称的文本常数。 对于外部数据库，<c>SourceData</c> 是包含 SQL 查询字符串的字符串数组，其中每个元素的最大长度为 255 个字符。 应使用 <c>Connection</c> 参数指定 ODBC 连接字符串。 为了与较早版本的 Excel 兼容，<c>SourceData</c> 可以是二元素数组。 第一个元素是指定数据的 ODBC 源的连接字符串。 第二个元素是用于获取数据的 SQL 查询字符串。 如果指定 <c>SourceData</c>，还必须指定 <c>SourceType</c>。 如果活动单元格在 <c>SourceData</c> 范围内，则还必须指定 <c>TableDestination</c>。</param>
        <param name="tableDestination">一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 对象，指定应在工作表上放置报表的位置。 如果省略此参数，则报表将放置在活动单元格上。</param>
        <param name="tableName">新报表的名称。</param>
        <param name="rowGrand">为 <see langword="true" /> 可显示报表中的总行数。</param>
        <param name="columnGrand">为 <see langword="true" /> 可显示报表中的总列数。</param>
        <param name="saveData">为 <see langword="true" />，则保存报表数据；为 <see langword="false" />，则仅保存报表定义。</param>
        <param name="hasAutoFormat">如果为 <see langword="true" />，则 Microsoft Office Excel 可在刷新报表或移动字段后自动设置报表格式。</param>
        <param name="autoPage">仅当 <c>SourceType</c> 为 <see cref="F:Microsoft.Office.Interop.Excel.XlPivotTableSourceType.xlConsolidation" /> 时才有效。 如果让 Excel 创建一个用于合并的页字段，则为 <see langword="true" />。 如果 <c>AutoPage</c> 为 <see langword="false" />，则必须创建一个或多个页字段。</param>
        <param name="reserved">Excel 不使用。</param>
        <param name="backgroundQuery">如果为 <see langword="true" />，则 Excel 可异步执行（在后台）报表查询。 默认值为 <see langword="false" />。</param>
        <param name="optimizeCache">如果为 <see langword="true" />，则可在构造数据透视表时对其缓存进行优化。 默认值为 <see langword="false" />。</param>
        <param name="pageFieldOrder">向数据透视表的布局添加页字段的顺序。 可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlOrder" /> 常数之一：<see cref="F:Microsoft.Office.Interop.Excel.XlOrder.xlDownThenOver" /> 或 <see cref="F:Microsoft.Office.Interop.Excel.XlOrder.xlOverThenDown" />。 默认值为 <see cref="F:Microsoft.Office.Interop.Excel.XlOrder.xlDownThenOver" />。</param>
        <param name="pageFieldWrapCount">数据透视表中每列或每行中的页字段数。 默认值为 0（零）。</param>
        <param name="readData">如果为 <see langword="true" />，则可创建包含外部数据库所有记录的数据透视表缓存；此缓存可能很大。 如果 <c>ReadData</c> 为 <see langword="false" />，则可以在实际读取数据前，将某些字段设置为基于服务器的页字段。</param>
        <param name="connection">一个字符串，包含使 Excel 连接到 ODBC 数据源的 ODBC 设置。 连接字符串具有格式“ODBC;&lt;连接字符串&gt;”。 此参数重写 <see cref="T:Microsoft.Office.Interop.Excel.PivotCache" /> 对象的 <see cref="P:Microsoft.Office.Interop.Excel.PivotCache.Connection" /> 属性的所有以前的设置。</param>
        <summary>创建一个 <see cref="T:Microsoft.Office.Interop.Excel.PivotTable" /> 对象。</summary>
        <returns><see cref="T:Microsoft.Office.Interop.Excel.PivotTable" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法不显示 "数据透视表" 向导。 此方法不适用于 OLE DB 数据源。 <xref:Microsoft.Office.Interop.Excel.Worksheets.Add%2A>使用方法添加一个数据透视表缓存, 然后基于该缓存创建一个数据透视表。  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.PivotTableWizard%2A>方法创建一个数据透视表, 该报表基于当前工作表的 A1 到 C4 范围内的单元格的内容。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#108](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#108)]
 [!code-vb[Trin_ExcelWorkSheet#108](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#108)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Previous">
      <MemberSignature Language="C#" Value="public object Previous { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Previous" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.Previous" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取表示上一个表的 <see cref="T:Microsoft.Office.Interop.Excel.Worksheet" />。</summary>
        <value>表示上一个表的 <see cref="T:Microsoft.Office.Interop.Excel.Worksheet" />；如果当前工作表是工作簿中的第一个表，则为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Previous%2A>属性来确定当前<xref:Microsoft.Office.Tools.Excel.WorksheetBase>是否为工作簿中的第一个工作表。 如果当前<xref:Microsoft.Office.Tools.Excel.WorksheetBase>不是第一个工作表, 则显示上一个表的名称。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#24](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#24)]
 [!code-vb[Trin_ExcelWorkSheet#24](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#24)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PrintedCommentPages">
      <MemberSignature Language="C#" Value="public int PrintedCommentPages { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PrintedCommentPages" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.PrintedCommentPages" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取要为当前工作表打印的注释页的数目。 此属性只能用于 [!INCLUDE[Excel_14_short](~/includes/excel-14-short-md.md)] 对象。</summary>
        <value>要为当前工作表打印的注释页的数目。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:Microsoft.Office.Tools.Excel.WorksheetBase.PrintedCommentPages%2A>在 "**页面设置**" 对话框的 "**工作表**" 选项卡上将 "**注释**" 设置设置为 "**在表尾**", 则该属性将仅返回一个大于零的数字。 如果工作表是图表工作表或 MS Excel 5.0 对话框工作表, 则此属性将返回零。  
  
> [!NOTE]
>  此属性显示在面向的[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]Excel 2007 项目中的 IntelliSense 中。 但是, 不能在 Excel 2007 项目中使用此属性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MissingMemberException">此属性用于 Excel 2007 项目。</exception>
      </Docs>
    </Member>
    <Member MemberName="PrintOut">
      <MemberSignature Language="C#" Value="public void PrintOut (object from, object to, object copies, object preview, object activePrinter, object printToFile, object collate, object prToFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PrintOut(object from, object to, object copies, object preview, object activePrinter, object printToFile, object collate, object prToFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.PrintOut(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="from" Type="System.Object" />
        <Parameter Name="to" Type="System.Object" />
        <Parameter Name="copies" Type="System.Object" />
        <Parameter Name="preview" Type="System.Object" />
        <Parameter Name="activePrinter" Type="System.Object" />
        <Parameter Name="printToFile" Type="System.Object" />
        <Parameter Name="collate" Type="System.Object" />
        <Parameter Name="prToFileName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="from">To be added.</param>
        <param name="to">To be added.</param>
        <param name="copies">To be added.</param>
        <param name="preview">To be added.</param>
        <param name="activePrinter">To be added.</param>
        <param name="printToFile">To be added.</param>
        <param name="collate">To be added.</param>
        <param name="prToFileName">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrintOutEx">
      <MemberSignature Language="C#" Value="public void PrintOutEx (object from, object to, object copies, object preview, object activePrinter, object printToFile, object collate, object prToFileName, object ignorePrintAreas);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PrintOutEx(object from, object to, object copies, object preview, object activePrinter, object printToFile, object collate, object prToFileName, object ignorePrintAreas) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.PrintOutEx(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="from" Type="System.Object" />
        <Parameter Name="to" Type="System.Object" />
        <Parameter Name="copies" Type="System.Object" />
        <Parameter Name="preview" Type="System.Object" />
        <Parameter Name="activePrinter" Type="System.Object" />
        <Parameter Name="printToFile" Type="System.Object" />
        <Parameter Name="collate" Type="System.Object" />
        <Parameter Name="prToFileName" Type="System.Object" />
        <Parameter Name="ignorePrintAreas" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="from">要从其处开始打印的页码。 如果省略此参数，则打印从第一页开始。</param>
        <param name="to">要打印的最后一页的页码。 若忽略此参数，则打印至最后一页。</param>
        <param name="copies">要打印的份数。 如果忽略此参数，则打印一份。</param>
        <param name="preview">若要在打印对象前让 Microsoft Office Excel 调用打印预览，请使用 <see langword="true" />。 若要立即打印对象，请使用 <see langword="false" />。</param>
        <param name="activePrinter">设置活动打印机的名称。</param>
        <param name="printToFile">若要打印到文件，请使用 <see langword="true" />。 若未指定 <c>PrToFileName</c>，则 Excel 会提示用户输入输出文件的名称。</param>
        <param name="collate">若逐份打印多个副本，请使用 <see langword="true" />。</param>
        <param name="prToFileName">如果 <c>PrintToFile</c> 设为 <see langword="true" />，则此参数指定要打印到的文件的名称。</param>
        <param name="ignorePrintAreas">如果要忽略打印区域并打印整个工作簿，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <summary>打印工作表。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `From` 和`To`中的 "页" 是指打印页, 而不是对工作表或工作簿中的所有页。  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.PrintOutEx%2A>方法将工作表的前两页的两个逐份打印副本打印到默认打印机。 若要运行此代码示例, 工作簿必须包含一个名`Sheet1`为的工作表, 其中包含一些数据。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkBook_Additional#13](~/snippets/csharp/VS_Snippets_OfficeSP/trin_excelworkbook_additional/cs/ThisWorkbook.cs#13)]
 [!code-vb[Trin_ExcelWorkBook_Additional#13](~/snippets/visualbasic/VS_Snippets_OfficeSP/trin_excelworkbook_additional/vb/ThisWorkbook.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PrintPreview">
      <MemberSignature Language="C#" Value="public void PrintPreview (object enableChanges);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PrintPreview(object enableChanges) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.PrintPreview(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enableChanges" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="enableChanges">To be added.</param>
        <summary>显示工作表打印效果的预览。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.PrintPreview%2A>方法来显示当前工作表的打印预览。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#110](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#110)]
 [!code-vb[Trin_ExcelWorkSheet#110](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#110)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Protect">
      <MemberSignature Language="C#" Value="public void Protect (object password, object drawingObjects, object contents, object scenarios, object userInterfaceOnly, object allowFormattingCells, object allowFormattingColumns, object allowFormattingRows, object allowInsertingColumns, object allowInsertingRows, object allowInsertingHyperlinks, object allowDeletingColumns, object allowDeletingRows, object allowSorting, object allowFiltering, object allowUsingPivotTables);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Protect(object password, object drawingObjects, object contents, object scenarios, object userInterfaceOnly, object allowFormattingCells, object allowFormattingColumns, object allowFormattingRows, object allowInsertingColumns, object allowInsertingRows, object allowInsertingHyperlinks, object allowDeletingColumns, object allowDeletingRows, object allowSorting, object allowFiltering, object allowUsingPivotTables) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.Protect(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="password" Type="System.Object" />
        <Parameter Name="drawingObjects" Type="System.Object" />
        <Parameter Name="contents" Type="System.Object" />
        <Parameter Name="scenarios" Type="System.Object" />
        <Parameter Name="userInterfaceOnly" Type="System.Object" />
        <Parameter Name="allowFormattingCells" Type="System.Object" />
        <Parameter Name="allowFormattingColumns" Type="System.Object" />
        <Parameter Name="allowFormattingRows" Type="System.Object" />
        <Parameter Name="allowInsertingColumns" Type="System.Object" />
        <Parameter Name="allowInsertingRows" Type="System.Object" />
        <Parameter Name="allowInsertingHyperlinks" Type="System.Object" />
        <Parameter Name="allowDeletingColumns" Type="System.Object" />
        <Parameter Name="allowDeletingRows" Type="System.Object" />
        <Parameter Name="allowSorting" Type="System.Object" />
        <Parameter Name="allowFiltering" Type="System.Object" />
        <Parameter Name="allowUsingPivotTables" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="password">工作表的密码，区分大小写。 如果省略此参数，则无需使用密码即可取消对工作表的保护。 否则，您必须指定密码才能取消对工作表的保护。 如果忘记密码，则无法取消对工作表的保护。 最好将密码及其对应文档名的列表保存在安全的位置。</param>
        <param name="drawingObjects">为 <see langword="true" /> 时保护形状。 默认值为 <see langword="false" />。</param>
        <param name="contents">为 <see langword="true" /> 可保护锁定单元格中的内容。 默认值为 <see langword="true" />。</param>
        <param name="scenarios">为 <see langword="true" /> 时保护方案。 默认值为 <see langword="true" />。</param>
        <param name="userInterfaceOnly">为 <see langword="true" /> 可保护用户界面，但不保护宏。 如果省略此参数，则同时对宏和用户界面应用保护。</param>
        <param name="allowFormattingCells">为 <see langword="true" />，则允许用户格式化受保护的工作表上的任何单元格。 默认值为 <see langword="false" />。</param>
        <param name="allowFormattingColumns">为 <see langword="true" />，则允许用户格式化受保护的工作表上的任何列。 默认值为 <see langword="false" />。</param>
        <param name="allowFormattingRows">为 <see langword="true" />，则允许用户格式化受保护的工作表上的任何行。 默认值为 <see langword="false" />。</param>
        <param name="allowInsertingColumns">为 <see langword="true" />，则允许用户在受保护的工作表上插入列。 默认值为 <see langword="false" />。</param>
        <param name="allowInsertingRows">为 <see langword="true" />，则允许用户在受保护的工作表上插入行。 默认值为 <see langword="false" />。</param>
        <param name="allowInsertingHyperlinks">为 <see langword="true" />，则允许用户在工作表上插入超链接。 默认值为 <see langword="false" />。</param>
        <param name="allowDeletingColumns">为 <see langword="true" />，则允许用户在受保护的工作表上删除列，此处要删除的列中的每个单元格都已被解除锁定。 默认值为 <see langword="false" />。</param>
        <param name="allowDeletingRows">为 <see langword="true" />，则允许用户在受保护的工作表上删除行，此处要删除的行中的每个单元格都已被解除锁定。 默认值为 <see langword="false" />。</param>
        <param name="allowSorting">为 <see langword="true" />，则允许用户在受保护的工作表上进行排序。 排序范围中的每个单元格都必须已解除锁定或不受保护。 默认值为 <see langword="false" />。</param>
        <param name="allowFiltering">为 <see langword="true" />，则允许用户在受保护的工作表上设置筛选器。 用户可以更改筛选条件，但不能启用或禁用自动筛选。 用户可以在现有的自动筛选上设置筛选器。 默认值为 <see langword="false" />。</param>
        <param name="allowUsingPivotTables">为 <see langword="true" />，则允许用户在受保护的工作表上使用数据透视表。 默认值为 <see langword="false" />。</param>
        <summary>保护工作表使其无法修改。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果将此方法`UserInterfaceOnly`应用于参数设置为`true`的, 然后保存该工作簿, 则当您重新打开工作簿时, 整个工作表 (而不仅仅是界面) 都将完全受到保护。 若要在打开工作簿后重新启用用户界面保护, 你必须再次将此方法`UserInterfaceOnly`应用到设置为。 `true`  
  
 如果提供密码, 则可以对受保护的工作表做出更改。 此外, 另一种方法是取消对工作表的保护, 进行必要的更改, 然后再次保护工作表。  
  
> [!NOTE]
>  "未保护" 表示单元格可能被锁定 ("**设置单元格格式**" 对话框), 但包含在 "**允许用户编辑范围**" 对话框中定义的范围内, 并且用户已通过密码保护该范围或通过 NT 权限进行验证。  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例获取<xref:Microsoft.Office.Tools.Excel.WorksheetBase.ProtectContents%2A>属性的值, 以确定是否保护工作表的内容。 如果内容未受保护, <xref:Microsoft.Office.Tools.Excel.WorksheetBase.Protect%2A>则调用方法`Contents`并将参数设置为`true` , 以使内容受到保护。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#25](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#25)]
 [!code-vb[Trin_ExcelWorkSheet#25](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#25)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectContents">
      <MemberSignature Language="C#" Value="public bool ProtectContents { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ProtectContents" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.ProtectContents" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示工作表的内容（单个单元格）是否受保护。</summary>
        <value>如果表的内容受保护，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例获取<xref:Microsoft.Office.Tools.Excel.WorksheetBase.ProtectContents%2A>属性的值, 以确定是否保护工作表的内容。 如果内容未受保护, <xref:Microsoft.Office.Tools.Excel.WorksheetBase.Protect%2A>则调用方法`Contents`并将参数设置为`true` , 以使内容受到保护。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#25](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#25)]
 [!code-vb[Trin_ExcelWorkSheet#25](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#25)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectDrawingObjects">
      <MemberSignature Language="C#" Value="public bool ProtectDrawingObjects { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ProtectDrawingObjects" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.ProtectDrawingObjects" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示形状是否受保护。</summary>
        <value>如果形状受保护，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例获取<xref:Microsoft.Office.Tools.Excel.WorksheetBase.ProtectDrawingObjects%2A>属性的值, 以确定工作表上的形状是否受保护。 如果形状未受保护, 则<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Protect%2A>在`DrawingObjects`参数设置为`true`的情况下调用方法, 以使形状受保护。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#26](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#26)]
 [!code-vb[Trin_ExcelWorkSheet#26](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#26)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Protection">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Protection Protection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Protection Protection" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.Protection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Protection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Protection" /> 对象，该对象表示工作表的保护选项。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.Protection" /> 对象，表示工作表的保护选项。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例获取<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Protection%2A>属性的值, 以确定当前是否允许单元格格式设置。 如果不允许单元格格式设置, <xref:Microsoft.Office.Tools.Excel.WorksheetBase.Protect%2A>则调用方法`AllowFormattingCells`并将参数设置为`true` , 以便可以设置单元格的格式。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#27](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#27)]
 [!code-vb[Trin_ExcelWorkSheet#27](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#27)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectionMode">
      <MemberSignature Language="C#" Value="public bool ProtectionMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ProtectionMode" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.ProtectionMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示是否打开仅限用户界面保护。</summary>
        <value>如果打开仅限用户界面保护，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要启用用户界面保护, 请使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Protect%2A>方法`UserInterfaceOnly` , 将参数设置为`true`。  
  
   
  
## Examples  
 下面的代码示例获取<xref:Microsoft.Office.Tools.Excel.WorksheetBase.ProtectionMode%2A>属性的值, 以确定是否保护用户界面。 如果未保护用户界面, 则会调用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Protect%2A>方法, `UserInterfaceOnly`并将参数设置为`true` , 以使用户界面受到保护。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#28](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#28)]
 [!code-vb[Trin_ExcelWorkSheet#28](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#28)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectScenarios">
      <MemberSignature Language="C#" Value="public bool ProtectScenarios { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ProtectScenarios" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.ProtectScenarios" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示工作表方案是否受保护。</summary>
        <value>如果工作表方案受保护，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例获取<xref:Microsoft.Office.Tools.Excel.WorksheetBase.ProtectScenarios%2A>属性的值, 以确定是否保护工作表方案。 如果未保护方案, 则会<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Protect%2A>调用方法, `Scenarios`并将参数设置为`true` , 以便使方案受到保护。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#29](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#29)]
 [!code-vb[Trin_ExcelWorkSheet#29](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#29)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryTables">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.QueryTables QueryTables { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.QueryTables QueryTables" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.QueryTables" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.QueryTables</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.QueryTables" /> 集合，该集合表示工作表上的所有查询表。</summary>
        <value><see cref="T:Microsoft.Office.Interop.Excel.QueryTables" /> 集合，表示工作表上的所有查询表。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.QueryTables%2A>属性刷新当前工作表上每个<xref:Microsoft.Office.Interop.Excel.QueryTable?displayProperty=fullName>中的数据。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#30](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#30)]
 [!code-vb[Trin_ExcelWorkSheet#30](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#30)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Range">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Tools.Excel.Worksheet_RangeType Range { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Tools.Excel.Worksheet_RangeType Range" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.Range" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Tools.Excel.Worksheet_RangeType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 对象，该对象表示一个单元格或一定单元格范围。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 对象，表示一个单元格或单元格范围。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Range%2A>属性应与以下参数一起使用。  
  
|参数|说明|  
|---------------|-----------------|  
|`Cell1`|采用应用程序语言的以 A1 样式表示法表示的范围名称。 范围名称可以包括范围运算符（冒号）、交集运算符（空格）或并集运算符（逗号）。 范围名称还可以包括货币符号，但是这些符号被忽略。 可以在范围的任何部分中使用本地定义的名称。 如果使用一个名称，则假定该名称使用的是应用程序的语言。 此参数是必需的。|  
|`Cell2`|范围右下角的单元格。 可以是一个包含单个单元格、整列、整行的 <xref:Microsoft.Office.Interop.Excel.Range?displayProperty=fullName>，或者可以是一个以应用程序的语言命名单个单元格的字符串。 此参数在 Visual Basic 中是可选的。|  
  
 如果尝试在不指定<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Range%2A>任何参数的情况下<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Range%2A>使用, 将<xref:Microsoft.Office.Tools.Excel.Worksheet._RangeType>获取属于 Visual Studio 基础结构的对象, 并且不应在代码中直接使用。  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例演示了使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Range%2A>属性访问单个或多个单元格的不同方法。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#42](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#42)]
 [!code-vb[Trin_ExcelWorkSheet#42](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#42)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rectangles">
      <MemberSignature Language="C#" Value="public object Rectangles (object index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Rectangles(object index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.Rectangles(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetAllPageBreaks">
      <MemberSignature Language="C#" Value="public void ResetAllPageBreaks ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetAllPageBreaks() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.ResetAllPageBreaks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>重置指定工作表上的所有分页符。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Rows">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range Rows { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range Rows" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.Rows" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个表示工作表上一个或多个行的 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 对象。</summary>
        <value>一个表示工作表上一个或多个行的 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当未使用参数时, 此属性将<xref:Microsoft.Office.Interop.Excel.Range>返回一个对象, 该对象包含工作表中的所有行。  
  
 此属性可与以下可选参数一起使用, 以获取工作表中的特定行。 如果将此属性与参数一起使用, 则返回值是必须强制转换为的<xref:Microsoft.Office.Interop.Excel.Range>对象。  
  
|参数|说明|  
|---------------|-----------------|  
|`RowIndex`|要获取的一个或多个行的索引。<br /><br /> 若要获取单个行, 请传递一个整数, 该整数指定要获取的行的索引。 行索引从1开始。<br /><br /> 若要获取多个连续行, 请传递格式为 "`first row`:`last row`" 的字符串。 例如, 若要获取第1到5行, 请传递 "1:5"。|  
|`ColumnIndex`|不使用此参数。 <xref:System.Runtime.InteropServices.COMException>如果尝试向此参数传递值, 则此属性将引发。|  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Rows%2A>属性设置工作表的前五行中所有单元格的字体的颜色、名称、大小和加粗程度。  
  
 此示例适用于文档级自定义项。 若要运行此代码, 请将其复制到项目中的一个工作表类。  
  
 [!code-csharp[Trin_ExcelWorkSheet#31](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#31)]
 [!code-vb[Trin_ExcelWorkSheet#31](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#31)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveAs">
      <MemberSignature Language="C#" Value="public void SaveAs (string filename, object fileFormat, object password, object writeResPassword, object readOnlyRecommended, object createBackup, object addToMru, object textCodepage, object textVisualLayout, object local);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SaveAs(string filename, object fileFormat, object password, object writeResPassword, object readOnlyRecommended, object createBackup, object addToMru, object textCodepage, object textVisualLayout, object local) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.SaveAs(System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
        <Parameter Name="fileFormat" Type="System.Object" />
        <Parameter Name="password" Type="System.Object" />
        <Parameter Name="writeResPassword" Type="System.Object" />
        <Parameter Name="readOnlyRecommended" Type="System.Object" />
        <Parameter Name="createBackup" Type="System.Object" />
        <Parameter Name="addToMru" Type="System.Object" />
        <Parameter Name="textCodepage" Type="System.Object" />
        <Parameter Name="textVisualLayout" Type="System.Object" />
        <Parameter Name="local" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="filename">要保存的文件的名称。 可以包含完整路径；否则，Microsoft Office Excel 将文件保存在当前文件夹中。</param>
        <param name="fileFormat">保存文件时要使用的文件格式。 有关有效选项的列表，请参见 <see cref="P:Microsoft.Office.Tools.Excel.Workbook.FileFormat" /> 属性。 对于现有文件，默认格式为最后一种指定文件格式；对于新文件，默认格式为所用 Excel 版本的格式。</param>
        <param name="password">一个区分大小写的字符串（不超过 15 个字符），指示为文件指定的保护密码。</param>
        <param name="writeResPassword">文件的写保护密码。 如果保存文件时指定了密码，但打开文件时没有提供密码，则该文件以只读方式打开。</param>
        <param name="readOnlyRecommended">如果为 <see langword="true" />，则在打开该文件时显示一条消息，建议以只读方式打开该文件。</param>
        <param name="createBackup">如果为 <see langword="true" />，则创建备份文件。</param>
        <param name="addToMru">如果为 <see langword="true" />，则将工作簿添加到最近使用的文件列表中。 默认值为 <see langword="false" />。</param>
        <param name="textCodepage">不在美国使用英语 Excel。</param>
        <param name="textVisualLayout">不在美国使用英语 Excel。</param>
        <param name="local">如果为 <see langword="true" />，则针对 Excel 语言保存文件（包括控制面板设置）；如果为 <see langword="false" />（默认），则针对 Visual Basic for Applications (VBA) 语言保存文件。</param>
        <summary>在另一个文件中保存对工作表所做的更改。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.SaveAs%2A>方法保存当前工作表的新副本。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#111](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#111)]
 [!code-vb[Trin_ExcelWorkSheet#111](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#111)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Scenarios">
      <MemberSignature Language="C#" Value="public object Scenarios (object index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Scenarios(object index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.Scenarios(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">方案的名称或编号。 使用数组可指定多个方案。</param>
        <summary>获取一个对象，该对象表示工作表上的单个方案（一个 <see cref="T:Microsoft.Office.Interop.Excel.Scenario" /> 对象）或方案的集合（一个 <see cref="T:Microsoft.Office.Interop.Excel.Scenarios" /> 对象）。</summary>
        <returns>一个对象，表示工作表上的单个方案（一个 <see cref="T:Microsoft.Office.Interop.Excel.Scenario" /> 对象）或方案的集合（一个 <see cref="T:Microsoft.Office.Interop.Excel.Scenarios" /> 对象）。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Scenarios%2A>方法将一个新方案添加到当前工作表, 然后显示 "**方案管理器**" 对话框以验证是否添加了该方案。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#112](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#112)]
 [!code-vb[Trin_ExcelWorkSheet#112](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#112)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Scripts">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Core.Scripts Scripts { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Core.Scripts Scripts" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.Scripts" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Core.Scripts</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScrollArea">
      <MemberSignature Language="C#" Value="public string ScrollArea { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ScrollArea" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.ScrollArea" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置允许滚动的范围，作为 A1 样式范围引用。</summary>
        <value>允许滚动的范围，作为 A1 样式范围引用。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不能选择滚动区域外的单元。  
  
 将此属性设置为空字符串 ("") 可为整个工作表启用单元格选定内容。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.ScrollArea%2A>属性将当前工作表的滚动区域设置为从 A1 到 Z100 的单元格范围。  
  
 此示例适用于  
  
 文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#34](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#34)]
 [!code-vb[Trin_ExcelWorkSheet#34](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#34)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScrollBars">
      <MemberSignature Language="C#" Value="public object ScrollBars (object index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object ScrollBars(object index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.ScrollBars(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public void Select (object replace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Select(object replace) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.Select(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="replace" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="replace">如果设置为 <see langword="true" />，则移除当前选择并转为选择该工作表；如果设置为 <see langword="false" />，则扩展当前选定内容以包括任何之前选定的对象和该工作表。</param>
        <summary>选择工作表。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Select%2A>的代码示例使用方法来选择`Sheet1`, 然后将选择范围扩展为包含`Sheet2`和`Sheet3`。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#113](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#113)]
 [!code-vb[Trin_ExcelWorkSheet#113](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#113)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectionChange">
      <MemberSignature Language="C#" Value="public event Microsoft.Office.Interop.Excel.DocEvents_SelectionChangeEventHandler SelectionChange;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.DocEvents_SelectionChangeEventHandler SelectionChange" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorksheetBase.SelectionChange" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.DocEvents_SelectionChangeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在工作表上的所选内容发生更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示<xref:Microsoft.Office.Tools.Excel.WorksheetBase.SelectionChange>事件的处理程序, 该事件在状态栏中显示工作表名称和所选范围的地址。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#208](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#208)]
 [!code-vb[Trin_ExcelWorkSheet#208](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#208)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBackgroundPicture">
      <MemberSignature Language="C#" Value="public void SetBackgroundPicture (string filename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetBackgroundPicture(string filename) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.SetBackgroundPicture(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">图形文件的名称。</param>
        <summary>设置工作表的背景图形。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.SetBackgroundPicture%2A>方法将工作表的背景图像设置为名为 image1 的文件。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#114](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#114)]
 [!code-vb[Trin_ExcelWorkSheet#114](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#114)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Shapes">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Shapes Shapes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Shapes Shapes" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.Shapes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Shapes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个表示工作表上的所有形状的 <see cref="T:Microsoft.Office.Interop.Excel.Shapes" /> 对象。</summary>
        <value>一个表示工作表上的所有形状的 <see cref="T:Microsoft.Office.Interop.Excel.Shapes" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Shapes%2A>属性将圆环形状添加到当前工作表。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#33](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#33)]
 [!code-vb[Trin_ExcelWorkSheet#33](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowAllData">
      <MemberSignature Language="C#" Value="public void ShowAllData ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ShowAllData() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.ShowAllData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>使当前经过筛选的列表的所有行可见。 如果正在使用自动筛选，则此方法会将箭头更改为“所有”。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowDataForm">
      <MemberSignature Language="C#" Value="public void ShowDataForm ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ShowDataForm() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.ShowDataForm" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>显示与工作表关联的数据窗体。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用数据窗体时, 执行将暂停。 关闭数据窗体时, 执行将<xref:Microsoft.Office.Tools.Excel.WorksheetBase.ShowDataForm%2A>在方法之后的行中恢复。  
  
 此方法运行自定义数据窗体 (如果有)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Shutdown">
      <MemberSignature Language="C#" Value="public event EventHandler Shutdown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Shutdown" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorksheetBase.Shutdown" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在工作表宿主项关闭时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 这是卸载<xref:Microsoft.Office.Tools.Excel.WorksheetBase> <xref:Microsoft.Office.Tools.Excel.WorksheetBase>类时要在类中调用的最后一个事件。 此事件用于任何其他清理。  
  
 在文档级自定义项中, 工作表宿主项关闭时程序集的应用程序域将卸载。  
  
 在应用程序级外接程序中, 工作表宿主项关闭时不会卸载应用程序域。 此外, 基础工作表对象不再可用。 若要在工作表关闭之前对其<xref:Microsoft.Office.Tools.Excel.Workbook.BeforeClose>进行访问, 请改用。  
  
   
  
## Examples  
 下面的代码示例演示了一个<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Shutdown>事件的处理程序, 该事件在<xref:Microsoft.Office.Tools.Excel.WorksheetBase>类卸载时显示一条消息。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#209](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#209)]
 [!code-vb[Trin_ExcelWorkSheet#209](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#209)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Site">
      <MemberSignature Language="C#" Value="public System.ComponentModel.ISite Site { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISite Site" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.Site" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.ComponentModel.IComponent.Site</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SmartTags">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.SmartTags SmartTags { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.SmartTags SmartTags" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.SmartTags" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.SmartTags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Sort Sort { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Sort Sort" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.Sort" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Sort</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前工作表中经过排序的值。</summary>
        <value>当前工作表中经过排序的值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用标题和雇员姓名填充当前工作表中的某个范围。 接下来, 该示例访问<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Sort%2A>工作表的属性, 并设置包含要排序的列范围的属性和排序顺序。 最后, 该代码调用`Microsoft.Office.Interop.Excel.Sort.Apply`方法以对指定的工作表数据进行排序。 当你运行此代码时, 将根据雇员名字以升序对员工数据进行排序。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_Excelworkbook_Additional#31](~/snippets/csharp/VS_Snippets_OfficeSP/trin_excelworkbook_additional/cs/Sheet3.cs#31)]
 [!code-vb[Trin_Excelworkbook_Additional#31](~/snippets/visualbasic/VS_Snippets_OfficeSP/trin_excelworkbook_additional/vb/Sheet3.vb#31)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Spinners">
      <MemberSignature Language="C#" Value="public object Spinners (object index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Spinners(object index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.Spinners(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StandardHeight">
      <MemberSignature Language="C#" Value="public double StandardHeight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 StandardHeight" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.StandardHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取工作表中所有行的标准（默认）高度（以磅为单位）。</summary>
        <value>工作表中所有行的标准（默认）高度（以磅为单位）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.StandardHeight%2A>属性显示当前工作表中所有行的默认高度。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#36](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#36)]
 [!code-vb[Trin_ExcelWorkSheet#36](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#36)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StandardWidth">
      <MemberSignature Language="C#" Value="public double StandardWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 StandardWidth" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.StandardWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置工作表中所有列的标准（默认）宽度。</summary>
        <value>工作表中所有列的标准（默认）宽度。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 列宽的单位等于普通样式中一个字符的宽度。 对于比例字体, 使用字符 0 (零) 的宽度。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.StandardWidth%2A>属性显示当前工作表中所有列的默认宽度。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#37](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#37)]
 [!code-vb[Trin_ExcelWorkSheet#37](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#37)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Startup">
      <MemberSignature Language="C#" Value="public event EventHandler Startup;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Startup" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.WorksheetBase.Startup" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tab">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Tab Tab { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Tab Tab" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.Tab" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Tab</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取工作表的一个 <see cref="T:Microsoft.Office.Interop.Excel.Tab" />。</summary>
        <value>工作表的一个 <see cref="T:Microsoft.Office.Interop.Excel.Tab" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Tab%2A>属性将工作表的选项卡的主色设置为蓝色。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#38](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#38)]
 [!code-vb[Trin_ExcelWorkSheet#38](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#38)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置包含有关工作表的数据的对象。</summary>
        <value>包含有关工作表的数据的对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Tools.Excel.WorksheetBase.Tag%2A>属性的常见用途是存储与工作表密切关联的数据。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextBoxes">
      <MemberSignature Language="C#" Value="public object TextBoxes (object index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object TextBoxes(object index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.TextBoxes(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TransitionExpEval">
      <MemberSignature Language="C#" Value="public bool TransitionExpEval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TransitionExpEval" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.TransitionExpEval" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示 Microsoft Office Excel 是否对工作表使用 Lotus 1-2-3 表达式计算规则。</summary>
        <value>如果 Excel 对工作表使用 Lotus 1-2-3 表达式计算规则，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 执行与 "**选项**" 对话框的 "**转换**" 选项卡上的 "**转换公式" 条目**选项相同的功能。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TransitionFormEntry">
      <MemberSignature Language="C#" Value="public bool TransitionFormEntry { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TransitionFormEntry" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.TransitionFormEntry" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示 Microsoft Office Excel 是否对工作表使用 Lotus 1-2-3 公式规则。</summary>
        <value>如果 Excel 对工作表使用 Lotus 1-2-3 公式规则，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlSheetType Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlSheetType Type" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlSheetType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取工作表类型。</summary>
        <value><see cref="T:Microsoft.Office.Interop.Excel.XlSheetType" /> 值之一。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Type%2A>属性来显示当前工作表是工作表、对话框表还是消息框中的图表。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#40](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#40)]
 [!code-vb[Trin_ExcelWorkSheet#40](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#40)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unprotect">
      <MemberSignature Language="C#" Value="public void Unprotect (object password);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Unprotect(object password) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.Unprotect(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="password" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="password">用于取消保护工作表的密码，区分大小写。 如果工作表未使用密码保护，则忽略此参数。 如果对有密码保护的工作表忽略此参数，则将提示您输入密码。</param>
        <summary>移除对工作表的保护。 此方法在工作表不受保护时无效。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果忘记密码，则无法取消对工作表的保护。 最好将密码及其对应文档名的列表保存在安全的位置。  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例确定当前工作表的单元格内容是否受到保护。 如果单元格内容受保护, 则该示例将提示用户使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Unprotect%2A>方法取消对单元格内容的保护。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#115](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#115)]
 [!code-vb[Trin_ExcelWorkSheet#115](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#115)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UsedRange">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range UsedRange { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range UsedRange" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.UsedRange" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 对象，该对象表示在任何时候都包含值的所有单元格。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 对象，表示在任何时候都包含值的所有单元格。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用的范围包含曾经使用过的任何单元。 例如, 如果单元格**A1**包含一个值, 然后删除该值, 则会将单元格**a1**视为已使用。 在这种情况下<xref:Microsoft.Office.Tools.Excel.WorksheetBase.UsedRange%2A> , 属性将返回包含单元格**A1**的范围。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.UsedRange%2A>属性来选择工作表上使用的单元格的范围。 该示例首先将当前工作表上 A1 到 C3 的单元格范围设置为值23。 如果工作表可见, 则该示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.UsedRange%2A>属性<xref:Microsoft.Office.Interop.Excel.Range?displayProperty=fullName>选择已使用单元格的。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#41](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#41)]
 [!code-vb[Trin_ExcelWorkSheet#41](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#41)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Visible">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlSheetVisibility Visible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlSheetVisibility Visible" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.Visible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlSheetVisibility</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个 <see cref="T:Microsoft.Office.Interop.Excel.XlSheetVisibility" /> 值，该值确定该对象是否可见。</summary>
        <value><see cref="T:Microsoft.Office.Interop.Excel.XlSheetVisibility" /> 值之一。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.Visible%2A>属性来帮助选择工作表上已使用单元格的范围。 该示例首先将当前工作表上 A1 到 C3 的单元格范围设置为值23。 如果属性指示工作表可见, 则该示例<xref:Microsoft.Office.Tools.Excel.WorksheetBase.UsedRange%2A>使用属性选择<xref:Microsoft.Office.Interop.Excel.Range?displayProperty=fullName>已使用单元格的。 <xref:Microsoft.Office.Tools.Excel.WorksheetBase.Visible%2A>  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#41](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#41)]
 [!code-vb[Trin_ExcelWorkSheet#41](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#41)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VPageBreaks">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.VPageBreaks VPageBreaks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.VPageBreaks VPageBreaks" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.WorksheetBase.VPageBreaks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.VPageBreaks</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.VPageBreaks" /> 集合，该集合表示表上的垂直分页符。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.VPageBreaks" /> 集合，表示表上的垂直分页符。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.VPageBreaks%2A>属性在单元格 C5 处添加垂直分页符。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#14](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#14)]
 [!code-vb[Trin_ExcelWorkSheet#14](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDataQuery">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range XmlDataQuery (string xPath, object selectionNamespaces, object map);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Office.Interop.Excel.Range XmlDataQuery(string xPath, object selectionNamespaces, object map) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.XmlDataQuery(System.String,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xPath" Type="System.String" />
        <Parameter Name="selectionNamespaces" Type="System.Object" />
        <Parameter Name="map" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="xPath">要查询的 XPath。</param>
        <param name="selectionNamespaces">一个以空格分隔的字符串，其中包含在 XPath 参数中引用的命名空间。 如果无法解析指定的命名空间之一，则产生运行时错误。</param>
        <param name="map">一个 <see cref="T:Microsoft.Office.Interop.Excel.XmlMap" />。 如果要在特定映射中查询 XPath，请指定 XML 映射。</param>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 对象，该对象表示映射到特定 XPath 的单元格。 如果指定的 XPath 未映射到工作表，或者如果映射的范围为空，则获取 <see langword="null" />。</summary>
        <returns>一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 对象，表示映射到特定 XPath 的单元格；如果指定的 XPath 未映射到工作表，或者如果映射的范围为空，则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 XML 功能 (保存为 XML 电子表格格式的文件除外) 仅在 Microsoft Office Professional Edition 2003 和 Microsoft Office Excel 2003 中提供。  
  
 如果 XPath 存在于 XML 列表中的某一列内, <xref:Microsoft.Office.Interop.Excel.Range>则返回的对象不包含标题行或插入行。  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.XmlDataQuery%2A>方法<xref:Microsoft.Office.Interop.Excel.Range>获取映射到特定 XPath 的单元格的。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#116](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#116)]
 [!code-vb[Trin_ExcelWorkSheet#116](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#116)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlMapQuery">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range XmlMapQuery (string xPath, object selectionNamespaces, object map);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Office.Interop.Excel.Range XmlMapQuery(string xPath, object selectionNamespaces, object map) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.WorksheetBase.XmlMapQuery(System.String,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xPath" Type="System.String" />
        <Parameter Name="selectionNamespaces" Type="System.Object" />
        <Parameter Name="map" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="xPath">要查询的 XPath。</param>
        <param name="selectionNamespaces">一个以空格分隔的字符串，其中包含在 XPath 参数中引用的命名空间。 如果无法解析指定的命名空间之一，则产生运行时错误。</param>
        <param name="map">一个 <see cref="T:Microsoft.Office.Interop.Excel.XmlMap" />。 如果要在特定映射中查询 XPath，请指定 XML 映射。</param>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 对象，该对象表示映射到特定 XPath 的单元格。 如果指定的 XPath 未映射到工作表，则获取 <see langword="null" />。</summary>
        <returns>一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 对象，表示映射到特定 XPath 的单元格；如果指定的 XPath 未映射到工作表，则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 XML 功能 (保存为 XML 电子表格格式的文件除外) 仅在 Microsoft Office Professional Edition 2003 和 Microsoft Office Excel 2003 中提供。  
  
 与方法不同, 该<xref:Microsoft.Office.Tools.Excel.WorksheetBase.XmlMapQuery%2A>方法返回 XML 列表的整个列, 包括标题行和插入行。 <xref:Microsoft.Office.Tools.Excel.WorksheetBase.XmlDataQuery%2A>  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.WorksheetBase.XmlMapQuery%2A>方法<xref:Microsoft.Office.Interop.Excel.Range>获取映射到特定 XPath 的单元格的。  
  
 此示例适用于文档级自定义项。  
  
 [!code-csharp[Trin_ExcelWorkSheet#117](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/CS/Trin_ExcelWorkSheet.cs#117)]
 [!code-vb[Trin_ExcelWorkSheet#117](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWorkSheet/VB/Sheet1.vb#117)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
