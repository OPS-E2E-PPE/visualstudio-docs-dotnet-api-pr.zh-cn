<Type Name="XmlMappedRange" FullName="Microsoft.Office.Tools.Excel.XmlMappedRange">
  <Metadata><Meta Name="ms.openlocfilehash" Value="bae7fe9b15c92302e323afda2a0f6e5a6a5ad64d" /><Meta Name="ms.sourcegitcommit" Value="7439021cdeee6a9ef5d4640250701344f6cbba15" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="08/13/2019" /><Meta Name="ms.locfileid" Value="69004120" /></Metadata><TypeSignature Language="C#" Value="public interface XmlMappedRange : IDisposable, System.ComponentModel.IComponent, System.ComponentModel.ISupportInitialize, System.Windows.Forms.IBindableComponent" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract XmlMappedRange implements class System.ComponentModel.IComponent, class System.ComponentModel.ISupportInitialize, class System.IDisposable, class System.Windows.Forms.IBindableComponent" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Tools.Excel.XmlMappedRange" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.IComponent</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Forms.IBindableComponent</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("ac172e76-a2b5-4fcc-ae02-65ce23f50cb3")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件是在非重复架构元素映射到单元格上时创建的范围。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Tools.Excel.XmlMappedRange>控件仅支持绑定到单个数据字段 (简单数据绑定)。  
  
 非重复架构元素是属性等于1的`maxOccurs`元素。  
  
 [!INCLUDE[vsto_interface](~/includes/vsto-interface-md.md)]  
  
## <a name="usage"></a>用法  
 [!INCLUDE[vsto_net35mref](~/includes/vsto-net35mref-md.md)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="_PasteSpecial">
      <MemberSignature Language="C#" Value="public object _PasteSpecial (Microsoft.Office.Interop.Excel.XlPasteType Paste = Microsoft.Office.Interop.Excel.XlPasteType.xlPasteAll, Microsoft.Office.Interop.Excel.XlPasteSpecialOperation Operation = Microsoft.Office.Interop.Excel.XlPasteSpecialOperation.xlPasteSpecialOperationNone, object SkipBlanks, object Transpose);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object _PasteSpecial(valuetype Microsoft.Office.Interop.Excel.XlPasteType Paste, valuetype Microsoft.Office.Interop.Excel.XlPasteSpecialOperation Operation, object SkipBlanks, object Transpose) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange._PasteSpecial(Microsoft.Office.Interop.Excel.XlPasteType,Microsoft.Office.Interop.Excel.XlPasteSpecialOperation,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Paste" Type="Microsoft.Office.Interop.Excel.XlPasteType" />
        <Parameter Name="Operation" Type="Microsoft.Office.Interop.Excel.XlPasteSpecialOperation" />
        <Parameter Name="SkipBlanks" Type="System.Object" />
        <Parameter Name="Transpose" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Paste">To be added.</param>
        <param name="Operation">To be added.</param>
        <param name="SkipBlanks">To be added.</param>
        <param name="Transpose">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="_PrintOut">
      <MemberSignature Language="C#" Value="public object _PrintOut (object From, object To, object Copies, object Preview, object ActivePrinter, object PrintToFile, object Collate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object _PrintOut(object From, object To, object Copies, object Preview, object ActivePrinter, object PrintToFile, object Collate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange._PrintOut(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="From" Type="System.Object" />
        <Parameter Name="To" Type="System.Object" />
        <Parameter Name="Copies" Type="System.Object" />
        <Parameter Name="Preview" Type="System.Object" />
        <Parameter Name="ActivePrinter" Type="System.Object" />
        <Parameter Name="PrintToFile" Type="System.Object" />
        <Parameter Name="Collate" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="From">To be added.</param>
        <param name="To">To be added.</param>
        <param name="Copies">To be added.</param>
        <param name="Preview">To be added.</param>
        <param name="ActivePrinter">To be added.</param>
        <param name="PrintToFile">To be added.</param>
        <param name="Collate">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Activate">
      <MemberSignature Language="C#" Value="public object Activate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Activate() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.Activate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>激活单个单元格 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要选择单元范围, 请使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Select%2A>方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddComment">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Comment AddComment (object Text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Interop.Excel.Comment AddComment(object Text) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.AddComment(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Comment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Text" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Text">注释文本。</param>
        <summary>向 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件添加注释。</summary>
        <returns>添加到 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的注释。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.AddComment%2A>示例使用方法将注释添加到名为`CustomerLastNameCell`的<xref:Microsoft.Office.Tools.Excel.XmlMappedRange> , 然后使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Comment%2A>属性更改注释文本。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#9](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#9)]
 [!code-vb[Trin_ExcelXmlMappedRange#9](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddIndent">
      <MemberSignature Language="C#" Value="public object AddIndent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object AddIndent" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.AddIndent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示当 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件中的文本对齐方式设置为水平或垂直平均分布时，文本是否自动缩进。</summary>
        <value>如果在将 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件中的文本对齐方式设置为在水平或垂直方向均匀分布时文本会自动缩进，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要将文本对齐设置为相等分布, 可以在<xref:Microsoft.Office.Interop.Excel.Range.VerticalAlignment%2A> <xref:Microsoft.Office.Interop.Excel.Range.HorizontalAlignment%2A> <xref:Microsoft.Office.Interop.Excel.XlHAlign.xlHAlignDistributed> <xref:Microsoft.Office.Interop.Excel.Range.Orientation%2A>属性的<xref:Microsoft.Office.Interop.Excel.XlVAlign.xlVAlignDistributed>值为<xref:Microsoft.Office.Interop.Excel.XlOrientation.xlVertical>时将属性设置为, 并且可以将属性的值设置为<xref:Microsoft.Office.Interop.Excel.Range.Orientation%2A>属性为<xref:Microsoft.Office.Interop.Excel.XlOrientation.xlHorizontal>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Address">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Tools.Excel.XmlMappedRange_AddressType Address { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Tools.Excel.XmlMappedRange_AddressType Address" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.Address" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Tools.Excel.XmlMappedRange_AddressType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的范围引用。</summary>
        <value>一个字符串，以 R1C1 样式或 A1 样式表示法表示 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的范围引用。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Address%2A>属性应与以下参数一起使用。  
  
|参数|说明|  
|---------------|-----------------|  
|`RowAbsolute`|`true`若要将行作为绝对引用返回, 则为; 否则为。否则为`false`。 默认值为 `true`。|  
|`ColumnAbsolute`|`true`若要将列作为绝对引用返回, 则为; 否则为。否则为`false`。 默认值为 `true`。|  
|`ReferenceStyle`|<xref:Microsoft.Office.Interop.Excel.XlReferenceStyle> 值之一。|  
|`External`|`true`返回外部引用;`false`返回本地引用。 默认值为 `false`。|  
|`RelativeTo`|<xref:Microsoft.Office.Interop.Excel.Range>定义起始点的。 如果`RowAbsolute` 和`ColumnAbsolute`为 ,<xref:Microsoft.Office.Interop.Excel.XlReferenceStyle.xlR1C1>则必须包含相对引用的起始点。 `ReferenceStyle` `false`|  
  
 如果尝试在不指定<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Address%2A>任何参数的情况下<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Address%2A>使用, 将<xref:Microsoft.Office.Tools.Excel.XmlMappedRange_AddressType>获取一个对象, 该对象是 Visual Studio 基础结构中的 Office 开发工具的一部分, 不应在代码中直接使用。  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Address%2A>属性显示的范围位置。 <xref:Microsoft.Office.Tools.Excel.XmlMappedRange> 该`ReferenceStyle`示例使用`RowAbsolute` 、和`RelativeTo`参数的不同组合以四种不同格式显示范围位置。 `ColumnAbsolute` 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。 如果`CustomerLastNameCell`位于单元格 A2, 则示例将显示地址字符串 "$A $2"、"$A 2"、"R2C2" 和 "R [-1] C [-1]"。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#1](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#1)]
 [!code-vb[Trin_ExcelXmlMappedRange#1](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddressLocal">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Tools.Excel.XmlMappedRange_AddressLocalType AddressLocal { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Tools.Excel.XmlMappedRange_AddressLocalType AddressLocal" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.AddressLocal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Tools.Excel.XmlMappedRange_AddressLocalType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>以用户的语言获取 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的范围引用。</summary>
        <value>一个字符串，以用户的语言以及 R1C1 样式或 A1 样式表示法表示 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的范围引用。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.AddressLocal%2A>属性应与以下参数一起使用。  
  
|参数|说明|  
|---------------|-----------------|  
|`RowAbsolute`|`true`若要将行作为绝对引用返回, 则为; 否则为。否则为`false`。 默认值为 `true`。|  
|`ColumnAbsolute`|`true`若要将列作为绝对引用返回, 则为; 否则为。否则为`false`。 默认值为 `true`。|  
|`ReferenceStyle`|<xref:Microsoft.Office.Interop.Excel.XlReferenceStyle> 值之一。|  
|`External`|`true`返回外部引用;`false`返回本地引用。 默认值为 `false`。|  
|`RelativeTo`|<xref:Microsoft.Office.Interop.Excel.Range>定义起始点的。 如果`RowAbsolute` 和`ColumnAbsolute`为 ,<xref:Microsoft.Office.Interop.Excel.XlReferenceStyle.xlR1C1>则必须包含相对引用的起始点。 `ReferenceStyle` `false`|  
  
 如果尝试在不指定<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.AddressLocal%2A>任何参数的情况下<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.AddressLocal%2A>使用, 将<xref:Microsoft.Office.Tools.Excel.XmlMappedRange_AddressLocalType>获取一个对象, 该对象是 Visual Studio 基础结构中的 Office 开发工具的一部分, 不应在代码中直接使用。  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.AddressLocal%2A>属性显示的范围位置。 <xref:Microsoft.Office.Tools.Excel.XmlMappedRange> 该`ReferenceStyle`示例使用`RowAbsolute` 、和`RelativeTo`参数的不同组合以四种不同格式显示范围位置。 `ColumnAbsolute` 位置字符串将根据运行它的系统的语言进行本地化。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。 如果该示例在使用德语语言支持的系统上运行, `CustomerLastNameCell`并且位于单元格 A2, 则该示例将显示地址字符串 "$A $2"、"$A 2"、"Z2S2" 和 "Z [-1] S [-1]"。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#2](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#2)]
 [!code-vb[Trin_ExcelXmlMappedRange#2](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllocateChanges">
      <MemberSignature Language="C#" Value="public void AllocateChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AllocateChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.AllocateChanges" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>基于 OLAP 数据源为 XML 映射范围内的所有已编辑单元格执行写回操作。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.AllocateChanges%2A>方法将对 XML 映射范围内所做的所有更改执行 UPDATE CUBE 语句, 因为最后一个 "应用更改" 操作已提交。 如果在基于非 OLAP 数据源的范围内执行此方法, 则此方法将生成运行时错误。  
  
> [!NOTE]
>  此方法显示在面向的[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]Excel 2007 项目中的 IntelliSense 中。 但是, 此方法不能用于 Excel 2007 项目。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MissingMemberException">此属性用于 Excel 2007 项目。</exception>
      </Docs>
    </Member>
    <Member MemberName="AllowEdit">
      <MemberSignature Language="C#" Value="public bool AllowEdit { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowEdit" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.AllowEdit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示是否可以在受保护的工作表上编辑 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件。</summary>
        <value>如果可以在受保护的工作表上编辑 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Application">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Application Application { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Application Application" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.Application" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Application</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个表示 Microsoft Office Excel 应用程序的 <see cref="T:Microsoft.Office.Interop.Excel.Application" />。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.Application" />，表示 Excel 应用程序。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Application%2A>属性平铺所有打开的应用程序窗口。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#3](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#3)]
 [!code-vb[Trin_ExcelXmlMappedRange#3](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoComplete">
      <MemberSignature Language="C#" Value="public string AutoComplete (string String);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string AutoComplete(string String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.AutoComplete(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="String">要完成的字符串。</param>
        <summary>从列表中获取一个 AutoComplete 匹配。</summary>
        <returns>列表中的 AutoComplete 匹配项。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果没有匹配项, 或者列表中有多个项与要完成的字符串匹配, 则此方法返回一个空字符串。  
  
 即使禁用了自动完成功能, 此方法仍有效。  
  
   
  
## Examples  
 下面的代码示例向单元格 B1 中输入字符串 "Smith", 然后使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.AutoComplete%2A>方法查找字符串 "smi-s" 的自动完成匹配项。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。 如果`CustomerLastNameCell`是在单元 B2 中, 则会找到自动完成匹配项。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#100](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#100)]
 [!code-vb[Trin_ExcelXmlMappedRange#100](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#100)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoFilter">
      <MemberSignature Language="C#" Value="public object AutoFilter (object Field, object Criteria1, Microsoft.Office.Interop.Excel.XlAutoFilterOperator Operator = Microsoft.Office.Interop.Excel.XlAutoFilterOperator.xlAnd, object Criteria2, object VisibleDropDown);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object AutoFilter(object Field, object Criteria1, valuetype Microsoft.Office.Interop.Excel.XlAutoFilterOperator Operator, object Criteria2, object VisibleDropDown) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.AutoFilter(System.Object,System.Object,Microsoft.Office.Interop.Excel.XlAutoFilterOperator,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Field" Type="System.Object" />
        <Parameter Name="Criteria1" Type="System.Object" />
        <Parameter Name="Operator" Type="Microsoft.Office.Interop.Excel.XlAutoFilterOperator" />
        <Parameter Name="Criteria2" Type="System.Object" />
        <Parameter Name="VisibleDropDown" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Field">要使筛选器基于的字段的偏移量（从列表的左边算起；最左边的字段为字段 1（一））。</param>
        <param name="Criteria1">条件（一个字符串；例如“101”）。 使用“=”查找空白字段，或使用“&lt;&gt;”查找非空白字段。 如果省略此参数，则条件为 <see langword="All" />。 如果 <c>Operator</c> 为 <see cref="F:Microsoft.Office.Interop.Excel.XlAutoFilterOperator.xlTop10Items" />，则 <c>Criteria1</c> 指定项数（如“10”）。</param>
        <param name="Operator">可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlAutoFilterOperator" /> 常量之一： 
 <see cref="F:Microsoft.Office.Interop.Excel.XlAutoFilterOperator.xlAnd" /><see cref="F:Microsoft.Office.Interop.Excel.XlAutoFilterOperator.xlBottom10Items" /><see cref="F:Microsoft.Office.Interop.Excel.XlAutoFilterOperator.xlBottom10Percent" /><see cref="F:Microsoft.Office.Interop.Excel.XlAutoFilterOperator.xlOr" /><see cref="F:Microsoft.Office.Interop.Excel.XlAutoFilterOperator.xlTop10Items" /><see cref="F:Microsoft.Office.Interop.Excel.XlAutoFilterOperator.xlTop10Percent" />  
  
在 <c>Criteria1</c> 和 <c>Criteria2</c> 中使用 <see cref="F:Microsoft.Office.Interop.Excel.XlAutoFilterOperator.xlAnd" /> 和 <see cref="F:Microsoft.Office.Interop.Excel.XlAutoFilterOperator.xlOr" /> 来构造复合条件。</param>
        <param name="Criteria2">第二个条件（字符串）。 与 <c>Criteria1</c> 和 <c>Operator</c> 一起用于构造复合条件。</param>
        <param name="VisibleDropDown">如果对所筛选字段显示自动筛选下拉箭头，则为 <see langword="true" />；如果对所筛选字段隐藏自动筛选下拉箭头，则为 <see langword="false" />。 默认值为 <see langword="true" />。</param>
        <summary>使用“自动筛选”筛选列表。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果省略了所有参数, 则此方法只是切换<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>控件中 "自动筛选" 下拉箭头的显示。  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoOutline">
      <MemberSignature Language="C#" Value="public object AutoOutline ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object AutoOutline() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.AutoOutline" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>自动为 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件创建大纲。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Tools.Excel.XmlMappedRange>由于控件是单个单元, 因此 Microsoft Office Excel 将为整个工作表创建一个大纲。 新的轮廓将替换任何现有的轮廓。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeDoubleClick">
      <MemberSignature Language="C#" Value="event Microsoft.Office.Interop.Excel.DocEvents_BeforeDoubleClickEventHandler BeforeDoubleClick;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.DocEvents_BeforeDoubleClickEventHandler BeforeDoubleClick" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.XmlMappedRange.BeforeDoubleClick" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.DocEvents_BeforeDoubleClickEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在双击 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件时，但在默认的双击操作之前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码演示了<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.BeforeDoubleClick> <xref:Microsoft.Office.Tools.Excel.XmlMappedRange>在中取消双击操作的事件的处理程序。 事件处理程序<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>通知用户, 不允许双击, 然后将<xref:Microsoft.Office.Interop.Excel.DocEvents_BeforeDoubleClickEventHandler>事件处理程序的`Cancel`参数设置为`true` , 以便 Microsoft Office Excel 取消双击操作。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#200](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#200)]
 [!code-vb[Trin_ExcelXmlMappedRange#200](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#200)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeRightClick">
      <MemberSignature Language="C#" Value="event Microsoft.Office.Interop.Excel.DocEvents_BeforeRightClickEventHandler BeforeRightClick;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.DocEvents_BeforeRightClickEventHandler BeforeRightClick" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.XmlMappedRange.BeforeRightClick" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.DocEvents_BeforeRightClickEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在右击 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件时，但在默认的右击操作之前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码演示了<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.BeforeRightClick> <xref:Microsoft.Office.Tools.Excel.XmlMappedRange>在中取消右键单击操作的事件的处理程序。 事件处理程序<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>通知用户, 不允许右键单击, 然后将<xref:Microsoft.Office.Interop.Excel.DocEvents_BeforeRightClickEventHandler>事件处理程序的`Cancel`参数设置为`true` , 以便 Microsoft Office Excel 取消右键单击操作。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#201](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#201)]
 [!code-vb[Trin_ExcelXmlMappedRange#201](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#201)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingContextChanged">
      <MemberSignature Language="C#" Value="event EventHandler BindingContextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BindingContextChanged" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.XmlMappedRange.BindingContextChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BorderAround">
      <MemberSignature Language="C#" Value="public object BorderAround (object LineStyle, Microsoft.Office.Interop.Excel.XlBorderWeight Weight = Microsoft.Office.Interop.Excel.XlBorderWeight.xlThin, Microsoft.Office.Interop.Excel.XlColorIndex ColorIndex = Microsoft.Office.Interop.Excel.XlColorIndex.xlColorIndexAutomatic, object Color);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object BorderAround(object LineStyle, valuetype Microsoft.Office.Interop.Excel.XlBorderWeight Weight, valuetype Microsoft.Office.Interop.Excel.XlColorIndex ColorIndex, object Color) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.BorderAround(System.Object,Microsoft.Office.Interop.Excel.XlBorderWeight,Microsoft.Office.Interop.Excel.XlColorIndex,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="LineStyle" Type="System.Object" />
        <Parameter Name="Weight" Type="Microsoft.Office.Interop.Excel.XlBorderWeight" />
        <Parameter Name="ColorIndex" Type="Microsoft.Office.Interop.Excel.XlColorIndex" />
        <Parameter Name="Color" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="LineStyle">To be added.</param>
        <param name="Weight">To be added.</param>
        <param name="ColorIndex">To be added.</param>
        <param name="Color">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BorderAround2">
      <MemberSignature Language="C#" Value="public object BorderAround2 (object LineStyle, Microsoft.Office.Interop.Excel.XlBorderWeight Weight = Microsoft.Office.Interop.Excel.XlBorderWeight.xlThin, Microsoft.Office.Interop.Excel.XlColorIndex ColorIndex = Microsoft.Office.Interop.Excel.XlColorIndex.xlColorIndexAutomatic, object Color, object ThemeColor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object BorderAround2(object LineStyle, valuetype Microsoft.Office.Interop.Excel.XlBorderWeight Weight, valuetype Microsoft.Office.Interop.Excel.XlColorIndex ColorIndex, object Color, object ThemeColor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.BorderAround2(System.Object,Microsoft.Office.Interop.Excel.XlBorderWeight,Microsoft.Office.Interop.Excel.XlColorIndex,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="LineStyle" Type="System.Object" />
        <Parameter Name="Weight" Type="Microsoft.Office.Interop.Excel.XlBorderWeight" />
        <Parameter Name="ColorIndex" Type="Microsoft.Office.Interop.Excel.XlColorIndex" />
        <Parameter Name="Color" Type="System.Object" />
        <Parameter Name="ThemeColor" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="LineStyle">边框的线型。 可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlLineStyle" /> 值之一： 
 <see cref="F:Microsoft.Office.Interop.Excel.XlLineStyle.xlContinuous" /><see cref="F:Microsoft.Office.Interop.Excel.XlLineStyle.xlDash" /><see cref="F:Microsoft.Office.Interop.Excel.XlLineStyle.xlDashDot" /><see cref="F:Microsoft.Office.Interop.Excel.XlLineStyle.xlDashDotDot" /><see cref="F:Microsoft.Office.Interop.Excel.XlLineStyle.xlDot" /><see cref="F:Microsoft.Office.Interop.Excel.XlLineStyle.xlDouble" /><see cref="F:Microsoft.Office.Interop.Excel.XlLineStyle.xlSlantDashDot" /><see cref="F:Microsoft.Office.Interop.Excel.XlLineStyle.xlLineStyleNone" /></param>
        <param name="Weight">边框的粗细。 可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlBorderWeight" /> 常量之一： 
 <see cref="F:Microsoft.Office.Interop.Excel.XlBorderWeight.xlHairline" /><see cref="F:Microsoft.Office.Interop.Excel.XlBorderWeight.xlMedium" /><see cref="F:Microsoft.Office.Interop.Excel.XlBorderWeight.xlThick" /><see cref="F:Microsoft.Office.Interop.Excel.XlBorderWeight.xlThin" /></param>
        <param name="ColorIndex">边框颜色（作为访问当前调色板的索引或作为 <see cref="T:Microsoft.Office.Interop.Excel.XlColorIndex" /> 常数）。 可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlColorIndex" /> 常量之一： 
 <see cref="F:Microsoft.Office.Interop.Excel.XlColorIndex.xlColorIndexAutomatic" /><see cref="F:Microsoft.Office.Interop.Excel.XlColorIndex.xlColorIndexNone" /></param>
        <param name="Color">边框颜色，采用 RGB 值的形式。</param>
        <param name="ThemeColor">主题颜色（作为访问当前颜色主题的索引或作为 <see cref="T:Microsoft.Office.Interop.Excel.XlThemeColor" /> 值）。</param>
        <summary>向 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件添加一个边框，并设置新边框的 <see cref="P:Microsoft.Office.Interop.Excel.Border.Color" />、<see cref="P:Microsoft.Office.Interop.Excel.Border.LineStyle" /> 和 <see cref="P:Microsoft.Office.Interop.Excel.Border.Weight" /> 属性。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 必须指定`ColorIndex`或`Color`, 但不能同时指定两者。  
  
 可以指定`LineStyle`或`Weight`, 但不能同时指定两者。 如果未指定任何一个参数, Microsoft Office Excel 将使用默认线条样式和权重。  
  
 此方法对整个范围进行分级, 而不会填充它。 若要设置所有单元格的边框, <xref:Microsoft.Office.Interop.Excel.Borders.Color%2A>必须设置<xref:Microsoft.Office.Interop.Excel.Borders>集合的、 <xref:Microsoft.Office.Interop.Excel.Borders.LineStyle%2A>和<xref:Microsoft.Office.Interop.Excel.Borders.Weight%2A>属性。 若要清除边框, 必须将范围中<xref:Microsoft.Office.Interop.Excel.Borders.LineStyle%2A>所有单元<xref:Microsoft.Office.Interop.Excel.XlLineStyle.xlLineStyleNone>格的属性都设置为。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Borders">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Borders Borders { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Borders Borders" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.Borders" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Borders</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Borders" /> 集合，该集合表示 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的边框。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.Borders" /> 集合，表示 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的边框。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Borders%2A>使用属性为的边框<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>绘制双线<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Interior%2A> , 并使用属性来为<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>绿色的内部着色。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#4](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#4)]
 [!code-vb[Trin_ExcelXmlMappedRange#4](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Calculate">
      <MemberSignature Language="C#" Value="public object Calculate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Calculate() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.Calculate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>计算 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 的值。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Calculate%2A>使用方法来计算上`EmployeeSeniorityCell` <xref:Microsoft.Office.Tools.Excel.XmlMappedRange> `Sheet1`控件中公式的值。 若要运行此代码示例, 您必须将 XML 映射添加到基于员工 XML 架构的工作簿, 并将此 XML 映射中的架构元素映射到工作表上的单元。 例如, 可以使用演练中[的架构:通过将类型为 integer 的资历](/visualstudio/vsto/walkthrough-binding-content-controls-to-custom-xml-parts)元素添加到 employee 元素, 将内容控件绑定到自定义 XML 部件并进行修改。  
  
> [!NOTE]
>  通常, 从 XML 文件<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>填充控件。 为了简单起见, 此示例对控件的值进行硬编码。  
  
 [!code-csharp[Trin_ExcelWorkbook_Additional#21](~/snippets/csharp/VS_Snippets_OfficeSP/trin_excelworkbook_additional/cs/ThisWorkbook.cs#21)]
 [!code-vb[Trin_ExcelWorkbook_Additional#21](~/snippets/visualbasic/VS_Snippets_OfficeSP/trin_excelworkbook_additional/vb/ThisWorkbook.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CalculateRowMajorOrder">
      <MemberSignature Language="C#" Value="public object CalculateRowMajorOrder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object CalculateRowMajorOrder() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.CalculateRowMajorOrder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在某个范围内，按行优先的顺序计算每项的值。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Tools.Excel.XmlMappedRange.CalculateRowMajorOrder%2A>方法按单元格从左上角到右下角的行优先顺序计算指定范围的单元格。 此过程与 Excel 2000 和早期版本用于计算范围的过程相同。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cells">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range Cells { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range Cells" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.Cells" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个表示 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 控件中单元格的 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" />。</summary>
        <value>一个表示 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 控件中单元格的 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Cells%2A>属性显示的单元格位置。 <xref:Microsoft.Office.Tools.Excel.XmlMappedRange> 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#5](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#5)]
 [!code-vb[Trin_ExcelXmlMappedRange#5](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="event Microsoft.Office.Interop.Excel.DocEvents_ChangeEventHandler Change;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.DocEvents_ChangeEventHandler Change" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.XmlMappedRange.Change" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.DocEvents_ChangeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件中发生更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果编程修改或用户交互<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>更改了控件, 则会引发此事件。 当在重新计算期间控件更改<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>时, 不会发生此事件。  
  
   
  
## Examples  
 下面的代码演示一个<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Change>事件的处理程序, 该事件显示已更改的的地址。 <xref:Microsoft.Office.Tools.Excel.XmlMappedRange> 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#202](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#202)]
 [!code-vb[Trin_ExcelXmlMappedRange#202](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#202)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Characters">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Tools.Excel.XmlMappedRange_CharactersType Characters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Tools.Excel.XmlMappedRange_CharactersType Characters" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.Characters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Tools.Excel.XmlMappedRange_CharactersType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Characters" /> 对象，该对象表示 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件文本中某一范围的字符。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.Characters" /> 对象，表示 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件文本中某一范围的字符。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Characters%2A>属性应与以下参数一起使用。  
  
|参数|说明|  
|---------------|-----------------|  
|`Start`|要返回的第一个字符。 如果此参数为1或省略, 则此属性将返回以第一个字符开头的一系列字符。|  
|`Length`|要返回的字符数。 如果省略此参数, 则此属性将返回字符串的剩余部分 (字符后面的`Start`所有内容)。|  
  
 如果尝试在不指定<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Characters%2A>任何参数的情况下<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Characters%2A>使用, 将<xref:Microsoft.Office.Tools.Excel.XmlMappedRange_CharactersType>获取一个对象, 该对象是 Visual Studio 基础结构中的 Office 开发工具的一部分, 不应在代码中直接使用。  
  
 您可以使用<xref:Microsoft.Office.Interop.Excel.Characters?displayProperty=fullName>对象来设置文本字符串中的字符格式。  
  
 <xref:Microsoft.Office.Interop.Excel.Characters?displayProperty=fullName>对象不是集合。  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Characters%2A>属性将粗体格式应用于文本<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>的第一个字符。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#6](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#6)]
 [!code-vb[Trin_ExcelXmlMappedRange#6](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckSpelling">
      <MemberSignature Language="C#" Value="public object CheckSpelling (object CustomDictionary, object IgnoreUppercase, object AlwaysSuggest, object SpellLang);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object CheckSpelling(object CustomDictionary, object IgnoreUppercase, object AlwaysSuggest, object SpellLang) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.CheckSpelling(System.Object,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CustomDictionary" Type="System.Object" />
        <Parameter Name="IgnoreUppercase" Type="System.Object" />
        <Parameter Name="AlwaysSuggest" Type="System.Object" />
        <Parameter Name="SpellLang" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="CustomDictionary">指示在主字典中找不到该单词时要检查的自定义字典的文件名。 如果省略此参数，则使用当前指定的字典。</param>
        <param name="IgnoreUppercase">如果让 Microsoft Office Excel 忽略全大写的单词，则为 <see langword="true" />；如果让 Excel 检查全大写的单词，则为 <see langword="false" />。 如果省略此参数，则使用当前设置。</param>
        <param name="AlwaysSuggest">如果让 Excel 在找到错误拼写时显示建议的替换拼写的列表，则为 <see langword="true" />；如果让 Excel 在您输入正确的拼写时暂停，则为 <see langword="false" />。 如果省略此参数，则使用当前设置。</param>
        <param name="SpellLang">所使用的字典的语言。 可以为 <see cref="T:Microsoft.Office.Core.MsoLanguageID" /> 属性使用的 <see cref="P:Microsoft.Office.Core.LanguageSettings.LanguageID(Microsoft.Office.Core.MsoAppLanguageID)" /> 值之一。</param>
        <summary>检查 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件中文本的拼写。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法没有返回值;Excel 将显示 "**拼写检查**" 对话框。  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.CheckSpelling%2A>方法检查<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>中文本的拼写。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#103](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#103)]
 [!code-vb[Trin_ExcelXmlMappedRange#103](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#103)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public object Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.Clear" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>清除整个 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearComments">
      <MemberSignature Language="C#" Value="public void ClearComments ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ClearComments() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.ClearComments" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件中清除所有单元格注释。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearContents">
      <MemberSignature Language="C#" Value="public object ClearContents ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ClearContents() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.ClearContents" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件中清除公式。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearFormats">
      <MemberSignature Language="C#" Value="public object ClearFormats ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ClearFormats() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.ClearFormats" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>清除 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的格式。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.BorderAround%2A>方法在<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>周围应用粗边框。 然后, 该示例提示用户使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.ClearFormats%2A>方法清除边框。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#102](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#102)]
 [!code-vb[Trin_ExcelXmlMappedRange#102](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#102)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearHyperlinks">
      <MemberSignature Language="C#" Value="public void ClearHyperlinks ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ClearHyperlinks() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.ClearHyperlinks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从指定范围移除所有超链接。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
   <xref:Microsoft.Office.Tools.Excel.XmlMappedRange.ClearHyperlinks%2A>对指定范围调用方法等效于在 Excel 中的 "**主页**" 选项卡上的 "编辑" 组中, 使用 "清除" 下拉列表中的 "**清除超链接**" 命令。 仅删除超链接;所有其他单元格内容 (如文本和格式) 将不受影响。  
  
> [!NOTE]
>  此属性显示在面向的[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]Excel 2007 项目中的 IntelliSense 中。 但是, 不能在 Excel 2007 项目中使用此属性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearNotes">
      <MemberSignature Language="C#" Value="public object ClearNotes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ClearNotes() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.ClearNotes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件中清除说明和声音说明。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.NoteText%2A>方法将注释添加<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>到, 然后提示用户通过使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.ClearNotes%2A>方法来删除便笺。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#119](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#119)]
 [!code-vb[Trin_ExcelXmlMappedRange#119](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#119)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearOutline">
      <MemberSignature Language="C#" Value="public object ClearOutline ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ClearOutline() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.ClearOutline" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>清除 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的大纲。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Column">
      <MemberSignature Language="C#" Value="public int Column { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Column" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.Column" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件中的列号。</summary>
        <value><see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件中的列号。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 因为仅<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>对应于一个单元格, 所以此属性总是返回1。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Column%2A>和<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Row%2A>属性来显示的列号<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>和行号。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#7](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#7)]
 [!code-vb[Trin_ExcelXmlMappedRange#7](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnDifferences">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range ColumnDifferences (object Comparison);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Interop.Excel.Range ColumnDifferences(object Comparison) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.ColumnDifferences(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Comparison" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Comparison">一个要与指定的范围进行比较的单元格。</param>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，它表示每一列中其内容与比较单元格不同的所有单元格。</summary>
        <returns>一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，表示内容与每一列中的比较单元格不同的所有单元格。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Columns">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range Columns { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range Columns" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.Columns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnWidth">
      <MemberSignature Language="C#" Value="public object ColumnWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ColumnWidth" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.ColumnWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件中的列宽。</summary>
        <value><see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件中的列宽。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 列宽的单位等于普通样式中一个字符的宽度。 对于比例字体, 使用字符 0 (零) 的宽度。  
  
 <xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Width%2A>使用属性返回列的宽度 (以磅为单位)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.ColumnWidth%2A>和<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.RowHeight%2A>属性来显示的<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>宽度和高度。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#8](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#8)]
 [!code-vb[Trin_ExcelXmlMappedRange#8](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Comment">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Comment Comment { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Comment Comment" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.Comment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Comment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Comment" />，它表示与 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的左上角中的单元格相关联的注释。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.Comment" />，表示与 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的左上角中的单元格相关联的注释。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.AddComment%2A>方法将注释添加<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>到<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Comment%2A> , 然后使用属性更改注释文本。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#9](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#9)]
 [!code-vb[Trin_ExcelXmlMappedRange#9](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Consolidate">
      <MemberSignature Language="C#" Value="public object Consolidate (object Sources, object Function, object TopRow, object LeftColumn, object CreateLinks);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Consolidate(object Sources, object Function, object TopRow, object LeftColumn, object CreateLinks) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.Consolidate(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Sources" Type="System.Object" />
        <Parameter Name="Function" Type="System.Object" />
        <Parameter Name="TopRow" Type="System.Object" />
        <Parameter Name="LeftColumn" Type="System.Object" />
        <Parameter Name="CreateLinks" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Sources">合并源（作为以 R1C1 样式表示法表示的文本引用字符串的数组）。 引用必须包含要合并的工作表的完整路径。</param>
        <param name="Function">可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlConsolidationFunction" /> 常量之一： 
 <see cref="F:Microsoft.Office.Interop.Excel.XlConsolidationFunction.xlAverage" /><see cref="F:Microsoft.Office.Interop.Excel.XlConsolidationFunction.xlCount" /><see cref="F:Microsoft.Office.Interop.Excel.XlConsolidationFunction.xlCountNums" /><see cref="F:Microsoft.Office.Interop.Excel.XlConsolidationFunction.xlMax" /><see cref="F:Microsoft.Office.Interop.Excel.XlConsolidationFunction.xlMin" /><see cref="F:Microsoft.Office.Interop.Excel.XlConsolidationFunction.xlProduct" /><see cref="F:Microsoft.Office.Interop.Excel.XlConsolidationFunction.xlStDev" /><see cref="F:Microsoft.Office.Interop.Excel.XlConsolidationFunction.xlStDevP" /><see cref="F:Microsoft.Office.Interop.Excel.XlConsolidationFunction.xlSum" /><see cref="F:Microsoft.Office.Interop.Excel.XlConsolidationFunction.xlVar" /><see cref="F:Microsoft.Office.Interop.Excel.XlConsolidationFunction.xlVarP" /></param>
        <param name="TopRow">如果基于合并范围内首行中的列标题合并数据，则为 <see langword="true" />；如果按位置合并数据，则为 <see langword="false" />。 默认值为 <see langword="false" />。</param>
        <param name="LeftColumn">如果基于合并范围内左列中的行标题合并数据，则为 <see langword="true" />；如果按位置合并数据，则为 <see langword="false" />。 默认值为 <see langword="false" />。</param>
        <param name="CreateLinks">如果让合并功能使用工作表链接，则为 <see langword="true" />；如果让合并功能复制数据，则为 <see langword="false" />。 默认值为 <see langword="false" />。</param>
        <summary>将多个工作表中的多个范围的数据合并到 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件中。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Consolidate%2A>的代码示例使用方法将`Sheet2`和上`Sheet3`单元格 a1 的值合并到<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>上`Sheet1`的中。 该示例通过将值相加来合并值。 此代码示例假定`Sheet1`包含一个<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>名为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#105](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#105)]
 [!code-vb[Trin_ExcelXmlMappedRange#105](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#105)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Container">
      <MemberSignature Language="C#" Value="public System.ComponentModel.IContainer Container { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.IContainer Container" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.Container" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.IContainer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public object Copy (object Destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Copy(object Destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.Copy(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Destination" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Destination">指定要将 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件复制到其中的新范围。 如果省略此参数，则 Microsoft Office Excel 将该范围复制到剪贴板。</param>
        <summary>将 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的内容复制到指定的范围或剪贴板。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Copy%2A>代码示例使用方法将<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>复制到剪贴板<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.PasteSpecial%2A> , 然后使用方法将该范围复制到不同<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>的。 此代码示例假定当前工作表包含两个<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>名为`CustomerFirstNameCell`和`CustomerLastNameCell`的控件。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#106](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#106)]
 [!code-vb[Trin_ExcelXmlMappedRange#106](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#106)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyFromRecordset">
      <MemberSignature Language="C#" Value="public int CopyFromRecordset (object Data, object MaxRows, object MaxColumns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CopyFromRecordset(object Data, object MaxRows, object MaxColumns) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.CopyFromRecordset(System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Data" Type="System.Object" />
        <Parameter Name="MaxRows" Type="System.Object" />
        <Parameter Name="MaxColumns" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Data">要复制到范围中的记录集。</param>
        <param name="MaxRows">要复制到工作表上的最大记录数。 如果省略此参数，则复制记录集对象中的所有记录。</param>
        <param name="MaxColumns">要复制到工作表上的最大字段数。 如果省略此参数，则复制记录集对象中的所有字段。</param>
        <summary>将 ADO 或 DAO 记录集的内容复制到工作表（从 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件开始）。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果记录集包含其中包含 OLE 对象的字段, 则此方法将失败。  
  
 复制从记录集的当前行开始。 完成复制后, recordset 对象的 EOF 属性为`true`。  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyPicture">
      <MemberSignature Language="C#" Value="public object CopyPicture (Microsoft.Office.Interop.Excel.XlPictureAppearance Appearance = Microsoft.Office.Interop.Excel.XlPictureAppearance.xlScreen, Microsoft.Office.Interop.Excel.XlCopyPictureFormat Format = Microsoft.Office.Interop.Excel.XlCopyPictureFormat.xlPicture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object CopyPicture(valuetype Microsoft.Office.Interop.Excel.XlPictureAppearance Appearance, valuetype Microsoft.Office.Interop.Excel.XlCopyPictureFormat Format) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.CopyPicture(Microsoft.Office.Interop.Excel.XlPictureAppearance,Microsoft.Office.Interop.Excel.XlCopyPictureFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Appearance" Type="Microsoft.Office.Interop.Excel.XlPictureAppearance" />
        <Parameter Name="Format" Type="Microsoft.Office.Interop.Excel.XlCopyPictureFormat" />
      </Parameters>
      <Docs>
        <param name="Appearance">指定复制图片的方法。  
  
可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlPictureAppearance" /> 常量之一： 
 <see cref="F:Microsoft.Office.Interop.Excel.XlPictureAppearance.xlPrinter" /><see cref="F:Microsoft.Office.Interop.Excel.XlPictureAppearance.xlScreen" /></param>
        <param name="Format">该图片的格式。  
  
可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlCopyPictureFormat" /> 常量之一： 
 <see cref="F:Microsoft.Office.Interop.Excel.XlCopyPictureFormat.xlBitmap" /><see cref="F:Microsoft.Office.Interop.Excel.XlCopyPictureFormat.xlPicture" /></param>
        <summary>将 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件作为图片复制到剪贴板。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.CopyPicture%2A>方法将剪贴板中的<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>复制为位图。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#108](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#108)]
 [!code-vb[Trin_ExcelXmlMappedRange#108](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#108)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件中的对象数。</summary>
        <value><see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件中的对象数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Count%2A>属性显示<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>中的对象数。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#10](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#10)]
 [!code-vb[Trin_ExcelXmlMappedRange#10](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CountLarge">
      <MemberSignature Language="C#" Value="public object CountLarge { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object CountLarge" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.CountLarge" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值表示在某一范围内最大值出现的次数。</summary>
        <value>一个表示在某一范围内最大值出现次数的值。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateNames">
      <MemberSignature Language="C#" Value="public object CreateNames (object Top, object Left, object Bottom, object Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object CreateNames(object Top, object Left, object Bottom, object Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.CreateNames(System.Object,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Top" Type="System.Object" />
        <Parameter Name="Left" Type="System.Object" />
        <Parameter Name="Bottom" Type="System.Object" />
        <Parameter Name="Right" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Top">如果通过使用首行中的标签来创建名称，则为 <see langword="true" />。 默认值为 <see langword="false" />。</param>
        <param name="Left">如果通过使用左列中的标签来创建名称，则为 <see langword="true" />。 默认值为 <see langword="false" />。</param>
        <param name="Bottom">如果通过使用底端行中的标签来创建名称，则为 <see langword="true" />。 默认值为 <see langword="false" />。</param>
        <param name="Right">如果通过使用右列中的标签来创建名称，则为 <see langword="true" />。 默认值为 <see langword="false" />。</param>
        <summary>根据工作表中的文本标签在 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件中创建名称。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Top`如果未指定、 `Left`、 `Bottom`或`Right`中的一个, 则 Microsoft Office Excel 将推测文本标签的位置。  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePublisher">
      <MemberSignature Language="C#" Value="public object CreatePublisher (object Edition, Microsoft.Office.Interop.Excel.XlPictureAppearance Appearance = Microsoft.Office.Interop.Excel.XlPictureAppearance.xlScreen, object ContainsPICT, object ContainsBIFF, object ContainsRTF, object ContainsVALU);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object CreatePublisher(object Edition, valuetype Microsoft.Office.Interop.Excel.XlPictureAppearance Appearance, object ContainsPICT, object ContainsBIFF, object ContainsRTF, object ContainsVALU) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.CreatePublisher(System.Object,Microsoft.Office.Interop.Excel.XlPictureAppearance,System.Object,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Edition" Type="System.Object" />
        <Parameter Name="Appearance" Type="Microsoft.Office.Interop.Excel.XlPictureAppearance" />
        <Parameter Name="ContainsPICT" Type="System.Object" />
        <Parameter Name="ContainsBIFF" Type="System.Object" />
        <Parameter Name="ContainsRTF" Type="System.Object" />
        <Parameter Name="ContainsVALU" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Edition">To be added.</param>
        <param name="Appearance">To be added.</param>
        <param name="ContainsPICT">To be added.</param>
        <param name="ContainsBIFF">To be added.</param>
        <param name="ContainsRTF">To be added.</param>
        <param name="ContainsVALU">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Creator">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlCreator Creator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlCreator Creator" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.Creator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlCreator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示在其中创建此 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的应用程序。</summary>
        <value><see cref="T:Microsoft.Office.Interop.Excel.XlCreator" /> 值之一。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 由于控件<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>是在 Microsoft Office Excel 中创建的, 因此此属性返回的字符串 x 等效于十六进制数5843454c 等效。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Creator%2A>属性来确定<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>是否在 Microsoft Office Excel 中创建了。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#11](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#11)]
 [!code-vb[Trin_ExcelXmlMappedRange#11](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentArray">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range CurrentArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range CurrentArray" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.CurrentArray" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>如果 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 是某个数组的一部分，则获取一个表示整个数组的 <see cref="T:Microsoft.Office.Interop.Excel.Range" />。</summary>
        <value>一个表示整个数组的 <see cref="T:Microsoft.Office.Interop.Excel.Range" />（如果 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 是某个数组的一部分）。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentRegion">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range CurrentRegion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range CurrentRegion" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.CurrentRegion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个表示当前区域的 <see cref="T:Microsoft.Office.Interop.Excel.Range" />。</summary>
        <value>一个表示当前区域的 <see cref="T:Microsoft.Office.Interop.Excel.Range" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当前区域是由空白行和空白列的任意组合限定的范围。  
  
 此属性不能用于受保护的工作表。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.CurrentRegion%2A>属性将的内部区域<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>的颜色设置为绿色。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#13](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#13)]
 [!code-vb[Trin_ExcelXmlMappedRange#13](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cut">
      <MemberSignature Language="C#" Value="public object Cut (object Destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Cut(object Destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.Cut(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Destination" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Destination">应将对象粘贴到的范围。 如果省略此参数，则将对象剪切到剪贴板。</param>
        <summary>将 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的内容剪切到剪贴板，或者将它复制到指定的目标。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Cut%2A>方法将<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>剪切到剪贴板。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#110](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#110)]
 [!code-vb[Trin_ExcelXmlMappedRange#110](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#110)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataSeries">
      <MemberSignature Language="C#" Value="public object DataSeries (object Rowcol, Microsoft.Office.Interop.Excel.XlDataSeriesType Type = Microsoft.Office.Interop.Excel.XlDataSeriesType.xlDataSeriesLinear, Microsoft.Office.Interop.Excel.XlDataSeriesDate Date = Microsoft.Office.Interop.Excel.XlDataSeriesDate.xlDay, object Step, object Stop, object Trend);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object DataSeries(object Rowcol, valuetype Microsoft.Office.Interop.Excel.XlDataSeriesType Type, valuetype Microsoft.Office.Interop.Excel.XlDataSeriesDate Date, object Step, object Stop, object Trend) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.DataSeries(System.Object,Microsoft.Office.Interop.Excel.XlDataSeriesType,Microsoft.Office.Interop.Excel.XlDataSeriesDate,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rowcol" Type="System.Object" />
        <Parameter Name="Type" Type="Microsoft.Office.Interop.Excel.XlDataSeriesType" />
        <Parameter Name="Date" Type="Microsoft.Office.Interop.Excel.XlDataSeriesDate" />
        <Parameter Name="Step" Type="System.Object" />
        <Parameter Name="Stop" Type="System.Object" />
        <Parameter Name="Trend" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Rowcol">可以为 <see cref="F:Microsoft.Office.Interop.Excel.XlRowCol.xlRows" /> 或 <see cref="F:Microsoft.Office.Interop.Excel.XlRowCol.xlColumns" /> 常数以将数据系列分别输入行或列中。 如果省略此参数，则使用该范围的大小和形状。</param>
        <param name="Type">可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlDataSeriesType" /> 常量之一： 
 <see cref="F:Microsoft.Office.Interop.Excel.XlDataSeriesType.xlAutoFill" /><see cref="F:Microsoft.Office.Interop.Excel.XlDataSeriesType.xlDataSeriesLinear" /><see cref="F:Microsoft.Office.Interop.Excel.XlDataSeriesType.xlChronological" /><see cref="F:Microsoft.Office.Interop.Excel.XlDataSeriesType.xlGrowth" /></param>
        <param name="Date">如果 <c>Type</c> 参数为 <see cref="F:Microsoft.Office.Interop.Excel.XlDataSeriesType.xlChronological" />，则 <c>Date</c> 参数指示步长日期单位。  
  
可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlDataSeriesDate" /> 常量之一： 
 <see cref="F:Microsoft.Office.Interop.Excel.XlDataSeriesDate.xlDay" /><see cref="F:Microsoft.Office.Interop.Excel.XlDataSeriesDate.xlWeekday" /><see cref="F:Microsoft.Office.Interop.Excel.XlDataSeriesDate.xlMonth" /><see cref="F:Microsoft.Office.Interop.Excel.XlDataSeriesDate.xlYear" /></param>
        <param name="Step">该系列的步长值。 默认值为 1（一）。</param>
        <param name="Stop">该系列的终止值。 如果省略此参数，则 Microsoft Office Excel 会填充到该范围的末尾。</param>
        <param name="Trend">如果创建等差序列或等比序列，则为 <see langword="true" />；如果创建标准数据系列，则为 <see langword="false" />。 默认值为 <see langword="false" />。</param>
        <summary>在 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件中创建一个数据系列。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dependents">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range Dependents { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range Dependents" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.Dependents" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，它表示包含 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的所有依赖单元格的范围。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，包含 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的所有从属单元格。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果存在多个依赖项, 则可以是<xref:Microsoft.Office.Interop.Excel.Range>多个选择 (对象的联合)。  
  
 此<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Dependents%2A>属性仅适用于活动工作表, 不能跟踪远程引用。  
  
   
  
## Examples  
 下面的代码示例将单元格 A1 中的引用设置为引用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>, 然后将单元格 A2 中的引用设置为引用单元格 a1。 然后`CustomerLastNameCell`, 该代码示例使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Dependents%2A>属性来选择的依赖项, 即单元格 A1 和 A2。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#14](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#14)]
 [!code-vb[Trin_ExcelXmlMappedRange#14](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Deselected">
      <MemberSignature Language="C#" Value="event Microsoft.Office.Interop.Excel.DocEvents_SelectionChangeEventHandler Deselected;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.DocEvents_SelectionChangeEventHandler Deselected" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.XmlMappedRange.Deselected" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.DocEvents_SelectionChangeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当所选内容从 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件移到 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件外部的区域时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此事件仅在<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>控件具有焦点时引发, 然后将焦点<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>从控件传输出去。  
  
   
  
## Examples  
 下面的代码演示一个<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Deselected>事件的处理程序, 该事件在取消选择<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>时显示新选定范围的地址。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#203](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#203)]
 [!code-vb[Trin_ExcelXmlMappedRange#203](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#203)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DialogBox">
      <MemberSignature Language="C#" Value="public object DialogBox ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object DialogBox() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.DialogBox" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>显示由 Microsoft Office Excel 4.0 宏工作表上的对话框定义表定义的对话框。</summary>
        <returns>所选择的控件的编号，或是在用户单击“取消”按钮时返回 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返回`Range`的对象必须引用 Excel 4.0 宏表上的对话框定义表。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DirectDependents">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range DirectDependents { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range DirectDependents" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.DirectDependents" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，它表示包含 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的所有直接从属单元格的范围。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，表示包含 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的所有直接从属单元格的范围。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果存在多个依赖项, 则可以是<xref:Microsoft.Office.Interop.Excel.Range>多个选择 (对象的联合)。  
  
 此<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.DirectDependents%2A>属性仅适用于活动工作表, 不能跟踪远程引用。  
  
   
  
## Examples  
 下面的代码示例将单元格 A1 中的引用设置为引用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>, 然后将单元格 A2 中的引用设置为引用单元格 a1。 然后<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>, 该代码示例使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.DirectDependents%2A>属性选择的直接依赖项, 即单元格 A1。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#15](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#15)]
 [!code-vb[Trin_ExcelXmlMappedRange#15](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DirectPrecedents">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range DirectPrecedents { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range DirectPrecedents" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.DirectPrecedents" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，它表示包含 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的所有直接引用单元格的范围。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，表示包含 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的所有直接引用单元格的范围。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性仅适用于活动工作表, 不能跟踪远程引用。  
  
   
  
## Examples  
 下面的代码示例将 A2 单元格中的引用设置为引用单元格 A1, 然后在中<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>设置引用以引用单元格 a2。 然后, 该代码示例使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.DirectPrecedents%2A>属性选择的<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>直接引用单元格。 此代码示例假定当前工作表包含<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>使用类型`int`的`CustomerAddress1Cell`对应架构元素命名的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#16](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#16)]
 [!code-vb[Trin_ExcelXmlMappedRange#16](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#16)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dirty">
      <MemberSignature Language="C#" Value="public void Dirty ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dirty() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.Dirty" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>指定在下一次重新计算发生时要重新计算的 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 方法强制重新计算控件。 <xref:Microsoft.Office.Tools.Excel.XmlMappedRange> <xref:Microsoft.Office.Interop.Excel.Range.Calculate%2A>  
  
 如果应用程序处于手动计算模式, 则使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Dirty%2A>方法会指示 Excel 确定要重新计算的指定单元格。 如果应用程序处于自动计算模式, 则使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Dirty%2A>方法会指示 Excel 执行重新计算。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DiscardChanges">
      <MemberSignature Language="C#" Value="public void DiscardChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DiscardChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.DiscardChanges" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>放弃 XML 映射范围内已编辑单元格中的所有更改。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 对于基于 OLAP 数据源的范围, 此方法删除单元中输入的所有值和公式, 然后运行更新操作以从数据源检索最新值。 它将所有编辑的值单元的数据源值设置为 NULL, 同时对 OLAP 服务器执行 ROLLBACK TRANSACTION 语句。 对于基于非 OLAP 数据源的范围, 此方法只是清除所有编辑过的单元格。  
  
> [!NOTE]
>  此方法显示在面向的[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]Excel 2007 项目中的 IntelliSense 中。 但是, 此方法不能用于 Excel 2007 项目。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MissingMemberException">在 Excel 2007 项目中使用此方法。</exception>
      </Docs>
    </Member>
    <Member MemberName="DisplayFormat">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.DisplayFormat DisplayFormat { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.DisplayFormat DisplayFormat" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.DisplayFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.DisplayFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个对象，该对象表示指定范围的显示设置。</summary>
        <value>表示指定范围的显示设置的对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  此属性显示在面向的[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]Excel 2007 项目中的 IntelliSense 中。 但是, 不能在 Excel 2007 项目中使用此属性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EditionOptions">
      <MemberSignature Language="C#" Value="public object EditionOptions (Microsoft.Office.Interop.Excel.XlEditionType Type, Microsoft.Office.Interop.Excel.XlEditionOptionsOption Option, object Name, object Reference, Microsoft.Office.Interop.Excel.XlPictureAppearance Appearance = Microsoft.Office.Interop.Excel.XlPictureAppearance.xlScreen, Microsoft.Office.Interop.Excel.XlPictureAppearance ChartSize = Microsoft.Office.Interop.Excel.XlPictureAppearance.xlScreen, object Format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object EditionOptions(valuetype Microsoft.Office.Interop.Excel.XlEditionType Type, valuetype Microsoft.Office.Interop.Excel.XlEditionOptionsOption Option, object Name, object Reference, valuetype Microsoft.Office.Interop.Excel.XlPictureAppearance Appearance, valuetype Microsoft.Office.Interop.Excel.XlPictureAppearance ChartSize, object Format) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.EditionOptions(Microsoft.Office.Interop.Excel.XlEditionType,Microsoft.Office.Interop.Excel.XlEditionOptionsOption,System.Object,System.Object,Microsoft.Office.Interop.Excel.XlPictureAppearance,Microsoft.Office.Interop.Excel.XlPictureAppearance,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Type" Type="Microsoft.Office.Interop.Excel.XlEditionType" />
        <Parameter Name="Option" Type="Microsoft.Office.Interop.Excel.XlEditionOptionsOption" />
        <Parameter Name="Name" Type="System.Object" />
        <Parameter Name="Reference" Type="System.Object" />
        <Parameter Name="Appearance" Type="Microsoft.Office.Interop.Excel.XlPictureAppearance" />
        <Parameter Name="ChartSize" Type="Microsoft.Office.Interop.Excel.XlPictureAppearance" />
        <Parameter Name="Format" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Type">To be added.</param>
        <param name="Option">To be added.</param>
        <param name="Name">To be added.</param>
        <param name="Reference">To be added.</param>
        <param name="Appearance">To be added.</param>
        <param name="ChartSize">To be added.</param>
        <param name="Format">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="End">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Tools.Excel.XmlMappedRange_EndType End { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Tools.Excel.XmlMappedRange_EndType End" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.End" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Tools.Excel.XmlMappedRange_EndType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，它表示包含 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的区域末尾的单元格。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，表示包含 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的区域末尾的单元格。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.End%2A>属性应与以下参数一起使用。  
  
|参数|说明|  
|---------------|-----------------|  
|`Direction`|<xref:Microsoft.Office.Interop.Excel.XlDirection>值之一, 指示查找最后一个单元格的方向。|  
  
 如果尝试在不指定<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.End%2A>任何参数的情况下<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.End%2A>使用, 将<xref:Microsoft.Office.Tools.Excel.XmlMappedRange_EndType>获取一个对象, 该对象是 Visual Studio 基础结构中的 Office 开发工具的一部分, 不应在代码中直接使用。  
  
 此属性等效于按下键 + 向上键、向下键、向下键、向后键和向右箭头。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.End%2A>属性选择<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>包含的区域末尾的单元格。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#17](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#17)]
 [!code-vb[Trin_ExcelXmlMappedRange#17](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EntireColumn">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range EntireColumn { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range EntireColumn" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.EntireColumn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，它表示包含 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的整个列。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，表示包含 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的整个列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.EntireColumn%2A>和<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.EntireRow%2A>属性将包含的列<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>和行的边框颜色设置为绿色。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#18](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#18)]
 [!code-vb[Trin_ExcelXmlMappedRange#18](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#18)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EntireRow">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range EntireRow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range EntireRow" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.EntireRow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，它表示包含 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的行。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，表示包含 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的行。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.EntireColumn%2A>和<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.EntireRow%2A>属性将包含的列<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>和行的边框颜色设置为绿色。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#18](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#18)]
 [!code-vb[Trin_ExcelXmlMappedRange#18](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#18)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Errors">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Errors Errors { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Errors Errors" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.Errors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Errors</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Errors" /> 对象，使用该对象可以访问 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的错误检查选项。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.Errors" /> 对象，使用该对象可以访问 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的错误检查选项。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Interop.Excel.Errors>引用对象, 以查看与错误检查选项关联的索引值的列表。  
  
   
  
## Examples  
 下面的代码示例将作为文本写入的数字插入到<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>中, 然后<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Errors%2A>使用属性来确定数字是否作为文本写入。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#19](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#19)]
 [!code-vb[Trin_ExcelXmlMappedRange#19](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#19)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExportAsFixedFormat">
      <MemberSignature Language="C#" Value="public void ExportAsFixedFormat (Microsoft.Office.Interop.Excel.XlFixedFormatType Type, object Filename, object Quality, object IncludeDocProperties, object IgnorePrintAreas, object From, object To, object OpenAfterPublish, object FixedFormatExtClassPtr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExportAsFixedFormat(valuetype Microsoft.Office.Interop.Excel.XlFixedFormatType Type, object Filename, object Quality, object IncludeDocProperties, object IgnorePrintAreas, object From, object To, object OpenAfterPublish, object FixedFormatExtClassPtr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.ExportAsFixedFormat(Microsoft.Office.Interop.Excel.XlFixedFormatType,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Type" Type="Microsoft.Office.Interop.Excel.XlFixedFormatType" />
        <Parameter Name="Filename" Type="System.Object" />
        <Parameter Name="Quality" Type="System.Object" />
        <Parameter Name="IncludeDocProperties" Type="System.Object" />
        <Parameter Name="IgnorePrintAreas" Type="System.Object" />
        <Parameter Name="From" Type="System.Object" />
        <Parameter Name="To" Type="System.Object" />
        <Parameter Name="OpenAfterPublish" Type="System.Object" />
        <Parameter Name="FixedFormatExtClassPtr" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Type">其中一个 <see langword="Microsoft.Office.Interop.Excel.XlFixedFormatType" /> 值，该值指定是否要将工作簿保存为 PDF 或 XPS 格式。</param>
        <param name="Filename">一个字符串，包含要保存的文件的文件名。 可包括完整路径，或者 Excel 会将文件保存到当前文件夹中。</param>
        <param name="Quality">其中一个 <see langword="Microsoft.Office.Interop.Excel.XlFixedFormatQuality" /> 值，该值指定导出文件的质量。</param>
        <param name="IncludeDocProperties">若要包括文档属性，请使用 <see langword="true" />；否则使用 <see langword="false" />。</param>
        <param name="IgnorePrintAreas">若要在导出时忽略任何打印区域设置，请使用 <see langword="true" />；否则使用 <see langword="false" />。</param>
        <param name="From">要从其处开始导出的页码。 若忽略此参数，则从第一页开始导出。</param>
        <param name="To">要导出的最后一页的页码。 若忽略此参数，则导出至最后一页。</param>
        <param name="OpenAfterPublish">若要在发布文件后在查看器中显示该文件，则使用 <see langword="true" />；否则使用 <see langword="false" />。</param>
        <param name="FixedFormatExtClassPtr">一个指向 <see langword="IMsoDocExporter" /> 接口的实现的指针，可使工作簿保存为另一种固定格式。 有关详细信息，请参阅“扩展 Office (2007) 固定格式导出功能”。</param>
        <summary>导出到指定格式的文件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法还支持初始化外接程序以将文件导出到固定格式的文件。 例如, 如果存在转换器, Excel 将执行文件格式转换。 转换通常由用户启动。  
  
   
  
## Examples  
 下面的代码示例在上`EmployeeNameCell` `Sheet1`设置<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>控件的值。 接下来, 该示例将的`EmployeeSeniorityCell`内容导出到 PDF 文档中的指定文件夹和文件名。  
  
> [!NOTE]
>  通常, 从 XML 文件<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>填充控件。 为了简单起见, 此示例对控件的值进行硬编码。  
  
 [!code-csharp[Trin_ExcelWorkbook_Additional#22](~/snippets/csharp/VS_Snippets_OfficeSP/trin_excelworkbook_additional/cs/ThisWorkbook.cs#22)]
 [!code-vb[Trin_ExcelWorkbook_Additional#22](~/snippets/visualbasic/VS_Snippets_OfficeSP/trin_excelworkbook_additional/vb/ThisWorkbook.vb#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FillDown">
      <MemberSignature Language="C#" Value="public object FillDown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object FillDown() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.FillDown" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件中的顶部单元格向下填充到 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的底部。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 因为仅<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>对应于一个单元格, 所以此方法只填充一个单元格。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FillLeft">
      <MemberSignature Language="C#" Value="public object FillLeft ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object FillLeft() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.FillLeft" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件中的最右侧单元格向左填充。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 因为仅<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>对应于一个单元格, 所以此方法只填充一个单元格。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FillRight">
      <MemberSignature Language="C#" Value="public object FillRight ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object FillRight() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.FillRight" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件中的最左侧单元格向右填充。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 因为仅<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>对应于一个单元格, 所以此方法只填充一个单元格。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FillUp">
      <MemberSignature Language="C#" Value="public object FillUp ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object FillUp() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.FillUp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从指定范围中的底部单元格向上填充到 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的顶部。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 因为仅<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>对应于一个单元格, 所以此方法只填充一个单元格。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range Find (object What, object After, object LookIn, object LookAt, object SearchOrder, Microsoft.Office.Interop.Excel.XlSearchDirection SearchDirection = Microsoft.Office.Interop.Excel.XlSearchDirection.xlNext, object MatchCase, object MatchByte, object SearchFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Interop.Excel.Range Find(object What, object After, object LookIn, object LookAt, object SearchOrder, valuetype Microsoft.Office.Interop.Excel.XlSearchDirection SearchDirection, object MatchCase, object MatchByte, object SearchFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.Find(System.Object,System.Object,System.Object,System.Object,System.Object,Microsoft.Office.Interop.Excel.XlSearchDirection,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="What" Type="System.Object" />
        <Parameter Name="After" Type="System.Object" />
        <Parameter Name="LookIn" Type="System.Object" />
        <Parameter Name="LookAt" Type="System.Object" />
        <Parameter Name="SearchOrder" Type="System.Object" />
        <Parameter Name="SearchDirection" Type="Microsoft.Office.Interop.Excel.XlSearchDirection" />
        <Parameter Name="MatchCase" Type="System.Object" />
        <Parameter Name="MatchByte" Type="System.Object" />
        <Parameter Name="SearchFormat" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="What">要搜索的数据。 可以是字符串或任何 Microsoft Office Excel 数据类型。</param>
        <param name="After">从其后开始搜索的单元格。 此单元格就是从用户界面执行的搜索完成后处于活动状态的单元格。 注意，<c>After</c> 必须是该范围中的单个单元格。 请记住，搜索将从该单元格之后开始；只有方法绕回到指定的单元格之后，才会搜索该单元格。 如果您未指定此参数，则从该范围左上角中的单元格之后开始搜索。</param>
        <param name="LookIn">信息的类型。</param>
        <param name="LookAt">可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlLookAt" /> 值之一：<see cref="F:Microsoft.Office.Interop.Excel.XlLookAt.xlWhole" /> 或 <see cref="F:Microsoft.Office.Interop.Excel.XlLookAt.xlPart" />。</param>
        <param name="SearchOrder">可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlSearchOrder" /> 值之一：<see cref="F:Microsoft.Office.Interop.Excel.XlSearchOrder.xlByRows" /> 或 <see cref="F:Microsoft.Office.Interop.Excel.XlSearchOrder.xlByColumns" />。</param>
        <param name="SearchDirection">搜索方向。  
  
可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlSearchDirection" /> 值之一： 
 <see cref="F:Microsoft.Office.Interop.Excel.XlSearchDirection.xlNext" /> 或 <see cref="F:Microsoft.Office.Interop.Excel.XlSearchDirection.xlPrevious" />。</param>
        <param name="MatchCase">如果在搜索时区分大小写，则为 <see langword="true" />。 默认值为 <see langword="false" />。</param>
        <param name="MatchByte">仅当已选择或安装双字节语言支持时，才会用到此参数。 如果让双字节字符仅与双字节字符相匹配，则为 <see langword="true" />；如果让双字节字符与其单字节等效字符相匹配，则为 <see langword="false" />。</param>
        <param name="SearchFormat">搜索格式。</param>
        <summary>在 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件中查找指定信息，并返回表示在其中找到该信息的第一个单元格的 <see cref="T:Microsoft.Office.Interop.Excel.Range" />。</summary>
        <returns>一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，表示在其中找到指定信息的第一个单元格。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果未找到`null`匹配项, 则此方法返回。  
  
 此方法不会影响选定内容或活动单元格。  
  
 每次使用`LookIn`此`LookAt`方法`SearchOrder`时, `MatchByte`都会保存、、和的设置。 如果未指定这些参数的值, 则在下一次调用方法时, 将使用保存的值。 设置这些参数将更改 "查找" 对话框中的设置, 更改 "查找" 对话框中的设置将更改在省略参数时使用的保存值。 若要避免出现问题, 请在每次使用此方法时显式设置这些参数。  
  
 您可以使用<xref:Microsoft.Office.Interop.Excel.Range.FindNext%2A>和<xref:Microsoft.Office.Interop.Excel.Range.FindPrevious%2A>方法来重复搜索。  
  
   
  
## Examples  
 下面的代码示例<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>将的值设置为字符串 "smith", 然后<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Find%2A>使用、 <xref:Microsoft.Office.Tools.Excel.XmlMappedRange.FindNext%2A>和<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.FindPrevious%2A>方法查找字符串为 "smith" 的第一个单元格。 <xref:Microsoft.Office.Tools.Excel.XmlMappedRange>由于始终只包含一个单元格, 因此在每种情况下都找到相同的单元格。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#112](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#112)]
 [!code-vb[Trin_ExcelXmlMappedRange#112](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#112)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindNext">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range FindNext (object After);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Interop.Excel.Range FindNext(object After) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.FindNext(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="After" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="After">要在其之后搜索的单元格。 此单元格就是从用户界面执行的搜索完成后处于活动状态的单元格。 注意，<c>After</c> 必须是 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件中的单个单元格。 请记住，搜索将从该单元格之后开始；只有方法绕回到指定的单元格之后，才会搜索该单元格。 如果未指定此参数，则从 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件左上角中的单元格之后开始搜索。</param>
        <summary>继续执行用 <see cref="M:Microsoft.Office.Tools.Excel.XmlMappedRange.Find(System.Object,System.Object,System.Object,System.Object,System.Object,Microsoft.Office.Interop.Excel.XlSearchDirection,System.Object,System.Object,System.Object)" /> 方法开始的搜索。</summary>
        <returns>一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，表示包含指定信息的单元格。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 查找下一个与为<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Find%2A>方法指定的条件相匹配的单元格, 并<xref:Microsoft.Office.Interop.Excel.Range>返回表示该单元格的。  
  
 此方法不会影响选定内容或活动单元格。  
  
 当搜索到达指定搜索范围的末尾时, 它将环绕到该范围的开头。 若要在发生此环绕时停止搜索, 请保存找到的第一个单元格的地址, 然后根据此保存的地址测试每个连续找到的单元地址。  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>将的值设置为字符串 "smith", 然后<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Find%2A>使用、 <xref:Microsoft.Office.Tools.Excel.XmlMappedRange.FindNext%2A>和<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.FindPrevious%2A>方法查找字符串为 "smith" 的第一个单元格。 <xref:Microsoft.Office.Tools.Excel.XmlMappedRange>由于始终只包含一个单元格, 因此在每种情况下都找到相同的单元格。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#112](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#112)]
 [!code-vb[Trin_ExcelXmlMappedRange#112](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#112)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindPrevious">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range FindPrevious (object After);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Interop.Excel.Range FindPrevious(object After) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.FindPrevious(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="After" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="After">要在其之前搜索的单元格。 此单元格就是从用户界面执行的搜索完成后处于活动状态的单元格。 注意，<c>After</c> 必须是 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件中的单个单元格。 请记住，搜索将从该单元格之后开始；只有方法绕回到指定的单元格之后，才会搜索该单元格。 如果未指定此参数，则从 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件左上角单元格之前开始搜索。</param>
        <summary>继续执行用 <see cref="M:Microsoft.Office.Tools.Excel.XmlMappedRange.Find(System.Object,System.Object,System.Object,System.Object,System.Object,Microsoft.Office.Interop.Excel.XlSearchDirection,System.Object,System.Object,System.Object)" /> 方法开始的搜索。</summary>
        <returns>一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，表示包含指定信息的单元格。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 查找与为<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Find%2A>方法指定的条件相匹配的上一个单元格, <xref:Microsoft.Office.Interop.Excel.Range>并返回表示该单元格的对象。  
  
 此方法不会影响选定内容或活动单元格。  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>将的值设置为字符串 "smith", 然后<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Find%2A>使用、 <xref:Microsoft.Office.Tools.Excel.XmlMappedRange.FindNext%2A>和<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.FindPrevious%2A>方法查找字符串为 "smith" 的第一个单元格。 <xref:Microsoft.Office.Tools.Excel.XmlMappedRange>由于始终只包含一个单元格, 因此在每种情况下都找到相同的单元格。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#112](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#112)]
 [!code-vb[Trin_ExcelXmlMappedRange#112](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#112)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Font">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Font Font { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Font Font" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.Font" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Font</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个表示 <see cref="T:Microsoft.Office.Interop.Excel.Font" /> 控件的字体的 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" />。</summary>
        <value>一个表示 <see cref="T:Microsoft.Office.Interop.Excel.Font" /> 控件的字体的 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Font%2A>属性显示的当前字体。 <xref:Microsoft.Office.Tools.Excel.XmlMappedRange> 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#20](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#20)]
 [!code-vb[Trin_ExcelXmlMappedRange#20](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#20)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FormatConditions">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.FormatConditions FormatConditions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.FormatConditions FormatConditions" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.FormatConditions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.FormatConditions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.FormatConditions" /> 集合，该集合表示 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的所有条件格式。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.FormatConditions" /> 集合，表示 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的所有条件格式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 如果的值<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.FormatConditions%2A> 小于单元格A1的值,则下面的代码示例使用属性更改的字体。<xref:Microsoft.Office.Tools.Excel.XmlMappedRange> <xref:Microsoft.Office.Tools.Excel.XmlMappedRange> 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerZipCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#21](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#21)]
 [!code-vb[Trin_ExcelXmlMappedRange#21](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Formula">
      <MemberSignature Language="C#" Value="public object Formula { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Formula" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.Formula" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>以 A1 样式表示法获取或设置 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的公式。</summary>
        <value><see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的公式（以 A1 样式表示法表示）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Tools.Excel.XmlMappedRange>如果控件包含一个常数, 则此属性返回该常数。  
  
 <xref:Microsoft.Office.Tools.Excel.XmlMappedRange>如果控件为空, 则此属性返回一个空字符串。  
  
 <xref:Microsoft.Office.Tools.Excel.XmlMappedRange>如果控件包含公式, 则此属性以字符串的形式返回公式, 该格式与在公式栏中显示的格式相同 (包括等号)。  
  
 如果您将<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>控件的值或公式设置为日期, 则 Microsoft Office Excel 将进行检查以确定该单元格是否已使用日期或时间格式之一进行格式设置。 否则, Excel 会将数字格式更改为默认的短日期数字格式。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Formula%2A>属性将的值<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>设置为等于单元格 A1 和 A2 的值之和。 此代码示例假定当前工作表包含<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>使用类型`int`的`CustomerAddress1Cell`对应架构元素命名的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#22](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#22)]
 [!code-vb[Trin_ExcelXmlMappedRange#22](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FormulaArray">
      <MemberSignature Language="C#" Value="public object FormulaArray { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object FormulaArray" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.FormulaArray" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的数组公式。</summary>
        <value><see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的数组公式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性可获取 (或设置为) 单个公式或数组。  
  
 如果控件不包含数组公式, 则此属性返回`null`。 <xref:Microsoft.Office.Tools.Excel.XmlMappedRange>  
  
 如果使用此属性来输入数组公式, 则该公式必须使用 R1C1 引用样式, 而不是 A1 引用样式。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.FormulaArray%2A>属性将的值<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>设置为等于单元格 A1 到 A3 的数组之和。 此代码示例假定当前工作表包含<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>使用类型`int`的`CustomerAddress1Cell`对应架构元素命名的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#23](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#23)]
 [!code-vb[Trin_ExcelXmlMappedRange#23](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FormulaHidden">
      <MemberSignature Language="C#" Value="public object FormulaHidden { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object FormulaHidden" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.FormulaHidden" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示在工作表受保护时是否隐藏 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件中的公式。</summary>
        <value>如果在工作表受保护时隐藏公式，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不要将<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Hidden%2A>此属性与属性混淆。 如果工作簿受到保护且工作表不为, 则不会隐藏该公式。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FormulaLabel">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlFormulaLabel FormulaLabel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlFormulaLabel FormulaLabel" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.FormulaLabel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlFormulaLabel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FormulaLocal">
      <MemberSignature Language="C#" Value="public object FormulaLocal { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object FormulaLocal" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.FormulaLocal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的公式，该公式使用用户语言的 A1 样式的引用。</summary>
        <value><see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的公式，使用用户语言的 A1 样式的引用。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Tools.Excel.XmlMappedRange>如果控件包含常量, 则此属性返回该常量。  
  
 <xref:Microsoft.Office.Tools.Excel.XmlMappedRange>如果控件为空, 则属性返回空字符串。  
  
 <xref:Microsoft.Office.Tools.Excel.XmlMappedRange>如果控件包含公式, 则属性以字符串的形式返回公式, 其格式与在公式栏中显示的格式相同 (包括等号)。  
  
 如果您将<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>控件的值或公式设置为日期, 则 Microsoft Office Excel 将进行检查以确定该单元格是否已使用日期或时间格式之一进行格式设置。 否则, 数字格式将更改为默认的短日期数字格式。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.FormulaLocal%2A>属性将的值<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>设置为等于单元格 A1 和 A2 的值之和。 公式根据其运行的系统的语言进行本地化。 此代码示例假定当前工作表包含<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>使用类型`int`的`CustomerAddress1Cell`对应架构元素命名的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#25](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#25)]
 [!code-vb[Trin_ExcelXmlMappedRange#25](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#25)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FormulaR1C1">
      <MemberSignature Language="C#" Value="public object FormulaR1C1 { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object FormulaR1C1" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.FormulaR1C1" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的公式（使用 R1C1 样式的表示法）。</summary>
        <value><see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的公式（使用 R1C1 样式的表示法）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Tools.Excel.XmlMappedRange>如果控件包含一个常数, 则此属性返回该常数。  
  
 <xref:Microsoft.Office.Tools.Excel.XmlMappedRange>如果控件为空, 则属性返回空字符串。  
  
 <xref:Microsoft.Office.Tools.Excel.XmlMappedRange>如果控件包含公式, 则属性以字符串的形式返回公式, 其格式与在公式栏中显示的格式相同 (包括等号)。  
  
 如果您将<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>控件的值或公式设置为日期, 则 Microsoft Office Excel 将进行检查以确定该单元格是否已使用日期或时间格式之一进行格式设置。 否则, 数字格式将更改为默认的短日期数字格式。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.FormulaR1C1%2A>属性将的值<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>设置为等于单元格 A1 的平方根 (使用 R1C1 表示法指定)。 此代码示例假定当前工作表包含<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>使用类型`int`的`CustomerAddress1Cell`对应架构元素命名的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#26](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#26)]
 [!code-vb[Trin_ExcelXmlMappedRange#26](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#26)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FormulaR1C1Local">
      <MemberSignature Language="C#" Value="public object FormulaR1C1Local { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object FormulaR1C1Local" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.FormulaR1C1Local" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的公式，该公式使用用户语言的 R1C1 样式表示法。</summary>
        <value><see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的公式，使用用户语言的 R1C1 样式表示法。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Tools.Excel.XmlMappedRange>如果控件包含常量, 则此属性返回该常量。  
  
 <xref:Microsoft.Office.Tools.Excel.XmlMappedRange>如果控件为空, 则此属性返回一个空字符串。  
  
 <xref:Microsoft.Office.Tools.Excel.XmlMappedRange>如果控件包含公式, 则此属性以字符串的形式返回公式, 其格式与在公式栏中显示的格式相同 (包括等号)。  
  
 如果您将<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>控件的值或公式设置为日期, 则 Microsoft Office Excel 将进行检查以确定该单元格是否已使用日期或时间格式之一进行格式设置。 否则, 数字格式将更改为默认的短日期数字格式。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.FormulaR1C1Local%2A>属性将的值<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>设置为等于单元格 A1 的平方根 (使用 R1C1 表示法指定)。 公式根据其运行的系统的语言进行本地化。 此代码示例假定当前工作表包含<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>使用类型`int`的`CustomerAddress1Cell`对应架构元素命名的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#27](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#27)]
 [!code-vb[Trin_ExcelXmlMappedRange#27](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#27)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FunctionWizard">
      <MemberSignature Language="C#" Value="public object FunctionWizard ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object FunctionWizard() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.FunctionWizard" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>为 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件启动“函数向导”。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="get_Address">
      <MemberSignature Language="C#" Value="public string get_Address (object RowAbsolute, object ColumnAbsolute, Microsoft.Office.Interop.Excel.XlReferenceStyle ReferenceStyle = Microsoft.Office.Interop.Excel.XlReferenceStyle.xlA1, object External, object RelativeTo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string get_Address(object RowAbsolute, object ColumnAbsolute, valuetype Microsoft.Office.Interop.Excel.XlReferenceStyle ReferenceStyle, object External, object RelativeTo) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.get_Address(System.Object,System.Object,Microsoft.Office.Interop.Excel.XlReferenceStyle,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="RowAbsolute" Type="System.Object" />
        <Parameter Name="ColumnAbsolute" Type="System.Object" />
        <Parameter Name="ReferenceStyle" Type="Microsoft.Office.Interop.Excel.XlReferenceStyle" />
        <Parameter Name="External" Type="System.Object" />
        <Parameter Name="RelativeTo" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="RowAbsolute">To be added.</param>
        <param name="ColumnAbsolute">To be added.</param>
        <param name="ReferenceStyle">To be added.</param>
        <param name="External">To be added.</param>
        <param name="RelativeTo">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="get_AddressLocal">
      <MemberSignature Language="C#" Value="public string get_AddressLocal (object RowAbsolute, object ColumnAbsolute, Microsoft.Office.Interop.Excel.XlReferenceStyle ReferenceStyle = Microsoft.Office.Interop.Excel.XlReferenceStyle.xlA1, object External, object RelativeTo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string get_AddressLocal(object RowAbsolute, object ColumnAbsolute, valuetype Microsoft.Office.Interop.Excel.XlReferenceStyle ReferenceStyle, object External, object RelativeTo) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.get_AddressLocal(System.Object,System.Object,Microsoft.Office.Interop.Excel.XlReferenceStyle,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="RowAbsolute" Type="System.Object" />
        <Parameter Name="ColumnAbsolute" Type="System.Object" />
        <Parameter Name="ReferenceStyle" Type="Microsoft.Office.Interop.Excel.XlReferenceStyle" />
        <Parameter Name="External" Type="System.Object" />
        <Parameter Name="RelativeTo" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="RowAbsolute">To be added.</param>
        <param name="ColumnAbsolute">To be added.</param>
        <param name="ReferenceStyle">To be added.</param>
        <param name="External">To be added.</param>
        <param name="RelativeTo">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="get_Characters">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Characters get_Characters (object Start, object Length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Interop.Excel.Characters get_Characters(object Start, object Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.get_Characters(System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Characters</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Start" Type="System.Object" />
        <Parameter Name="Length" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Start">To be added.</param>
        <param name="Length">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="get_End">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range get_End (Microsoft.Office.Interop.Excel.XlDirection Direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Interop.Excel.Range get_End(valuetype Microsoft.Office.Interop.Excel.XlDirection Direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.get_End(Microsoft.Office.Interop.Excel.XlDirection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Direction" Type="Microsoft.Office.Interop.Excel.XlDirection" />
      </Parameters>
      <Docs>
        <param name="Direction">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="get_Item">
      <MemberSignature Language="C#" Value="public object get_Item (object RowIndex, object ColumnIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object get_Item(object RowIndex, object ColumnIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.get_Item(System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="RowIndex" Type="System.Object" />
        <Parameter Name="ColumnIndex" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="RowIndex">To be added.</param>
        <param name="ColumnIndex">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="get_Offset">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range get_Offset (object RowOffset, object ColumnOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Interop.Excel.Range get_Offset(object RowOffset, object ColumnOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.get_Offset(System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="RowOffset" Type="System.Object" />
        <Parameter Name="ColumnOffset" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="RowOffset">To be added.</param>
        <param name="ColumnOffset">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="get_Range">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range get_Range (object Cell1, object Cell2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Interop.Excel.Range get_Range(object Cell1, object Cell2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.get_Range(System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Cell1" Type="System.Object" />
        <Parameter Name="Cell2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Cell1">To be added.</param>
        <param name="Cell2">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="get_Resize">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range get_Resize (object RowSize, object ColumnSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Interop.Excel.Range get_Resize(object RowSize, object ColumnSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.get_Resize(System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="RowSize" Type="System.Object" />
        <Parameter Name="ColumnSize" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="RowSize">To be added.</param>
        <param name="ColumnSize">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="get_Value">
      <MemberSignature Language="C#" Value="public object get_Value (object rangeValueDataType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object get_Value(object rangeValueDataType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.get_Value(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rangeValueDataType" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="rangeValueDataType">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.GetEnumerator" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取一个枚举器，该枚举器可以循环访问 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件。</summary>
        <returns>一个 <see cref="T:System.Collections.IEnumerator" /> 对象，可以用于在 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件上进行循环访问。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 由于仅<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>对应于一个单元格, 此方法返回一个枚举器, 该枚举器只能循环访问一个单元格。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GoalSeek">
      <MemberSignature Language="C#" Value="public bool GoalSeek (object Goal, Microsoft.Office.Interop.Excel.Range ChangingCell);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GoalSeek(object Goal, class Microsoft.Office.Interop.Excel.Range ChangingCell) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.GoalSeek(System.Object,Microsoft.Office.Interop.Excel.Range)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Goal" Type="System.Object" />
        <Parameter Name="ChangingCell" Type="Microsoft.Office.Interop.Excel.Range" />
      </Parameters>
      <Docs>
        <param name="Goal">To be added.</param>
        <param name="ChangingCell">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Group">
      <MemberSignature Language="C#" Value="public object Group (object Start, object End, object By, object Periods);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Group(object Start, object End, object By, object Periods) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.Group(System.Object,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Start" Type="System.Object" />
        <Parameter Name="End" Type="System.Object" />
        <Parameter Name="By" Type="System.Object" />
        <Parameter Name="Periods" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Start">要进行分组的第一个值。 如果省略此参数或者它为 <see langword="true" />，则使用该字段中的第一个值。</param>
        <param name="End">要进行分组的最后一个值。 如果省略此参数或者它为 <see langword="true" />，则使用该字段中的最后一个值。</param>
        <param name="By">如果该字段为数值字段，则此参数指定每组的大小。 如果该字段是日期字段，则此参数指定当 <c>Periods</c> 数组中的元素 4 为 <see langword="true" /> 而所有其他元素为 <see langword="false" /> 时每一组中的天数。 否则，将忽略此参数。 如果省略此参数，则 Microsoft Office Excel 会自动选择一个默认的组大小。</param>
        <param name="Periods">一个数组，包含七个为该组指定时间段的布尔值，如下所示： 
1 — 秒 
2 — 分钟 
3 — 
4 — 日期 
5 — 月份 
6 — 季度 
7 — 年份 
如果数组中的某个元素为 <see langword="true" />，则针对相应的时间创建一个组；如果该元素为 <see langword="false" />，则不创建组。 如果字段不是日期字段，则省略此参数。</param>
        <summary>当 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件表示数据透视表字段的数据范围中的单个单元格时，<see cref="M:Microsoft.Office.Tools.Excel.XmlMappedRange.Group(System.Object,System.Object,System.Object,System.Object)" /> 方法在该字段中执行基于数值或日期的分组。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasArray">
      <MemberSignature Language="C#" Value="public object HasArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object HasArray" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.HasArray" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件是否属于数组公式。</summary>
        <value>如果 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件属于数组公式，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasFormula">
      <MemberSignature Language="C#" Value="public object HasFormula { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object HasFormula" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.HasFormula" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件是否包含公式。</summary>
        <value>如果 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件包含公式，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Height">
      <MemberSignature Language="C#" Value="public object Height { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Height" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.Height" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的高度（以磅为单位）。</summary>
        <value><see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的高度（以磅为单位）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Width%2A>和<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Height%2A>属性来显示的<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>宽度和高度。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#28](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#28)]
 [!code-vb[Trin_ExcelXmlMappedRange#28](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#28)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Hidden">
      <MemberSignature Language="C#" Value="public object Hidden { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Hidden" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.Hidden" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HorizontalAlignment">
      <MemberSignature Language="C#" Value="public object HorizontalAlignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object HorizontalAlignment" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.HorizontalAlignment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的水平对齐方式。</summary>
        <value><see cref="T:Microsoft.Office.Interop.Excel.XlHAlign" /> 值之一。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Interop.Excel.XlHAlign>某些常量可能不可用, 具体取决于语言支持 (美国美式英语）。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.HorizontalAlignment%2A>和<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.VerticalAlignment%2A>属性将的<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>内容与右下方对齐。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#29](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#29)]
 [!code-vb[Trin_ExcelXmlMappedRange#29](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#29)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Hyperlinks">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Hyperlinks Hyperlinks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Hyperlinks Hyperlinks" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.Hyperlinks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Hyperlinks</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Hyperlinks" /> 集合，该集合表示 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的超链接。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.Hyperlinks" /> 集合，表示 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的超链接。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Hyperlinks%2A>属性将超链接添加<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>到。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#30](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#30)]
 [!code-vb[Trin_ExcelXmlMappedRange#30](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#30)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ID">
      <MemberSignature Language="C#" Value="public string ID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ID" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.ID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在将该页另存为网页时，获取或设置 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的标识标签。</summary>
        <value>在将该页另存为网页时，<see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的标识标签。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以使用 ID 标签作为其他 HTML 文档或同一网页上的超链接引用。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.ID%2A>属性设置在将工作簿另存为网页时将使用的 ID。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#31](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#31)]
 [!code-vb[Trin_ExcelXmlMappedRange#31](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#31)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndentLevel">
      <MemberSignature Language="C#" Value="public object IndentLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object IndentLevel" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.IndentLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的缩进级别。</summary>
        <value><see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的缩进级别。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 缩进级别可以是0到15之间的整数。  
  
 使用此属性将缩进级别设置为小于 0 (零) 或大于15的数字会导致错误。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.IndentLevel%2A>属性将的缩进级别<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>设置为3。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#32](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#32)]
 [!code-vb[Trin_ExcelXmlMappedRange#32](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InnerObject">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range InnerObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range InnerObject" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.InnerObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，表示 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 的基础本机对象。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，表示 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 的基础本机对象。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public object Insert (object Shift, object CopyOrigin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Insert(object Shift, object CopyOrigin) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.Insert(System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Shift" Type="System.Object" />
        <Parameter Name="CopyOrigin" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Shift">指定移动单元格的方向。 可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlInsertShiftDirection" /> 值之一：<see cref="F:Microsoft.Office.Interop.Excel.XlInsertShiftDirection.xlShiftToRight" /> 或 <see cref="F:Microsoft.Office.Interop.Excel.XlInsertShiftDirection.xlShiftDown" />。 如果省略此参数，则 Microsoft Office Excel 会选择一个值。</param>
        <param name="CopyOrigin">复制原点。</param>
        <summary>将一个单元格插入 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件中并移走其他单元格以腾出空间。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例使用方法<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Insert%2A>在<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>上方插入一个单元格。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#115](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#115)]
 [!code-vb[Trin_ExcelXmlMappedRange#115](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#115)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertIndent">
      <MemberSignature Language="C#" Value="public void InsertIndent (int InsertAmount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InsertIndent(int32 InsertAmount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.InsertIndent(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="InsertAmount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="InsertAmount">要添加到当前缩进的量。</param>
        <summary>向 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件添加缩进。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此方法将缩进级别设置为小于 0 (零) 或大于15的数字会导致错误。  
  
 <xref:Microsoft.Office.Tools.Excel.XmlMappedRange.IndentLevel%2A>使用属性可以返回范围的缩进级别。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.InsertIndent%2A>方法为设置缩进级别。 <xref:Microsoft.Office.Tools.Excel.XmlMappedRange> 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#116](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#116)]
 [!code-vb[Trin_ExcelXmlMappedRange#116](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#116)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Interior">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Interior Interior { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Interior Interior" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.Interior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Interior</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Interior" />，它表示 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的内部。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.Interior" />，表示 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的内部。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Borders%2A>使用属性为的边框<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>绘制双线<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Interior%2A> , 并使用属性来为<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>绿色的内部着色。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#4](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#4)]
 [!code-vb[Trin_ExcelXmlMappedRange#4](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Tools.Excel.XmlMappedRange_ItemType Item { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Tools.Excel.XmlMappedRange_ItemType Item" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Tools.Excel.XmlMappedRange_ItemType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，它表示距离 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的某偏移量处的范围。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，表示距离 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的某偏移量处的范围。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Item%2A>属性应与以下参数一起使用。  
  
|参数|说明|  
|---------------|-----------------|  
|`RowIndex`|要访问的单元格的索引号, 按从左到右的顺序排列。|  
|`ColumnIndex`|一个数字或字符串, 指示要访问的单元格的列号, 从该范围中第一列的1或 "A" 开始。|  
  
 如果尝试在不指定<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Item%2A>任何参数的情况下<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Item%2A>使用, 将<xref:Microsoft.Office.Tools.Excel.XmlMappedRange_ItemType>获取一个对象, 该对象是 Visual Studio 基础结构中的 Office 开发工具的一部分, 不应在代码中直接使用。  
  
 `RowIndex` 和`ColumnIndex`参数是相对偏移量。 换言之, 如果将指定为`RowIndex` 1, 则将返回该范围第一行中的单元, 而不是工作表的第一行。  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Item%2A>属性选择偏移<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>三列和三行的单元格。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#34](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#34)]
 [!code-vb[Trin_ExcelXmlMappedRange#34](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#34)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Justify">
      <MemberSignature Language="C#" Value="public object Justify ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Justify() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.Justify" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>重新排列 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件中的文本以使其均匀填充范围。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果范围不够大, Microsoft Office Excel 将显示一条消息, 告知文本超出范围。 如果单击 **"确定"** 按钮, 则调整后的文本将替换超出选定范围的单元格的内容。 若要阻止显示此消息, 请将<xref:Microsoft.Office.Interop.Excel._Application.DisplayAlerts%2A>属性设置`false`为。 设置此属性后, 文本总是替换<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>控件下方单元格中的内容。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public object Left { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Left" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.Left" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值表示从列 A 的左边缘到 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的左边缘之间的距离。</summary>
        <value>从列 A 的左边缘到 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的左边缘的距离。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Left%2A>使用和<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Top%2A>属性来显示从列 A 的左边缘到的左边缘<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>的距离, 以及从第1行顶部到的<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>上边缘的距离。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#35](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#35)]
 [!code-vb[Trin_ExcelXmlMappedRange#35](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#35)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ListHeaderRows">
      <MemberSignature Language="C#" Value="public int ListHeaderRows { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ListHeaderRows" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.ListHeaderRows" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ListNames">
      <MemberSignature Language="C#" Value="public object ListNames ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ListNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.ListNames" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将包含所有显示的名称的列表粘贴到工作表上（从 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件开始）。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Interop.Excel._Application.Names%2A>使用属性返回工作表中所有名称的集合。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ListObject">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.ListObject ListObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.ListObject ListObject" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.ListObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.ListObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:Microsoft.Office.Interop.Excel.ListObject" /> 控件的 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" />。</summary>
        <value><see cref="T:Microsoft.Office.Interop.Excel.ListObject" /> 控件的一个 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocationInTable">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlLocationInTable LocationInTable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlLocationInTable LocationInTable" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.LocationInTable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlLocationInTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个常数，该常数描述包含 <see cref="T:Microsoft.Office.Interop.Excel.PivotTable" /> 控件左上角的 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 报表部分。</summary>
        <value><see cref="T:Microsoft.Office.Interop.Excel.XlLocationInTable" /> 值之一。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Tools.Excel.XmlMappedRange.LocationInTable%2A>可以是下列<xref:Microsoft.Office.Interop.Excel.XlLocationInTable?displayProperty=fullName>值之一:  
  
-   <xref:Microsoft.Office.Interop.Excel.XlLocationInTable.xlRowHeader>  
  
-   <xref:Microsoft.Office.Interop.Excel.XlLocationInTable.xlColumnHeader>  
  
-   <xref:Microsoft.Office.Interop.Excel.XlLocationInTable.xlPageHeader>  
  
-   <xref:Microsoft.Office.Interop.Excel.XlLocationInTable.xlDataHeader>  
  
-   <xref:Microsoft.Office.Interop.Excel.XlLocationInTable.xlRowItem>  
  
-   <xref:Microsoft.Office.Interop.Excel.XlLocationInTable.xlColumnItem>  
  
-   <xref:Microsoft.Office.Interop.Excel.XlLocationInTable.xlPageItem>  
  
-   <xref:Microsoft.Office.Interop.Excel.XlLocationInTable.xlDataItem>  
  
-   <xref:Microsoft.Office.Interop.Excel.XlLocationInTable.xlTableBody>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Locked">
      <MemberSignature Language="C#" Value="public object Locked { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Locked" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.Locked" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件是否处于锁定状态。</summary>
        <value>如果 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件处于锁定状态，则为 <see langword="true" />；如果 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件可以在该表处于保护状态时进行修改，则为 <see langword="false" />；如果 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件中既包含处于锁定状态的单元格又包含处于未锁定状态的单元格，则为 <see langword="null" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MDX">
      <MemberSignature Language="C#" Value="public string MDX { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MDX" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.MDX" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个描述 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 的 MDX 表达式。</summary>
        <value>一个描述 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 的 MDX 表达式。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (object Across);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Merge(object Across) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.Merge(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Across" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Across">如果将指定范围中每一行中的单元格作为单独的合并单元格来合并，则为 <see langword="true" />。 默认值为 <see langword="false" />。</param>
        <summary>从 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件创建一个合并单元格。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 合并范围的值是在<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>控件左上角的单元中指定的。  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MergeArea">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range MergeArea { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range MergeArea" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.MergeArea" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，它表示包含 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的合并范围。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，表示包含 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的合并范围。 如果 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件不在合并范围中，则此属性返回 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Tools.Excel.NamedRange.MergeArea%2A>属性仅适用于单单元格范围。  
  
   
  
## Examples  
 下面的代码示例在合并包含<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.MergeArea%2A> <xref:Microsoft.Office.Tools.Excel.XmlMappedRange>的范围前后<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.MergeCells%2A>显示和属性的值。 此代码示例假定当前工作表包含一个<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>名`CustomerLastNameCell`为的, 它位于单元格 B2 到 B5 的某个单元格中。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#38](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#38)]
 [!code-vb[Trin_ExcelXmlMappedRange#38](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#38)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MergeCells">
      <MemberSignature Language="C#" Value="public object MergeCells { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object MergeCells" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.MergeCells" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件是否包含合并单元格。</summary>
        <value>如果 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件包含合并单元格，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例在合并包含<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.MergeArea%2A> <xref:Microsoft.Office.Tools.Excel.XmlMappedRange>的范围前后<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.MergeCells%2A>显示和属性的值。 此代码示例假定当前工作表包含一个<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>名`CustomerLastNameCell`为的, 它位于单元格 B2 到 B5 的某个单元格中。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#38](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#38)]
 [!code-vb[Trin_ExcelXmlMappedRange#38](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#38)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public object Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Name" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值表示 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的定义名称。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.Name" /> 对象，表示 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的定义名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例将一个<xref:Microsoft.Office.Interop.Excel.Name?displayProperty=fullName>引用所占用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>的单元格的添加到当前工作表。 然后, 该示例使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Name%2A>属性显示现在引用的<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>名称。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#39](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#39)]
 [!code-vb[Trin_ExcelXmlMappedRange#39](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#39)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NavigateArrow">
      <MemberSignature Language="C#" Value="public object NavigateArrow (object TowardPrecedent, object ArrowNumber, object LinkNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object NavigateArrow(object TowardPrecedent, object ArrowNumber, object LinkNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.NavigateArrow(System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="TowardPrecedent" Type="System.Object" />
        <Parameter Name="ArrowNumber" Type="System.Object" />
        <Parameter Name="LinkNumber" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="TowardPrecedent">指定导航方向：如果朝着引用单元格导航，则为 <see langword="true" />；如果朝着依赖单元格导航，则为 <see langword="false" />。</param>
        <param name="ArrowNumber">指定要定位的箭头编号；与单元格公式中带编号的引用相对应。</param>
        <param name="LinkNumber">如果该箭头是外部引用箭头，则此参数指示要遵循哪个外部引用。 如果省略此参数，则遵循第一个外部引用。</param>
        <summary>将 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的跟踪标志箭头定位到引用单元格、依赖单元格或导致错误的单元格。</summary>
        <returns>一个表示新的所选内容的 <see cref="T:Microsoft.Office.Interop.Excel.Range" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 选择引用单元格、从属单元格或错误单元。 如果将此方法应用于没有可见追踪箭头的单元格, 则会导致错误。  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例使单元格 A1 成为的依赖<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>项。 然后, 该示例使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.ShowDependents%2A>方法在<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>和依赖<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.NavigateArrow%2A>单元格之间绘制一个箭头, 并调用方法来选择从属单元。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#118](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#118)]
 [!code-vb[Trin_ExcelXmlMappedRange#118](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#118)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Next">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range Next { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range Next" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.Next" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个表示下一个单元格的 <see cref="T:Microsoft.Office.Interop.Excel.Range" />。</summary>
        <value>一个表示下一个单元格的 <see cref="T:Microsoft.Office.Interop.Excel.Range" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性模拟 TAB 键, 尽管属性返回下一个单元格, 而不选择它。  
  
 在受保护的工作表中, 此属性返回下一个未锁定的单元格。 在不受保护的工作表中, 此属性始终返回指定单元格的紧右侧的单元格。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Next%2A>属性选择右侧<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>的单元格。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#40](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#40)]
 [!code-vb[Trin_ExcelXmlMappedRange#40](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#40)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NoteText">
      <MemberSignature Language="C#" Value="public string NoteText (object Text, object Start, object Length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string NoteText(object Text, object Start, object Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.NoteText(System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Text" Type="System.Object" />
        <Parameter Name="Start" Type="System.Object" />
        <Parameter Name="Length" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Text">要添加到说明中的文本（最多 255 个字符）。 该文本将从 <c>Start</c> 位置处开始插入，并替换现有注释的 <c>Length</c> 个字符。 如果省略此参数，则此方法将返回该注释中从 <c>Start</c> 位置开始的 <c>Length</c> 个字符的当前文本。</param>
        <param name="Start">所设置或返回的文本的起始位置。 如果省略此参数，则此方法将从第一个字符开始。 若要向该注释追加文本，请指定一个比现有注释中字符数大的数字。</param>
        <param name="Length">要设置或返回的字符数。 如果省略此参数，则 Microsoft Office Excel 将设置或返回从注释的起始位置到末尾的字符（最多 255 个字符）。 如果从注释的 <c>Start</c> 到末尾有 255 个以上的字符，则此方法只返回 255 个字符。</param>
        <summary>获取或设置与 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件相关联的单元格说明。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 单元记录已替换为范围注释。 有关详细信息, 请参阅<xref:Microsoft.Office.Interop.Excel.Comment>对象。  
  
 若要添加包含255个以上字符的注释, 请使用此方法一次指定前255个字符, 然后再次使用它来追加便笺的其余部分 (一次不超过255个字符)。  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.NoteText%2A>方法将注释添加<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>到, 然后提示用户通过使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.ClearNotes%2A>方法来删除便笺。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#119](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#119)]
 [!code-vb[Trin_ExcelXmlMappedRange#119](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#119)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NumberFormat">
      <MemberSignature Language="C#" Value="public object NumberFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object NumberFormat" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.NumberFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的格式代码。</summary>
        <value><see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的格式代码。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`null` 控件<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>中的所有单元格都不具有相同的数字格式, 则此属性返回。  
  
 格式代码与 "**设置单元格格式**" 对话框中的 "**格式代码**" 选项相同。 函数使用与和<xref:Microsoft.Office.Tools.Excel.NamedRange.NumberFormat%2A> <xref:Microsoft.Office.Tools.Excel.NamedRange.NumberFormatLocal%2A>属性不同的格式代码字符串。 `Format`  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.NumberFormat%2A>属性设置<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>中日期字符串的格式。 该示例还使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.NumberFormatLocal%2A>属性以用户的语言显示日期格式。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerDateCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#41](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#41)]
 [!code-vb[Trin_ExcelXmlMappedRange#41](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#41)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NumberFormatLocal">
      <MemberSignature Language="C#" Value="public object NumberFormatLocal { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object NumberFormatLocal" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.NumberFormatLocal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的采用用户语言的格式代码。</summary>
        <value><see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的采用用户语言的格式代码。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 函数使用与和<xref:Microsoft.Office.Tools.Excel.NamedRange.NumberFormat%2A> <xref:Microsoft.Office.Tools.Excel.NamedRange.NumberFormatLocal%2A>属性不同的格式代码字符串。 `Format`  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.NumberFormat%2A>属性设置<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>中日期字符串的格式。 该示例还使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.NumberFormatLocal%2A>属性以用户的语言显示日期格式。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerDateCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#41](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#41)]
 [!code-vb[Trin_ExcelXmlMappedRange#41](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#41)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Offset">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Tools.Excel.XmlMappedRange_OffsetType Offset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Tools.Excel.XmlMappedRange_OffsetType Offset" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.Offset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Tools.Excel.XmlMappedRange_OffsetType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，它表示距离 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的偏移量。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，表示距离 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的偏移量。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Offset%2A>属性应与以下参数一起使用。  
  
|参数|说明|  
|---------------|-----------------|  
|`RowOffset`|范围将偏移的行数 (正值、负值或 0 (零))。 正值表示向下偏移, 负值为向上偏移。 默认值为 0。|  
|`ColumnOffset`|范围要偏移的列数 (正值、负值或 0 (零))。 正值表示向右偏移, 负值表示向左偏移。 默认值为 0。|  
  
 如果尝试在不指定<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Offset%2A>任何参数的情况下<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Offset%2A>使用, 将<xref:Microsoft.Office.Tools.Excel.XmlMappedRange_OffsetType>获取一个对象, 该对象是 Visual Studio 基础结构中的 Office 开发工具的一部分, 不应在代码中直接使用。  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Offset%2A>属性来选择一个范围, 该范围<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>从向右三个单元格偏移, 并向下移动三个单元格。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#42](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#42)]
 [!code-vb[Trin_ExcelXmlMappedRange#42](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#42)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Orientation">
      <MemberSignature Language="C#" Value="public object Orientation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Orientation" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.Orientation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个指定文本方向的值。</summary>
        <value>一个 -90 至 90 度范围内的整数，指定文本方向。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Orientation%2A>属性<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>在中显示垂直文本。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#43](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#43)]
 [!code-vb[Trin_ExcelXmlMappedRange#43](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#43)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OutlineLevel">
      <MemberSignature Language="C#" Value="public object OutlineLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object OutlineLevel" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.OutlineLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 的当前大纲级别。</summary>
        <value><see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 的当前大纲级别。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 第一级是最外面的摘要级别。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PageBreak">
      <MemberSignature Language="C#" Value="public int PageBreak { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PageBreak" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.PageBreak" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置分页符的位置。</summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以使用以下<xref:Microsoft.Office.Interop.Excel.XlPageBreak>值之一设置此属性:  
  
-   <xref:Microsoft.Office.Interop.Excel.XlPageBreak.xlPageBreakAutomatic>  
  
-   <xref:Microsoft.Office.Interop.Excel.XlPageBreak.xlPageBreakManual>  
  
-   <xref:Microsoft.Office.Interop.Excel.XlPageBreak.xlPageBreakNone>  
  
 此属性可以返回自动或手动分页符的位置, 但它只能设置手动分隔的位置 (只能设置为<xref:Microsoft.Office.Interop.Excel.XlPageBreak.xlPageBreakManual>或<xref:Microsoft.Office.Interop.Excel.XlPageBreak.xlPageBreakNone>)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.PageBreak%2A>属性来设置分页符。 <xref:Microsoft.Office.Tools.Excel.XmlMappedRange> 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#45](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#45)]
 [!code-vb[Trin_ExcelXmlMappedRange#45](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#45)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public object Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Parent" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Worksheet" />，它表示包含 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的工作表。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.Worksheet" />，表示包含 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的工作表。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Parent%2A>属性显示的父级<xref:Microsoft.Office.Interop.Excel.Worksheet?displayProperty=fullName> <xref:Microsoft.Office.Tools.Excel.XmlMappedRange>的名称。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#46](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#46)]
 [!code-vb[Trin_ExcelXmlMappedRange#46](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#46)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public object Parse (object ParseLine, object Destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Parse(object ParseLine, object Destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.Parse(System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ParseLine" Type="System.Object" />
        <Parameter Name="Destination" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="ParseLine">一个字符串，包含指示应在何处拆分单元格的左中括号和右中括号。  
  
例如，“<c>[xxx][xxx]</c>”会在目标范围的第一列中插入前三个字符，并在第二列中插入随后的三个字符。  
  
如果省略此参数，则 Microsoft Office Excel 基于该范围中左上角单元格的间距猜测在何处拆分列。 如果要使用另一个范围来猜测分析行，请将 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 用作 <c>ParseLine</c> 参数。 该范围必须是正被分析的那些单元格之一。 <c>ParseLine</c> 参数不能超过 255 个字符，包括括号和空格。</param>
        <param name="Destination">一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，表示分析数据的目标范围的左上角。 如果省略此参数，则 Excel 就地分析。</param>
        <summary>分析数据的范围并将其分成多个单元格</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Parse%2A>方法将的值从单元格 A5 开始分析为三个不同的<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>单元格。 此代码示例假定当前工作表包含<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>使用类型`int`的`CustomerAddress1Cell`对应架构元素命名的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#120](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#120)]
 [!code-vb[Trin_ExcelXmlMappedRange#120](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#120)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PasteSpecial">
      <MemberSignature Language="C#" Value="public object PasteSpecial (Microsoft.Office.Interop.Excel.XlPasteType Paste = Microsoft.Office.Interop.Excel.XlPasteType.xlPasteAll, Microsoft.Office.Interop.Excel.XlPasteSpecialOperation Operation = Microsoft.Office.Interop.Excel.XlPasteSpecialOperation.xlPasteSpecialOperationNone, object SkipBlanks, object Transpose);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object PasteSpecial(valuetype Microsoft.Office.Interop.Excel.XlPasteType Paste, valuetype Microsoft.Office.Interop.Excel.XlPasteSpecialOperation Operation, object SkipBlanks, object Transpose) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.PasteSpecial(Microsoft.Office.Interop.Excel.XlPasteType,Microsoft.Office.Interop.Excel.XlPasteSpecialOperation,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Paste" Type="Microsoft.Office.Interop.Excel.XlPasteType" />
        <Parameter Name="Operation" Type="Microsoft.Office.Interop.Excel.XlPasteSpecialOperation" />
        <Parameter Name="SkipBlanks" Type="System.Object" />
        <Parameter Name="Transpose" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Paste">该范围中要粘贴的部分。  
  
可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlPasteType" /> 值之一： 
 <see cref="F:Microsoft.Office.Interop.Excel.XlPasteType.xlPasteAll" /><see cref="F:Microsoft.Office.Interop.Excel.XlPasteType.xlPasteAllExceptBorders" /><see cref="F:Microsoft.Office.Interop.Excel.XlPasteType.xlPasteColumnWidths" /><see cref="F:Microsoft.Office.Interop.Excel.XlPasteType.xlPasteComments" /><see cref="F:Microsoft.Office.Interop.Excel.XlPasteType.xlPasteFormats" /><see cref="F:Microsoft.Office.Interop.Excel.XlPasteType.xlPasteFormulas" /><see cref="F:Microsoft.Office.Interop.Excel.XlPasteType.xlPasteFormulasAndNumberFormats" /><see cref="F:Microsoft.Office.Interop.Excel.XlPasteType.xlPasteValidation" /><see cref="F:Microsoft.Office.Interop.Excel.XlPasteType.xlPasteValues" /><see cref="F:Microsoft.Office.Interop.Excel.XlPasteType.xlPasteValuesAndNumberFormats" /></param>
        <param name="Operation">粘贴操作。  
  
可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlPasteSpecialOperation" /> 值之一： 
 <see cref="F:Microsoft.Office.Interop.Excel.XlPasteSpecialOperation.xlPasteSpecialOperationAdd" /><see cref="F:Microsoft.Office.Interop.Excel.XlPasteSpecialOperation.xlPasteSpecialOperationDivide" /><see cref="F:Microsoft.Office.Interop.Excel.XlPasteSpecialOperation.xlPasteSpecialOperationMultiply" /><see cref="F:Microsoft.Office.Interop.Excel.XlPasteSpecialOperation.xlPasteSpecialOperationNone" /><see cref="F:Microsoft.Office.Interop.Excel.XlPasteSpecialOperation.xlPasteSpecialOperationSubtract" /></param>
        <param name="SkipBlanks">如果不将剪贴板上该范围中的空单元格粘贴到目标范围，则为 <see langword="true" />。 默认值为 <see langword="false" />。</param>
        <param name="Transpose">如果在粘贴该范围时对行和列进行转置，则为 <see langword="true" />。 默认值为 <see langword="false" />。</param>
        <summary>将 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 的内容从剪贴板粘贴到 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件中。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Copy%2A>代码示例使用方法将<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>复制到剪贴板<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.PasteSpecial%2A> , 然后使用方法将该范围复制到不同<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>的。 此代码示例假定当前工作表包含两个<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>名为`CustomerFirstNameCell`和`CustomerLastNameCell`的控件。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#106](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#106)]
 [!code-vb[Trin_ExcelXmlMappedRange#106](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#106)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Phonetic">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Phonetic Phonetic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Phonetic Phonetic" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.Phonetic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Phonetic</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:Microsoft.Office.Interop.Excel.Phonetic" /> 对象，它包含 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件中的特定拼音文本字符串的有关信息。</summary>
        <value><see cref="T:Microsoft.Office.Interop.Excel.Phonetic" /> 对象，包含 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件中的特定拼音文本字符串的有关信息。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性提供与早期版本的 Microsoft Office Excel 的兼容性。 应使用<xref:Microsoft.Office.Tools.Excel.NamedRange.Phonetics%2A>(`index`), 其中 index 是拼音文本的索引号, 用于返回单个<xref:Microsoft.Office.Interop.Excel.Phonetic>对象。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Phonetics">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Phonetics Phonetics { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Phonetics Phonetics" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.Phonetics" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Phonetics</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:Microsoft.Office.Interop.Excel.Phonetics" /> 控件的 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 集合。</summary>
        <value><see cref="T:Microsoft.Office.Interop.Excel.Phonetics" /> 控件的 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 集合。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PivotCell">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.PivotCell PivotCell { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.PivotCell PivotCell" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.PivotCell" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.PivotCell</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.PivotCell" />，它表示数据透视表中的一个单元格。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.PivotCell" />，表示数据透视表中的一个单元格。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PivotField">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.PivotField PivotField { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.PivotField PivotField" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.PivotField" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.PivotField</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.PivotField" />，它表示包含 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的左上角的数据透视表字段。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.PivotField" />，表示包含 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的左上角的数据透视表字段。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PivotItem">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.PivotItem PivotItem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.PivotItem PivotItem" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.PivotItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.PivotItem</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.PivotItem" />，它表示包含 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的左上角的数据透视表项。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.PivotItem" />，表示包含 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的左上角的数据透视表项。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PivotTable">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.PivotTable PivotTable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.PivotTable PivotTable" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.PivotTable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.PivotTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.PivotTable" />，它表示包含 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的左上角的数据透视表，或是与数据透视图相关联的数据透视表。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.PivotTable" />，表示包含 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的左上角的数据透视表，或是与数据透视图相关联的数据透视表。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Precedents">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range Precedents { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range Precedents" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.Precedents" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，它表示 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的所有引用单元格。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，表示 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的所有引用单元格。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果有多个引用单元格, 则这<xref:Microsoft.Office.Interop.Excel.Range>可以是多重选择 (对象的联合)。  
  
   
  
## Examples  
 下面的代码示例将 A2 单元格中的引用设置为引用单元格 A1, 然后在中<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>设置引用以引用单元格 a2。 然后, 该代码示例使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Precedents%2A>属性来选择的<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>引用单元格, 即单元格 A1 和 A2。 此代码示例假定当前工作表包含<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>使用类型`int`的`CustomerAddress1Cell`对应架构元素命名的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#52](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#52)]
 [!code-vb[Trin_ExcelXmlMappedRange#52](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#52)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PrefixCharacter">
      <MemberSignature Language="C#" Value="public object PrefixCharacter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object PrefixCharacter" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.PrefixCharacter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的前缀字符。</summary>
        <value><see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的前缀字符。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 前缀作为字符串返回。 尝试将返回的对象强制转换为 char 会导致无效的强制转换异常。  
  
 如果属性为`false`, 则此前缀字符对于文本标签为 ", 或为空。 <xref:Microsoft.Office.Interop.Excel._Application.TransitionNavigKeys%2A> 如果属性为`true`, 则此字符对于左对齐标签为 ""; 对于右对齐标签, 为 ^; 对于 "居中" 标签, 则为 ""; 对于重复标签, 则为 "空"。 <xref:Microsoft.Office.Interop.Excel._Application.TransitionNavigKeys%2A>  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.PrefixCharacter%2A>属性显示的前缀字符。 <xref:Microsoft.Office.Tools.Excel.XmlMappedRange> 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#53](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#53)]
 [!code-vb[Trin_ExcelXmlMappedRange#53](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#53)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Previous">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range Previous { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range Previous" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.Previous" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个表示上一个单元格的 <see cref="T:Microsoft.Office.Interop.Excel.Range" />。</summary>
        <value>一个表示上一个单元格的 <see cref="T:Microsoft.Office.Interop.Excel.Range" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性模拟按 SHIFT + TAB;但与键组合不同, 属性返回上一个单元格, 而不选择它。  
  
 在受保护的工作表上, 此属性返回上一个未锁定的单元格。 在不受保护的工作表中, 此属性始终返回紧邻指定单元格左侧的单元格。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Previous%2A>属性选择左侧<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>的单元格。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#54](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#54)]
 [!code-vb[Trin_ExcelXmlMappedRange#54](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#54)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PrintOut">
      <MemberSignature Language="C#" Value="public object PrintOut (object From, object To, object Copies, object Preview, object ActivePrinter, object PrintToFile, object Collate, object PrToFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object PrintOut(object From, object To, object Copies, object Preview, object ActivePrinter, object PrintToFile, object Collate, object PrToFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.PrintOut(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="From" Type="System.Object" />
        <Parameter Name="To" Type="System.Object" />
        <Parameter Name="Copies" Type="System.Object" />
        <Parameter Name="Preview" Type="System.Object" />
        <Parameter Name="ActivePrinter" Type="System.Object" />
        <Parameter Name="PrintToFile" Type="System.Object" />
        <Parameter Name="Collate" Type="System.Object" />
        <Parameter Name="PrToFileName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="From">To be added.</param>
        <param name="To">To be added.</param>
        <param name="Copies">To be added.</param>
        <param name="Preview">To be added.</param>
        <param name="ActivePrinter">To be added.</param>
        <param name="PrintToFile">To be added.</param>
        <param name="Collate">To be added.</param>
        <param name="PrToFileName">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrintOutEx">
      <MemberSignature Language="C#" Value="public object PrintOutEx (object From, object To, object Copies, object Preview, object ActivePrinter, object PrintToFile, object Collate, object PrToFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object PrintOutEx(object From, object To, object Copies, object Preview, object ActivePrinter, object PrintToFile, object Collate, object PrToFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.PrintOutEx(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="From" Type="System.Object" />
        <Parameter Name="To" Type="System.Object" />
        <Parameter Name="Copies" Type="System.Object" />
        <Parameter Name="Preview" Type="System.Object" />
        <Parameter Name="ActivePrinter" Type="System.Object" />
        <Parameter Name="PrintToFile" Type="System.Object" />
        <Parameter Name="Collate" Type="System.Object" />
        <Parameter Name="PrToFileName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="From">要从其处开始打印的页码。 若忽略此参数，则从第一页开始打印。</param>
        <param name="To">要打印的最后一页的页码。 若忽略此参数，则打印至最后一页。</param>
        <param name="Copies">要打印的份数。 如果忽略此参数，则打印一份。</param>
        <param name="Preview">若要在打印对象前让 Microsoft Office Excel 调用打印预览，请使用 <see langword="true" />。 若要立即打印对象，请使用 <see langword="false" />。</param>
        <param name="ActivePrinter">设置活动打印机的名称。</param>
        <param name="PrintToFile">若要打印到文件，请使用 <see langword="true" />。 若未指定 <c>PrToFileName</c>，则 Excel 会提示用户输入输出文件的名称。</param>
        <param name="Collate">若逐份打印多个副本，请使用 <see langword="true" />。</param>
        <param name="PrToFileName">如果 <c>PrintToFile</c> 设为 <see langword="true" />，则此参数指定要打印到的文件的名称。</param>
        <summary>打印输出 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" />。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `From` 和`To`中的 "页" 是指打印页, 而不是指向范围内的页。  
  
   
  
## Examples  
 下面的代码示例在上`EmployeeNameCell` `Sheet1`设置<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>控件的值。 接下来, 此示例将内容`EmployeeNameCell`的前两页的一个副本打印到默认打印机。  
  
> [!NOTE]
>  通常, 从 XML 文件<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>填充控件。 为了简单起见, 此示例对控件的值进行硬编码。  
  
 [!code-csharp[Trin_ExcelWorkbook_Additional#23](~/snippets/csharp/VS_Snippets_OfficeSP/trin_excelworkbook_additional/cs/ThisWorkbook.cs#23)]
 [!code-vb[Trin_ExcelWorkbook_Additional#23](~/snippets/visualbasic/VS_Snippets_OfficeSP/trin_excelworkbook_additional/vb/ThisWorkbook.vb#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PrintPreview">
      <MemberSignature Language="C#" Value="public object PrintPreview (object EnableChanges);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object PrintPreview(object EnableChanges) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.PrintPreview(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="EnableChanges" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="EnableChanges">如果为 <see langword="true" />，则允许在显示打印预览时更改边距和页面设置；否则为 <see langword="false" />。</param>
        <summary>显示 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的预览（显示打印时的外观）。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.PrintPreview%2A>方法显示的打印预览。 <xref:Microsoft.Office.Tools.Excel.XmlMappedRange> 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#122](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#122)]
 [!code-vb[Trin_ExcelXmlMappedRange#122](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#122)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryTable">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.QueryTable QueryTable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.QueryTable QueryTable" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.QueryTable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.QueryTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.QueryTable" />，它表示与 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件相交的查询表。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.QueryTable" />，表示与 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件相交的查询表。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.QueryTable%2A>属性刷新与<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>相交的查询表。 此代码示例假定当前工作表包含一个<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>名为的, 该名称`CustomerLastNameCell`与查询表相交。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#55](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#55)]
 [!code-vb[Trin_ExcelXmlMappedRange#55](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#55)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadingOrder">
      <MemberSignature Language="C#" Value="public int ReadingOrder { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReadingOrder" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.ReadingOrder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的读取顺序。</summary>
        <value>以下值之一：<see cref="F:Microsoft.Office.Interop.Excel.Constants.xlRTL" />（从右向左）、<see cref="F:Microsoft.Office.Interop.Excel.Constants.xlLTR" />（从左向右）或 <see cref="F:Microsoft.Office.Interop.Excel.Constants.xlContext" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 其中一些常量可能不可用, 具体取决于语言支持 (美国美式英语）。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.ReadingOrder%2A>属性来反转的读取顺序<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>, 如果所选或安装的当前语言支持它。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#56](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#56)]
 [!code-vb[Trin_ExcelXmlMappedRange#56](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#56)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveDuplicates">
      <MemberSignature Language="C#" Value="public void RemoveDuplicates (object Columns, Microsoft.Office.Interop.Excel.XlYesNoGuess Header = Microsoft.Office.Interop.Excel.XlYesNoGuess.xlNo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveDuplicates(object Columns, valuetype Microsoft.Office.Interop.Excel.XlYesNoGuess Header) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.RemoveDuplicates(System.Object,Microsoft.Office.Interop.Excel.XlYesNoGuess)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Columns" Type="System.Object" />
        <Parameter Name="Header" Type="Microsoft.Office.Interop.Excel.XlYesNoGuess" />
      </Parameters>
      <Docs>
        <param name="Columns">包含重复信息的列的索引数组。 如果未传入任何参数则假定所有列都包含重复信息。</param>
        <param name="Header">一个 <see langword="XlYesNoGuess" />，它指定第一行中是否包含标题信息。 <see langword="xlNo" /> 是默认值；如果希望让 Excel 尝试确定标题，请指定 <see langword="xlGuess" />。</param>
        <summary>从某一范围的值中移除重复值。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveSubtotal">
      <MemberSignature Language="C#" Value="public object RemoveSubtotal ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object RemoveSubtotal() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.RemoveSubtotal" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件移除小计。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public bool Replace (object What, object Replacement, object LookAt, object SearchOrder, object MatchCase, object MatchByte, object SearchFormat, object ReplaceFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Replace(object What, object Replacement, object LookAt, object SearchOrder, object MatchCase, object MatchByte, object SearchFormat, object ReplaceFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.Replace(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="What" Type="System.Object" />
        <Parameter Name="Replacement" Type="System.Object" />
        <Parameter Name="LookAt" Type="System.Object" />
        <Parameter Name="SearchOrder" Type="System.Object" />
        <Parameter Name="MatchCase" Type="System.Object" />
        <Parameter Name="MatchByte" Type="System.Object" />
        <Parameter Name="SearchFormat" Type="System.Object" />
        <Parameter Name="ReplaceFormat" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="What">希望 Microsoft Office Excel 搜索的字符串。</param>
        <param name="Replacement">替换字符串。</param>
        <param name="LookAt">可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlLookAt" /> 常数之一：<see cref="F:Microsoft.Office.Interop.Excel.XlLookAt.xlWhole" /> 或 <see cref="F:Microsoft.Office.Interop.Excel.XlLookAt.xlPart" />。</param>
        <param name="SearchOrder">可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlSearchOrder" /> 常数之一：<see cref="F:Microsoft.Office.Interop.Excel.XlSearchOrder.xlByRows" /> 或 <see cref="F:Microsoft.Office.Interop.Excel.XlSearchOrder.xlByColumns" />。</param>
        <param name="MatchCase">如果在搜索时区分大小写，则为 <see langword="true" />。</param>
        <param name="MatchByte">仅当已在 Excel 中选择或安装双字节语言支持时，才会用到此参数。 如果让双字节字符仅与双字节字符相匹配，则为 <see langword="true" />；如果让双字节字符与其单字节等效字符相匹配，则为 <see langword="false" />。</param>
        <param name="SearchFormat">该方法的搜索格式。</param>
        <param name="ReplaceFormat">该方法的替换格式。</param>
        <summary>将 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件中指定的字符替换为新字符串。</summary>
        <returns>如果指定字符在 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件中，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此方法不会更改选择或活动单元格。  
  
 每次使用`LookAt`此`SearchOrder`方法`MatchCase`时, `MatchByte`都会保存、、和的设置。 如果在下一次调用方法时未指定这些参数的值, 则使用保存的值。 设置这些参数将更改 "**查找**" 对话框中的设置, 更改 "**查找**" 对话框中的设置将更改在省略参数时使用的保存值。 若要避免出现问题, 请在每次使用此方法时显式设置这些参数。  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Replace%2A>方法将字符串 "Smith" 替换为<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>中的字符串 "."。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#123](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#123)]
 [!code-vb[Trin_ExcelXmlMappedRange#123](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#123)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Resize">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Tools.Excel.XmlMappedRange_ResizeType Resize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Tools.Excel.XmlMappedRange_ResizeType Resize" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.Resize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Tools.Excel.XmlMappedRange_ResizeType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个基于 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 控件调整大小的 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" />。</summary>
        <value>一个基于 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 控件调整大小的 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Resize%2A>属性应与以下参数一起使用。  
  
|参数|说明|  
|---------------|-----------------|  
|`RowSize`|新范围中的行数。 如果省略此参数, 则该范围中的行数保持不变。|  
|`ColumnSize`|新范围中的列数。 如果省略此参数, 则该范围中的列数将保持不变。|  
  
 如果尝试在不指定<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Resize%2A>任何参数的情况下<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Resize%2A>使用, 将<xref:Microsoft.Office.Tools.Excel.XmlMappedRange_ResizeType>获取一个对象, 该对象是 Visual Studio 基础结构中的 Office 开发工具的一部分, 不应在代码中直接使用。  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Resize%2A>属性获取基于<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>的更大范围, 然后选择新的范围。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#57](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#57)]
 [!code-vb[Trin_ExcelXmlMappedRange#57](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#57)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Row">
      <MemberSignature Language="C#" Value="public int Row { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Row" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.Row" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取包含 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的行的行号。</summary>
        <value>包含 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的行的行号。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Column%2A>使用和<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Row%2A>属性来显示<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>名为`CustomerLastNameCell`的列和行号。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#7](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#7)]
 [!code-vb[Trin_ExcelXmlMappedRange#7](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RowDifferences">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range RowDifferences (object Comparison);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Interop.Excel.Range RowDifferences(object Comparison) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.RowDifferences(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Comparison" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Comparison">要与 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 进行比较的一个单元格。</param>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，它表示每一行中其内容与比较单元格不同的单元格。</summary>
        <returns>一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，表示每一行中其内容与比较单元格不同的单元格。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RowHeight">
      <MemberSignature Language="C#" Value="public object RowHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object RowHeight" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.RowHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置包含 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的行的高度（以磅为单位）。</summary>
        <value>包含 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的行的高度（以磅为单位）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.ColumnWidth%2A>和<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.RowHeight%2A>属性来显示的<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>宽度和高度。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#8](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#8)]
 [!code-vb[Trin_ExcelXmlMappedRange#8](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rows">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range Rows { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range Rows" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.Rows" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，它表示包含 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的行。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，表示包含 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的行。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Rows%2A>属性向的行<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>添加注释。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#58](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#58)]
 [!code-vb[Trin_ExcelXmlMappedRange#58](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#58)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public object Run (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Run(object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.Run(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public object Select ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Select() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.Select" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>选择 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Selected">
      <MemberSignature Language="C#" Value="event Microsoft.Office.Interop.Excel.DocEvents_SelectionChangeEventHandler Selected;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.DocEvents_SelectionChangeEventHandler Selected" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.XmlMappedRange.Selected" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.DocEvents_SelectionChangeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当选择 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当选择更改<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>控件时, 将引发此事件。  
  
   
  
## Examples  
 下面的代码演示一个<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Selected>事件的处理程序, 该事件显示所选的<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>地址。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#204](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#204)]
 [!code-vb[Trin_ExcelXmlMappedRange#204](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#204)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectionChange">
      <MemberSignature Language="C#" Value="event Microsoft.Office.Interop.Excel.DocEvents_SelectionChangeEventHandler SelectionChange;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Interop.Excel.DocEvents_SelectionChangeEventHandler SelectionChange" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Excel.XmlMappedRange.SelectionChange" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.DocEvents_SelectionChangeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件内部的所选内容更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>控件中的所选内容更改时, 将引发此事件。  
  
   
  
## Examples  
 下面的代码演示一个<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.SelectionChange>事件的处理程序, 该事件显示所选的<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>地址。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#205](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#205)]
 [!code-vb[Trin_ExcelXmlMappedRange#205](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#205)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ServerActions">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Actions ServerActions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Actions ServerActions" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.ServerActions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Actions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取可以在 SharePoint 服务器上对 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 对象执行的操作。</summary>
        <value>可以在 SharePoint 服务器上对 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 对象执行的操作。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="set_Item">
      <MemberSignature Language="C#" Value="public void set_Item (object RowIndex, object ColumnIndex, object _arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void set_Item(object RowIndex, object ColumnIndex, object _arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.set_Item(System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="RowIndex" Type="System.Object" />
        <Parameter Name="ColumnIndex" Type="System.Object" />
        <Parameter Name="_arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="RowIndex">To be added.</param>
        <param name="ColumnIndex">To be added.</param>
        <param name="_arg2">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="set_Value">
      <MemberSignature Language="C#" Value="public void set_Value (object rangeValueDataType, object _arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void set_Value(object rangeValueDataType, object _arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.set_Value(System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rangeValueDataType" Type="System.Object" />
        <Parameter Name="_arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="rangeValueDataType">To be added.</param>
        <param name="_arg1">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPhonetic">
      <MemberSignature Language="C#" Value="public void SetPhonetic ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetPhonetic() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.SetPhonetic" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>为 <see cref="T:Microsoft.Office.Interop.Excel.Phonetic" /> 控件创建 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此<xref:Microsoft.Office.Interop.Excel.Phonetic>方法添加的<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>新对象会自动覆盖 (删除) 控件中的任何现有对象。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Show">
      <MemberSignature Language="C#" Value="public object Show ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Show() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.Show" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在活动窗口的内容中滚动，以便将 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件移到视图中。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowDependents">
      <MemberSignature Language="C#" Value="public object ShowDependents (object Remove);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ShowDependents(object Remove) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.ShowDependents(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Remove" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Remove">如果移除指向直接依赖单元格的某一级别的跟踪标志箭头，则为 <see langword="true" />；如果展开某一级别的跟踪标志箭头，则为 <see langword="false" />。 默认值为 <see langword="false" />。</param>
        <summary>绘制指向 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的直接依赖单元格的跟踪标志箭头。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例使单元格 A1 成为的依赖<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>项。 然后, 该示例使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.ShowDependents%2A>方法在<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>和依赖<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.NavigateArrow%2A>单元格之间绘制一个箭头, 并调用方法来选择从属单元。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#118](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#118)]
 [!code-vb[Trin_ExcelXmlMappedRange#118](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#118)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowDetail">
      <MemberSignature Language="C#" Value="public object ShowDetail { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ShowDetail" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.ShowDetail" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取和设置一个对象，该对象指示是否展开了 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的大纲（以便列或行的详细信息可见）。</summary>
        <value>如果为 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件展开大纲（以使列或行的详细信息可见），则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果控件在数据透视表中, 则在显示 "详细信息" 时, 此属性设置为`true`。 <xref:Microsoft.Office.Tools.Excel.XmlMappedRange>  
  
 <xref:Microsoft.Office.Tools.Excel.XmlMappedRange>如果控件不在数据透视表中, 则以下语句为 true:  
  
-   <xref:Microsoft.Office.Tools.Excel.XmlMappedRange>控件必须位于单个汇总行或列中。  
  
-   如果行或`false`列的任何子级处于隐藏状态, 则此属性返回。  
  
-   将此属性设置`true`为等效于显示摘要行或列的所有子级。  
  
-   将此属性设置`false`为等效于隐藏摘要行或列的所有子级。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowErrors">
      <MemberSignature Language="C#" Value="public object ShowErrors ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ShowErrors() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.ShowErrors" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>绘制通过引用单元格树指向错误源单元格的跟踪标志箭头，并返回包含该单元格的范围。</summary>
        <returns>一个包含含有错误的单元格的范围。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowPrecedents">
      <MemberSignature Language="C#" Value="public object ShowPrecedents (object Remove);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ShowPrecedents(object Remove) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.ShowPrecedents(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Remove" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Remove">如果移除指向直接引用单元格的某一级别的跟踪标志箭头，则为 <see langword="true" />；如果展开某一级别的跟踪标志箭头，则为 <see langword="false" />。 默认值为 <see langword="false" />。</param>
        <summary>绘制指向 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的直接引用单元格的跟踪标志箭头。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例使单元格 A1 成为的引用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>单元格。 然后, 该示例使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.ShowPrecedents%2A>方法在<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>和引用单元格之间绘制一个箭头。 此代码示例假定当前工作表包含<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>使用类型`int`的`CustomerAddress1Cell`对应架构元素命名的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#125](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#125)]
 [!code-vb[Trin_ExcelXmlMappedRange#125](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#125)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShrinkToFit">
      <MemberSignature Language="C#" Value="public object ShrinkToFit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ShrinkToFit" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.ShrinkToFit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示文本是否自动缩小以适合可用的列宽。</summary>
        <value>如果文本自动缩小以适合可用的列宽，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SmartTags">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.SmartTags SmartTags { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.SmartTags SmartTags" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.SmartTags" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.SmartTags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SoundNote">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.SoundNote SoundNote { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.SoundNote SoundNote" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.SoundNote" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.SoundNote</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不应使用此属性。 已从 Microsoft Office Excel 中删除声音记录。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SparklineGroups">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.SparklineGroups SparklineGroups { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.SparklineGroups SparklineGroups" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.SparklineGroups" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.SparklineGroups</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个对象，该对象表示来自指定范围的现有迷你图组。</summary>
        <value>表示来自指定范围的现有迷你图组的对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  此属性显示在面向的[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]Excel 2007 项目中的 IntelliSense 中。 但是, 不能在 Excel 2007 项目中使用此属性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Speak">
      <MemberSignature Language="C#" Value="public void Speak (object SpeakDirection, object SpeakFormulas);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Speak(object SpeakDirection, object SpeakFormulas) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.Speak(System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SpeakDirection" Type="System.Object" />
        <Parameter Name="SpeakFormulas" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="SpeakDirection">朗读方向（按行或列）。</param>
        <param name="SpeakFormulas">为 <see langword="true" /> 时，使公式被发送到具有公式的单元格的文字语音转换 (TTS) 引擎。 如果单元格没有公式则发送值；为 <see langword="false" />（默认）时，使值始终发送到 TTS 引擎。</param>
        <summary>导致按行顺序或列顺序朗读 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的单元格。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpecialCells">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range SpecialCells (Microsoft.Office.Interop.Excel.XlCellType Type, object Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Interop.Excel.Range SpecialCells(valuetype Microsoft.Office.Interop.Excel.XlCellType Type, object Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.SpecialCells(Microsoft.Office.Interop.Excel.XlCellType,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Type" Type="Microsoft.Office.Interop.Excel.XlCellType" />
        <Parameter Name="Value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Type">要包括的单元格。  
  
可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlCellType" /> 值之一： 
 <see cref="F:Microsoft.Office.Interop.Excel.XlCellType.xlCellTypeAllFormatConditions" />。 任何格式的单元格。  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlCellType.xlCellTypeAllValidation" />。 具有验证条件的单元格。  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlCellType.xlCellTypeBlanks" />。 空单元格。  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlCellType.xlCellTypeComments" />。 包含说明的单元格。  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlCellType.xlCellTypeConstants" />。 包含常量的单元格。  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlCellType.xlCellTypeFormulas" />。 包含公式的单元格。  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlCellType.xlCellTypeLastCell" />。 所使用范围中的最后一个单元格。  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlCellType.xlCellTypeSameFormatConditions" />。 具有相同格式的单元格。  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlCellType.xlCellTypeSameValidation" />。 具有相同验证条件的单元格。  
  
 <see cref="F:Microsoft.Office.Interop.Excel.XlCellType.xlCellTypeVisible" />。 所有可见的单元格。</param>
        <param name="Value">如果 <c>Type</c> 为 <see cref="F:Microsoft.Office.Interop.Excel.XlCellType.xlCellTypeConstants" /> 或 <see cref="F:Microsoft.Office.Interop.Excel.XlCellType.xlCellTypeFormulas" />，则此参数用于确定要在结果中包含哪些类型的单元格。 这些值可以一起添加以返回多种类型。 默认情况下，无论是何种类型，都选择所有的常数或公式。 可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlSpecialCellsValue" /> 值之一： 
 <see cref="F:Microsoft.Office.Interop.Excel.XlSpecialCellsValue.xlErrors" /><see cref="F:Microsoft.Office.Interop.Excel.XlSpecialCellsValue.xlLogical" /><see cref="F:Microsoft.Office.Interop.Excel.XlSpecialCellsValue.xlNumbers" /><see cref="F:Microsoft.Office.Interop.Excel.XlSpecialCellsValue.xlTextValues" /></param>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，它表示匹配指定类型和值的所有单元格。</summary>
        <returns>一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，表示匹配指定类型和值的所有单元格。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.SpecialCells%2A>方法来获取和选择包含<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>中的注释的单元格范围。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#127](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#127)]
 [!code-vb[Trin_ExcelXmlMappedRange#127](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#127)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Style">
      <MemberSignature Language="C#" Value="public object Style { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Style" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.Style" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个表示 <see cref="T:Microsoft.Office.Interop.Excel.Style" /> 控件的样式的 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" />。</summary>
        <value>一个表示 <see cref="T:Microsoft.Office.Interop.Excel.Style" /> 控件的样式的 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Style%2A>属性显示的当前样式<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>的名称。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#60](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#60)]
 [!code-vb[Trin_ExcelXmlMappedRange#60](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#60)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SubscribeTo">
      <MemberSignature Language="C#" Value="public object SubscribeTo (string Edition, Microsoft.Office.Interop.Excel.XlSubscribeToFormat Format = Microsoft.Office.Interop.Excel.XlSubscribeToFormat.xlSubscribeToText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object SubscribeTo(string Edition, valuetype Microsoft.Office.Interop.Excel.XlSubscribeToFormat Format) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.SubscribeTo(System.String,Microsoft.Office.Interop.Excel.XlSubscribeToFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Edition" Type="System.String" />
        <Parameter Name="Format" Type="Microsoft.Office.Interop.Excel.XlSubscribeToFormat" />
      </Parameters>
      <Docs>
        <param name="Edition">To be added.</param>
        <param name="Format">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtotal">
      <MemberSignature Language="C#" Value="public object Subtotal (int GroupBy, Microsoft.Office.Interop.Excel.XlConsolidationFunction Function, object TotalList, object Replace, object PageBreaks, Microsoft.Office.Interop.Excel.XlSummaryRow SummaryBelowData = Microsoft.Office.Interop.Excel.XlSummaryRow.xlSummaryBelow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Subtotal(int32 GroupBy, valuetype Microsoft.Office.Interop.Excel.XlConsolidationFunction Function, object TotalList, object Replace, object PageBreaks, valuetype Microsoft.Office.Interop.Excel.XlSummaryRow SummaryBelowData) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.Subtotal(System.Int32,Microsoft.Office.Interop.Excel.XlConsolidationFunction,System.Object,System.Object,System.Object,Microsoft.Office.Interop.Excel.XlSummaryRow)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="GroupBy" Type="System.Int32" />
        <Parameter Name="Function" Type="Microsoft.Office.Interop.Excel.XlConsolidationFunction" />
        <Parameter Name="TotalList" Type="System.Object" />
        <Parameter Name="Replace" Type="System.Object" />
        <Parameter Name="PageBreaks" Type="System.Object" />
        <Parameter Name="SummaryBelowData" Type="Microsoft.Office.Interop.Excel.XlSummaryRow" />
      </Parameters>
      <Docs>
        <param name="GroupBy">要作为分组依据的字段，是从 1 开始的整数偏移量。</param>
        <param name="Function">小计函数。  
  
可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlConsolidationFunction" /> 值之一： 
 <see cref="F:Microsoft.Office.Interop.Excel.XlConsolidationFunction.xlAverage" /><see cref="F:Microsoft.Office.Interop.Excel.XlConsolidationFunction.xlCount" /><see cref="F:Microsoft.Office.Interop.Excel.XlConsolidationFunction.xlCountNums" /><see cref="F:Microsoft.Office.Interop.Excel.XlConsolidationFunction.xlMax" /><see cref="F:Microsoft.Office.Interop.Excel.XlConsolidationFunction.xlMin" /><see cref="F:Microsoft.Office.Interop.Excel.XlConsolidationFunction.xlProduct" /><see cref="F:Microsoft.Office.Interop.Excel.XlConsolidationFunction.xlStDev" /><see cref="F:Microsoft.Office.Interop.Excel.XlConsolidationFunction.xlStDevP" /><see cref="F:Microsoft.Office.Interop.Excel.XlConsolidationFunction.xlSum" /><see cref="F:Microsoft.Office.Interop.Excel.XlConsolidationFunction.xlUnknown" /><see cref="F:Microsoft.Office.Interop.Excel.XlConsolidationFunction.xlVar" /><see cref="F:Microsoft.Office.Interop.Excel.XlConsolidationFunction.xlVarP" /></param>
        <param name="TotalList">一个从 1 开始的字段偏移量数组，指示要将小计添加到的字段。</param>
        <param name="Replace">如果替换现有的小计，则为 <see langword="true" />。 默认值为 <see langword="false" />。</param>
        <param name="PageBreaks">如果在每组后面添加分页符，则为 <see langword="true" />。 默认值为 <see langword="false" />。</param>
        <param name="SummaryBelowData">放置与小计相关的摘要数据。  
  
可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlSummaryRow" /> 值之一： 
 <see cref="F:Microsoft.Office.Interop.Excel.XlSummaryRow.xlSummaryAbove" /><see cref="F:Microsoft.Office.Interop.Excel.XlSummaryRow.xlSummaryBelow" />（默认）</param>
        <summary>为 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件创建小计。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Summary">
      <MemberSignature Language="C#" Value="public object Summary { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Summary" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.Summary" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 是否为大纲摘要行或列。</summary>
        <value>如果 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 为大纲摘要行或列，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Table">
      <MemberSignature Language="C#" Value="public object Table (object RowInput, object ColumnInput);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Table(object RowInput, object ColumnInput) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.Table(System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="RowInput" Type="System.Object" />
        <Parameter Name="ColumnInput" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="RowInput">一个要用作表的行输入的单元格。</param>
        <param name="ColumnInput">一个要用作表的列输入的单元格。</param>
        <summary>根据输入值和在工作表上定义的公式创建数据表。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用数据表可以通过更改工作表中的某些常数值来执行假设分析, 以了解其他单元中的值如何受到影响。  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置包含有关 <see cref="P:Microsoft.Office.Tools.Excel.XmlMappedRange.Tag" /> 控件的数据的对象。</summary>
        <value>一个包含有关 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的数据的对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Tag%2A>属性的常见用途是存储<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>与控件密切关联的数据。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public object Text { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Text" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的文本。</summary>
        <value><see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的文本。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例对包含格式化<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Text%2A>数字<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Value2%2A>的单元格的和属性的差异进行比较。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#62](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#62)]
 [!code-vb[Trin_ExcelXmlMappedRange#62](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#62)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextToColumns">
      <MemberSignature Language="C#" Value="public object TextToColumns (object Destination, Microsoft.Office.Interop.Excel.XlTextParsingType DataType = Microsoft.Office.Interop.Excel.XlTextParsingType.xlDelimited, Microsoft.Office.Interop.Excel.XlTextQualifier TextQualifier = Microsoft.Office.Interop.Excel.XlTextQualifier.xlTextQualifierDoubleQuote, object ConsecutiveDelimiter, object Tab, object Semicolon, object Comma, object Space, object Other, object OtherChar, object FieldInfo, object DecimalSeparator, object ThousandsSeparator, object TrailingMinusNumbers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object TextToColumns(object Destination, valuetype Microsoft.Office.Interop.Excel.XlTextParsingType DataType, valuetype Microsoft.Office.Interop.Excel.XlTextQualifier TextQualifier, object ConsecutiveDelimiter, object Tab, object Semicolon, object Comma, object Space, object Other, object OtherChar, object FieldInfo, object DecimalSeparator, object ThousandsSeparator, object TrailingMinusNumbers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.TextToColumns(System.Object,Microsoft.Office.Interop.Excel.XlTextParsingType,Microsoft.Office.Interop.Excel.XlTextQualifier,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Destination" Type="System.Object" />
        <Parameter Name="DataType" Type="Microsoft.Office.Interop.Excel.XlTextParsingType" />
        <Parameter Name="TextQualifier" Type="Microsoft.Office.Interop.Excel.XlTextQualifier" />
        <Parameter Name="ConsecutiveDelimiter" Type="System.Object" />
        <Parameter Name="Tab" Type="System.Object" />
        <Parameter Name="Semicolon" Type="System.Object" />
        <Parameter Name="Comma" Type="System.Object" />
        <Parameter Name="Space" Type="System.Object" />
        <Parameter Name="Other" Type="System.Object" />
        <Parameter Name="OtherChar" Type="System.Object" />
        <Parameter Name="FieldInfo" Type="System.Object" />
        <Parameter Name="DecimalSeparator" Type="System.Object" />
        <Parameter Name="ThousandsSeparator" Type="System.Object" />
        <Parameter Name="TrailingMinusNumbers" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Destination">一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" />，指定 Microsoft Office Excel 在何处放置结果。 如果范围大于单个单元格，则使用左上角的单元格。</param>
        <param name="DataType">要拆分成多列的文本的格式。  
  
可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlTextParsingType" /> 常量之一： 
 <see cref="F:Microsoft.Office.Interop.Excel.XlTextParsingType.xlDelimited" />（默认值） 
 <see cref="F:Microsoft.Office.Interop.Excel.XlTextParsingType.xlFixedWidth" /></param>
        <param name="TextQualifier">可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlTextQualifier" /> 值之一： 
 <see cref="F:Microsoft.Office.Interop.Excel.XlTextQualifier.xlTextQualifierDoubleQuote" />（默认值） 
 <see cref="F:Microsoft.Office.Interop.Excel.XlTextQualifier.xlTextQualifierNone" /><see cref="F:Microsoft.Office.Interop.Excel.XlTextQualifier.xlTextQualifierSingleQuote" /></param>
        <param name="ConsecutiveDelimiter">如果让 Excel 将连续分隔符视为一个分隔符，则为 <see langword="true" />。 默认值为 <see langword="false" />。</param>
        <param name="Tab">如果让 <c>DataType</c> 为 <see cref="F:Microsoft.Office.Interop.Excel.XlTextParsingType.xlDelimited" />，并将制表符用作分隔符，则为 <see langword="true" />。 默认值为 <see langword="false" />。</param>
        <param name="Semicolon">如果让 <c>DataType</c> 为 <see cref="F:Microsoft.Office.Interop.Excel.XlTextParsingType.xlDelimited" />，并将分号用作分隔符，则为 <see langword="true" />。 默认值为 <see langword="false" />。</param>
        <param name="Comma">如果让 <c>DataType</c> 为 <see cref="F:Microsoft.Office.Interop.Excel.XlTextParsingType.xlDelimited" />，并将逗号用作分隔符，则为 <see langword="true" />。 默认值为 <see langword="false" />。</param>
        <param name="Space">如果让 <c>DataType</c> 为 <see cref="F:Microsoft.Office.Interop.Excel.XlTextParsingType.xlDelimited" />，并将空格字符用作分隔符，则为 <see langword="true" />。 默认值为 <see langword="false" />。</param>
        <param name="Other">如果让 <c>DataType</c> 为 <see cref="F:Microsoft.Office.Interop.Excel.XlTextParsingType.xlDelimited" />，并且将 <c>OtherChar</c> 参数指定的字符用作分隔符，则为 <see langword="true" />。 默认值为 <see langword="false" />。</param>
        <param name="OtherChar">当 <c>Other</c> 为 <see langword="true" /> 时的分隔符字符。 如果指定了多个字符，则只使用该字符串的第一个字符；忽略其余字符。</param>
        <param name="FieldInfo">一个数组，包含各个数据列的分析信息。 解释取决于 <c>DataType</c> 的值。 当对数据进行分隔时，此参数是一个由两元素数组组成的数组，每个两元素数组都指定特定列的转换选项。 第一个元素是列号（从 1 开始），第二个元素是指定如何分析列的 <see cref="T:Microsoft.Office.Interop.Excel.XlColumnDataType" /> 常量之一。  
  
可以是下列 <see cref="T:Microsoft.Office.Interop.Excel.XlColumnDataType" /> 值之一： 
 <see cref="F:Microsoft.Office.Interop.Excel.XlColumnDataType.xlGeneralFormat" /><see cref="F:Microsoft.Office.Interop.Excel.XlColumnDataType.xlTextFormat" /><see cref="F:Microsoft.Office.Interop.Excel.XlColumnDataType.xlMDYFormat" /><see cref="F:Microsoft.Office.Interop.Excel.XlColumnDataType.xlDMYFormat" /><see cref="F:Microsoft.Office.Interop.Excel.XlColumnDataType.xlYMDFormat" /><see cref="F:Microsoft.Office.Interop.Excel.XlColumnDataType.xlMYDFormat" /><see cref="F:Microsoft.Office.Interop.Excel.XlColumnDataType.xlDYMFormat" /><see cref="F:Microsoft.Office.Interop.Excel.XlColumnDataType.xlYDMFormat" /><see cref="F:Microsoft.Office.Interop.Excel.XlColumnDataType.xlEMDFormat" /><see cref="F:Microsoft.Office.Interop.Excel.XlColumnDataType.xlSkipColumn" />  
  
仅当已安装和选择繁体中文支持时，才会用到 <see cref="F:Microsoft.Office.Interop.Excel.XlColumnDataType.xlEMDFormat" />。 <see cref="F:Microsoft.Office.Interop.Excel.XlColumnDataType.xlEMDFormat" /> 指定要使用的繁体中文纪元日期。  
  
列说明符可以采用任何顺序。 如果对于输入数据中的特定列，给定的列说明符不存在，则用 <see cref="F:Microsoft.Office.Interop.Excel.XlColumnDataType.xlGeneralFormat" /> 设置对列进行分析。  
  
如果源数据具有固定宽度的列，则每个两元素数组中的第一个元素都指定该列中的起始字符位置（以整数形式指定；0（零）是第一个字符）。 两元素数组的第二个元素将该列的分析选项指定为从 1 至 9 的数字，如上面列出的那样。</param>
        <param name="DecimalSeparator">Excel 用于识别数字的小数点分隔符。 默认设置是系统设置。</param>
        <param name="ThousandsSeparator">Excel 用于识别数字的千位分隔符。 默认设置是系统设置。</param>
        <param name="TrailingMinusNumbers">以负号开头的数字。</param>
        <summary>将包含文本的单元格所在的列分析为几列。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下表显示了针对各种导入设置将文本导入到 Excel 中的结果。 数值结果将显示在最右边的列中。  
  
|系统小数点分隔符|系统千位分隔符|小数分隔符值|千位分隔符值|原始文本|Cell 值 (数据类型)|  
|------------------------------|--------------------------------|-----------------------------|-------------------------------|-------------------|------------------------------|  
|同期|逗号|逗号|同期|123.123,45|123123.45 (数值)|  
|同期|逗号|逗号|逗号|123.123,45|123.123, 45 (text)|  
|逗号|同期|逗号|同期|123,123.45|123123.45 (数值)|  
|同期|逗号|同期|逗号|123 123.45|123123.45 (文本)|  
|同期|逗号|同期|空格|123 123.45|123123.45 (数值)|  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.TextToColumns%2A>方法将由<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>空格分隔的日期字符串转换为三列。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#130](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#130)]
 [!code-vb[Trin_ExcelXmlMappedRange#130](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#130)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Top">
      <MemberSignature Language="C#" Value="public object Top { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Top" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.Top" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取从行 1 的顶部到 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的上边缘之间的距离（以磅为单位）。</summary>
        <value>从行 1 的顶部到 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的上边缘之间的距离（以磅为单位）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 该值以 double 形式返回。  
  
   
  
## Examples  
 下面的代码示例<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Left%2A>使用和<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Top%2A>属性来显示从列 A 的左边缘到的左边缘<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>的距离, 以及从第1行顶部到的<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>上边缘的距离。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#35](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#35)]
 [!code-vb[Trin_ExcelXmlMappedRange#35](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#35)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ungroup">
      <MemberSignature Language="C#" Value="public object Ungroup ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Ungroup() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.Ungroup" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>提升大纲中的 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件（即，降低其大纲级别）。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果该范围位于数据透视表中, 则此方法取消对该<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>控件中包含的项的分组。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnMerge">
      <MemberSignature Language="C#" Value="public void UnMerge ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnMerge() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.XmlMappedRange.UnMerge" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将一个合并区域分成多个单元格。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseStandardHeight">
      <MemberSignature Language="C#" Value="public object UseStandardHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object UseStandardHeight" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.UseStandardHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的行高是否等于此表的标准高度。</summary>
        <value>如果 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的行高等于工作表的标准高度，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseStandardWidth">
      <MemberSignature Language="C#" Value="public object UseStandardWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object UseStandardWidth" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.UseStandardWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的列宽是否等于此表的标准宽度。</summary>
        <value>如果 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的列宽等于工作表的标准宽度，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Validation">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Validation Validation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Validation Validation" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.Validation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Validation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:Microsoft.Office.Interop.Excel.Validation" /> 对象，该对象表示 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的数据验证。</summary>
        <value><see cref="T:Microsoft.Office.Interop.Excel.Validation" /> 对象，表示 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的数据验证。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Validation%2A>属性来显示验证错误, 前提是输入的<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>字符数少于三个。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#63](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#63)]
 [!code-vb[Trin_ExcelXmlMappedRange#63](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#63)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public object Value { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Value" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的值。</summary>
        <value><see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Value%2A>属性可与以下可选参数一起使用。 如果指定可选参数, 则必须在 Visual Basic 和`set_Value` C#中使用`get_Value`和访问器。  
  
|参数|说明|  
|---------------|-----------------|  
|`RangeValueDataType`|用于指定范围值数据类型的 <xref:Microsoft.Office.Interop.Excel.XlRangeValueDataType> 值之一。 默认值为 <xref:Microsoft.Office.Interop.Excel.XlRangeValueDataType.xlRangeValueDefault>。|  
|`_arg1`|<xref:Microsoft.Office.Tools.Excel.XmlMappedRange> 控件的值。 此参数仅`set_Value`用于 set 访问器。|  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例演示如何设置<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Value%2A>具有和不带可选参数的属性。 此代码示例假定当前工作表包含两个<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>名为`CustomerLastNameCell`和`CustomerFirstNameCell`的控件。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#64](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#64)]
 [!code-vb[Trin_ExcelXmlMappedRange#64](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#64)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value2">
      <MemberSignature Language="C#" Value="public object Value2 { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Value2" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.Value2" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件值。</summary>
        <value><see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性与<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Value%2A>属性<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Value2%2A>的不同之处在于不是参数化属性。  
  
   
  
## Examples  
 下面的代码示例对包含格式化<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Text%2A>数字<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Value%2A>的单元格的和属性的差异进行比较。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#62](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#62)]
 [!code-vb[Trin_ExcelXmlMappedRange#62](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#62)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VerticalAlignment">
      <MemberSignature Language="C#" Value="public object VerticalAlignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object VerticalAlignment" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.VerticalAlignment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的垂直对齐方式。</summary>
        <value><see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的垂直对齐方式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返回的垂直对齐方式可以是下列值之一:  
  
-   <xref:Microsoft.Office.Interop.Excel.Constants.xlBottom>  
  
-   <xref:Microsoft.Office.Interop.Excel.Constants.xlCenter>  
  
-   <xref:Microsoft.Office.Interop.Excel.Constants.xlDistributed>  
  
-   <xref:Microsoft.Office.Interop.Excel.Constants.xlJustify>  
  
-   <xref:Microsoft.Office.Interop.Excel.Constants.xlTop>  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.HorizontalAlignment%2A>和<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.VerticalAlignment%2A>属性将的<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>内容与右下方对齐。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#29](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#29)]
 [!code-vb[Trin_ExcelXmlMappedRange#29](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#29)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Width">
      <MemberSignature Language="C#" Value="public object Width { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Width" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.Width" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的宽度（以磅为单位）。</summary>
        <value><see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的宽度（以磅为单位）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Width%2A>使用和<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Height%2A>属性来显示<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>已命名`CustomerLastNameCell`的的宽度和高度。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#28](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#28)]
 [!code-vb[Trin_ExcelXmlMappedRange#28](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#28)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Worksheet">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Worksheet Worksheet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Worksheet Worksheet" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.Worksheet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Worksheet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Worksheet" />，它表示包含 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的工作表。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.Worksheet" />，表示包含 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的工作表。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 工作表是本机 Excel <xref:Microsoft.Office.Interop.Excel.Worksheet?displayProperty=fullName>, <xref:Microsoft.Office.Tools.Excel.Worksheet?displayProperty=fullName>而不是主机项。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.XmlMappedRange.Worksheet%2A>属性来显示<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>包含的工作表的名称。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#65](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#65)]
 [!code-vb[Trin_ExcelXmlMappedRange#65](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#65)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WrapText">
      <MemberSignature Language="C#" Value="public object WrapText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object WrapText" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.WrapText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示 Microsoft Office Excel 是否对 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件中的文本进行换行。</summary>
        <value>如果 Excel 对 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件中的文本进行换行，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果需要, Excel 将更改<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>控件的行高以容纳文本。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XPath">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XPath XPath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.XPath XPath" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.XmlMappedRange.XPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XPath</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.XPath" />，它表示映射到 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的元素的 XPath。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.XPath" />，表示映射到 <see cref="T:Microsoft.Office.Tools.Excel.XmlMappedRange" /> 控件的元素的 XPath。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 如果 xpath 为 "/ns1: <xref:Microsoft.Office.Tools.Excel.XmlMappedRange.XPath%2A> Customer/ns1: LastName", <xref:Microsoft.Office.Tools.Excel.XmlMappedRange>则下面的代码示例使用属性来删除的 xpath。 然后, 该示例显示的当前 XPath <xref:Microsoft.Office.Tools.Excel.XmlMappedRange>。 此代码示例假定当前工作表包含一个名<xref:Microsoft.Office.Tools.Excel.XmlMappedRange>为`CustomerLastNameCell`的。  
  
 [!code-csharp[Trin_ExcelXmlMappedRange#66](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/CS/Sheet1.cs#66)]
 [!code-vb[Trin_ExcelXmlMappedRange#66](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelXMLMappedRange/VB/Sheet1.vb#66)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
