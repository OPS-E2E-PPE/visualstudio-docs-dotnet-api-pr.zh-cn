<Type Name="XMLNode" FullName="Microsoft.Office.Tools.Word.XMLNode">
  <Metadata><Meta Name="ms.openlocfilehash" Value="70a4aee86cbb522b430cc3e2b3285ef51bf40ebc" /><Meta Name="ms.sourcegitcommit" Value="7439021cdeee6a9ef5d4640250701344f6cbba15" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="08/13/2019" /><Meta Name="ms.locfileid" Value="68999610" /></Metadata><TypeSignature Language="C#" Value="public interface XMLNode : IDisposable, System.ComponentModel.IComponent, System.ComponentModel.ISupportInitialize, System.Windows.Forms.IBindableComponent" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract XMLNode implements class System.ComponentModel.IComponent, class System.ComponentModel.ISupportInitialize, class System.IDisposable, class System.Windows.Forms.IBindableComponent" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Tools.Word.XMLNode" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Office.Tools.Word</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.IComponent</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Forms.IBindableComponent</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("29b82cde-df64-4c6f-a64f-87561e588ecb")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示文档上单个 XML 节点（可公开事件并可绑定到数据）。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当你在设计时将非重复架构元素映射到 Microsoft Office 的 Word 文档时, Visual Studio 将<xref:Microsoft.Office.Tools.Word.XMLNode>为每个元素创建一个控件, 该控件只允许在文档中出现一次。 非重复架构元素是`maxOccurs`属性设置为1的元素。  
  
 <xref:Microsoft.Office.Tools.Word.XMLNode>只能在设计时在 Word 文档级项目中创建控件。 它们不能在运行时或在应用程序级项目中创建。 有关详细信息, 请参阅[XMLNode 控件](/visualstudio/vsto/xmlnode-control)和[如何:向 Word 文档](/visualstudio/vsto/how-to-add-xmlnode-controls-to-word-documents)添加 XMLNode 控件。  
  
 [!INCLUDE[vsto_interface](~/includes/vsto-interface-md.md)]  
  
## <a name="usage"></a>用法  
 [!INCLUDE[vsto_net35mref](~/includes/vsto-net35mref-md.md)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AfterInsert">
      <MemberSignature Language="C#" Value="event Microsoft.Office.Tools.Word.NodeInsertAndDeleteEventHandler AfterInsert;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Tools.Word.NodeInsertAndDeleteEventHandler AfterInsert" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Word.XMLNode.AfterInsert" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Word</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Tools.Word.NodeInsertAndDeleteEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当用户向文档添加新的 <see cref="T:Microsoft.Office.Tools.Word.XMLNode" /> 控件时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示了<xref:Microsoft.Office.Tools.Word.XMLNode.AfterInsert>和<xref:Microsoft.Office.Tools.Word.XMLNode.BeforeDelete>事件的事件处理程序。 在从文档中删除之前<xref:Microsoft.Office.Tools.Word.XMLNode> , 以及<xref:Microsoft.Office.Tools.Word.XMLNode>在将添加到文档之后, 代码将显示一个消息框。 该示例还使用<xref:Microsoft.Office.Tools.Word.XMLNode.RemoveChild%2A>方法来删除节点并以编程方式<xref:Microsoft.Office.Tools.Word.XMLNode.BeforeDelete>引发事件。 此示例假设当前文档包含一个<xref:Microsoft.Office.Tools.Word.XMLNode>名为`CustomerNode`的, 其中包含名为`CustomerDateNode`的子节点。  
  
 [!code-csharp[Trin_WordXMLNode#200](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_WordXMLNode/CS/ThisDocument.cs#200)]
 [!code-vb[Trin_WordXMLNode#200](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_WordXMLNode/VB/ThisDocument.vb#200)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Application">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Word.Application Application { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Word.Application Application" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Word.XMLNode.Application" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Word</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Word.Application</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个表示该 <see cref="T:Microsoft.Office.Interop.Word.Application" /> 控件的创建者的 <see cref="T:Microsoft.Office.Tools.Word.XMLNode" />。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Word.Application" />，表示 <see cref="T:Microsoft.Office.Tools.Word.XMLNode" /> 控件的创建者。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Word.XMLNode.Application%2A>属性将活动应用程序窗口降到最低。 此示例假设当前文档包含一个<xref:Microsoft.Office.Tools.Word.XMLNode>名为`CustomerLastNameNode`的。  
  
 [!code-csharp[Trin_WordXMLNode#1](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_WordXMLNode/CS/ThisDocument.cs#1)]
 [!code-vb[Trin_WordXMLNode#1](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_WordXMLNode/VB/ThisDocument.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Word.XMLNodes Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Word.XMLNodes Attributes" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Word.XMLNode.Attributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Word</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Word.XMLNodes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Word.XMLNodes" /> 集合，该集合表示 <see cref="T:Microsoft.Office.Tools.Word.XMLNode" /> 控件的特性。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Word.XMLNodes" /> 集合，表示 <see cref="T:Microsoft.Office.Tools.Word.XMLNode" /> 控件的特性。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Interop.Word.XMLNode?displayProperty=fullName> 使用属性<xref:Microsoft.Office.Tools.Word.XMLNode.Attributes%2A>返回的<xref:Microsoft.Office.Interop.Word.XMLNodes?displayProperty=fullName>集合中的所有控件都具有<xref:Microsoft.Office.Interop.Word.WdXMLNodeType.wdXMLNodeAttribute>属性值。<xref:Microsoft.Office.Interop.Word.XMLNode.NodeType%2A?displayProperty=fullName>  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Word.XMLNode.Attributes%2A>属性将特性添加<xref:Microsoft.Office.Tools.Word.XMLNode>到控件。 <xref:Microsoft.Office.Tools.Word.XMLNode.NamespaceURI%2A>属性用于指定架构命名空间。 然后, 该示例将循环访问中的<xref:Microsoft.Office.Tools.Word.XMLNode>每个属性, 并显示属性名称及其值。 的名称是<xref:Microsoft.Office.Tools.Word.XMLNode.BaseName%2A>从<xref:Microsoft.Office.Tools.Word.XMLNode>属性获取的。 此示例假设当前文档包含一个<xref:Microsoft.Office.Tools.Word.XMLNode>具有`NewCustomer`在架构`CustomerNode`中声明的属性的命名。  
  
 [!code-csharp[Trin_WordXMLNode#2](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_WordXMLNode/CS/ThisDocument.cs#2)]
 [!code-vb[Trin_WordXMLNode#2](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_WordXMLNode/VB/ThisDocument.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseName">
      <MemberSignature Language="C#" Value="public string BaseName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BaseName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Word.XMLNode.BaseName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Word</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:Microsoft.Office.Tools.Word.XMLNode" /> 控件不带任何前缀的名称。</summary>
        <value><see cref="T:Microsoft.Office.Tools.Word.XMLNode" /> 控件不带任何前缀的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Word.XMLNode.Attributes%2A>属性将特性添加<xref:Microsoft.Office.Tools.Word.XMLNode>到控件。 <xref:Microsoft.Office.Tools.Word.XMLNode.NamespaceURI%2A>属性用于指定架构命名空间。 然后, 该示例将循环访问中的<xref:Microsoft.Office.Tools.Word.XMLNode>每个属性, 并显示属性名称及其值。 的名称是<xref:Microsoft.Office.Tools.Word.XMLNode.BaseName%2A>从<xref:Microsoft.Office.Tools.Word.XMLNode>属性获取的。 此示例假设当前文档包含一个<xref:Microsoft.Office.Tools.Word.XMLNode>具有`NewCustomer`在架构`CustomerNode`中声明的属性的命名。  
  
 [!code-csharp[Trin_WordXMLNode#2](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_WordXMLNode/CS/ThisDocument.cs#2)]
 [!code-vb[Trin_WordXMLNode#2](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_WordXMLNode/VB/ThisDocument.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeDelete">
      <MemberSignature Language="C#" Value="event Microsoft.Office.Tools.Word.NodeInsertAndDeleteEventHandler BeforeDelete;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Tools.Word.NodeInsertAndDeleteEventHandler BeforeDelete" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Word.XMLNode.BeforeDelete" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Word</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Tools.Word.NodeInsertAndDeleteEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当用户从文档中删除 <see cref="T:Microsoft.Office.Tools.Word.XMLNode" /> 控件时，在删除控件之前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果参数为`true`, 则不应更改文档中的 XML。 `InUndoRedo`  
  
   
  
## Examples  
 下面的代码示例演示了<xref:Microsoft.Office.Tools.Word.XMLNode.AfterInsert>和<xref:Microsoft.Office.Tools.Word.XMLNode.BeforeDelete>事件的事件处理程序。 在从文档中删除之前<xref:Microsoft.Office.Tools.Word.XMLNode> , 以及<xref:Microsoft.Office.Tools.Word.XMLNode>在将添加到文档之后, 代码将显示一个消息框。 该示例还使用<xref:Microsoft.Office.Tools.Word.XMLNode.RemoveChild%2A>方法来删除节点并以编程方式<xref:Microsoft.Office.Tools.Word.XMLNode.BeforeDelete>引发事件。 此示例假设当前文档包含一个<xref:Microsoft.Office.Tools.Word.XMLNode>名为`CustomerNode`的, 其中包含名为`CustomerDateNode`的子节点。  
  
 [!code-csharp[Trin_WordXMLNode#200](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_WordXMLNode/CS/ThisDocument.cs#200)]
 [!code-vb[Trin_WordXMLNode#200](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_WordXMLNode/VB/ThisDocument.vb#200)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingContextChanged">
      <MemberSignature Language="C#" Value="event EventHandler BindingContextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BindingContextChanged" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Word.XMLNode.BindingContextChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Word</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="P:System.Windows.Forms.IBindableComponent.BindingContext" /> 的 <see cref="T:Microsoft.Office.Tools.Word.ContentControlBase" /> 属性的值更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果更改了<xref:System.Windows.Forms.IBindableComponent.BindingContext%2A>属性, 则会引发此事件, 方法是编程修改或用户交互。 有关<xref:System.Windows.Forms.IBindableComponent.BindingContext%2A>属性用途的详细信息, <xref:System.Windows.Forms.BindingContext>请参阅类。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChildNodes">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Word.XMLNodes ChildNodes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Word.XMLNodes ChildNodes" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Word.XMLNode.ChildNodes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Word</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Word.XMLNodes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Word.XMLNodes" /> 集合，该集合表示 <see cref="T:Microsoft.Office.Tools.Word.XMLNode" /> 控件的子元素。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Word.XMLNodes" /> 集合，表示 <see cref="T:Microsoft.Office.Tools.Word.XMLNode" /> 控件的子元素。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Word.XMLNode.ChildNodes%2A>属性创建<xref:Microsoft.Office.Tools.Word.XMLNode>控件的所有子节点的名称列表。 然后, 它将在一个消息框中显示该列表。 此示例假设当前文档包含一个<xref:Microsoft.Office.Tools.Word.XMLNode>名为`CustomerNode`的。  
  
 [!code-csharp[Trin_WordXMLNode#3](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_WordXMLNode/CS/ThisDocument.cs#3)]
 [!code-vb[Trin_WordXMLNode#3](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_WordXMLNode/VB/ThisDocument.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChildNodeSuggestions">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Word.XMLChildNodeSuggestions ChildNodeSuggestions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Word.XMLChildNodeSuggestions ChildNodeSuggestions" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Word.XMLNode.ChildNodeSuggestions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Word</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Word.XMLChildNodeSuggestions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Word.XMLChildNodeSuggestions" /> 集合，该集合表示可以是当前 <see cref="T:Microsoft.Office.Tools.Word.XMLNode" /> 控件的有效子元素的元素。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Word.XMLChildNodeSuggestions" /> 集合，表示可以是当前 <see cref="T:Microsoft.Office.Tools.Word.XMLNode" /> 控件的有效子元素的元素。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 集合中的每个<xref:Microsoft.Office.Interop.Word.XMLChildNodeSuggestion>都是 " **xml 结构**" 任务窗格底部允许的 XML 元素列表中的项。 <xref:Microsoft.Office.Interop.Word.XMLChildNodeSuggestions>  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Word.XMLNode.ChildNodeSuggestions%2A>属性添加的所有子元素。 <xref:Microsoft.Office.Tools.Word.XMLNode> 此示例假设当前文档包含一个<xref:Microsoft.Office.Tools.Word.XMLNode>名为`CustomerNode`的。  
  
 [!code-csharp[Trin_WordXMLNode#4](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_WordXMLNode/CS/ThisDocument.cs#4)]
 [!code-vb[Trin_WordXMLNode#4](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_WordXMLNode/VB/ThisDocument.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Container">
      <MemberSignature Language="C#" Value="public System.ComponentModel.IContainer Container { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.IContainer Container" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Word.XMLNode.Container" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Word</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.IContainer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextEnter">
      <MemberSignature Language="C#" Value="event Microsoft.Office.Tools.Word.ContextChangeEventHandler ContextEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Tools.Word.ContextChangeEventHandler ContextEnter" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Word.XMLNode.ContextEnter" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Word</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Tools.Word.ContextChangeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当光标从 <see cref="T:Microsoft.Office.Tools.Word.XMLNode" /> 节点的上下文外的区域移入该节点或它的一个子节点内时发生此事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Tools.Word.XMLNode.ContextEnter>事件不同<xref:Microsoft.Office.Tools.Word.XMLNode.Select>于事件。 仅在上下文更改时引发事件。<xref:Microsoft.Office.Tools.Word.XMLNode.ContextEnter> 有关详细信息, 请参阅[XMLNode 控件](/visualstudio/vsto/xmlnode-control)。  
  
   
  
## Examples  
 下面的代码示例演示<xref:Microsoft.Office.Tools.Word.XMLNode.Select>了、 <xref:Microsoft.Office.Tools.Word.XMLNode.Deselect>、 <xref:Microsoft.Office.Tools.Word.XMLNode.ContextEnter>和<xref:Microsoft.Office.Tools.Word.XMLNode.ContextLeave>事件的事件处理程序。 <xref:Microsoft.Office.Tools.Word.XMLNode.Select>引发和<xref:Microsoft.Office.Tools.Word.XMLNode.Deselect>事件时, 事件处理程序会将双线添加到所选内容的边框上, 或根据事件删除双线。 <xref:Microsoft.Office.Tools.Word.XMLNode.ContextEnter>引发和<xref:Microsoft.Office.Tools.Word.XMLNode.ContextLeave>事件时, 事件处理程序会显示消息, 指出新选定节点和以前选择的节点的名称。 此示例假设当前文档包含一个<xref:Microsoft.Office.Tools.Word.XMLNode>名为`CustomerNode`的。  
  
 [!code-csharp[Trin_WordXMLNode#201](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_WordXMLNode/CS/ThisDocument.cs#201)]
 [!code-vb[Trin_WordXMLNode#201](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_WordXMLNode/VB/ThisDocument.vb#201)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextLeave">
      <MemberSignature Language="C#" Value="event Microsoft.Office.Tools.Word.ContextChangeEventHandler ContextLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Tools.Word.ContextChangeEventHandler ContextLeave" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Word.XMLNode.ContextLeave" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Word</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Tools.Word.ContextChangeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当光标从 <see cref="T:Microsoft.Office.Tools.Word.XMLNode" /> 控件或它的一个子代节点移到原始节点上下文以外的区域时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Tools.Word.XMLNode.ContextLeave>事件不同<xref:Microsoft.Office.Tools.Word.XMLNode.Deselect>于事件。 仅在上下文更改时引发事件。<xref:Microsoft.Office.Tools.Word.XMLNode.ContextLeave> 有关详细信息, 请参阅[XMLNode 控件](/visualstudio/vsto/xmlnode-control)。  
  
   
  
## Examples  
 下面的代码示例演示<xref:Microsoft.Office.Tools.Word.XMLNode.Select>了、 <xref:Microsoft.Office.Tools.Word.XMLNode.Deselect>、 <xref:Microsoft.Office.Tools.Word.XMLNode.ContextEnter>和<xref:Microsoft.Office.Tools.Word.XMLNode.ContextLeave>事件的事件处理程序。 <xref:Microsoft.Office.Tools.Word.XMLNode.Select>引发和<xref:Microsoft.Office.Tools.Word.XMLNode.Deselect>事件时, 事件处理程序会将双线添加到所选内容的边框上, 或根据事件删除双线。 <xref:Microsoft.Office.Tools.Word.XMLNode.ContextEnter>引发和<xref:Microsoft.Office.Tools.Word.XMLNode.ContextLeave>事件时, 事件处理程序会显示消息, 指出新选定节点和以前选择的节点的名称。 此示例假设当前文档包含一个<xref:Microsoft.Office.Tools.Word.XMLNode>名为`CustomerNode`的。  
  
 [!code-csharp[Trin_WordXMLNode#201](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_WordXMLNode/CS/ThisDocument.cs#201)]
 [!code-vb[Trin_WordXMLNode#201](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_WordXMLNode/VB/ThisDocument.vb#201)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public void Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Word.XMLNode.Copy" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Word</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将 <see cref="T:Microsoft.Office.Tools.Word.XMLNode" /> 控件的内容复制到剪贴板。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Creator">
      <MemberSignature Language="C#" Value="public int Creator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Creator" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Word.XMLNode.Creator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Word</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取在其中创建 <see cref="T:Microsoft.Office.Tools.Word.XMLNode" /> 控件的应用程序。</summary>
        <value>在其中创建 <see cref="T:Microsoft.Office.Tools.Word.XMLNode" /> 控件的应用程序。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 由于控件<xref:Microsoft.Office.Tools.Word.XMLNode>是在 Microsoft Office Word 中创建的, 因此该属性返回十六进制数 4D535744, 它表示字符串 "MSWD"。 此值还可以由常数<xref:Microsoft.Office.Interop.Word.WdConstants.wdCreatorCode>表示。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Word.XMLNode.Creator%2A>属性来显示一条消息, 指示<xref:Microsoft.Office.Tools.Word.XMLNode>是否在 Microsoft Office Word 中创建了控件。 此示例假设当前文档包含一个<xref:Microsoft.Office.Tools.Word.XMLNode>名为`CustomerNode`的。  
  
 [!code-csharp[Trin_WordXMLNode#5](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_WordXMLNode/CS/ThisDocument.cs#5)]
 [!code-vb[Trin_WordXMLNode#5](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_WordXMLNode/VB/ThisDocument.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cut">
      <MemberSignature Language="C#" Value="public void Cut ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Cut() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Word.XMLNode.Cut" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Word</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>移除 <see cref="T:Microsoft.Office.Tools.Word.XMLNode" /> 控件的内容，并将内容放入剪贴板。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultDataSourceUpdateMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataSourceUpdateMode DefaultDataSourceUpdateMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataSourceUpdateMode DefaultDataSourceUpdateMode" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Word.XMLNode.DefaultDataSourceUpdateMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Word</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataSourceUpdateMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Windows.Forms.DataSourceUpdateMode" /> 的默认 <see cref="T:Microsoft.Office.Tools.Word.XMLNode" />。</summary>
        <value><see cref="T:System.Windows.Forms.DataSourceUpdateMode" /> 值之一。 默认值为 " <c>DataSourceUpdateMode</c>"。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果未<xref:System.Windows.Forms.Binding> 指定值<xref:System.Windows.Forms.Binding.DataSourceUpdateMode%2A>的情况下将添加到集合中,则使用此属性。<xref:System.Windows.Forms.IBindableComponent.DataBindings%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Deselect">
      <MemberSignature Language="C#" Value="event Microsoft.Office.Tools.Word.ContextChangeEventHandler Deselect;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Tools.Word.ContextChangeEventHandler Deselect" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Word.XMLNode.Deselect" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Word</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Tools.Word.ContextChangeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当光标从 <see cref="T:Microsoft.Office.Tools.Word.XMLNode" /> 控件移出时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Tools.Word.XMLNode.Deselect>事件不同<xref:Microsoft.Office.Tools.Word.XMLNode.ContextLeave>于事件。 有关详细信息, 请参阅[XMLNode 控件](/visualstudio/vsto/xmlnode-control)。  
  
   
  
## Examples  
 下面的代码示例演示<xref:Microsoft.Office.Tools.Word.XMLNode.Select>了、 <xref:Microsoft.Office.Tools.Word.XMLNode.Deselect>、 <xref:Microsoft.Office.Tools.Word.XMLNode.ContextEnter>和<xref:Microsoft.Office.Tools.Word.XMLNode.ContextLeave>事件的事件处理程序。 <xref:Microsoft.Office.Tools.Word.XMLNode.Select>引发和<xref:Microsoft.Office.Tools.Word.XMLNode.Deselect>事件时, 事件处理程序会将双线添加到所选内容的边框上, 或根据事件删除双线。 <xref:Microsoft.Office.Tools.Word.XMLNode.ContextEnter>引发和<xref:Microsoft.Office.Tools.Word.XMLNode.ContextLeave>事件时, 事件处理程序会显示消息, 指出新选定节点和以前选择的节点的名称。 此示例假设当前文档包含一个<xref:Microsoft.Office.Tools.Word.XMLNode>名为`CustomerNode`的。  
  
 [!code-csharp[Trin_WordXMLNode#201](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_WordXMLNode/CS/ThisDocument.cs#201)]
 [!code-vb[Trin_WordXMLNode#201](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_WordXMLNode/VB/ThisDocument.vb#201)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FirstChild">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Word.XMLNode FirstChild { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Word.XMLNode FirstChild" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Word.XMLNode.FirstChild" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Word</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Word.XMLNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Word.XMLNode" /> 对象，该对象表示 <see cref="T:Microsoft.Office.Tools.Word.XMLNode" /> 控件中的第一个子节点。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Word.XMLNode" /> 对象，表示 <see cref="T:Microsoft.Office.Tools.Word.XMLNode" /> 控件中的第一个子节点。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Tools.Word.XMLNode.LastChild%2A>使用属性访问最后一个子节点。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Word.XMLNode.FirstChild%2A>属性显示<xref:Microsoft.Office.Tools.Word.XMLNode>控件的第一个子节点的名称。 该示例还使用<xref:Microsoft.Office.Tools.Word.XMLNode.HasChildNodes%2A>属性来确定<xref:Microsoft.Office.Tools.Word.XMLNode>控件是否有任何子节点。 此示例假设当前文档包含一个<xref:Microsoft.Office.Tools.Word.XMLNode>名为`CustomerNode`的。  
  
 [!code-csharp[Trin_WordXMLNode#6](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_WordXMLNode/CS/ThisDocument.cs#6)]
 [!code-vb[Trin_WordXMLNode#6](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_WordXMLNode/VB/ThisDocument.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="get_ValidationErrorText">
      <MemberSignature Language="C#" Value="public string get_ValidationErrorText (bool Advanced = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string get_ValidationErrorText(bool Advanced) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Word.XMLNode.get_ValidationErrorText(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Word</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Advanced" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Advanced">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="get_XML">
      <MemberSignature Language="C#" Value="public string get_XML (bool DataOnly = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string get_XML(bool DataOnly) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Word.XMLNode.get_XML(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Word</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="DataOnly" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="DataOnly">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasChildNodes">
      <MemberSignature Language="C#" Value="public bool HasChildNodes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasChildNodes" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Word.XMLNode.HasChildNodes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Word</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示 <see cref="T:Microsoft.Office.Tools.Word.XMLNode" /> 控件是否有子元素。</summary>
        <value>如果 <see cref="T:Microsoft.Office.Tools.Word.XMLNode" /> 控件有子元素，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Word.XMLNode.FirstChild%2A>属性显示<xref:Microsoft.Office.Tools.Word.XMLNode>控件的第一个子节点的名称。 该示例还使用<xref:Microsoft.Office.Tools.Word.XMLNode.HasChildNodes%2A>属性来确定<xref:Microsoft.Office.Tools.Word.XMLNode>控件是否有任何子节点。 此示例假设当前文档包含一个<xref:Microsoft.Office.Tools.Word.XMLNode>名为`CustomerNode`的。  
  
 [!code-csharp[Trin_WordXMLNode#6](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_WordXMLNode/CS/ThisDocument.cs#6)]
 [!code-vb[Trin_WordXMLNode#6](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_WordXMLNode/VB/ThisDocument.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InnerObject">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Word.XMLNode InnerObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Word.XMLNode InnerObject" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Word.XMLNode.InnerObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Word</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Word.XMLNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Word.XMLNode" />，表示 <see cref="T:Microsoft.Office.Tools.Word.XMLNode" /> 的基础本机对象。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Word.XMLNode" />，表示 <see cref="T:Microsoft.Office.Tools.Word.XMLNode" /> 的基础本机对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不能将<xref:Microsoft.Office.Tools.Word.XMLNode?displayProperty=fullName>宿主控件传递给需要基础对象 (a <xref:Microsoft.Office.Interop.Word.XMLNode?displayProperty=fullName>) 的方法或属性。 必须使用<xref:Microsoft.Office.Tools.Word.XMLNode.InnerObject%2A> <xref:Microsoft.Office.Tools.Word.XMLNode?displayProperty=fullName>宿主控件的属性来访问基础<xref:Microsoft.Office.Interop.Word.XMLNode?displayProperty=fullName>。 然后, 将此对象传递到需要的<xref:Microsoft.Office.Interop.Word.XMLNode?displayProperty=fullName>方法或属性。 有关更多信息，请参见 [Programmatic Limitations of Host Items and Host Controls](/visualstudio/vsto/programmatic-limitations-of-host-items-and-host-controls)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LastChild">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Word.XMLNode LastChild { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Word.XMLNode LastChild" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Word.XMLNode.LastChild" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Word</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Word.XMLNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Word.XMLNode" /> 对象，该对象表示 <see cref="T:Microsoft.Office.Tools.Word.XMLNode" /> 控件的最后一个子节点。</summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Tools.Word.XMLNode.FirstChild%2A>使用属性访问第一个子节点。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Word.XMLNode.LastChild%2A>属性显示<xref:Microsoft.Office.Tools.Word.XMLNode>控件的最后一个子节点的名称。 该示例还使用<xref:Microsoft.Office.Tools.Word.XMLNode.HasChildNodes%2A>属性来确定<xref:Microsoft.Office.Tools.Word.XMLNode>控件是否有任何子节点。 此示例假设当前文档包含一个<xref:Microsoft.Office.Tools.Word.XMLNode>名为`CustomerNode`的。  
  
 [!code-csharp[Trin_WordXMLNode#8](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_WordXMLNode/CS/ThisDocument.cs#8)]
 [!code-vb[Trin_WordXMLNode#8](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_WordXMLNode/VB/ThisDocument.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Level">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Word.WdXMLNodeLevel Level { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Word.WdXMLNodeLevel Level" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Word.XMLNode.Level" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Word</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Word.WdXMLNodeLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:Microsoft.Office.Tools.Word.XMLNode" /> 控件的级别。</summary>
        <value><see cref="T:Microsoft.Office.Interop.Word.WdXMLNodeLevel" /> 值之一。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Word.XMLNode.Level%2A>属性来显示<xref:Microsoft.Office.Tools.Word.XMLNode>控件的级别。 此示例假设当前文档包含一个<xref:Microsoft.Office.Tools.Word.XMLNode>名为`CustomerNode`的。  
  
 [!code-csharp[Trin_WordXMLNode#9](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_WordXMLNode/CS/ThisDocument.cs#9)]
 [!code-vb[Trin_WordXMLNode#9](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_WordXMLNode/VB/ThisDocument.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Load(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Word.XMLNode.Load(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Word</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">要从中读取 XML 的文件的路径。</param>
        <summary>使用来自指定 XML 文件的数据更新 <see cref="T:Microsoft.Office.Tools.Word.XMLNode" /> 控件</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法不会添加其他<xref:Microsoft.Office.Tools.Word.XMLNode>控件或从文档<xref:Microsoft.Office.Tools.Word.XMLNode>中删除不必要的控件。  
  
 此方法更新<xref:Microsoft.Office.Tools.Word.XMLNode>控件的所有属性。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Word.XMLNode.Load%2A>方法来<xref:Microsoft.Office.Tools.Word.XMLNode>填充 XML 文件中的数据。 此示例假设当前文档包含一个<xref:Microsoft.Office.Tools.Word.XMLNode>名为`CustomerNode`的。 此示例还假设名为 Customers 的 xml 文件与与`CustomerNode`关联的架构位于 D 目录的根目录中。  
  
 [!code-csharp[Trin_WordXMLNode#100](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_WordXMLNode/CS/ThisDocument.cs#100)]
 [!code-vb[Trin_WordXMLNode#100](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_WordXMLNode/VB/ThisDocument.vb#100)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="LoadXml">
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Word</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>使用数据填充 <see cref="T:Microsoft.Office.Tools.Word.XMLNode" /> 控件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法不会添加其他<xref:Microsoft.Office.Tools.Word.XMLNode>控件或从文档<xref:Microsoft.Office.Tools.Word.XMLNode>中删除不必要的控件。  
  
 此方法更新<xref:Microsoft.Office.Tools.Word.XMLNode>控件的所有属性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="LoadXml">
      <MemberSignature Language="C#" Value="public void LoadXml (string xml);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LoadXml(string xml) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Word.XMLNode.LoadXml(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Word</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xml" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xml">要从中读取数据的 XML 字符串。</param>
        <summary>使用来自指定 XML 字符串的数据填充 <see cref="T:Microsoft.Office.Tools.Word.XMLNode" /> 控件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法不会添加其他<xref:Microsoft.Office.Tools.Word.XMLNode>控件或从文档<xref:Microsoft.Office.Tools.Word.XMLNode>中删除不必要的控件。  
  
 此方法更新<xref:Microsoft.Office.Tools.Word.XMLNode>控件的所有属性。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Word.XMLNode.LoadXml%2A>方法通过 XML 字符串中的数据<xref:Microsoft.Office.Tools.Word.XMLNode>填充控件。 此示例假设当前文档包含一个<xref:Microsoft.Office.Tools.Word.XMLNode>命名`CustomerNode`的, 并且 XML 字符串中描述的命名空间和元素符合与`CustomerNode`相关联的架构。  
  
 [!code-csharp[Trin_WordXMLNode#101](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_WordXMLNode/CS/ThisDocument.cs#101)]
 [!code-vb[Trin_WordXMLNode#101](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_WordXMLNode/VB/ThisDocument.vb#101)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadXml">
      <MemberSignature Language="C#" Value="public void LoadXml (System.Xml.XmlDocument document);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LoadXml(class System.Xml.XmlDocument document) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Word.XMLNode.LoadXml(System.Xml.XmlDocument)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Word</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="document" Type="System.Xml.XmlDocument" />
      </Parameters>
      <Docs>
        <param name="document">包含数据的 <see cref="T:System.Xml.XmlDocument" />。</param>
        <summary>使用来自指定 <see cref="T:Microsoft.Office.Tools.Word.XMLNode" /> 的根节点的数据填充 <see cref="T:System.Xml.XmlDocument" /> 控件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法不会添加其他<xref:Microsoft.Office.Tools.Word.XMLNode>控件或从文档<xref:Microsoft.Office.Tools.Word.XMLNode>中删除不必要的控件。  
  
 此方法更新<xref:Microsoft.Office.Tools.Word.XMLNode>控件的所有属性。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Word.XMLNode.LoadXml%2A>方法来<xref:Microsoft.Office.Tools.Word.XMLNode>填充中<xref:System.Xml.XmlDocument>的数据。 此示例将 XML 文件的内容<xref:System.IO.StreamReader>读取到, 将其<xref:System.IO.StreamReader> <xref:Microsoft.Office.Tools.Word.XMLNode.LoadXml%2A> <xref:System.Xml.XmlDocument>加载到<xref:System.Xml.XmlDocument>中, 然后将用于`document`该方法的参数。 此示例假设当前文档包含一个<xref:Microsoft.Office.Tools.Word.XMLNode>名为`CustomerNode`的。 此示例还假设名为 Customers 的 xml 文件与与`CustomerNode`关联的架构位于 D 目录的根目录中。  
  
 [!code-csharp[Trin_WordXMLNode#102](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_WordXMLNode/CS/ThisDocument.cs#102)]
 [!code-vb[Trin_WordXMLNode#102](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_WordXMLNode/VB/ThisDocument.vb#102)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadXml">
      <MemberSignature Language="C#" Value="public void LoadXml (System.Xml.XmlElement xmlElement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LoadXml(class System.Xml.XmlElement xmlElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Word.XMLNode.LoadXml(System.Xml.XmlElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Word</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xmlElement" Type="System.Xml.XmlElement" />
      </Parameters>
      <Docs>
        <param name="xmlElement">包含数据的 XML 元素。</param>
        <summary>使用来自 <see cref="T:Microsoft.Office.Tools.Word.XMLNode" /> 的数据填充 <see cref="T:System.Xml.XmlElement" /> 控件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法不会添加其他<xref:Microsoft.Office.Tools.Word.XMLNode>控件或从文档<xref:Microsoft.Office.Tools.Word.XMLNode>中删除不必要的控件。  
  
 此方法更新<xref:Microsoft.Office.Tools.Word.XMLNode>控件的所有属性。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Word.XMLNode.LoadXml%2A>方法来<xref:Microsoft.Office.Tools.Word.XMLNode>填充中<xref:System.Xml.XmlElement>的数据。 此示例将 XML 文件的内容<xref:System.IO.StreamReader>读取到, 将其<xref:System.IO.StreamReader>加载到<xref:System.Xml.XmlDocument>中, 然后初始化<xref:System.Xml.XmlElement>表示中<xref:System.Xml.XmlDocument>第一个子元素的。 然后<xref:System.Xml.XmlElement> , 将此用于`xmlElement` <xref:Microsoft.Office.Tools.Word.XMLNode.LoadXml%2A>方法的参数。 此示例假设当前文档包含<xref:Microsoft.Office.Tools.Word.XMLNode>与关联的架构中的第一个子元素对应的名为`CustomerLastNameNode`的。 此示例还假定名为 Customers .xml 的 XML 文件存在于 D 目录的根目录下。  
  
 [!code-csharp[Trin_WordXMLNode#103](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_WordXMLNode/CS/ThisDocument.cs#103)]
 [!code-vb[Trin_WordXMLNode#103](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_WordXMLNode/VB/ThisDocument.vb#103)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NamespaceURI">
      <MemberSignature Language="C#" Value="public string NamespaceURI { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NamespaceURI" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Word.XMLNode.NamespaceURI" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Word</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:Microsoft.Office.Tools.Word.XMLNode" /> 控件的架构命名空间的统一资源标识符 (URI)。</summary>
        <value><see cref="T:Microsoft.Office.Tools.Word.XMLNode" /> 控件的架构命名空间的 URI。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果要编写用于 Microsoft Office Word 的 XML 架构, 则强烈建议您在架构中指定<xref:System.Xml.Schema.XmlSchema.TargetNamespace%2A>设置。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Word.XMLNode.Attributes%2A>属性将特性添加<xref:Microsoft.Office.Tools.Word.XMLNode>到控件。 <xref:Microsoft.Office.Tools.Word.XMLNode.NamespaceURI%2A>属性用于指定架构命名空间。 然后, 该示例将循环访问中的<xref:Microsoft.Office.Tools.Word.XMLNode>每个属性, 并显示属性名称及其值。 的名称是<xref:Microsoft.Office.Tools.Word.XMLNode.BaseName%2A>从<xref:Microsoft.Office.Tools.Word.XMLNode>属性获取的。 此示例假设当前文档包含一个<xref:Microsoft.Office.Tools.Word.XMLNode>具有`NewCustomer`在架构`CustomerNode`中声明的属性的命名。  
  
 [!code-csharp[Trin_WordXMLNode#2](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_WordXMLNode/CS/ThisDocument.cs#2)]
 [!code-vb[Trin_WordXMLNode#2](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_WordXMLNode/VB/ThisDocument.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextSibling">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Word.XMLNode NextSibling { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Word.XMLNode NextSibling" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Word.XMLNode.NextSibling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Word</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Word.XMLNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Word.XMLNode" /> 对象，该对象表示文档中的下一个与 <see cref="T:Microsoft.Office.Interop.Word.XMLNode" /> 控件处于相同级别的 <see cref="T:Microsoft.Office.Tools.Word.XMLNode" /> 对象。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Word.XMLNode" /> 控件，表示文档中的下一个与指定元素处于相同级别的元素。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果指定的元素是此级别的<xref:Microsoft.Office.Tools.Word.XMLNodes?displayProperty=fullName>集合中的最后一个元素, 则此属性返回。 `null`  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Word.XMLNode.PreviousSibling%2A>和<xref:Microsoft.Office.Tools.Word.XMLNode.NextSibling%2A>属性来显示<xref:Microsoft.Office.Tools.Word.XMLNode>控件前后的元素的名称。 此示例假设当前文档包含一个<xref:Microsoft.Office.Tools.Word.XMLNode>名为`CustomerFirstNameNode`的。  
  
 [!code-csharp[Trin_WordXMLNode#10](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_WordXMLNode/CS/ThisDocument.cs#10)]
 [!code-vb[Trin_WordXMLNode#10](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_WordXMLNode/VB/ThisDocument.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NodeText">
      <MemberSignature Language="C#" Value="public string NodeText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NodeText" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Word.XMLNode.NodeText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Word</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:Microsoft.Office.Tools.Word.XMLNode" /> 控件的文本值。</summary>
        <value><see cref="T:Microsoft.Office.Tools.Word.XMLNode" /> 控件的文本值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 设置文本值不会删除控件内的<xref:Microsoft.Office.Tools.Word.XMLNode>任何现有书签。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Word.XMLNode.NodeType%2A>属性确定<xref:Microsoft.Office.Tools.Word.XMLNode>是否为元素节点或属性节点。 如果是一个元素, 则该示例<xref:Microsoft.Office.Tools.Word.XMLNode.NodeText%2A>使用属性设置元素中的文本。 <xref:Microsoft.Office.Tools.Word.XMLNode> 如果是特性, 则该示例<xref:Microsoft.Office.Tools.Word.XMLNode.NodeValue%2A>使用属性设置特性值。 <xref:Microsoft.Office.Tools.Word.XMLNode> 此示例假设当前文档包含一个<xref:Microsoft.Office.Tools.Word.XMLNode>名为`CustomerLastNameNode`的。  
  
 [!code-csharp[Trin_WordXMLNode#11](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_WordXMLNode/CS/ThisDocument.cs#11)]
 [!code-vb[Trin_WordXMLNode#11](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_WordXMLNode/VB/ThisDocument.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Word.WdXMLNodeType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Word.WdXMLNodeType NodeType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Word.XMLNode.NodeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Word</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Word.WdXMLNodeType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示 <see cref="T:Microsoft.Office.Tools.Word.XMLNode" /> 是特性还是元素。</summary>
        <value>表示节点类型的 <see cref="T:Microsoft.Office.Interop.Word.WdXMLNodeType" /> 值之一。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 属性可以是以下<xref:Microsoft.Office.Interop.Word.WdXMLNodeType>值之一: <xref:Microsoft.Office.Tools.Word.XMLNode.NodeType%2A>  
  
-   <xref:Microsoft.Office.Interop.Word.WdXMLNodeType.wdXMLNodeAttribute>指示属性节点。  
  
-   <xref:Microsoft.Office.Interop.Word.WdXMLNodeType.wdXMLNodeElement>指示元素节点。  
  
 <xref:Microsoft.Office.Tools.Word.XMLNode.NodeType%2A>使用属性可以确定正在使用的节点类型, 以便不会尝试在节点上执行无效的操作。 例如, <xref:Microsoft.Office.Interop.Word.XMLNode.Attributes%2A>属性仅适用于元素节点, 但它显示在<xref:Microsoft.Office.Tools.Word.XMLNode>控件的可用属性列表中。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Word.XMLNode.NodeType%2A>属性确定<xref:Microsoft.Office.Tools.Word.XMLNode>是否为元素节点或属性节点。 如果是一个元素, 则该示例<xref:Microsoft.Office.Tools.Word.XMLNode.NodeText%2A>使用属性设置元素中的文本。 <xref:Microsoft.Office.Tools.Word.XMLNode> 如果是特性, 则该示例<xref:Microsoft.Office.Tools.Word.XMLNode.NodeValue%2A>使用属性设置特性值。 <xref:Microsoft.Office.Tools.Word.XMLNode> 此示例假设当前文档包含一个<xref:Microsoft.Office.Tools.Word.XMLNode>名为`CustomerLastNameNode`的。  
  
 [!code-csharp[Trin_WordXMLNode#11](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_WordXMLNode/CS/ThisDocument.cs#11)]
 [!code-vb[Trin_WordXMLNode#11](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_WordXMLNode/VB/ThisDocument.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NodeValue">
      <MemberSignature Language="C#" Value="public string NodeValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NodeValue" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Word.XMLNode.NodeValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Word</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置表示特性的 <see cref="T:Microsoft.Office.Tools.Word.XMLNode" /> 的值。</summary>
        <value>表示特性的 <see cref="T:Microsoft.Office.Tools.Word.XMLNode" /> 的值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Tools.Word.XMLNode.NodeType%2A>使用属性可以确定要使用的节点类型。  
  
 对于<xref:Microsoft.Office.Tools.Word.XMLNode> <xref:Microsoft.Office.Interop.Word.XMLNode.NodeType%2A>值为<xref:Microsoft.Office.Interop.Word.XMLNode.NodeValue%2A>的<xref:Microsoft.Office.Interop.Word.WdXMLNodeType.wdXMLNodeElement>控件, 该属性不返回任何内容。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Word.XMLNode.NodeType%2A>属性确定<xref:Microsoft.Office.Tools.Word.XMLNode>是否为元素节点或属性节点。 如果是一个元素, 则该示例<xref:Microsoft.Office.Tools.Word.XMLNode.NodeText%2A>使用属性设置元素中的文本。 <xref:Microsoft.Office.Tools.Word.XMLNode> 如果是特性, 则该示例<xref:Microsoft.Office.Tools.Word.XMLNode.NodeValue%2A>使用属性设置特性值。 <xref:Microsoft.Office.Tools.Word.XMLNode> 此示例假设当前文档包含一个<xref:Microsoft.Office.Tools.Word.XMLNode>名为`CustomerLastNameNode`的。  
  
 [!code-csharp[Trin_WordXMLNode#11](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_WordXMLNode/CS/ThisDocument.cs#11)]
 [!code-vb[Trin_WordXMLNode#11](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_WordXMLNode/VB/ThisDocument.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnerDocument">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Word.Document OwnerDocument { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Word.Document OwnerDocument" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Word.XMLNode.OwnerDocument" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Word</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Word.Document</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Word.Document" />，该对象表示指定 <see cref="T:Microsoft.Office.Tools.Word.XMLNode" /> 控件的父文档。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Word.Document" /> 对象，表示指定 <see cref="T:Microsoft.Office.Tools.Word.XMLNode" /> 控件的父文档。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 属性返回的结果<xref:Microsoft.Office.Tools.Word.XMLNode.Parent%2A>与属性相同。 <xref:Microsoft.Office.Tools.Word.XMLNode.OwnerDocument%2A>  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Word.XMLNode.OwnerDocument%2A>属性显示<xref:Microsoft.Office.Tools.Word.XMLNode>控件的所有者文档的名称。 此示例假设当前文档包含一个<xref:Microsoft.Office.Tools.Word.XMLNode>名为`CustomerNode`的。  
  
 [!code-csharp[Trin_WordXMLNode#12](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_WordXMLNode/CS/ThisDocument.cs#12)]
 [!code-vb[Trin_WordXMLNode#12](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_WordXMLNode/VB/ThisDocument.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public object Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Parent" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Word.XMLNode.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Word</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Word.Document" />，它表示包含指定 <see cref="T:Microsoft.Office.Tools.Word.XMLNode" /> 控件的文档。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Word.Document" />，表示包含指定 <see cref="T:Microsoft.Office.Tools.Word.XMLNode" /> 控件的文档。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Word.XMLNode.Parent%2A>属性显示<xref:Microsoft.Office.Tools.Word.XMLNode>控件的父文档的名称。 此示例假设当前文档包含一个<xref:Microsoft.Office.Tools.Word.XMLNode>名为`CustomerNode`的。  
  
 [!code-csharp[Trin_WordXMLNode#13](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_WordXMLNode/CS/ThisDocument.cs#13)]
 [!code-vb[Trin_WordXMLNode#13](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_WordXMLNode/VB/ThisDocument.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ParentNode">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Word.XMLNode ParentNode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Word.XMLNode ParentNode" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Word.XMLNode.ParentNode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Word</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Word.XMLNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Word.XMLNode" /> 对象，该对象表示指定 <see cref="T:Microsoft.Office.Tools.Word.XMLNode" /> 控件的父元素。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Word.XMLNode" /> 控件，表示指定 <see cref="T:Microsoft.Office.Tools.Word.XMLNode" /> 对象的父元素。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 对于根节点, <xref:Microsoft.Office.Tools.Word.XMLNode.ParentNode%2A>属性返回。 `null`  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Word.XMLNode.ParentNode%2A>属性显示<xref:Microsoft.Office.Tools.Word.XMLNode>控件的父节点的名称。 此示例假设当前文档包含一个<xref:Microsoft.Office.Tools.Word.XMLNode>名为`CustomerFirstNameNode`的。  
  
 [!code-csharp[Trin_WordXMLNode#14](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_WordXMLNode/CS/ThisDocument.cs#14)]
 [!code-vb[Trin_WordXMLNode#14](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_WordXMLNode/VB/ThisDocument.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PlaceholderText">
      <MemberSignature Language="C#" Value="public string PlaceholderText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PlaceholderText" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Word.XMLNode.PlaceholderText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Word</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置为不包含任何文本的 <see cref="T:Microsoft.Office.Tools.Word.XMLNode" /> 控件显示的文本。</summary>
        <value>为不包含任何文本的 <see cref="T:Microsoft.Office.Tools.Word.XMLNode" /> 控件显示的文本。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 仅当清除了 " **Xml 结构**" 任务窗格中的 "**在文档中显示 xml 标记**" 复选框时, 占位符文本才会显示在 Microsoft Office Word 中。 "在**文档中显示 XML 标记**" 复选框与<xref:Microsoft.Office.Interop.Word.View.ShowXMLMarkup%2A>属性相对应。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Word.XMLNode.PlaceholderText%2A>属性设置的默认文本<xref:Microsoft.Office.Tools.Word.XMLNode> <xref:Microsoft.Office.Interop.Word.View.ShowXMLMarkup%2A> , 然后将属性设置为 0 (零), 以便不显示 XML 标记。 此示例假设当前文档包含一个<xref:Microsoft.Office.Tools.Word.XMLNode>名为`CustomerFirstNameNode`的。  
  
 [!code-csharp[Trin_WordXMLNode#15](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_WordXMLNode/CS/ThisDocument.cs#15)]
 [!code-vb[Trin_WordXMLNode#15](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_WordXMLNode/VB/ThisDocument.vb#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviousSibling">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Word.XMLNode PreviousSibling { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Word.XMLNode PreviousSibling" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Word.XMLNode.PreviousSibling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Word</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Word.XMLNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Word.XMLNode" /> 对象，该对象表示文档中的上一个与 <see cref="T:Microsoft.Office.Interop.Word.XMLNode" /> 控件处于相同级别的 <see cref="T:Microsoft.Office.Tools.Word.XMLNode" /> 对象。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Word.XMLNode" /> 对象，表示文档中的上一个与 <see cref="T:Microsoft.Office.Interop.Word.XMLNode" /> 控件处于相同级别的 <see cref="T:Microsoft.Office.Tools.Word.XMLNode" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果当前<xref:Microsoft.Office.Interop.Word.XMLNode?displayProperty=fullName>为<xref:Microsoft.Office.Interop.Word.XMLNodes?displayProperty=fullName>集合中的第一个元素, 则此属性返回`null`。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Word.XMLNode.PreviousSibling%2A>和<xref:Microsoft.Office.Tools.Word.XMLNode.NextSibling%2A>属性来显示<xref:Microsoft.Office.Tools.Word.XMLNode>控件前后的元素的名称。 此示例假设当前文档包含一个<xref:Microsoft.Office.Tools.Word.XMLNode>名为`CustomerFirstNameNode`的。  
  
 [!code-csharp[Trin_WordXMLNode#10](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_WordXMLNode/CS/ThisDocument.cs#10)]
 [!code-vb[Trin_WordXMLNode#10](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_WordXMLNode/VB/ThisDocument.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Range">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Word.Range Range { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Word.Range Range" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Word.XMLNode.Range" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Word</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Word.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Word.Range" /> 对象，该对象表示包含在 <see cref="T:Microsoft.Office.Tools.Word.XMLNode" /> 控件中的文档部分。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Word.Range" /> 对象，表示包含在 <see cref="T:Microsoft.Office.Tools.Word.XMLNode" /> 控件中的文档部分。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Word.XMLNode.Range%2A>属性设置字体, 并将粗体格式应用于<xref:Microsoft.Office.Tools.Word.XMLNode>中的文本。 此示例假设当前文档包含一个<xref:Microsoft.Office.Tools.Word.XMLNode>名为`CustomerLastNameNode`的。  
  
 [!code-csharp[Trin_WordXMLNode#16](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_WordXMLNode/CS/ThisDocument.cs#16)]
 [!code-vb[Trin_WordXMLNode#16](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_WordXMLNode/VB/ThisDocument.vb#16)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveChild">
      <MemberSignature Language="C#" Value="public void RemoveChild (Microsoft.Office.Interop.Word.XMLNode childElement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveChild(class Microsoft.Office.Interop.Word.XMLNode childElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Word.XMLNode.RemoveChild(Microsoft.Office.Interop.Word.XMLNode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Word</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="childElement" Type="Microsoft.Office.Interop.Word.XMLNode" />
      </Parameters>
      <Docs>
        <param name="childElement"><see cref="T:Microsoft.Office.Interop.Word.XMLNode" />。 要移除的子元素。</param>
        <summary>从 <see cref="T:Microsoft.Office.Tools.Word.XMLNode" /> 控件中移除指定的子元素。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示了<xref:Microsoft.Office.Tools.Word.XMLNode.AfterInsert>和<xref:Microsoft.Office.Tools.Word.XMLNode.BeforeDelete>事件的事件处理程序。 在从文档中删除之前<xref:Microsoft.Office.Tools.Word.XMLNode> , 以及<xref:Microsoft.Office.Tools.Word.XMLNode>在将添加到文档之后, 代码将显示一个消息框。 该示例还使用<xref:Microsoft.Office.Tools.Word.XMLNode.RemoveChild%2A>方法来删除节点并以编程方式<xref:Microsoft.Office.Tools.Word.XMLNode.BeforeDelete>引发事件。 此示例假设当前文档包含一个<xref:Microsoft.Office.Tools.Word.XMLNode>名为`CustomerNode`的, 其中包含名为`CustomerDateNode`的子节点。  
  
 [!code-csharp[Trin_WordXMLNode#200](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_WordXMLNode/CS/ThisDocument.cs#200)]
 [!code-vb[Trin_WordXMLNode#200](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_WordXMLNode/VB/ThisDocument.vb#200)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="event Microsoft.Office.Tools.Word.ContextChangeEventHandler Select;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Office.Tools.Word.ContextChangeEventHandler Select" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Word.XMLNode.Select" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Word</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Tools.Word.ContextChangeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当光标置于 <see cref="T:Microsoft.Office.Tools.Word.XMLNode" /> 控件内时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Tools.Word.XMLNode.Select>事件不同<xref:Microsoft.Office.Tools.Word.XMLNode.ContextEnter>于事件。 有关详细信息, 请参阅[XMLNode 控件](/visualstudio/vsto/xmlnode-control)。  
  
   
  
## Examples  
 下面的代码示例演示<xref:Microsoft.Office.Tools.Word.XMLNode.Select>了、 <xref:Microsoft.Office.Tools.Word.XMLNode.Deselect>、 <xref:Microsoft.Office.Tools.Word.XMLNode.ContextEnter>和<xref:Microsoft.Office.Tools.Word.XMLNode.ContextLeave>事件的事件处理程序。 <xref:Microsoft.Office.Tools.Word.XMLNode.Select>引发和<xref:Microsoft.Office.Tools.Word.XMLNode.Deselect>事件时, 事件处理程序会将双线添加到所选内容的边框上, 或根据事件删除双线。 <xref:Microsoft.Office.Tools.Word.XMLNode.ContextEnter>引发和<xref:Microsoft.Office.Tools.Word.XMLNode.ContextLeave>事件时, 事件处理程序会显示消息, 指出新选定节点和以前选择的节点的名称。 此示例假设当前文档包含一个<xref:Microsoft.Office.Tools.Word.XMLNode>名为`CustomerNode`的。  
  
 [!code-csharp[Trin_WordXMLNode#201](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_WordXMLNode/CS/ThisDocument.cs#201)]
 [!code-vb[Trin_WordXMLNode#201](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_WordXMLNode/VB/ThisDocument.vb#201)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectNodes">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Word.XMLNodes SelectNodes (string XPath, string PrefixMapping = &quot;&quot;, bool FastSearchSkippingTextNodes = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Interop.Word.XMLNodes SelectNodes(string XPath, string PrefixMapping, bool FastSearchSkippingTextNodes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Word.XMLNode.SelectNodes(System.String,System.String,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Word</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Word.XMLNodes</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="XPath" Type="System.String" />
        <Parameter Name="PrefixMapping" Type="System.String" />
        <Parameter Name="FastSearchSkippingTextNodes" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="XPath">有效的 XPath 字符串。</param>
        <param name="PrefixMapping">提供架构中用作搜索依据的前缀。 如果 <c>XPath</c> 参数使用名称搜索元素，请使用 <c>PrefixMapping</c> 参数。</param>
        <param name="FastSearchSkippingTextNodes">如果为 <see langword="true" />，则在搜索指定的节点时，忽略所有文本节点。 如果为 <see langword="false" />，则在搜索中包含文本节点。 默认值是 <see langword="false" />。</param>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Word.XMLNodes" /> 集合，该集合表示与 <paramref name="XPath" /> 参数匹配的所有节点，且以出现在 <see cref="T:Microsoft.Office.Tools.Word.XMLNode" /> 控件中的顺序为序。</summary>
        <returns>与 <paramref name="XPath" /> 参数匹配的节点，以在 <see cref="T:Microsoft.Office.Tools.Word.XMLNode" /> 控件中出现的顺序为序。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 设置参数以`false`降低性能, 因为 Microsoft Office Word 搜索文档中包含在节点中的文本的所有节点。 `FastSearchSkippingTextNodes`  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Word.XMLNode.SelectNodes%2A>方法获取与给定`XPath`参数匹配的子节点的集合。 然后, 该示例显示找到的节点数。 此示例假设当前文档包含<xref:Microsoft.Office.Tools.Word.XMLNode> `CustomerNode`具有匹配的架构元素的, 该元素包含一个或多个名为`FirstName`的子节点。  
  
 [!code-csharp[Trin_WordXMLNode#104](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_WordXMLNode/CS/ThisDocument.cs#104)]
 [!code-vb[Trin_WordXMLNode#104](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_WordXMLNode/VB/ThisDocument.vb#104)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectSingleNode">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Word.XMLNode SelectSingleNode (string XPath, string PrefixMapping = &quot;&quot;, bool FastSearchSkippingTextNodes = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Interop.Word.XMLNode SelectSingleNode(string XPath, string PrefixMapping, bool FastSearchSkippingTextNodes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Word.XMLNode.SelectSingleNode(System.String,System.String,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Word</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Word.XMLNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="XPath" Type="System.String" />
        <Parameter Name="PrefixMapping" Type="System.String" />
        <Parameter Name="FastSearchSkippingTextNodes" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="XPath">有效的 XPath 字符串。</param>
        <param name="PrefixMapping">提供架构中用作搜索依据的前缀。 如果 <c>XPath</c> 参数使用名称搜索元素，请使用 <c>PrefixMapping</c> 参数。</param>
        <param name="FastSearchSkippingTextNodes">如果为 <see langword="true" />，则在搜索指定的节点时，忽略所有文本节点。 如果为 <see langword="false" />，则在搜索中包含文本节点。 默认值是 <see langword="true" />。</param>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Word.XMLNode" /> 对象，该对象表示 <see cref="T:Microsoft.Office.Tools.Word.XMLNode" /> 控件中与 <paramref name="XPath" /> 参数匹配的第一个子节点。</summary>
        <returns><see cref="T:Microsoft.Office.Tools.Word.XMLNode" /> 控件中与 <paramref name="XPath" /> 参数匹配的第一个子节点。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 设置参数以降低`false`性能, 因为 Microsoft Office Word 搜索文档中包含在节点中的文本的所有节点。 `FastSearchSkippingTextNodes`  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Word.XMLNode.SelectSingleNode%2A>方法来获取与给定`XPath`参数匹配的子节点。 然后, 该示例显示找到的节点的名称。 此示例假设当前文档包含<xref:Microsoft.Office.Tools.Word.XMLNode> `CustomerNode`具有匹配的架构元素的, 该元素包含一个或多个名为`LastName`的子节点。  
  
 [!code-csharp[Trin_WordXMLNode#105](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_WordXMLNode/CS/ThisDocument.cs#105)]
 [!code-vb[Trin_WordXMLNode#105](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_WordXMLNode/VB/ThisDocument.vb#105)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetValidationError">
      <MemberSignature Language="C#" Value="public void SetValidationError (Microsoft.Office.Interop.Word.WdXMLValidationStatus Status, ref object ErrorText, bool ClearedAutomatically = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetValidationError(valuetype Microsoft.Office.Interop.Word.WdXMLValidationStatus Status, object&amp; ErrorText, bool ClearedAutomatically) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Word.XMLNode.SetValidationError(Microsoft.Office.Interop.Word.WdXMLValidationStatus,System.Object@,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Word</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Status" Type="Microsoft.Office.Interop.Word.WdXMLValidationStatus" />
        <Parameter Name="ErrorText" Type="System.Object" RefType="ref" />
        <Parameter Name="ClearedAutomatically" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Status"><see cref="T:Microsoft.Office.Interop.Word.WdXMLValidationStatus" /> 值之一，该值指定是设置验证状态错误文本 (<see cref="F:Microsoft.Office.Interop.Word.WdXMLValidationStatus.wdXMLValidationStatusCustom" />) 还是清除验证状态错误文本 (<see cref="F:Microsoft.Office.Interop.Word.WdXMLValidationStatus.wdXMLValidationStatusOK" />)。</param>
        <param name="ErrorText">显示给用户的文本。 当 <c>Status</c> 参数设置为 <see cref="F:Microsoft.Office.Interop.Word.WdXMLValidationStatus.wdXMLValidationStatusOK" /> 时保留为空。</param>
        <param name="ClearedAutomatically">如果为 <see langword="true" />，则在针对指定节点发生下一个验证事件后，立即自动清除错误消息。 如果为 <see langword="false" />，则要求以 <c>Status</c> 参数 <see cref="F:Microsoft.Office.Interop.Word.WdXMLValidationStatus.wdXMLValidationStatusOK" /> 运行 <see cref="M:Microsoft.Office.Tools.Word.XMLNode.SetValidationError(Microsoft.Office.Interop.Word.WdXMLValidationStatus,System.Object@,System.Boolean)" /> 方法，以清除自定义错误文本。</param>
        <summary>更改向用户显示的 <see cref="T:Microsoft.Office.Tools.Word.XMLNode" /> 控件的验证错误文本，并强制 Microsoft Office Word 将节点报告为无效。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要设置自定义错误文本, <xref:Microsoft.Office.Interop.Word.WdXMLValidationStatus.wdXMLValidationStatusCustom>请使用常数。  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Word.XMLNode.SetValidationError%2A>方法来设置的自定义验证错误消息。 <xref:Microsoft.Office.Tools.Word.XMLNode> 如果未验证, <xref:Microsoft.Office.Tools.Word.XMLNode.ValidationError> <xref:Microsoft.Office.Tools.Word.XMLNode>事件的事件处理程序会显示自定义验证错误消息。 此示例假设当前文档包含两个<xref:Microsoft.Office.Tools.Word.XMLNode>名为`CustomerAddress1Node`和`CustomerZipNode`的对象, 这些对象映射到具有整数数据类型的架构元素。  
  
 [!code-csharp[Trin_WordXMLNode#202](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_WordXMLNode/CS/ThisDocument.cs#202)]
 [!code-vb[Trin_WordXMLNode#202](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_WordXMLNode/VB/ThisDocument.vb#202)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SmartTag">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Word.SmartTag SmartTag { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Word.SmartTag SmartTag" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Word.XMLNode.SmartTag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Word</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Word.SmartTag</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Word.XMLNode.Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Word</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Word.XMLNode.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Word</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:Microsoft.Office.Tools.Word.XMLNode" /> 控件的无格式纯文本。</summary>
        <value><see cref="T:Microsoft.Office.Tools.Word.XMLNode" /> 控件的无格式纯文本。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 设置此属性将替换中的<xref:Microsoft.Office.Tools.Word.XMLNode>所有文本, 包括任何子节点。  
  
 此属性在设计时为只读。 只能在运行时设置。  
  
   
  
## Examples  
 下面的代码示例显示中<xref:Microsoft.Office.Tools.Word.XMLNode>的子节点数, 使用<xref:Microsoft.Office.Tools.Word.XMLNode.Text%2A>属性替换中的<xref:Microsoft.Office.Tools.Word.XMLNode>文本, 然后再次显示子节点的数目。 设置<xref:Microsoft.Office.Tools.Word.XMLNode.Text%2A>属性后, 子节点数为零。 此示例假设当前文档包含一个<xref:Microsoft.Office.Tools.Word.XMLNode>名为`CustomerNode`的。  
  
 [!code-csharp[Trin_WordXMLNode#19](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_WordXMLNode/CS/ThisDocument.cs#19)]
 [!code-vb[Trin_WordXMLNode#19](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_WordXMLNode/VB/ThisDocument.vb#19)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public void Validate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Word.XMLNode.Validate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Word</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>根据附加的一个或多个 XML 架构验证单个 <see cref="T:Microsoft.Office.Tools.Word.XMLNode" /> 控件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Tools.Word.XMLNode.Validate%2A> 使用<xref:Microsoft.Office.Tools.Word.XMLNode.ValidationStatus%2A>带有和<xref:Microsoft.Office.Tools.Word.XMLNode.ValidationErrorText%2A>属性的方法可根据应用的架构和向用户显示的错误文本来确定 XML 元素是否有效。 <xref:Microsoft.Office.Tools.Word.XMLNode.SetValidationError%2A>使用方法可使用自定义验证错误覆盖架构冲突。  
  
 当你运行<xref:Microsoft.Office.Tools.Word.XMLNode.Validate%2A>方法时, Microsoft Office Word 使用具有<xref:Microsoft.Office.Interop.Word._Document.XMLSchemaViolations%2A>验证错误的 XML 节点填充集合。  
  
   
  
## Examples  
 下面的代码示例<xref:Microsoft.Office.Tools.Word.XMLNode> <xref:Microsoft.Office.Tools.Word.XMLNode.Validate%2A>使用方法设置的文本值, 并验证节点。 然后, 该示例使用<xref:Microsoft.Office.Tools.Word.XMLNode.ValidationStatus%2A>属性来确定节点是否已验证。 如果节点未验证, 则该示例使用<xref:Microsoft.Office.Tools.Word.XMLNode.ValidationErrorText%2A>属性来显示验证错误消息。 此示例假设当前文档包含一个<xref:Microsoft.Office.Tools.Word.XMLNode>名为`CustomerAddress1Node`的。 如果`CustomerAddress1Node`映射到具有整数数据类型的架构元素, 则验证将失败。  
  
 [!code-csharp[Trin_WordXMLNode#20](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_WordXMLNode/CS/ThisDocument.cs#20)]
 [!code-vb[Trin_WordXMLNode#20](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_WordXMLNode/VB/ThisDocument.vb#20)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidationError">
      <MemberSignature Language="C#" Value="event EventHandler ValidationError;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ValidationError" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Office.Tools.Word.XMLNode.ValidationError" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Word</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当在 <see cref="T:Microsoft.Office.Tools.Word.XMLNode" /> 控件中存在验证错误时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Word.XMLNode.SetValidationError%2A>方法来设置的自定义验证错误消息。 <xref:Microsoft.Office.Tools.Word.XMLNode> 如果未验证, <xref:Microsoft.Office.Tools.Word.XMLNode.ValidationError> <xref:Microsoft.Office.Tools.Word.XMLNode>事件的事件处理程序会显示自定义验证错误消息。 此示例假设当前文档包含两个<xref:Microsoft.Office.Tools.Word.XMLNode>名为`CustomerAddress1Node`和`CustomerZipNode`的对象, 这些对象映射到具有整数数据类型的架构元素。  
  
 [!code-csharp[Trin_WordXMLNode#202](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_WordXMLNode/CS/ThisDocument.cs#202)]
 [!code-vb[Trin_WordXMLNode#202](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_WordXMLNode/VB/ThisDocument.vb#202)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidationErrorText">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Tools.Word.XMLNode_ValidationErrorTextType ValidationErrorText { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Tools.Word.XMLNode_ValidationErrorTextType ValidationErrorText" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Word.XMLNode.ValidationErrorText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Word</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Tools.Word.XMLNode_ValidationErrorTextType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个字符串，该字符串表示对 <see cref="T:Microsoft.Office.Tools.Word.XMLNode" /> 控件的验证错误的说明。</summary>
        <value>一个字符串，表示对 <see cref="T:Microsoft.Office.Tools.Word.XMLNode" /> 控件的验证错误的说明。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此<xref:Microsoft.Office.Tools.Word.XMLNode.ValidationErrorText%2A>属性应与以下参数一起使用。  
  
|参数|说明|  
|---------------|-----------------|  
|`Advanced`|`true`显示验证错误说明的高级版本, 来自 Microsoft Office Word 随附的 MSXML 5.0 组件;否则为`false`。|  
  
 如果在不指定<xref:Microsoft.Office.Tools.Word.XMLNode.ValidationErrorText%2A>参数的情况下使用属性, 它将<xref:Microsoft.Office.Tools.Word.XMLNode_ValidationErrorTextType>返回一个不应在代码中直接使用的对象。  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例<xref:Microsoft.Office.Tools.Word.XMLNode> <xref:Microsoft.Office.Tools.Word.XMLNode.Validate%2A>使用方法设置的文本值, 并验证节点。 然后, 该示例使用<xref:Microsoft.Office.Tools.Word.XMLNode.ValidationStatus%2A>属性来确定节点是否已验证。 如果节点未验证, 则该示例使用<xref:Microsoft.Office.Tools.Word.XMLNode.ValidationErrorText%2A>属性来显示验证错误消息。 此示例假设当前文档包含一个<xref:Microsoft.Office.Tools.Word.XMLNode>名为`CustomerAddress1Node`的。 如果`CustomerAddress1Node`映射到具有整数数据类型的架构元素, 则验证将失败。  
  
 [!code-csharp[Trin_WordXMLNode#20](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_WordXMLNode/CS/ThisDocument.cs#20)]
 [!code-vb[Trin_WordXMLNode#20](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_WordXMLNode/VB/ThisDocument.vb#20)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidationStatus">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Word.WdXMLValidationStatus ValidationStatus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Word.WdXMLValidationStatus ValidationStatus" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Word.XMLNode.ValidationStatus" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Word</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Word.WdXMLValidationStatus</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指定某一元素或特性对于附加的架构是否有效。</summary>
        <value><see cref="T:Microsoft.Office.Interop.Word.WdXMLValidationStatus" /> 值之一。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 属性可以是以下<xref:Microsoft.Office.Interop.Word.WdXMLValidationStatus>值之一: <xref:Microsoft.Office.Tools.Word.XMLNode.ValidationStatus%2A>  
  
-   <xref:Microsoft.Office.Interop.Word.WdXMLValidationStatus.wdXMLValidationStatusCustom>指示此<xref:Microsoft.Office.Interop.Word.XMLNode.SetValidationError%2A>方法用于<xref:Microsoft.Office.Interop.Word.XMLNode.ValidationErrorText%2A>将属性设置为自定义文本字符串。  
  
-   <xref:Microsoft.Office.Interop.Word.WdXMLValidationStatus.wdXMLValidationStatusOK>指示根据附加架构, XML 元素或属性是有效的。  
  
 虽然这是<xref:Microsoft.Office.Tools.Word.XMLNode.ValidationStatus%2A>属性允许的两个命名常量, 但还有许多来自 Microsoft Office Word 附带的 MSXML 5.0 组件的未命名的值。  
  
   
  
## Examples  
 下面的代码示例<xref:Microsoft.Office.Tools.Word.XMLNode> <xref:Microsoft.Office.Tools.Word.XMLNode.Validate%2A>使用方法设置的文本值, 并验证节点。 然后, 该示例使用<xref:Microsoft.Office.Tools.Word.XMLNode.ValidationStatus%2A>属性来确定节点是否已验证。 如果节点未验证, 则该示例使用<xref:Microsoft.Office.Tools.Word.XMLNode.ValidationErrorText%2A>属性来显示验证错误消息。 此示例假设当前文档包含一个<xref:Microsoft.Office.Tools.Word.XMLNode>名为`CustomerAddress1Node`的。 如果`CustomerAddress1Node`映射到具有整数数据类型的架构元素, 则验证将失败。  
  
 [!code-csharp[Trin_WordXMLNode#20](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_WordXMLNode/CS/ThisDocument.cs#20)]
 [!code-vb[Trin_WordXMLNode#20](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_WordXMLNode/VB/ThisDocument.vb#20)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WordOpenXML">
      <MemberSignature Language="C#" Value="public string WordOpenXML { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string WordOpenXML" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Word.XMLNode.WordOpenXML" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Word</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 XML 字符串，该字符串以 Microsoft Office Word Open XML 格式表示 <see cref="T:Microsoft.Office.Tools.Word.XMLNode" />。</summary>
        <value>一个 XML 字符串，该字符串以 Microsoft Office Word Open XML 格式表示 <see cref="T:Microsoft.Office.Tools.Word.XMLNode" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性只在文档中返回表示指定 XML 节点所需的 XML。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XML">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Tools.Word.XMLNode_XMLType XML { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Tools.Word.XMLNode_XMLType XML" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Word.XMLNode.XML" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Word</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Tools.Word.XMLNode_XMLType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个字符串，该字符串表示 <see cref="T:Microsoft.Office.Tools.Word.XMLNode" /> 控件中的 XML 文本。</summary>
        <value>一个字符串，表示 <see cref="T:Microsoft.Office.Tools.Word.XMLNode" /> 控件中的 XML 文本。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此<xref:Microsoft.Office.Tools.Word.XMLNode.XML%2A>属性应与以下参数一起使用。  
  
|参数|说明|  
|---------------|-----------------|  
|`ListTemplate`|`true`若要返回 XML 的文本而不包含 Word XML 标记, 则为;否则为`false`。 默认值为 `false`。|  
  
 如果在不指定<xref:Microsoft.Office.Tools.Word.XMLNode.XML%2A>参数的情况下使用属性, 它将<xref:Microsoft.Office.Tools.Word.XMLNode_XMLType>返回一个不应在代码中直接使用的对象。  
  
## <a name="optional-parameters"></a>可选参数  
 有关可选参数的信息, 请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Word.XMLNode.XML%2A>属性来显示<xref:Microsoft.Office.Tools.Word.XMLNode>具有和不包含 Word xml 标记的的 XML 内容。 此示例假设当前文档包含一个<xref:Microsoft.Office.Tools.Word.XMLNode>名为`CustomerNode`的。  
  
 [!code-csharp[Trin_WordXMLNode#21](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_WordXMLNode/CS/ThisDocument.cs#21)]
 [!code-vb[Trin_WordXMLNode#21](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_WordXMLNode/VB/ThisDocument.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
