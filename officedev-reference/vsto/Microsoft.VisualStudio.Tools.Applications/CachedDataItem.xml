<Type Name="CachedDataItem" FullName="Microsoft.VisualStudio.Tools.Applications.CachedDataItem">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5360a7bd3238d876a10d6cc5289659a4fd1a672d" /><Meta Name="ms.sourcegitcommit" Value="7439021cdeee6a9ef5d4640250701344f6cbba15" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="08/13/2019" /><Meta Name="ms.locfileid" Value="68997145" /></Metadata><TypeSignature Language="C#" Value="public sealed class CachedDataItem : Microsoft.VisualStudio.Tools.Applications.CachedDataNodeBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit CachedDataItem extends Microsoft.VisualStudio.Tools.Applications.CachedDataNodeBase" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualStudio.Tools.Applications.CachedDataItem" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualStudio.Tools.Applications.ServerDocument</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.VisualStudio.Tools.Applications.CachedDataNodeBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>表示文档级自定义中的缓存数据对象，该文档级自定义通过使用 Visual Studio 中的 Office 开发工具创建。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关在文档级自定义项中缓存数据的详细信息, 请参阅在服务器上[缓存数据](/visualstudio/vsto/caching-data)和[访问文档中的数据](/visualstudio/vsto/accessing-data-in-documents-on-the-server)。  
  
   
  
## Examples  
 下面的代码示例检查 Excel <xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItem>工作簿的数据缓存中的每个, 并显示每个缓存数据对象的名称。  
  
 此示例需要：  
  
-   一个控制台应用程序项目或一些其他非 Office 项目。  
  
-   对以下程序集的引用:  
  
    -   Microsoft.VisualStudio.Tools.Applications.ServerDocument.dll  
  
    -   Microsoft.VisualStudio.Tools.Applications.Runtime.dll  
  
-   `Imports`(对于 Visual Basic) 或`using` (对于C#) <xref:Microsoft.VisualStudio.Tools.Applications?displayProperty=fullName>代码文件顶部<xref:Microsoft.VisualStudio.Tools.Applications.Runtime?displayProperty=fullName>的和命名空间。  
  
 [!code-csharp[Trin_ServerDocument#5](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ServerDocument/CS/Form1.cs#5)]
 [!code-vb[Trin_ServerDocument#5](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ServerDocument/VB/Form1.vb#5)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="DataType">
      <MemberSignature Language="C#" Value="public string DataType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualStudio.Tools.Applications.CachedDataItem.DataType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualStudio.Tools.Applications.ServerDocument</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置缓存数据对象类型的程序集限定名称。</summary>
        <value>缓存数据对象的类型的程序集限定名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItem.DataType%2A>属性返回缓存数据类型的程序集限定名称, 此名称对于创建位于数据缓存中的自定义类型的新实例很有用。 例如, 可以通过将程序集<xref:System.Type>限定的类型名称传递<xref:System.Type.GetType%2A>给方法来获取自定义数据类型的。 然后, 可以通过将此<xref:System.Type>实例作为参数传递<xref:System.Activator.CreateInstance%2A?displayProperty=fullName>给方法来创建自定义类型的实例。  
  
 有关<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItem.DataType%2A>属性返回的程序集限定类型字符串的格式的详细信息, <xref:System.Type.AssemblyQualifiedName%2A?displayProperty=fullName>请参见属性。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItem.SerializeDataInstance%2A>方法修改在 Excel 工作簿的工作表中缓存的字符串的值。 该代码使用<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItem.DataType%2A>属性来验证缓存的数据对象是否为字符串, 然后再尝试修改该对象。  
  
 此示例需要：  
  
-   一个 Excel 文档级自定义项, 它具有`Sheet1` `ExcelWorkbook1`命名空间中的一个类和一个名为`CachedString`的`Sheet1`类中的缓存字符串。  
  
-   一个控制台应用程序项目或一些其他非 Office 项目。  
  
-   对以下程序集的引用:  
  
    -   Microsoft.VisualStudio.Tools.Applications.ServerDocument.dll  
  
    -   Microsoft.VisualStudio.Tools.Applications.Runtime.dll  
  
-   `Imports`(对于 Visual Basic) 或`using` (对于C#) <xref:Microsoft.VisualStudio.Tools.Applications?displayProperty=fullName>代码文件顶部<xref:Microsoft.VisualStudio.Tools.Applications.Runtime?displayProperty=fullName>的和命名空间。  
  
 [!code-csharp[Trin_ServerDocument#9](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ServerDocument/CS/Form1.cs#9)]
 [!code-vb[Trin_ServerDocument#9](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ServerDocument/VB/Form1.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public string Id { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Id" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualStudio.Tools.Applications.CachedDataItem.Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualStudio.Tools.Applications.ServerDocument</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置通过 <see cref="T:Microsoft.VisualStudio.Tools.Applications.CachedDataItem" /> 表示的缓存数据对象的名称。</summary>
        <value>所表示<see cref="T:Microsoft.VisualStudio.Tools.Applications.CachedDataHostItem" />的缓存数据对象的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItem.Id%2A>属性来显示 Excel 工作簿中的缓存数据对象的名称。  
  
 此示例需要：  
  
-   一个控制台应用程序项目或一些其他非 Office 项目。  
  
-   对以下程序集的引用:  
  
    -   Microsoft.VisualStudio.Tools.Applications.ServerDocument.dll  
  
    -   Microsoft.VisualStudio.Tools.Applications.Runtime.dll  
  
-   `Imports`(对于 Visual Basic) 或`using` (对于C#) <xref:Microsoft.VisualStudio.Tools.Applications?displayProperty=fullName>代码文件顶部<xref:Microsoft.VisualStudio.Tools.Applications.Runtime?displayProperty=fullName>的和命名空间。  
  
 [!code-csharp[Trin_ServerDocument#5](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ServerDocument/CS/Form1.cs#5)]
 [!code-vb[Trin_ServerDocument#5](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ServerDocument/VB/Form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Schema">
      <MemberSignature Language="C#" Value="public string Schema { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Schema" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualStudio.Tools.Applications.CachedDataItem.Schema" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualStudio.Tools.Applications.ServerDocument</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>如果缓存数据对象为 <see cref="T:System.Data.DataSet" /> 或 <see cref="T:System.Data.DataTable" />，获取或设置描述由 <see cref="T:Microsoft.VisualStudio.Tools.Applications.CachedDataItem" /> 表示的缓存数据对象的架构。</summary>
        <value>如果缓存的数据对象是<see cref="T:System.Data.DataSet" />或<see cref="T:System.Data.DataTable" />, 则此属性返回描述缓存的<see langword="null" />数据对象的架构; 否则为。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 有关演示如何使用<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItem.Schema%2A>属性的代码示例, 请参阅[ServerDocument 示例](http://msdn.microsoft.com/en-us/4d5a9093-d648-4c66-a182-65bebf6016d7)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializeDataInstance">
      <MemberSignature Language="C#" Value="public void SerializeDataInstance (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SerializeDataInstance(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualStudio.Tools.Applications.CachedDataItem.SerializeDataInstance(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualStudio.Tools.Applications.ServerDocument</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">该对象包含要保存到数据缓存中的对象的数据。</param>
        <summary>将数据序列化为通过 <see cref="T:Microsoft.VisualStudio.Tools.Applications.CachedDataItem" /> 表示的缓存数据对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItem.SerializeDataInstance%2A>使用方法初始化或修改缓存数据对象的值。 此方法将`value`参数序列化为所<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItem>表示的缓存数据对象。 若要对复杂缓存数据对象 (如<xref:System.Data.DataSet>或<xref:System.Data.DataTable>) 中的特定数据值进行更改, 请将缓存数据的 XML 表示形式反序列化为缓存对象的新实例, 对此副本进行更改, 然后使用<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItem.SerializeDataInstance%2A>将更改序列化回数据缓存的方法。 有关详细信息, 请参阅在[服务器上访问文档中的数据](/visualstudio/vsto/accessing-data-in-documents-on-the-server)和[演练:更改服务器](/visualstudio/vsto/walkthrough-changing-cached-data-in-a-workbook-on-a-server)上工作簿中的缓存数据。  
  
 此方法使用 DiffGram 格式将、 <xref:System.Data.DataSet> <xref:System.Data.DataTable>和类型化数据集对象序列化到数据缓存中。 这可确保将脱机文档中的数据缓存更改正确地发送到服务器。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItem.SerializeDataInstance%2A>方法修改在 Excel 工作簿的工作表中缓存的字符串的值。  
  
 此示例需要：  
  
-   一个 Excel 文档级自定义项, 它具有`Sheet1` `ExcelWorkbook1`命名空间中的一个类和一个名为`CachedString`的`Sheet1`类中的缓存字符串。  
  
-   一个控制台应用程序项目或一些其他非 Office 项目。  
  
-   对以下程序集的引用:  
  
    -   Microsoft.VisualStudio.Tools.Applications.ServerDocument.dll  
  
    -   Microsoft.VisualStudio.Tools.Applications.Runtime.dll  
  
-   `Imports`(对于 Visual Basic) 或`using` (对于C#) <xref:Microsoft.VisualStudio.Tools.Applications?displayProperty=fullName>代码文件顶部<xref:Microsoft.VisualStudio.Tools.Applications.Runtime?displayProperty=fullName>的和命名空间。  
  
 [!code-csharp[Trin_ServerDocument#9](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ServerDocument/CS/Form1.cs#9)]
 [!code-vb[Trin_ServerDocument#9](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ServerDocument/VB/Form1.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Xml">
      <MemberSignature Language="C#" Value="public string Xml { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Xml" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualStudio.Tools.Applications.CachedDataItem.Xml" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualStudio.Tools.Applications.ServerDocument</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置由 <see cref="T:Microsoft.VisualStudio.Tools.Applications.CachedDataItem" /> 表示的缓存数据对象的 XML 表示形式。</summary>
        <value>所表示<see cref="T:Microsoft.VisualStudio.Tools.Applications.CachedDataItem" />的缓存数据对象的 XML 表示形式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要获取缓存数据对象的值, 请使用<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItem.Xml%2A>属性将缓存数据的 XML 表示形式反序列化为缓存的数据对象的新实例。 然后, 你可以更改此副本并将更改序列化回数据缓存。  
  
 在大多数情况下, 可以使用<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItem.SerializeDataInstance%2A>方法将已更改的对象序列化到数据缓存中。 如果要对缓存数据的更改执行自己的序列化, 还可以直接写入到<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItem.Xml%2A>属性。 但是, 如果您要对将使用<xref:System.Data.DataSet> <xref:System.Data.Common.DataAdapter>更新到<xref:System.Data.DataTable>数据库的、或类型化数据集进行更改, 请在将更改写入缓存的数据时指定 DiffGram 格式。 否则, 对<xref:System.Data.DataSet>或<xref:System.Data.DataTable>的更改将作为新行而不是更改的行添加到数据库中。 有关详细信息，请参阅 [Accessing Data in Documents on the Server](/visualstudio/vsto/accessing-data-in-documents-on-the-server)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItem.Xml%2A>属性获取在 Excel 工作簿的工作表中缓存的字符串的值。 该示例在消息框中显示值。  
  
 此示例需要：  
  
-   一个 Excel 文档级自定义项, 它具有`Sheet1` `ExcelWorkbook1`命名空间中的一个类和一个名为`CachedString`的`Sheet1`类中的缓存字符串。  
  
-   一个控制台应用程序项目或一些其他非 Office 项目。  
  
-   对以下程序集的引用:  
  
    -   Microsoft.VisualStudio.Tools.Applications.ServerDocument.dll  
  
    -   Microsoft.VisualStudio.Tools.Applications.Runtime.dll  
  
-   `Imports`(对于 Visual Basic) 或`using` (对于C#) <xref:Microsoft.VisualStudio.Tools.Applications?displayProperty=fullName>代码文件顶部<xref:Microsoft.VisualStudio.Tools.Applications.Runtime?displayProperty=fullName>的和命名空间。  
  
 [!code-csharp[Trin_ServerDocument#10](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ServerDocument/CS/Form1.cs#10)]
 [!code-vb[Trin_ServerDocument#10](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ServerDocument/VB/Form1.vb#10)]  
  
 有关演示如何使用<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItem.Xml%2A>属性修改和序列化缓存<xref:System.Data.DataSet>更改的代码示例, 请参阅[演练:更改服务器](/visualstudio/vsto/walkthrough-changing-cached-data-in-a-workbook-on-a-server)上工作簿中的缓存数据。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
