<Type Name="CachedDataItem" FullName="Microsoft.VisualStudio.Tools.Applications.CachedDataItem">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="366909909d65e8b755522de5f3ee3a8bc57e5cd2" />
    <Meta Name="ms.sourcegitcommit" Value="66ccc1ab172558cdfd2b9ffb616a60e4c9105be3" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="09/19/2018" />
    <Meta Name="ms.locfileid" Value="46458894" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class CachedDataItem : Microsoft.VisualStudio.Tools.Applications.CachedDataNodeBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit CachedDataItem extends Microsoft.VisualStudio.Tools.Applications.CachedDataNodeBase" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualStudio.Tools.Applications.CachedDataItem" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualStudio.Tools.Applications.ServerDocument</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.VisualStudio.Tools.Applications.CachedDataNodeBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>表示文档级自定义中的缓存数据对象，该文档级自定义通过使用 Visual Studio 中的 Office 开发工具创建。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关在文档级自定义项中缓存数据的详细信息，请参阅[缓存数据](/visualstudio/vsto/caching-data)并[访问服务器上的文档中的数据](/visualstudio/vsto/accessing-data-in-documents-on-the-server)。  
  
   
  
## Examples  
 下面的代码示例检查每个<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItem>Excel 工作簿，并显示的数据缓存中的每个名称缓存数据对象。  
  
 此示例需要：  
  
-   控制台应用程序项目或某些其他非 Office 项目。  
  
-   对以下程序集的引用：  
  
    -   Microsoft.VisualStudio.Tools.Applications.ServerDocument.dll  
  
    -   Microsoft.VisualStudio.Tools.Applications.Runtime.dll  
  
-   `Imports` （对于 Visual Basic) 或`using`（适用于 C#) 语句<xref:Microsoft.VisualStudio.Tools.Applications?displayProperty=fullName>和<xref:Microsoft.VisualStudio.Tools.Applications.Runtime?displayProperty=fullName>代码文件顶部的命名空间。  
  
 [!code-csharp[Trin_ServerDocument#5](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ServerDocument/CS/Form1.cs#5)]
 [!code-vb[Trin_ServerDocument#5](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ServerDocument/VB/Form1.vb#5)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="DataType">
      <MemberSignature Language="C#" Value="public string DataType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualStudio.Tools.Applications.CachedDataItem.DataType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualStudio.Tools.Applications.ServerDocument</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置缓存数据对象类型的程序集限定名称。</summary>
        <value>缓存的数据对象的类型的程序集限定名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItem.DataType%2A>属性返回的是有用的创建自定义类型的新实例的数据缓存中的缓存的数据类型的程序集限定名称。 例如，可以获取<xref:System.Type>并传递到程序集限定类型名称的自定义数据类型的<xref:System.Type.GetType%2A>方法。 然后可以通过传递此创建自定义类型的实例<xref:System.Type>作为参数<xref:System.Activator.CreateInstance%2A?displayProperty=fullName>方法。  
  
 返回的程序集限定类型字符串的格式有关的详细信息<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItem.DataType%2A>属性，请参阅<xref:System.Type.AssemblyQualifiedName%2A?displayProperty=fullName>属性。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItem.SerializeDataInstance%2A>方法来修改 Excel 工作簿的工作表中缓存的字符串的值。 该代码使用<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItem.DataType%2A>属性以验证缓存的数据对象，尝试对其进行修改之前是一个字符串。  
  
 此示例需要：  
  
-   具有的 Excel 文档级自定义`Sheet1`类中`ExcelWorkbook1`命名空间，并在已缓存的字符串`Sheet1`类名为`CachedString`。  
  
-   控制台应用程序项目或某些其他非 Office 项目。  
  
-   对以下程序集的引用：  
  
    -   Microsoft.VisualStudio.Tools.Applications.ServerDocument.dll  
  
    -   Microsoft.VisualStudio.Tools.Applications.Runtime.dll  
  
-   `Imports` （对于 Visual Basic) 或`using`（适用于 C#) 语句<xref:Microsoft.VisualStudio.Tools.Applications?displayProperty=fullName>和<xref:Microsoft.VisualStudio.Tools.Applications.Runtime?displayProperty=fullName>代码文件顶部的命名空间。  
  
 [!code-csharp[Trin_ServerDocument#9](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ServerDocument/CS/Form1.cs#9)]
 [!code-vb[Trin_ServerDocument#9](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ServerDocument/VB/Form1.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public string Id { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Id" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualStudio.Tools.Applications.CachedDataItem.Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualStudio.Tools.Applications.ServerDocument</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置通过 <see cref="T:Microsoft.VisualStudio.Tools.Applications.CachedDataItem" /> 表示的缓存数据对象的名称。</summary>
        <value>由表示的缓存的数据对象的名称<see cref="T:Microsoft.VisualStudio.Tools.Applications.CachedDataHostItem" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItem.Id%2A>属性来显示 Excel 工作簿中缓存的数据对象的名称。  
  
 此示例需要：  
  
-   控制台应用程序项目或某些其他非 Office 项目。  
  
-   对以下程序集的引用：  
  
    -   Microsoft.VisualStudio.Tools.Applications.ServerDocument.dll  
  
    -   Microsoft.VisualStudio.Tools.Applications.Runtime.dll  
  
-   `Imports` （对于 Visual Basic) 或`using`（适用于 C#) 语句<xref:Microsoft.VisualStudio.Tools.Applications?displayProperty=fullName>和<xref:Microsoft.VisualStudio.Tools.Applications.Runtime?displayProperty=fullName>代码文件顶部的命名空间。  
  
 [!code-csharp[Trin_ServerDocument#5](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ServerDocument/CS/Form1.cs#5)]
 [!code-vb[Trin_ServerDocument#5](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ServerDocument/VB/Form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Schema">
      <MemberSignature Language="C#" Value="public string Schema { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Schema" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualStudio.Tools.Applications.CachedDataItem.Schema" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualStudio.Tools.Applications.ServerDocument</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>如果缓存数据对象为 <see cref="T:System.Data.DataSet" /> 或 <see cref="T:System.Data.DataTable" />，获取或设置描述由 <see cref="T:Microsoft.VisualStudio.Tools.Applications.CachedDataItem" /> 表示的缓存数据对象的架构。</summary>
        <value>缓存的数据对象是否<see cref="T:System.Data.DataSet" />或<see cref="T:System.Data.DataTable" />，此属性返回的架构，用于描述缓存的数据对象中; 否则为<see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 有关演示如何使用的代码示例<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItem.Schema%2A>属性，请参阅[ServerDocument 示例](http://msdn.microsoft.com/en-us/4d5a9093-d648-4c66-a182-65bebf6016d7)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializeDataInstance">
      <MemberSignature Language="C#" Value="public void SerializeDataInstance (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SerializeDataInstance(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualStudio.Tools.Applications.CachedDataItem.SerializeDataInstance(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualStudio.Tools.Applications.ServerDocument</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">该对象包含要保存到数据缓存中的对象的数据。</param>
        <summary>将数据序列化为通过 <see cref="T:Microsoft.VisualStudio.Tools.Applications.CachedDataItem" /> 表示的缓存数据对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItem.SerializeDataInstance%2A>方法以初始化或修改的缓存的数据对象的值。 此方法序列化`value`到缓存的数据的参数对象<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItem>表示。 如对复杂的缓存的数据对象中的特定数据值进行更改<xref:System.Data.DataSet>或<xref:System.Data.DataTable>、 反序列化的 XML 表示形式的缓存数据到缓存的对象的新实例，对此副本进行的更改以及如何将<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItem.SerializeDataInstance%2A>方法以序列化所做的更改回数据缓存。 有关详细信息，请参阅[在服务器上的文档中访问数据](/visualstudio/vsto/accessing-data-in-documents-on-the-server)和[演练： 更改服务器上的工作簿中的缓存数据](/visualstudio/vsto/walkthrough-changing-cached-data-in-a-workbook-on-a-server)。  
  
 此方法使用 DiffGram 格式来序列化<xref:System.Data.DataSet>， <xref:System.Data.DataTable>，和类型的数据缓存到数据集对象。 这可确保更改脱机文档中的数据缓存正确发送到服务器。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItem.SerializeDataInstance%2A>方法来修改 Excel 工作簿的工作表中缓存的字符串的值。  
  
 此示例需要：  
  
-   具有的 Excel 文档级自定义`Sheet1`类中`ExcelWorkbook1`命名空间，并在已缓存的字符串`Sheet1`类名为`CachedString`。  
  
-   控制台应用程序项目或某些其他非 Office 项目。  
  
-   对以下程序集的引用：  
  
    -   Microsoft.VisualStudio.Tools.Applications.ServerDocument.dll  
  
    -   Microsoft.VisualStudio.Tools.Applications.Runtime.dll  
  
-   `Imports` （对于 Visual Basic) 或`using`（适用于 C#) 语句<xref:Microsoft.VisualStudio.Tools.Applications?displayProperty=fullName>和<xref:Microsoft.VisualStudio.Tools.Applications.Runtime?displayProperty=fullName>代码文件顶部的命名空间。  
  
 [!code-csharp[Trin_ServerDocument#9](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ServerDocument/CS/Form1.cs#9)]
 [!code-vb[Trin_ServerDocument#9](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ServerDocument/VB/Form1.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Xml">
      <MemberSignature Language="C#" Value="public string Xml { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Xml" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualStudio.Tools.Applications.CachedDataItem.Xml" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualStudio.Tools.Applications.ServerDocument</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置由 <see cref="T:Microsoft.VisualStudio.Tools.Applications.CachedDataItem" /> 表示的缓存数据对象的 XML 表示形式。</summary>
        <value>缓存的数据对象所表示的 XML 表示形式<see cref="T:Microsoft.VisualStudio.Tools.Applications.CachedDataItem" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要获取的缓存的数据对象的值，请使用<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItem.Xml%2A>属性进行反序列化的 XML 表示形式的缓存数据到缓存的数据对象的新实例。 然后，您可以对此副本所做的更改和序列化更改都应用到数据缓存。  
  
 在大多数情况下，可以使用<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItem.SerializeDataInstance%2A>方法已更改的对象序列化到的数据缓存。 如果你想要对缓存数据的更改执行你自己的序列化，您还可以编写直接向<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItem.Xml%2A>属性。 但是，如果要进行更改<xref:System.Data.DataSet>， <xref:System.Data.DataTable>，或将使用更新到数据库的类型化数据集<xref:System.Data.Common.DataAdapter>，所做的更改写入缓存的数据时指定 DiffGram 格式。 否则为对更改<xref:System.Data.DataSet>或<xref:System.Data.DataTable>将添加到数据库而不是已更改的行的新行。 有关详细信息，请参阅[在服务器上的文档中访问数据](/visualstudio/vsto/accessing-data-in-documents-on-the-server)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItem.Xml%2A>属性来获取缓存中的 Excel 工作簿的工作表的字符串值。 该示例在一个消息框中显示的值。  
  
 此示例需要：  
  
-   具有的 Excel 文档级自定义`Sheet1`类中`ExcelWorkbook1`命名空间，并在已缓存的字符串`Sheet1`类名为`CachedString`。  
  
-   控制台应用程序项目或某些其他非 Office 项目。  
  
-   对以下程序集的引用：  
  
    -   Microsoft.VisualStudio.Tools.Applications.ServerDocument.dll  
  
    -   Microsoft.VisualStudio.Tools.Applications.Runtime.dll  
  
-   `Imports` （对于 Visual Basic) 或`using`（适用于 C#) 语句<xref:Microsoft.VisualStudio.Tools.Applications?displayProperty=fullName>和<xref:Microsoft.VisualStudio.Tools.Applications.Runtime?displayProperty=fullName>代码文件顶部的命名空间。  
  
 [!code-csharp[Trin_ServerDocument#10](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ServerDocument/CS/Form1.cs#10)]
 [!code-vb[Trin_ServerDocument#10](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ServerDocument/VB/Form1.vb#10)]  
  
 有关演示如何使用的代码示例<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItem.Xml%2A>属性来修改和序列化对缓存的更改<xref:System.Data.DataSet>，请参阅[演练： 更改服务器上的工作簿中的缓存数据](/visualstudio/vsto/walkthrough-changing-cached-data-in-a-workbook-on-a-server)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>