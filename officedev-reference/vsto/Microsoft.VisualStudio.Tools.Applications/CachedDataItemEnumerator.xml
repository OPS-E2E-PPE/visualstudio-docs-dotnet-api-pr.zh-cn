<Type Name="CachedDataItemEnumerator" FullName="Microsoft.VisualStudio.Tools.Applications.CachedDataItemEnumerator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="511785062159141fd74df63205252a3607a8e315" />
    <Meta Name="ms.sourcegitcommit" Value="bb8a3a96823cedeffbdbcc0c41a8118399de8074" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="02/21/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class CachedDataItemEnumerator : System.Collections.Generic.IEnumerator&lt;Microsoft.VisualStudio.Tools.Applications.CachedDataItem&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit CachedDataItemEnumerator extends System.Object implements class System.Collections.Generic.IEnumerator`1&lt;class Microsoft.VisualStudio.Tools.Applications.CachedDataItem&gt;, class System.Collections.IEnumerator, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualStudio.Tools.Applications.CachedDataItemEnumerator" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualStudio.Tools.Applications.ServerDocument</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerator&lt;Microsoft.VisualStudio.Tools.Applications.CachedDataItem&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>循环访问 <see cref="T:Microsoft.VisualStudio.Tools.Applications.CachedDataItemCollection" />。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Visual Basic 和 C# 每个包含的语句的隐藏了枚举数的复杂性 (`foreach`在 C# 和`For Each`在 Visual Basic 中)。 为正在使用，而不直接操作枚举数的语言中使用的适当语句。  
  
 枚举器可用于读取集合中的数据，但不能用于修改基础集合。  
  
 最初，枚举数定位在集合中第一个元素的前面。 <xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItemEnumerator.Reset%2A>方法还会枚举器放回此位置。 在此位置上，设置<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItemEnumerator.Current%2A>属性引发异常。 因此，必须调用<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItemEnumerator.MoveNext%2A>方法将枚举数前移到集合，然后再读取的值的第一个元素<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItemEnumerator.Current%2A>。  
  
 在调用 <xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItemEnumerator.Current%2A> 或 <xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItemEnumerator.MoveNext%2A> 之前，<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItemEnumerator.Reset%2A> 返回同一对象。 <xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItemEnumerator.MoveNext%2A> 将 <xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItemEnumerator.Current%2A> 设置为下一个元素。  
  
 如果<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItemEnumerator.MoveNext%2A>越过的末尾的集合，枚举数定位在集合中的最后一个元素的后面和<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItemEnumerator.MoveNext%2A>返回`false`。 当枚举器位于此位置上，后续调用<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItemEnumerator.MoveNext%2A>还返回`false`。 如果最后一次调用到<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItemEnumerator.MoveNext%2A>返回`false`，则调用<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItemEnumerator.Current%2A>引发异常。 若要再次将 <xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItemEnumerator.Current%2A> 设置为集合的第一个元素，可以调用 <xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItemEnumerator.Reset%2A> 并接着调用 <xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItemEnumerator.MoveNext%2A>。  
  
 只要集合保持不变，枚举数就保持有效。 如果对集合进行更改，例如添加、 修改或删除元素，则枚举数将失效且不可恢复失效，并且下次调用<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItemEnumerator.MoveNext%2A>或<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItemEnumerator.Reset%2A>引发<xref:System.InvalidOperationException>。 如果之间修改集合<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItemEnumerator.MoveNext%2A>和<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItemEnumerator.Current%2A>，<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItemEnumerator.Current%2A>返回到，设置的元素，即使枚举数已经无效。  
  
 枚举数没有对集合的独占访问权；因此，从头到尾对一个集合进行枚举在本质上不是一个线程安全的过程。 即使某个集合已同步，其他线程仍可以修改该集合，这会导致枚举数引发异常。 若要确保枚举过程中的线程安全性，可以在整个枚举期间锁定集合，或者捕获由其他线程进行的更改所导致的异常。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public Microsoft.VisualStudio.Tools.Applications.CachedDataItem Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.VisualStudio.Tools.Applications.CachedDataItem Current" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualStudio.Tools.Applications.CachedDataItemEnumerator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualStudio.Tools.Applications.ServerDocument</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualStudio.Tools.Applications.CachedDataItem</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取枚举数当前位置的 <see cref="T:Microsoft.VisualStudio.Tools.Applications.CachedDataItem" />。</summary>
        <value>
          <see cref="T:Microsoft.VisualStudio.Tools.Applications.CachedDataItem" />位于枚举数当前位置。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 创建一个枚举器或<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItemEnumerator.Reset%2A>调用方法时，<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItemEnumerator.MoveNext%2A>必须调用方法来枚举器向前移动到集合，然后再读取的值的第一个元素<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItemEnumerator.Current%2A>; 否则为<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItemEnumerator.Current%2A>是未定义。  
  
 <xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItemEnumerator.Current%2A> 如果最后一次调用到也会引发异常<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItemEnumerator.MoveNext%2A>返回`false`，指示集合的末尾。  
  
 <xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItemEnumerator.Current%2A> 不会移动的位置的枚举器，并对连续调用<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItemEnumerator.Current%2A>之前返回同一对象<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItemEnumerator.MoveNext%2A>或<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItemEnumerator.Reset%2A>调用。  
  
 只要集合保持不变，枚举数就保持有效。 如果对集合进行更改，例如添加、 修改或删除元素，则枚举数将失效且不可恢复失效，并且下次调用<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItemEnumerator.MoveNext%2A>或<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItemEnumerator.Reset%2A>引发<xref:System.InvalidOperationException>。 如果之间修改集合<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItemEnumerator.MoveNext%2A>和<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItemEnumerator.Current%2A>，<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItemEnumerator.Current%2A>返回到，设置的元素，即使枚举数已经无效。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">枚举器位于集合中第一个元素之前或最后一个元素之后。</exception>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualStudio.Tools.Applications.CachedDataItemEnumerator.MoveNext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualStudio.Tools.Applications.ServerDocument</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将枚举数推进到 <see cref="T:Microsoft.VisualStudio.Tools.Applications.CachedDataItemCollection" /> 中的下一个 <see cref="T:Microsoft.VisualStudio.Tools.Applications.CachedDataItem" />。</summary>
        <returns>
          如果枚举数成功地推进到下一个 <see cref="T:Microsoft.VisualStudio.Tools.Applications.CachedDataItem" />，则为 <see langword="true" />；如果枚举数越过集合的结尾，则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 创建一个枚举器或<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItemEnumerator.Reset%2A>是调用，枚举数定位在集合中，并且首次调用的第一个元素之前<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItemEnumerator.MoveNext%2A>移动到的集合的第一个元素的枚举数。  
  
 如果<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItemEnumerator.MoveNext%2A>越过的末尾的集合，枚举数定位在集合中的最后一个元素的后面和<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItemEnumerator.MoveNext%2A>返回`false`。 当枚举器位于此位置上，后续调用<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItemEnumerator.MoveNext%2A>还返回`false`直到<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItemEnumerator.Reset%2A>调用。  
  
 只要集合保持不变，枚举数就保持有效。 如果对集合进行更改，例如添加、 修改或删除元素，则枚举数将失效且不可恢复失效，并且下次调用<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItemEnumerator.MoveNext%2A>或<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItemEnumerator.Reset%2A>引发<xref:System.InvalidOperationException>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">集合在枚举器创建后被修改。</exception>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualStudio.Tools.Applications.CachedDataItemEnumerator.Reset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualStudio.Tools.Applications.ServerDocument</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将枚举数设置为其初始位置，该位置位于集合中第一个 <see cref="T:Microsoft.VisualStudio.Tools.Applications.CachedDataItem" /> 之前。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 只要集合保持不变，枚举数就保持有效。 如果对集合进行更改，例如添加、 修改或删除元素，则枚举数将失效且不可恢复失效，并且下次调用<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItemEnumerator.MoveNext%2A>或<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItemEnumerator.Reset%2A>引发<xref:System.InvalidOperationException>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">集合在枚举器创建后被修改。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualStudio.Tools.Applications.CachedDataItemEnumerator.System#Collections#IEnumerator#Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualStudio.Tools.Applications.ServerDocument</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualStudio.Tools.Applications.CachedDataItemEnumerator.System#IDisposable#Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualStudio.Tools.Applications.ServerDocument</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>释放由 <see cref="T:Microsoft.VisualStudio.Tools.Applications.CachedDataItemEnumerator" /> 使用的所有资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在完成使用 <xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItemEnumerator.System%23IDisposable%23Dispose%2A> 后，应调用 <xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItemEnumerator>。 <xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItemEnumerator.System%23IDisposable%23Dispose%2A> 方法使 <xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItemEnumerator> 处于不可用状态。 在调用<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItemEnumerator.System%23IDisposable%23Dispose%2A>，必须释放对所有引用<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItemEnumerator>以便垃圾回收器才能回收的内存，<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItemEnumerator>占用。 有关详细信息，请参阅[清洗向上非托管资源](http://msdn.microsoft.com/library/a17b0066-71c2-4ba4-9822-8e19332fc213)和[实现 Dispose 方法](http://msdn.microsoft.com/library/eb4e1af0-3b48-4fbc-ad4e-fc2f64138bf9)。  
  
> [!NOTE]
>  每次释放对 <xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItemEnumerator.System%23IDisposable%23Dispose%2A> 的最后一个引用前，均应调用 <xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItemEnumerator>。 否则，在垃圾回收器调用 <xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItemEnumerator> 对象的 `Finalize` 方法之前，该对象正在使用的资源不会被释放。  
  
 此方法是显式接口成员的实现。 它只能在 <xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItemEnumerator> 实例强制转换为 <xref:System.IDisposable> 接口时使用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>