<Type Name="ServerDocument" FullName="Microsoft.VisualStudio.Tools.Applications.ServerDocument">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a8fda5d830528a6ee257126a7eaaf30e3901979e" />
    <Meta Name="ms.sourcegitcommit" Value="66ccc1ab172558cdfd2b9ffb616a60e4c9105be3" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="09/19/2018" />
    <Meta Name="ms.locfileid" Value="46457899" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ServerDocument : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ServerDocument extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualStudio.Tools.Applications.ServerDocument" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualStudio.Tools.Applications.ServerDocument</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>提供对文档或工作簿（属于使用 Visual Studio 中的 Office 开发工具创建的文档级自定义项）中的缓存数据和自定义项信息的访问。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument>类来管理未安装 Excel 的计算机上的文档级自定义的某些方面或安装 Word。 通常情况下，应用程序不与集成 Office，如控制台项目或 Windows 窗体项目，而不是 Office 项目中需要使用此类。  
  
 使用下列成员的<xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument>类来执行常见任务：  
  
-   若要访问和修改的服务器上的文档数据缓存中的数据，请使用<xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument.CachedData%2A>属性。  
  
-   若要以编程方式将自定义项附加到文档或从文档中删除自定义项，使用<xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument.AddCustomization%2A>和<xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument.RemoveCustomization%2A>方法。  
  
-   若要访问或更改与文档相关联的部署清单的 URL，请使用<xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument.DeploymentManifestUrl%2A>属性。  
  
 有两个不同版本<xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument>Visual Studio 2010 Tools for Office Runtime 中的类。 应使用的版本取决于目标的应用程序的.NET Framework 中想要使用的类：  
  
-   对于面向应用程序[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]或[!INCLUDE[net_v45](~/includes/net-v45-md.md)]，使用<xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument?displayProperty=fullName>Microsoft.VisualStudio.Tools.Applications.ServerDocument.dll 程序集中的类。  
  
-   对于面向.NET Framework 3.5 的应用程序，使用`Microsoft.VisualStudio.Tools.Applications.ServerDocument`Microsoft.VisualStudio.Tools.Applications.ServerDocument.v10.0.dll 程序集中的类。  
  
 有关详细信息，请参阅 [使用 ServerDocument 类管理服务器上的文档](/visualstudio/vsto/managing-documents-on-a-server-by-using-the-serverdocument-class)。  
  
## <a name="choosing-which-constructor-to-use"></a>选择使用的构造函数  
 若要使用<xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument>类来访问缓存的数据或部署清单在文档中的 URL，则必须创建<xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument>对象。  
  
 有两个组的<xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument>构造函数：  
  
-   一组可用于访问已在内存中打开的文档。  
  
-   一组可用于访问磁盘上的文档。  
  
### <a name="accessing-a-document-in-memory"></a>访问内存中的文档  
 若要访问已在内存中打开的文档，请使用以下构造函数之一：  
  
-   <xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument.%23ctor%28System.Byte%5B%5D%2CSystem.String%29?displayProperty=fullName>  
  
-   <xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument.%23ctor%28System.IO.Stream%2CSystem.String%29?displayProperty=fullName>  
  
 这些构造函数接受字节数组或<xref:System.IO.Stream>表示在内存中的文档。 这是很有用，如果你想要修改的缓存的数据或应用程序清单中文档，再进行流式传输到目标使用 HTTP 协议。 若要使用这些构造函数，该文档必须已有自定义项;否则，这些构造函数将引发<xref:Microsoft.VisualStudio.Tools.Applications.Runtime.CannotLoadManifestException>异常。  
  
### <a name="accessing-a-document-on-disk"></a>访问磁盘上的文档  
 若要访问磁盘上的文档，请使用以下构造函数之一：  
  
-   <xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument.%23ctor%28System.String%29?displayProperty=fullName>  
  
-   <xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument.%23ctor%28System.String%2CSystem.IO.FileAccess%29?displayProperty=fullName>  
  
 这些构造函数接受你想要打开的文档的完整路径。 默认情况下，具有读/写访问权限打开文档。 如果你想要使用只读或只写访问打开的文档，使用构造函数具有<xref:System.IO.FileAccess>参数。  
  
   
  
## Examples  
 下面的代码示例创建一个新<xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument>的加载指定的文档，然后显示附加到文档的自定义项的部署清单的 URL。  
  
 此示例需要：  
  
-   控制台应用程序项目或某些其他非 Office 项目。  
  
-   对以下程序集的引用：  
  
    -   Microsoft.VisualStudio.Tools.Applications.ServerDocument.dll 和 Microsoft.VisualStudio.Tools.Applications.Runtime.dll (如果项目面向 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] 或 [!INCLUDE[net_v45](~/includes/net-v45-md.md)])。  
  
         或  
  
    -   Microsoft.VisualStudio.Tools.Applications.ServerDocument.v10.0.dll 和 Microsoft.VisualStudio.Tools.Applications.Runtime.v9.0.dll （如果项目面向.NET Framework 3.5）。  
  
-   `Imports` （对于 Visual Basic) 或`using`（适用于 C#) 语句<xref:Microsoft.VisualStudio.Tools.Applications?displayProperty=fullName>和<xref:Microsoft.VisualStudio.Tools.Applications.Runtime?displayProperty=fullName>代码文件顶部的命名空间。  
  
 [!code-csharp[Trin_ServerDocument#1](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ServerDocument/CS/Form1.cs#1)]
 [!code-vb[Trin_ServerDocument#1](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ServerDocument/VB/Form1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServerDocument (string documentPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string documentPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualStudio.Tools.Applications.ServerDocument.#ctor(System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualStudio.Tools.Applications.ServerDocument</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="documentPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="documentPath">要加载的文档的完整路径。</param>
        <summary>使用要加载的文档的完整路径，初始化 <see cref="T:Microsoft.VisualStudio.Tools.Applications.ServerDocument" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此构造函数来访问在磁盘上的文档中的缓存的数据或部署清单信息。 当使用此构造函数时，具有读/写访问权限打开指定的文档。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument.%23ctor%28System.String%29>构造函数创建一个新<xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument>加载指定的文档。 该示例然后显示附加到文档的自定义项的部署清单的 URL。  
  
 此示例需要：  
  
-   控制台应用程序项目或某些其他非 Office 项目。  
  
-   对以下程序集的引用：  
  
    -   Microsoft.VisualStudio.Tools.Applications.ServerDocument.dll 和 Microsoft.VisualStudio.Tools.Applications.Runtime.dll (如果项目面向 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] 或 [!INCLUDE[net_v45](~/includes/net-v45-md.md)])。  
  
         或  
  
    -   Microsoft.VisualStudio.Tools.Applications.ServerDocument.v10.0.dll 和 Microsoft.VisualStudio.Tools.Applications.Runtime.v9.0.dll （如果项目面向.NET Framework 3.5）。  
  
-   `Imports` （对于 Visual Basic) 或`using`（适用于 C#) 语句<xref:Microsoft.VisualStudio.Tools.Applications?displayProperty=fullName>和<xref:Microsoft.VisualStudio.Tools.Applications.Runtime?displayProperty=fullName>代码文件顶部的命名空间。  
  
 [!code-csharp[Trin_ServerDocument#1](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ServerDocument/CS/Form1.cs#1)]
 [!code-vb[Trin_ServerDocument#1](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ServerDocument/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="documentPath" /> 参数为 <see langword="null" /> 或为空，或者完全由空白字符组成。</exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <paramref name="documentPath" /> 指定的文件不存在。</exception>
        <exception cref="T:Microsoft.VisualStudio.Tools.Applications.Runtime.DocumentCustomizedWithPreviousRuntimeException">
          <paramref name="documentPath" /> 指定的文件具有并非通过 Visual Studio 2010 Tools for Office Runtime 或 Visual Studio Tools for Microsoft Office System（3.0 版 Runtime）创建的自定义。</exception>
        <exception cref="T:Microsoft.VisualStudio.Tools.Applications.Runtime.UnknownCustomizationFileException">[!INCLUDE[vsto_runtime](~/includes/vsto-runtime-md.md)] 不支持 <paramref name="documentPath" /> 指定的文件的文件扩展名。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServerDocument (byte[] bytes, string fileType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] bytes, string fileType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualStudio.Tools.Applications.ServerDocument.#ctor(System.Byte[],System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualStudio.Tools.Applications.ServerDocument</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="fileType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="bytes">一个表示要加载的文档的字节数组。</param>
        <param name="fileType">文档的文件扩展名，存储在 <c>bytes</c> 参数中，前面有一个句点 (.)，例如“.xlsx”或“.docx”。</param>
        <summary>使用表示要加载的文档的字节数组和该文档的文件扩展名，初始化 <see cref="T:Microsoft.VisualStudio.Tools.Applications.ServerDocument" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此构造函数来访问已在内存中的文档中的缓存的数据或部署清单信息。 当使用此构造函数时，具有读/写访问权限打开文档。  
  
 `fileType`参数仅用于确定存储在字节数组中的文档的类型。 值`fileType`映射到一个对于文档级自定义支持的文件类型。 不会尝试打开文件。 您可以选择性地传递中完整的文件名称 (例如，"Workbook1.xlsx")，但如果这样做，则使用文件扩展名。 有关受支持的文件类型的详细信息，请参阅[Architecture of Document-level Customizations](/visualstudio/vsto/architecture-of-document-level-customizations)。  
  
 若要在调用此构造函数后访问该文档的字节数组，使用 [ServerDocument 构造函数 (字节\<xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument.Document%2A > 属性。  
  
   
  
## Examples  
 下面的代码示例使用 [ServerDocument 构造函数 (字节\<xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument.%23ctor%28System.Byte%5B%5D%2CSystem.String%29 > 构造函数来创建新的 [ServerDocument构造函数 (字节\<xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument > 从字节数组，其中包含文件扩展名为.xlsx 的 Excel 工作簿。 然后该示例使用 [ServerDocument 构造函数 (字节\<xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument.Document%2A > 属性显示在文档中的字节数。  
  
 此示例需要：  
  
-   控制台应用程序项目或某些其他非 Office 项目。  
  
-   对以下程序集的引用：  
  
    -   Microsoft.VisualStudio.Tools.Applications.ServerDocument.dll 和 Microsoft.VisualStudio.Tools.Applications.Runtime.dll (如果项目面向 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] 或 [!INCLUDE[net_v45](~/includes/net-v45-md.md)])。  
  
         或  
  
    -   Microsoft.VisualStudio.Tools.Applications.ServerDocument.v10.0.dll 和 Microsoft.VisualStudio.Tools.Applications.Runtime.v9.0.dll （如果项目面向.NET Framework 3.5）。  
  
-   `Imports` （对于 Visual Basic) 或`using`（适用于 C#) 语句 [ServerDocument 构造函数 (字节\<xref:Microsoft.VisualStudio.Tools.Applications?displayProperty=fullName > 和 [ServerDocument 构造函数 (字节\<xref:Microsoft.VisualStudio.Tools.Applications.Runtime?displayProperty=fullName > 你的代码文件顶部的命名空间。  
  
 [!code-csharp[Trin_ServerDocument#2](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ServerDocument/CS/Form1.cs#2)]
 [!code-vb[Trin_ServerDocument#2](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ServerDocument/VB/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="bytes" /> 参数为 <see langword="null" /> 或为空。  
  
或 
<paramref name="fileType" /> 参数为 <see langword="null" /> 或为空，或者完全由空白字符组成。</exception>
        <exception cref="T:Microsoft.VisualStudio.Tools.Applications.Runtime.UnknownCustomizationFileException">[!INCLUDE[vsto_runtime](~/includes/vsto-runtime-md.md)] 不支持 <paramref name="fileType" /> 参数指定的文件扩展名。</exception>
        <exception cref="T:Microsoft.VisualStudio.Tools.Applications.Runtime.DocumentCustomizedWithPreviousRuntimeException">
          <paramref name="documentPath" /> 指定的文件具有并非通过 Visual Studio 2010 Tools for Office Runtime 或 Visual Studio Tools for Microsoft Office System（3.0 版 Runtime）创建的自定义。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServerDocument (System.IO.Stream stream, string fileType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, string fileType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualStudio.Tools.Applications.ServerDocument.#ctor(System.IO.Stream,System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualStudio.Tools.Applications.ServerDocument</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="fileType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="stream">表示要加载的文档的流。</param>
        <param name="fileType">文档的文件扩展名，存储在 <c>bytes</c> 参数中，前面有一个句点 (.)，例如“.xlsx”或“.docx”。</param>
        <summary>使用表示要加载的文档的流和该文档的文件扩展名，初始化 <see cref="T:Microsoft.VisualStudio.Tools.Applications.ServerDocument" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此构造函数来访问已在内存中的文档中的缓存的数据或部署清单信息。 当使用此构造函数时，具有读/写访问权限打开文档。  
  
 `fileType`参数仅用于确定存储在字节数组中的文档的类型。 值`fileType`映射到一个对于文档级自定义支持的文件类型。 不会尝试打开文件。 您可以选择性地传递中完整的文件名称 (例如，"Workbook1.xlsx")，但如果这样做，则使用文件扩展名。 有关受支持的文件类型的详细信息，请参阅[Architecture of Document-level Customizations](/visualstudio/vsto/architecture-of-document-level-customizations)。  
  
 若要在调用此构造函数后访问该文档的字节数组，使用<xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument.Document%2A>属性。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument.%23ctor%28System.IO.Stream%2CSystem.String%29>构造函数创建一个新<xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument>从<xref:System.IO.FileStream>，其中包含文件扩展名为.xlsx 的 Excel 工作簿。 然后，该代码显示附加到文档的自定义项的部署清单的 URL。  
  
 此示例需要：  
  
-   控制台应用程序项目或某些其他非 Office 项目。  
  
-   对以下程序集的引用：  
  
    -   Microsoft.VisualStudio.Tools.Applications.ServerDocument.dll 和 Microsoft.VisualStudio.Tools.Applications.Runtime.dll (如果项目面向 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] 或 [!INCLUDE[net_v45](~/includes/net-v45-md.md)])。  
  
         或  
  
    -   Microsoft.VisualStudio.Tools.Applications.ServerDocument.v10.0.dll 和 Microsoft.VisualStudio.Tools.Applications.Runtime.v9.0.dll （如果项目面向.NET Framework 3.5）。  
  
-   `Imports` （对于 Visual Basic) 或`using`（适用于 C#) 语句<xref:Microsoft.VisualStudio.Tools.Applications?displayProperty=fullName>和<xref:Microsoft.VisualStudio.Tools.Applications.Runtime?displayProperty=fullName>代码文件顶部的命名空间。  
  
 [!code-csharp[Trin_ServerDocument#3](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ServerDocument/CS/Form1.cs#3)]
 [!code-vb[Trin_ServerDocument#3](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ServerDocument/VB/Form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> 参数为 <see langword="null" /> 或为空。  
  
或 
<paramref name="fileType" /> 参数为 <see langword="null" /> 或为空，或者完全由空白字符组成。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="stream" /> 参数的长度为零或其当前位置位于流的末尾。</exception>
        <exception cref="T:Microsoft.VisualStudio.Tools.Applications.Runtime.UnknownCustomizationFileException">[!INCLUDE[vsto_runtime](~/includes/vsto-runtime-md.md)] 不支持 <paramref name="fileType" /> 参数指定的文件扩展名。</exception>
        <exception cref="T:Microsoft.VisualStudio.Tools.Applications.Runtime.DocumentCustomizedWithPreviousRuntimeException">
          <paramref name="documentPath" /> 指定的文件具有并非通过 Visual Studio 2010 Tools for Office Runtime 或 Visual Studio Tools for Microsoft Office System（3.0 版 Runtime）创建的自定义。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServerDocument (string documentPath, System.IO.FileAccess access);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string documentPath, valuetype System.IO.FileAccess access) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualStudio.Tools.Applications.ServerDocument.#ctor(System.String,System.IO.FileAccess)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualStudio.Tools.Applications.ServerDocument</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="documentPath" Type="System.String" />
        <Parameter Name="access" Type="System.IO.FileAccess" />
      </Parameters>
      <Docs>
        <param name="documentPath">要加载的文档的完整路径。</param>
        <param name="access">一个指示对文档的文件访问权限的值。</param>
        <summary>使用要加载的文档的完整路径和一个指示对该文档的文件访问权限的值，初始化 <see cref="T:Microsoft.VisualStudio.Tools.Applications.ServerDocument" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此构造函数来访问位于磁盘，如果你想要使用只读或只写访问打开的文档的文档中的缓存的数据或部署清单信息。 默认情况下，其他<xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument>构造函数具有读/写访问权限打开的文档。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument.%23ctor%28System.String%2CSystem.IO.FileAccess%29>构造函数创建一个新<xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument>加载指定的文档具有只读访问权限。 然后，该代码显示附加到文档的自定义项的部署清单的 URL。  
  
 此示例需要：  
  
-   控制台应用程序项目或某些其他非 Office 项目。  
  
-   对以下程序集的引用：  
  
    -   Microsoft.VisualStudio.Tools.Applications.ServerDocument.dll 和 Microsoft.VisualStudio.Tools.Applications.Runtime.dll (如果项目面向 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] 或 [!INCLUDE[net_v45](~/includes/net-v45-md.md)])。  
  
         或  
  
    -   Microsoft.VisualStudio.Tools.Applications.ServerDocument.v10.0.dll 和 Microsoft.VisualStudio.Tools.Applications.Runtime.v9.0.dll （如果项目面向.NET Framework 3.5）。  
  
-   `Imports` （对于 Visual Basic) 或`using`（适用于 C#) 语句<xref:Microsoft.VisualStudio.Tools.Applications?displayProperty=fullName>和<xref:Microsoft.VisualStudio.Tools.Applications.Runtime?displayProperty=fullName>代码文件顶部的命名空间。  
  
 [!code-csharp[Trin_ServerDocument#4](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ServerDocument/CS/Form1.cs#4)]
 [!code-vb[Trin_ServerDocument#4](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ServerDocument/VB/Form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="documentPath" /> 参数为 <see langword="null" /> 或为空，或者完全由空白字符组成。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="access" /> 的值是 <c>System.IO.FileAccess.Write</c>。</exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <paramref name="documentPath" /> 指定的文件不存在。</exception>
        <exception cref="T:Microsoft.VisualStudio.Tools.Applications.Runtime.DocumentNotCustomizedException">
          <paramref name="documentPath" /> 参数指定的文件不具有自定义，并且 <paramref name="access" /> 的值为 <c>System.IO.FileAccess.Read</c>。</exception>
        <exception cref="T:Microsoft.VisualStudio.Tools.Applications.Runtime.DocumentCustomizedWithPreviousRuntimeException">
          <paramref name="documentPath" /> 指定的文件具有并非通过 Visual Studio 2010 Tools for Office Runtime 或 Visual Studio Tools for Microsoft Office System（3.0 版 Runtime）创建的自定义。</exception>
        <exception cref="T:Microsoft.VisualStudio.Tools.Applications.Runtime.UnknownCustomizationFileException">[!INCLUDE[vsto_runtime](~/includes/vsto-runtime-md.md)] 不支持 <paramref name="documentPath" /> 指定的文件的文件扩展名。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddCustomization">
      <MemberSignature Language="C#" Value="public static void AddCustomization (string documentPath, Uri deploymentManifestUrl);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddCustomization(string documentPath, class System.Uri deploymentManifestUrl) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualStudio.Tools.Applications.ServerDocument.AddCustomization(System.String,System.Uri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualStudio.Tools.Applications.ServerDocument</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentPath" Type="System.String" />
        <Parameter Name="deploymentManifestUrl" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="documentPath">要向其附加自定义的文档的完整路径。</param>
        <param name="deploymentManifestUrl">解决方案部署清单的 URL。</param>
        <summary>使用指定的程序集名称和部署清单，将自定义项附加到指定文档。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument.AddCustomization%2A>方法将指定的自定义与文档关联通过添加`_AssemblyName`和`_AssemblyLocation`到文档的自定义文档属性。 这些属性确定文档具有自定义和指定部署清单的位置。 调用此方法成功，的下次用户打开指定的文档后运行时将尝试安装 Office 解决方案。 有关自定义文档属性的详细信息，请参阅[自定义文档属性概述](/visualstudio/vsto/custom-document-properties-overview)。  
  
 如果指定的文档不包含自定义项要求文档，一个控件<xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument.AddCustomization%2A>方法将成功，但该程序集将加载在用户打开文档时失败。  
  
 `fileType`参数必须指定具有对于文档级自定义支持的文件扩展名的文档。 无法将自定义项附加到 Word XML 文档中保存的文档 (* xml) 或 Word 2003 XML 文档 (\*xml) 文件格式。 有关受支持的文件类型的详细信息，请参阅[Architecture of Document-level Customizations](/visualstudio/vsto/architecture-of-document-level-customizations)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument.AddCustomization%2A>方法将自定义项附加到指定的文档。  
  
 此示例需要：  
  
-   控制台应用程序项目或某些其他非 Office 项目。  
  
-   对以下程序集的引用：  
  
    -   Microsoft.VisualStudio.Tools.Applications.ServerDocument.dll 和 Microsoft.VisualStudio.Tools.Applications.Runtime.dll (如果项目面向 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] 或 [!INCLUDE[net_v45](~/includes/net-v45-md.md)])。  
  
         或  
  
    -   Microsoft.VisualStudio.Tools.Applications.ServerDocument.v10.0.dll 和 Microsoft.VisualStudio.Tools.Applications.Runtime.v9.0.dll （如果项目面向.NET Framework 3.5）。  
  
-   `Imports` （对于 Visual Basic) 或`using`（适用于 C#) 语句<xref:Microsoft.VisualStudio.Tools.Applications?displayProperty=fullName>和<xref:Microsoft.VisualStudio.Tools.Applications.Runtime?displayProperty=fullName>代码文件顶部的命名空间。  
  
 [!code-csharp[Trin_ServerDocument#6](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ServerDocument/CS/Form1.cs#6)]
 [!code-vb[Trin_ServerDocument#6](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ServerDocument/VB/Form1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="documentPath" /> 或 <paramref name="deploymentManifestUrl" /> 为 <see langword="null" /> 或为空。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="deploymentManifestUrl" /> 未指定绝对 URL。</exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <paramref name="documentPath" /> 或 <paramref name="deploymentManifestUrl" /> 表示一个不存在的文件。</exception>
        <exception cref="T:Microsoft.VisualStudio.Tools.Applications.Runtime.DocumentAlreadyCustomizedException">
          <paramref name="documentPath" /> 指定的文档已具有自定义。</exception>
        <exception cref="T:Microsoft.VisualStudio.Tools.Applications.Runtime.InvalidManifestException">
          <paramref name="deploymentManifestUrl" /> 指定的部署清单不是有效的部署清单。</exception>
        <exception cref="T:Microsoft.VisualStudio.Tools.Applications.Runtime.DocumentNotCustomizedException">
          <paramref name="documentPath" /> 指定的文档已损坏，或具有受限权限。</exception>
        <exception cref="T:Microsoft.VisualStudio.Tools.Applications.Runtime.UnknownCustomizationFileException">
          <paramref name="documentPath" /> 指定的文档具有不受 [!INCLUDE[vsto_runtime](~/includes/vsto-runtime-md.md)] 支持的文件扩展名。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddCustomization">
      <MemberSignature Language="C#" Value="public static void AddCustomization (string documentPath, string assemblyName, Guid solutionId, Uri deploymentManifestUrl);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddCustomization(string documentPath, string assemblyName, valuetype System.Guid solutionId, class System.Uri deploymentManifestUrl) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualStudio.Tools.Applications.ServerDocument.AddCustomization(System.String,System.String,System.Guid,System.Uri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualStudio.Tools.Applications.ServerDocument</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentPath" Type="System.String" />
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="solutionId" Type="System.Guid" />
        <Parameter Name="deploymentManifestUrl" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="documentPath">要向其附加自定义的文档的完整路径。</param>
        <param name="assemblyName">用于自定义的程序集的完整路径。 该路径必须位于本地文件系统或 UNC 共享上；不能指定 HTTP 位置。</param>
        <param name="solutionId">一个 GUID，[!INCLUDE[vsto_runtime](~/includes/vsto-runtime-md.md)] 可用其标识解决方案。</param>
        <param name="deploymentManifestUrl">解决方案部署清单的 URL。</param>
        <summary>通过使用指定文档、程序集名称、解决方案 ID 和部署清单，将自定义附加到指定文档。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument.AddCustomization%2A>方法将指定的自定义与文档关联通过添加`_AssemblyName`和`_AssemblyLocation`到文档的自定义文档属性。 这些属性确定文档具有自定义和指定部署清单的位置。 调用此方法成功，的下次用户打开指定的文档后运行时将尝试安装 Office 解决方案。 有关自定义文档属性的详细信息，请参阅[自定义文档属性概述](/visualstudio/vsto/custom-document-properties-overview)。  
  
 GUID 传递给`solutionID`附加到文档的解决方案的应用程序清单中指定参数。 你必须传递中指定的同一个 GUID`solutionId`属性的`vstov4:document`应用程序清单中的元素。 有关详细信息，请参阅[Application and Deployment Manifests in Office Solutions](/visualstudio/vsto/application-and-deployment-manifests-in-office-solutions)并[ \&l t; 文档\&g t;元素](/visualstudio/vsto/document-element-office-development-in-visual-studio)。  
  
 如果附加的自定义项从发布位置，请确保指定正确的程序集的文件名`assemblyName`参数。 当发布 Office 解决方案时，复制到发布文件夹的程序集具有.deploy 文件扩展名。 例如，如果程序集名称，WordDocument1.dll publish 文件夹中的程序集的文件名是 WordDocument1.dll.deploy。 有关详细信息，请参阅[部署 Office 解决方案使用 clickonce](/visualstudio/vsto/deploying-an-office-solution-by-using-clickonce)。  
  
 如果指定的文档不包含自定义项要求文档，一个控件<xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument.AddCustomization%2A>方法将成功，但该程序集将加载在用户打开文档时失败。  
  
 `fileType`参数必须指定具有支持的 Microsoft Office Word 和 Microsoft Office Excel 文档级自定义项的文件扩展名的文档。 无法将自定义项附加到 Word XML 文档中保存的文档 (* xml) 或 Word 2003 XML 文档 (\*xml) 文件格式。 有关受支持的文件类型的详细信息，请参阅[Architecture of Document-level Customizations](/visualstudio/vsto/architecture-of-document-level-customizations)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument.AddCustomization%2A>方法将自定义项附加到指定的文档。  
  
 此示例需要：  
  
-   控制台应用程序项目或某些其他非 Office 项目。  
  
-   对以下程序集的引用：  
  
    -   Microsoft.VisualStudio.Tools.Applications.ServerDocument.dll 和 Microsoft.VisualStudio.Tools.Applications.Runtime.dll (如果项目面向 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] 或 [!INCLUDE[net_v45](~/includes/net-v45-md.md)])。  
  
         或  
  
    -   Microsoft.VisualStudio.Tools.Applications.ServerDocument.v10.0.dll 和 Microsoft.VisualStudio.Tools.Applications.Runtime.v9.0.dll （如果项目面向.NET Framework 3.5）。  
  
 [!code-csharp[Trin_ServerDocument#7](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ServerDocument/CS/Form1.cs#7)]
 [!code-vb[Trin_ServerDocument#7](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ServerDocument/VB/Form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="documentPath" /> 或 <paramref name="assemblyName" /> 为 <see langword="null" /> 或为空。</exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <paramref name="documentPath" /> 或 <paramref name="assemblyName" /> 表示一个不存在的文件。</exception>
        <exception cref="T:Microsoft.VisualStudio.Tools.Applications.Runtime.DocumentAlreadyCustomizedException">
          <paramref name="documentPath" /> 指定的文档已具有自定义。</exception>
        <exception cref="T:Microsoft.VisualStudio.Tools.Applications.Runtime.DocumentNotCustomizedException">
          <paramref name="documentPath" /> 指定的文档已损坏，或具有受限权限。</exception>
        <exception cref="T:Microsoft.VisualStudio.Tools.Applications.Runtime.UnknownCustomizationFileException">
          <paramref name="documentPath" /> 指定的文档具有不受 [!INCLUDE[vsto_runtime](~/includes/vsto-runtime-md.md)] 支持的文件扩展名。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddCustomization">
      <MemberSignature Language="C#" Value="public static void AddCustomization (string documentPath, string assemblyName, Guid solutionId, Uri deploymentManifestUrl, bool runAsLocal, out string[] nonpublicCachedDataMembers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddCustomization(string documentPath, string assemblyName, valuetype System.Guid solutionId, class System.Uri deploymentManifestUrl, bool runAsLocal, string[] nonpublicCachedDataMembers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualStudio.Tools.Applications.ServerDocument.AddCustomization(System.String,System.String,System.Guid,System.Uri,System.Boolean,System.String[]@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualStudio.Tools.Applications.ServerDocument</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentPath" Type="System.String" />
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="solutionId" Type="System.Guid" />
        <Parameter Name="deploymentManifestUrl" Type="System.Uri" />
        <Parameter Name="runAsLocal" Type="System.Boolean" />
        <Parameter Name="nonpublicCachedDataMembers" Type="System.String[]&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="documentPath">To be added.</param>
        <param name="assemblyName">To be added.</param>
        <param name="solutionId">To be added.</param>
        <param name="deploymentManifestUrl">To be added.</param>
        <param name="runAsLocal">To be added.</param>
        <param name="nonpublicCachedDataMembers">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CachedData">
      <MemberSignature Language="C#" Value="public Microsoft.VisualStudio.Tools.Applications.CachedData CachedData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.VisualStudio.Tools.Applications.CachedData CachedData" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualStudio.Tools.Applications.ServerDocument.CachedData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualStudio.Tools.Applications.ServerDocument</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualStudio.Tools.Applications.CachedData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.VisualStudio.Tools.Applications.CachedData" /> 对象，表示文档中包含的缓存数据。</summary>
        <value>文档中包含的缓存数据。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在文档中缓存的数据存储在对象的层次结构。 <xref:Microsoft.VisualStudio.Tools.Applications.CachedData>此属性返回的对象是该层次结构中的第一个对象。 有关详细信息，请参阅[在服务器上的文档中访问数据](/visualstudio/vsto/accessing-data-in-documents-on-the-server)。  
  
   
  
## Examples  
 下面的代码示例创建一个新<xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument>，然后使用<xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument.CachedData%2A>属性显示的数据缓存中对象的名称。  
  
 此示例需要：  
  
-   控制台应用程序项目或某些其他非 Office 项目。  
  
-   对以下程序集的引用：  
  
    -   Microsoft.VisualStudio.Tools.Applications.ServerDocument.dll 和 Microsoft.VisualStudio.Tools.Applications.Runtime.dll (如果项目面向 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] 或 [!INCLUDE[net_v45](~/includes/net-v45-md.md)])。  
  
         或  
  
    -   Microsoft.VisualStudio.Tools.Applications.ServerDocument.v10.0.dll 和 Microsoft.VisualStudio.Tools.Applications.Runtime.v9.0.dll （如果项目面向.NET Framework 3.5）。  
  
-   `Imports` （对于 Visual Basic) 或`using`（适用于 C#) 语句<xref:Microsoft.VisualStudio.Tools.Applications?displayProperty=fullName>和<xref:Microsoft.VisualStudio.Tools.Applications.Runtime?displayProperty=fullName>代码文件顶部的命名空间。  
  
 [!code-csharp[Trin_ServerDocument#5](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ServerDocument/CS/Form1.cs#5)]
 [!code-vb[Trin_ServerDocument#5](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ServerDocument/VB/Form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualStudio.Tools.Applications.ServerDocument.Close" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualStudio.Tools.Applications.ServerDocument</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>关闭 <see cref="T:Microsoft.VisualStudio.Tools.Applications.ServerDocument" /> 对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用此方法以释放所有资源并关闭<xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument>。  
  
   
  
## Examples  
 下面的代码示例创建一个新<xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument>，将显示部署清单的 URL，然后使用<xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument.Close%2A>方法关闭<xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument>。  
  
 此示例需要：  
  
-   控制台应用程序项目或某些其他非 Office 项目。  
  
-   对以下程序集的引用：  
  
    -   Microsoft.VisualStudio.Tools.Applications.ServerDocument.dll 和 Microsoft.VisualStudio.Tools.Applications.Runtime.dll (如果项目面向 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] 或 [!INCLUDE[net_v45](~/includes/net-v45-md.md)])。  
  
         或  
  
    -   Microsoft.VisualStudio.Tools.Applications.ServerDocument.v10.0.dll 和 Microsoft.VisualStudio.Tools.Applications.Runtime.v9.0.dll （如果项目面向.NET Framework 3.5）。  
  
-   `Imports` （对于 Visual Basic) 或`using`（适用于 C#) 语句<xref:Microsoft.VisualStudio.Tools.Applications?displayProperty=fullName>和<xref:Microsoft.VisualStudio.Tools.Applications.Runtime?displayProperty=fullName>代码文件顶部的命名空间。  
  
 [!code-csharp[Trin_ServerDocument#1](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ServerDocument/CS/Form1.cs#1)]
 [!code-vb[Trin_ServerDocument#1](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ServerDocument/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeploymentManifestUrl">
      <MemberSignature Language="C#" Value="public Uri DeploymentManifestUrl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri DeploymentManifestUrl" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualStudio.Tools.Applications.ServerDocument.DeploymentManifestUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualStudio.Tools.Applications.ServerDocument</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置与文档关联的自定义项的部署清单 URL。</summary>
        <value>一个 URL，指定与文档关联的自定义项的部署清单的名称和位置。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果将部署清单自定义项移动到另一个位置，并且你想要查找从新位置的自定义项更新的文档，请将此属性设置为新的 URL。 如果设置此属性，该 URL 必须指向已与文档相关联的自定义项的部署清单。  
  
 此属性不能用于将新的自定义与文档相关联。 若要将自定义项添加到自定义的文档，请使用<xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument.AddCustomization%2A>方法。 若要将不同的自定义添加到自定义文档，首先使用<xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument.RemoveCustomization%2A>方法来删除当前自定义项，然后使用<xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument.AddCustomization%2A>方法。  
  
## <a name="getting-the-url-in-applications-that-target-the-net-framework-35"></a>在.NET Framework 3.5 为目标的应用程序中获取 URL  
 当你使用`ServerDocument`Microsoft.VisualStudio.Tools.Applications.ServerDocument.v10.0.dll 程序集中的应用程序面向.NET Framework 3.5 中的类<xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument.DeploymentManifestUrl%2A>属性返回当前部署清单 URL 仅如果在运行该应用程序的计算机上安装了文档级自定义项。 对于其他类型的单元格，此属性返回 `null`。  
  
 如果你需要获取您运行的计算机未安装的文档级自定义项的部署清单 URL （例如，如果发布的文档级自定义项的服务器） 上的该应用程序面向.NET Framework 4 中应用程序中，引用 Microsoft.VisualStudio.Tools.Applications.ServerDocument.dll 程序集，并使用`ServerDocument`中该程序集的类。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument.%23ctor%28System.String%29>构造函数创建一个新<xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument>加载指定的文档。 该示例然后显示附加到文档的自定义项的部署清单的 URL。  
  
 此示例需要：  
  
-   控制台应用程序项目或某些其他非 Office 项目。  
  
-   对以下程序集的引用：  
  
    -   Microsoft.VisualStudio.Tools.Applications.ServerDocument.dll 和 Microsoft.VisualStudio.Tools.Applications.Runtime.dll (如果项目面向 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] 或 [!INCLUDE[net_v45](~/includes/net-v45-md.md)])。  
  
         或  
  
    -   Microsoft.VisualStudio.Tools.Applications.ServerDocument.v10.0.dll 和 Microsoft.VisualStudio.Tools.Applications.Runtime.v9.0.dll （如果项目面向.NET Framework 3.5）。  
  
-   `Imports` （对于 Visual Basic) 或`using`（适用于 C#) 语句<xref:Microsoft.VisualStudio.Tools.Applications?displayProperty=fullName>和<xref:Microsoft.VisualStudio.Tools.Applications.Runtime?displayProperty=fullName>代码文件顶部的命名空间。  
  
 [!code-csharp[Trin_ServerDocument#1](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ServerDocument/CS/Form1.cs#1)]
 [!code-vb[Trin_ServerDocument#1](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ServerDocument/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Document">
      <MemberSignature Language="C#" Value="public byte[] Document { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] Document" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualStudio.Tools.Applications.ServerDocument.Document" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualStudio.Tools.Applications.ServerDocument</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取加载到 <see cref="T:Microsoft.VisualStudio.Tools.Applications.ServerDocument" /> 中的内存中文档的字节数组。</summary>
        <value>加载到 <see cref="T:Microsoft.VisualStudio.Tools.Applications.ServerDocument" /> 中的内存中文档的字节数组。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果此属性返回已填充的字节数组<xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument>已通过使用<xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument.%23ctor%28System.Byte%5B%5D%2CSystem.String%29>具有一个字节数组参数的构造函数或<xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument.%23ctor%28System.IO.Stream%2CSystem.String%29>构造函数具有<xref:System.IO.Stream>参数。 否则，此属性返回一个空字节数组。  
  
 使用此属性，可对文档进行更改并将其发送到客户端，而无需将文档写入磁盘。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument.%23ctor%28System.Byte%5B%5D%2CSystem.String%29>构造函数创建一个新<xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument>从字节数组，其中包含文件扩展名为.xlsx 的 Excel 工作簿。 该示例然后使用<xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument.Document%2A>属性显示在文档中的字节数。  
  
 此示例需要：  
  
-   控制台应用程序项目或某些其他非 Office 项目。  
  
-   对以下程序集的引用：  
  
    -   Microsoft.VisualStudio.Tools.Applications.ServerDocument.dll 和 Microsoft.VisualStudio.Tools.Applications.Runtime.dll (如果项目面向 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] 或 [!INCLUDE[net_v45](~/includes/net-v45-md.md)])。  
  
         或  
  
    -   Microsoft.VisualStudio.Tools.Applications.ServerDocument.v10.0.dll 和 Microsoft.VisualStudio.Tools.Applications.Runtime.v9.0.dll （如果项目面向.NET Framework 3.5）。  
  
-   `Imports` （对于 Visual Basic) 或`using`（适用于 C#) 语句<xref:Microsoft.VisualStudio.Tools.Applications?displayProperty=fullName>和<xref:Microsoft.VisualStudio.Tools.Applications.Runtime?displayProperty=fullName>代码文件顶部的命名空间。  
  
 [!code-csharp[Trin_ServerDocument#2](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ServerDocument/CS/Form1.cs#2)]
 [!code-vb[Trin_ServerDocument#2](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ServerDocument/VB/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:Microsoft.VisualStudio.Tools.Applications.Runtime.DocumentClosedException">文档已关闭。</exception>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~ServerDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualStudio.Tools.Applications.ServerDocument.Finalize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualStudio.Tools.Applications.ServerDocument</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCustomizationVersion">
      <MemberSignature Language="C#" Value="public static int GetCustomizationVersion (string documentPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetCustomizationVersion(string documentPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualStudio.Tools.Applications.ServerDocument.GetCustomizationVersion(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualStudio.Tools.Applications.ServerDocument</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="documentPath">要检查的文档的完整路径。</param>
        <summary>返回用于创建与指定文档相关联的自定义项的 [!INCLUDE[vsto_runtime](~/includes/vsto-runtime-md.md)] 的版本。</summary>
        <returns>一个编号，指定用于创建关联的自定义项的 [!INCLUDE[vsto_runtime](~/includes/vsto-runtime-md.md)] 版本。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不同版本的 Visual Studio 中创建 office 解决方案使用不同版本的[!INCLUDE[vsto_runtime](~/includes/vsto-runtime-md.md)]。 每个版本的运行时提供的不同版本`ServerDocument`旨在使用针对该版本的运行时的解决方案的类。 此版本的<xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument>类可用于通过使用创建的解决方案[!INCLUDE[vs_dev12](~/includes/vs-dev12-md.md)]，[!INCLUDE[vs_dev10_long](~/includes/vs-dev10-long-md.md)]和 2007 Microsoft Office 创建的解决方案，通过使用 Visual Studio 2008。  
  
 下表指定了此方法的返回值的含义。  
  
|返回值|描述|  
|------------------|-----------------|  
|0|文档不具有自定义项。|  
|1|文档具有使用 Visual Studio Tools for Office 2003 版|  
|2|文档具有使用 Visual Studio 2005 Tools for Office Second Edition 运行时 这是运行时使用的自定义项 Microsoft Office 2003 中 Visual Studio 2005 Tools for Office 和 Visual Studio 2008 的版本。|  
|3|该文档具有已通过使用 Visual Studio 2010 Tools for Office Runtime 或 Visual Studio Tools for Microsoft Office system 的自定义项 (版本 3.0 运行时)。 自定义 2007 Microsoft Office system 在 Visual Studio 2008 中使用的运行时版本 3.0。|  
  
 有关不同版本的详细信息[!INCLUDE[vsto_runtime](~/includes/vsto-runtime-md.md)]，请参阅[Visual Studio Tools for Office Runtime 概述](/visualstudio/vsto/visual-studio-tools-for-office-runtime-overview)。  
  
   
  
## Examples  
 下面的代码示例创建一个新<xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument>的加载指定的文档，然后显示附加到文档的自定义项的部署清单的 URL。 在创建对象时之前, 的代码使用<xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument.GetCustomizationVersion%2A>方法以验证自定义项，通过使用 Visual Studio 2010 Tools for Office 运行时创建。  
  
 此示例需要：  
  
-   控制台应用程序项目或某些其他非 Office 项目。  
  
-   对以下程序集的引用：  
  
    -   Microsoft.VisualStudio.Tools.Applications.ServerDocument.dll 和 Microsoft.VisualStudio.Tools.Applications.Runtime.dll (如果项目面向 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] 或 [!INCLUDE[net_v45](~/includes/net-v45-md.md)])。  
  
         或  
  
    -   Microsoft.VisualStudio.Tools.Applications.ServerDocument.v10.0.dll 和 Microsoft.VisualStudio.Tools.Applications.Runtime.v9.0.dll （如果项目面向.NET Framework 3.5）。  
  
-   `Imports` （对于 Visual Basic) 或`using`（适用于 C#) 语句<xref:Microsoft.VisualStudio.Tools.Applications?displayProperty=fullName>和<xref:Microsoft.VisualStudio.Tools.Applications.Runtime?displayProperty=fullName>代码文件顶部的命名空间。  
  
 [!code-csharp[Trin_ServerDocument#1](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ServerDocument/CS/Form1.cs#1)]
 [!code-vb[Trin_ServerDocument#1](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ServerDocument/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="documentPath" /> 参数为 <see langword="null" /> 或为空，或者完全由空白字符组成。</exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <paramref name="documentPath" /> 指定的文件不存在。</exception>
        <exception cref="T:Microsoft.VisualStudio.Tools.Applications.Runtime.UnknownCustomizationFileException">[!INCLUDE[vsto_runtime](~/includes/vsto-runtime-md.md)] 不支持 <paramref name="documentPath" /> 指定的文件的文件扩展名。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsCacheEnabled">
      <MemberSignature Language="C#" Value="public static bool IsCacheEnabled (string documentPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsCacheEnabled(string documentPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualStudio.Tools.Applications.ServerDocument.IsCacheEnabled(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualStudio.Tools.Applications.ServerDocument</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="documentPath">要检查的文档的完整路径。</param>
        <summary>获取一个值，该值指示指定文档是否具有数据缓存。</summary>
        <returns>如果指定文档具有数据缓存，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法不是数据缓存实际包含数据仅指示文档是否具有数据缓存的。 如果文档具有数据缓存，但不包含在其中任何数据，此方法仍返回`true`。  
  
   
  
## Examples  
 下面的代码示例创建一个新<xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument>，然后使用<xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument.CachedData%2A>属性来显示数据缓存的内容。 该示例首先使用<xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument.IsCacheEnabled%2A>方法以验证该工作簿具有数据缓存。  
  
 此示例需要：  
  
-   控制台应用程序项目或某些其他非 Office 项目。  
  
-   对以下程序集的引用：  
  
    -   Microsoft.VisualStudio.Tools.Applications.ServerDocument.dll 和 Microsoft.VisualStudio.Tools.Applications.Runtime.dll (如果项目面向 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] 或 [!INCLUDE[net_v45](~/includes/net-v45-md.md)])。  
  
         或  
  
    -   Microsoft.VisualStudio.Tools.Applications.ServerDocument.v10.0.dll 和 Microsoft.VisualStudio.Tools.Applications.Runtime.v9.0.dll （如果项目面向.NET Framework 3.5）。  
  
-   `Imports` （对于 Visual Basic) 或`using`（适用于 C#) 语句<xref:Microsoft.VisualStudio.Tools.Applications?displayProperty=fullName>和<xref:Microsoft.VisualStudio.Tools.Applications.Runtime?displayProperty=fullName>代码文件顶部的命名空间。  
  
 [!code-csharp[Trin_ServerDocument#5](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ServerDocument/CS/Form1.cs#5)]
 [!code-vb[Trin_ServerDocument#5](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ServerDocument/VB/Form1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="documentPath" /> 参数为 <see langword="null" /> 或为空，或者完全由空白字符组成。</exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <paramref name="documentPath" /> 指定的文件不存在。</exception>
        <exception cref="T:Microsoft.VisualStudio.Tools.Applications.Runtime.DocumentCustomizedWithPreviousRuntimeException">
          <paramref name="documentPath" /> 指定的文件具有并非通过 Visual Studio 2010 Tools for Office Runtime 或 Visual Studio Tools for Microsoft Office System（3.0 版 Runtime）创建的自定义。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsCustomized">
      <MemberSignature Language="C#" Value="public static bool IsCustomized (string documentPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsCustomized(string documentPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualStudio.Tools.Applications.ServerDocument.IsCustomized(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualStudio.Tools.Applications.ServerDocument</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="documentPath">要检查自定义项的文档的完整路径。</param>
        <summary>获取指示指定的文档是否具有用 Visual Studio 2010 Tools for Office Runtime 创建的自定义的值。</summary>
        <returns>如果文档具有使用 Visual Studio 2010 Tools for Office Runtime 生产的自定义，则为 <see langword="true" />；如果文档不具有自定义，则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法将引发异常，如果指定的文档的自定义的项不是创建与 Visual Studio 2010 Tools for Office Runtime 或 Visual Studio Tools for Microsoft Office system (3.0 版运行时)。 例如，此方法引发异常，如果指定的文档，因为这些项目模板使用 Visual Studio 2005 Tools for Office Second Edition 运行时通过在 Visual Studio 2008 中，Microsoft Office 2003 项目模板创建。  
  
 若要确定文档是否具有已通过使用任何版本的 Visual Studio 的自定义项，请使用<xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument.GetCustomizationVersion%2A>方法而不是<xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument.IsCustomized%2A>方法。 <xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument.GetCustomizationVersion%2A> 如果文档不具有自定义项，则返回 0 （零）。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="documentPath" /> 参数为 <see langword="null" /> 或为空，或者完全由空白字符组成。</exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <paramref name="documentPath" /> 中的文件不存在。</exception>
        <exception cref="T:Microsoft.VisualStudio.Tools.Applications.Runtime.DocumentCustomizedWithPreviousRuntimeException">
          <paramref name="documentPath" /> 指定的文件具有并非通过 Visual Studio 2010 Tools for Office Runtime 或 Visual Studio Tools for Microsoft Office System（3.0 版 Runtime）创建的自定义。</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveCustomization">
      <MemberSignature Language="C#" Value="public static void RemoveCustomization (string documentPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveCustomization(string documentPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualStudio.Tools.Applications.ServerDocument.RemoveCustomization(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualStudio.Tools.Applications.ServerDocument</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="documentPath">要移除自定义的文档的完整路径。</param>
        <summary>从文档移除自定义。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法将清除部署清单 URL 和缓存的数据清单中，并从文档中删除任何缓存的数据。 有关详细信息，请参阅[如何： 从文档中删除托管代码扩展](/visualstudio/vsto/how-to-remove-managed-code-extensions-from-documents)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument.RemoveCustomization%2A>方法从指定的文档中删除自定义项。 此示例的第一个调用<xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument.GetCustomizationVersion%2A>方法来确定文档是否具有自定义项。  
  
 此示例需要：  
  
-   控制台应用程序项目或某些其他非 Office 项目。  
  
-   对以下程序集的引用：  
  
    -   Microsoft.VisualStudio.Tools.Applications.ServerDocument.dll 和 Microsoft.VisualStudio.Tools.Applications.Runtime.dll (如果项目面向 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] 或 [!INCLUDE[net_v45](~/includes/net-v45-md.md)])。  
  
         或  
  
    -   Microsoft.VisualStudio.Tools.Applications.ServerDocument.v10.0.dll 和 Microsoft.VisualStudio.Tools.Applications.Runtime.v9.0.dll （如果项目面向.NET Framework 3.5）。  
  
-   `Imports` （对于 Visual Basic) 或`using`（适用于 C#) 语句<xref:Microsoft.VisualStudio.Tools.Applications?displayProperty=fullName>和<xref:Microsoft.VisualStudio.Tools.Applications.Runtime?displayProperty=fullName>代码文件顶部的命名空间。  
  
 [!code-csharp[Trin_ServerDocument#8](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ServerDocument/CS/Form1.cs#8)]
 [!code-vb[Trin_ServerDocument#8](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ServerDocument/VB/Form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="documentPath" /> 参数为 <see langword="null" /> 或为空，或者完全由空格字符组成。</exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <paramref name="documentPath" /> 指定的文件不存在。</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="documentPath" /> 指定的文件为只读或无法访问。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="documentPath" /> 指定的文件不具有自定义，或加载清单时发生错误。</exception>
        <exception cref="T:Microsoft.VisualStudio.Tools.Applications.Runtime.DocumentCustomizedWithPreviousRuntimeException">
          <paramref name="documentPath" /> 指定的文件具有并非通过 Visual Studio 2010 Tools for Office Runtime 或 Visual Studio Tools for Microsoft Office System（3.0 版 Runtime）创建的自定义。</exception>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualStudio.Tools.Applications.ServerDocument.Save" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualStudio.Tools.Applications.ServerDocument</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>保存使用 <see cref="T:Microsoft.VisualStudio.Tools.Applications.ServerDocument" /> 类对文档所做的任何更改。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument.Save%2A>方法将保存或到部署清单 URL 在文档中缓存数据所做的任何更改。 如果您创建<xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument>对象使用的文档在磁盘上，此方法将这些更改保存到磁盘。 如果您创建<xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument>对象使用的文档在内存中，此方法将这些更改保存到内存缓冲区。  
  
   
  
## Examples  
 下面的代码示例创建一个新<xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument>为指定的 Excel 工作簿，修改通过使用缓存的工作表中的字符串的值<xref:Microsoft.VisualStudio.Tools.Applications.CachedDataItem.SerializeDataInstance%2A>方法，然后将更改保存使用<xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument.Save%2A>方法。  
  
 此示例需要：  
  
-   具有的 Excel 文档级自定义`Sheet1`类中`ExcelWorkbook1`命名空间，并在已缓存的字符串`Sheet1`类名为`CachedString`。  
  
-   控制台应用程序项目或某些其他非 Office 项目。  
  
-   对以下程序集的引用：  
  
    -   Microsoft.VisualStudio.Tools.Applications.ServerDocument.dll 和 Microsoft.VisualStudio.Tools.Applications.Runtime.dll (如果项目面向 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] 或 [!INCLUDE[net_v45](~/includes/net-v45-md.md)])。  
  
         或  
  
    -   Microsoft.VisualStudio.Tools.Applications.ServerDocument.v10.0.dll 和 Microsoft.VisualStudio.Tools.Applications.Runtime.v9.0.dll （如果项目面向.NET Framework 3.5）。  
  
-   `Imports` （对于 Visual Basic) 或`using`（适用于 C#) 语句<xref:Microsoft.VisualStudio.Tools.Applications?displayProperty=fullName>和<xref:Microsoft.VisualStudio.Tools.Applications.Runtime?displayProperty=fullName>代码文件顶部的命名空间。  
  
 [!code-csharp[Trin_ServerDocument#9](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ServerDocument/CS/Form1.cs#9)]
 [!code-vb[Trin_ServerDocument#9](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ServerDocument/VB/Form1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:Microsoft.VisualStudio.Tools.Applications.Runtime.DocumentClosedException">
          <see cref="T:Microsoft.VisualStudio.Tools.Applications.ServerDocument" /> 已关闭。</exception>
        <exception cref="T:Microsoft.VisualStudio.Tools.Applications.Runtime.MissingHostItemIdException">
          <see cref="P:Microsoft.VisualStudio.Tools.Applications.CachedDataHostItem.Id" /> 的 <see cref="T:Microsoft.VisualStudio.Tools.Applications.CachedDataHostItem" /> 属性为 <see langword="null" /> 或为空。</exception>
        <exception cref="T:Microsoft.VisualStudio.Tools.Applications.Runtime.MissingDataIdException">
          <see cref="P:Microsoft.VisualStudio.Tools.Applications.CachedDataItem.Id" /> 的 <see cref="T:Microsoft.VisualStudio.Tools.Applications.CachedDataItem" /> 属性为 <see langword="null" /> 或为空。</exception>
        <exception cref="T:Microsoft.VisualStudio.Tools.Applications.Runtime.MissingTypeException">
          <see cref="P:Microsoft.VisualStudio.Tools.Applications.CachedDataItem.DataType" /> 的 <see cref="T:Microsoft.VisualStudio.Tools.Applications.CachedDataItem" /> 属性为 <see langword="null" /> 或为空。</exception>
      </Docs>
    </Member>
    <Member MemberName="SolutionId">
      <MemberSignature Language="C#" Value="public Guid SolutionId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid SolutionId" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualStudio.Tools.Applications.ServerDocument.SolutionId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualStudio.Tools.Applications.ServerDocument</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 GUID，[!INCLUDE[vsto_runtime](~/includes/vsto-runtime-md.md)] 可用其标识解决方案。</summary>
        <value>一个 GUID，[!INCLUDE[vsto_runtime](~/includes/vsto-runtime-md.md)] 可用其标识解决方案。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument.SolutionId%2A>属性是在中指定的相同 GUID`solutionId`属性的`vstov4:document`解决方案的应用程序清单中的元素。 有关详细信息，请参阅[Application and Deployment Manifests in Office Solutions](/visualstudio/vsto/application-and-deployment-manifests-in-office-solutions)并[ \&l t; 文档\&g t;元素](/visualstudio/vsto/document-element-office-development-in-visual-studio)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualStudio.Tools.Applications.ServerDocument.System#IDisposable#Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualStudio.Tools.Applications.ServerDocument</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>释放由 <see cref="T:Microsoft.VisualStudio.Tools.Applications.ServerDocument" /> 使用的所有资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不要调用<xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument.System%23IDisposable%23Dispose%2A>直接在您自己的代码中的方法。 完成后使用<xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument>，调用<xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument.Close%2A>方法相反。 <xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument.System%23IDisposable%23Dispose%2A> 在调用时将自动调用<xref:Microsoft.VisualStudio.Tools.Applications.ServerDocument.Close%2A>方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>