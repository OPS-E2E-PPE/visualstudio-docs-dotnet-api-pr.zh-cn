<Type Name="Button" FullName="Microsoft.Office.Tools.Excel.Controls.Button">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="07b75fddcc327d124f669c24a3b6f856174ecdc1" />
    <Meta Name="ms.sourcegitcommit" Value="66ccc1ab172558cdfd2b9ffb616a60e4c9105be3" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="09/19/2018" />
    <Meta Name="ms.locfileid" Value="46456112" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Button : System.Windows.Forms.Button" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Button extends System.Windows.Forms.Button" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Tools.Excel.Controls.Button" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.Button</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.Tools.Office.ProgrammingModel.dll", "10.0.0.0")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Click")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Text")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItem(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示可添加到 Microsoft Office Excel 工作表的 Windows 窗体按钮。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Tools.Excel.Controls.Button?displayProperty=fullName>不同于<xref:System.Windows.Forms.Button?displayProperty=fullName>。 <xref:Microsoft.Office.Tools.Excel.Controls.Button?displayProperty=fullName>具有其他成员，使其能够添加到 Excel 工作表并，为其提供的其他方法和属性。  
  
 不要使用`New`构造函数创建一个新<xref:Microsoft.Office.Tools.Excel.Controls.Button>。 使用<xref:Microsoft.Office.Tools.Excel.ControlExtensions.AddButton%2A>方法将添加一个新<xref:Microsoft.Office.Tools.Excel.Controls.Button>到工作表。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Button ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.Controls.Button.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Button (Microsoft.Office.Tools.Excel.Factory factory, Microsoft.Office.Tools.IHostItemProvider hostItemProvider, IServiceProvider serviceProvider, string cookie, string extenderCookie, object container, string identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.Office.Tools.Excel.Factory factory, class Microsoft.Office.Tools.IHostItemProvider hostItemProvider, class System.IServiceProvider serviceProvider, string cookie, string extenderCookie, object container, string identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.Controls.Button.#ctor(Microsoft.Office.Tools.Excel.Factory,Microsoft.Office.Tools.IHostItemProvider,System.IServiceProvider,System.String,System.String,System.Object,System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="factory" Type="Microsoft.Office.Tools.Excel.Factory" />
        <Parameter Name="hostItemProvider" Type="Microsoft.Office.Tools.IHostItemProvider" />
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
        <Parameter Name="cookie" Type="System.String" />
        <Parameter Name="extenderCookie" Type="System.String" />
        <Parameter Name="container" Type="System.Object" />
        <Parameter Name="identifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="factory">To be added.</param>
        <param name="hostItemProvider">To be added.</param>
        <param name="serviceProvider">To be added.</param>
        <param name="cookie">To be added.</param>
        <param name="extenderCookie">To be added.</param>
        <param name="container">To be added.</param>
        <param name="identifier">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Activate">
      <MemberSignature Language="C#" Value="public object Activate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Activate() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.Controls.Button.Activate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>激活 <see cref="T:Microsoft.Office.Tools.Excel.Controls.Button" />。</summary>
        <returns>如果 <see cref="T:Microsoft.Office.Tools.Excel.Controls.Button" /> 已激活，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例添加两个<xref:Microsoft.Office.Tools.Excel.Controls.Button>控件添加到工作表，然后以编程方式激活第二个按钮通过使用<xref:Microsoft.Office.Tools.Excel.Controls.Button.Activate%2A>方法。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWindowsFormsControls#16](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWindowsFormsControls/CS/Sheet1.cs#16)]
 [!code-vb[Trin_ExcelWindowsFormsControls#16](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWindowsFormsControls/VB/Sheet1.vb#16)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AltHTML">
      <MemberSignature Language="C#" Value="public string AltHTML { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AltHTML" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.Controls.Button.AltHTML" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Anchor">
      <MemberSignature Language="C#" Value="public override System.Windows.Forms.AnchorStyles Anchor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.AnchorStyles Anchor" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.Controls.Button.Anchor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AnchorStyles</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Application">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Application Application { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Application Application" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.Controls.Button.Application" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Application</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Application" /> 对象，该对象表示 <see cref="T:Microsoft.Office.Tools.Excel.Controls.Button" /> 的创建者。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.Application" /> 对象，表示该 <see cref="T:Microsoft.Office.Tools.Excel.Controls.Button" /> 的创建者。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例添加<xref:Microsoft.Office.Tools.Excel.Controls.Button>到当前工作表的控件。 <xref:System.Windows.Forms.Control.Click>事件处理程序，此按钮显示的值<xref:Microsoft.Office.Tools.Excel.Controls.Button.Creator%2A>和<xref:Microsoft.Office.Tools.Excel.Controls.Button.Application%2A>属性。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWindowsFormsControls#13](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWindowsFormsControls/CS/Sheet1.cs#13)]
 [!code-vb[Trin_ExcelWindowsFormsControls#13](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWindowsFormsControls/VB/Sheet1.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Border">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Border Border { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Border Border" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.Controls.Button.Border" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Border</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个表示 <see cref="T:Microsoft.Office.Interop.Excel.Border" /> 的边框的 <see cref="T:Microsoft.Office.Tools.Excel.Controls.Button" />。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.Border" />，表示 <see cref="T:Microsoft.Office.Tools.Excel.Controls.Button" /> 的边框。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例将添加<xref:Microsoft.Office.Tools.Excel.Controls.Button>控件与工作表，并使用<xref:Microsoft.Office.Tools.Excel.Controls.Button.Border%2A>属性以绿色的颜色单元格的边框。 <xref:System.Windows.Forms.Control.Click>按钮的事件处理程序使用<xref:Microsoft.Office.Tools.Excel.Controls.Button.Visible%2A>属性来隐藏按钮，然后会提示用户选择要显示该按钮，或允许其保持隐藏状态。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWindowsFormsControls#6](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWindowsFormsControls/CS/Sheet1.cs#6)]
 [!code-vb[Trin_ExcelWindowsFormsControls#6](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWindowsFormsControls/VB/Sheet1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bottom">
      <MemberSignature Language="C#" Value="public double Bottom { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Bottom" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.Controls.Button.Bottom" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:Microsoft.Office.Tools.Excel.Controls.Button" /> 的下边缘与工作表的上边缘之间的距离（以磅为单位）。</summary>
        <value>
          <see cref="T:Microsoft.Office.Tools.Excel.Controls.Button" /> 的下边缘与工作表的上边缘之间的距离（以磅为单位）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性的值等于的总和<xref:Microsoft.Office.Tools.Excel.Controls.Button.Top%2A>属性值和<xref:Microsoft.Office.Tools.Excel.Controls.Button.Height%2A>属性值。  
  
 <xref:Microsoft.Office.Tools.Excel.Controls.Button.Bottom%2A?displayProperty=fullName>属性使用点，而<xref:System.Windows.Forms.Control.Bottom%2A?displayProperty=fullName>属性使用像素值。  
  
   
  
## Examples  
 下面的代码示例添加<xref:Microsoft.Office.Tools.Excel.Controls.Button>单元格 B2 的当前工作表上的控件。 <xref:System.Windows.Forms.Control.Click>按钮的事件处理程序显示的当前值<xref:Microsoft.Office.Tools.Excel.Controls.Button.Right%2A>和<xref:Microsoft.Office.Tools.Excel.Controls.Button.Bottom%2A>按钮的属性。 当列 B 或第 2 行的大小调整在运行时，这些值将更改根据列或行的新大小。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWindowsFormsControls#4](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWindowsFormsControls/CS/Sheet1.cs#4)]
 [!code-vb[Trin_ExcelWindowsFormsControls#4](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWindowsFormsControls/VB/Sheet1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BottomRightCell">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range BottomRightCell { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range BottomRightCell" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.Controls.Button.BottomRightCell" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 对象，该对象表示位于 <see cref="T:Microsoft.Office.Tools.Excel.Controls.Button" /> 右下角下面的单元格。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 对象，表示位于 <see cref="T:Microsoft.Office.Tools.Excel.Controls.Button" /> 右下角下面的单元格。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返回的单元格依赖于单元格的数目，该控件重叠和的设置<xref:Microsoft.Office.Tools.Excel.Controls.Button.Placement%2A>属性。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.Controls.Button.TopLeftCell%2A>并<xref:Microsoft.Office.Tools.Excel.Controls.Button.BottomRightCell%2A>属性来获取在左上角和右下右角的单元格<xref:Microsoft.Office.Tools.Excel.Controls.Button>控件。 <xref:System.Windows.Forms.Control.Click>事件处理程序按钮的颜色的右上角和右下角单元格边框红色。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWindowsFormsControls#5](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWindowsFormsControls/CS/Sheet1.cs#5)]
 [!code-vb[Trin_ExcelWindowsFormsControls#5](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWindowsFormsControls/VB/Sheet1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BringToFront">
      <MemberSignature Language="C#" Value="public object BringToFront ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object BringToFront() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.Controls.Button.BringToFront" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将 <see cref="T:Microsoft.Office.Tools.Excel.Controls.Button" /> 置于 Z 顺序的顶层。</summary>
        <returns>此方法将返回一个空引用（在 Visual Basic 中为 <see langword="Nothing" />）；否则，此方法将返回 <see langword="true" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法设置的 z 顺序<xref:Microsoft.Office.Tools.Excel.Controls.Button>到中的最后一个索引<xref:Microsoft.Office.Interop.Excel.OLEObjects>集合; 编号的 z 顺序是相反的中的索引编号<xref:Microsoft.Office.Interop.Excel.OLEObjects>集合。 更高版本中的索引<xref:Microsoft.Office.Interop.Excel.OLEObjects>集合、 z 顺序的较小<xref:Microsoft.Office.Tools.Excel.Controls.Button>。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.Controls.Button.BringToFront%2A>并<xref:Microsoft.Office.Tools.Excel.Controls.Button.SendToBack%2A>方法设置为 3 的 z 顺序<xref:Microsoft.Office.Tools.Excel.Controls.Button>工作表上的控件。 如果单击的按钮当前在 z 顺序的前面，则按钮通过调用移动到集合的底层<xref:Microsoft.Office.Tools.Excel.Controls.Button.SendToBack%2A>。 否则，该按钮移动到集合的顶层通过调用<xref:Microsoft.Office.Tools.Excel.Controls.Button.BringToFront%2A>。 请注意，z 顺序的三个按钮的初始范围从 2 到 4。 工作表上的运行时存储控件最初具有 1 的 z 顺序位置。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWindowsFormsControls#1](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWindowsFormsControls/CS/Sheet1.cs#1)]
 [!code-vb[Trin_ExcelWindowsFormsControls#1](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWindowsFormsControls/VB/Sheet1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyPicture">
      <MemberSignature Language="C#" Value="public object CopyPicture (Microsoft.Office.Interop.Excel.XlPictureAppearance Appearance, Microsoft.Office.Interop.Excel.XlCopyPictureFormat Format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object CopyPicture(valuetype Microsoft.Office.Interop.Excel.XlPictureAppearance Appearance, valuetype Microsoft.Office.Interop.Excel.XlCopyPictureFormat Format) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.Controls.Button.CopyPicture(Microsoft.Office.Interop.Excel.XlPictureAppearance,Microsoft.Office.Interop.Excel.XlCopyPictureFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Appearance" Type="Microsoft.Office.Interop.Excel.XlPictureAppearance" />
        <Parameter Name="Format" Type="Microsoft.Office.Interop.Excel.XlCopyPictureFormat" />
      </Parameters>
      <Docs>
        <param name="Appearance">指定复制图片的方法。</param>
        <param name="Format">该图片的格式。 接受值 <see cref="F:Microsoft.Office.Interop.Excel.XlCopyPictureFormat.xlPicture" />。</param>
        <summary>将 <see cref="T:Microsoft.Office.Tools.Excel.Controls.Button" /> 作为图片复制到剪贴板。</summary>
        <returns>如果复制成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a>可选参数  
 可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例演示了<xref:Microsoft.Office.Tools.Excel.Controls.Button>将自身复制到剪贴板中，当用户单击它时的控件。 <xref:System.Windows.Forms.Control.Click>事件处理程序按钮调用<xref:Microsoft.Office.Tools.Excel.Controls.Button.CopyPicture%2A>方法复制到剪贴板作为位图按钮。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWindowsFormsControls#8](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWindowsFormsControls/CS/Sheet1.cs#8)]
 [!code-vb[Trin_ExcelWindowsFormsControls#8](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWindowsFormsControls/VB/Sheet1.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Creator">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlCreator Creator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlCreator Creator" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.Controls.Button.Creator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlCreator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示在其中创建 <see cref="T:Microsoft.Office.Tools.Excel.Controls.Button" /> 的应用程序。</summary>
        <value>
          <see cref="F:Microsoft.Office.Interop.Excel.XlCreator.xlCreatorCode" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 因为<xref:Microsoft.Office.Tools.Excel.Controls.Button>创建在 Microsoft Office Excel，此属性返回字符串 XCEL，这与十六进制数 5843454c。  
  
   
  
## Examples  
 下面的代码示例添加<xref:Microsoft.Office.Tools.Excel.Controls.Button>到当前工作表的控件。 <xref:System.Windows.Forms.Control.Click>事件处理程序，此按钮显示的值<xref:Microsoft.Office.Tools.Excel.Controls.Button.Creator%2A>和<xref:Microsoft.Office.Tools.Excel.Controls.Button.Application%2A>属性。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWindowsFormsControls#13](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWindowsFormsControls/CS/Sheet1.cs#13)]
 [!code-vb[Trin_ExcelWindowsFormsControls#13](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWindowsFormsControls/VB/Sheet1.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public object Delete ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Delete() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.Controls.Button.Delete" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从工作表中删除动态创建的 <see cref="T:Microsoft.Office.Tools.Excel.Controls.Button" /> 并将其从 <see cref="T:Microsoft.Office.Tools.Excel.ControlCollection" /> 中移除。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法只应该用于<xref:Microsoft.Office.Tools.Excel.Controls.Button>，在运行时以编程方式创建。 如果在调用此方法引发异常<xref:Microsoft.Office.Tools.Excel.Controls.Button>在设计时添加到工作表。  
  
   
  
## Examples  
 下面的代码示例演示了<xref:Microsoft.Office.Tools.Excel.Controls.Button>将自身删除，当用户单击它时的控件。 <xref:System.Windows.Forms.Control.Click>事件处理程序按钮调用<xref:Microsoft.Office.Tools.Excel.Controls.Button.Delete%2A>方法来删除的按钮。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWindowsFormsControls#17](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWindowsFormsControls/CS/Sheet1.cs#17)]
 [!code-vb[Trin_ExcelWindowsFormsControls#17](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWindowsFormsControls/VB/Sheet1.vb#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.Controls.Button.Dispose(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CodeDom.Compiler.GeneratedCode("Microsoft.VisualStudio.Tools.Office.ProgrammingModel.dll", "10.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerNonUserCode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dock">
      <MemberSignature Language="C#" Value="public override System.Windows.Forms.DockStyle Dock { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DockStyle Dock" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.Controls.Button.Dock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DockStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Height">
      <MemberSignature Language="C#" Value="public double Height { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Height" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.Controls.Button.Height" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:Microsoft.Office.Tools.Excel.Controls.Button" /> 的高度。</summary>
        <value>
          <see cref="T:Microsoft.Office.Tools.Excel.Controls.Button" /> 的高度（以磅为单位）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 对所做更改<xref:Microsoft.Office.Tools.Excel.Controls.Button.Height%2A>并<xref:Microsoft.Office.Tools.Excel.Controls.Button.Top%2A>属性值将导致<xref:Microsoft.Office.Tools.Excel.Controls.Button.Bottom%2A>属性值为<xref:Microsoft.Office.Tools.Excel.Controls.Button>更改。  
  
 <xref:Microsoft.Office.Tools.Excel.Controls.Button.Height%2A?displayProperty=fullName>属性使用点，而<xref:System.Windows.Forms.Control.Height%2A?displayProperty=fullName>属性使用像素值。  
  
   
  
## Examples  
 下面的代码示例进行比较的大小调整和重新定位的两个行为<xref:Microsoft.Office.Tools.Excel.Controls.Button>向工作表中的控件。 <xref:System.Windows.Forms.Control.Click>的第一个按钮的事件处理程序调整<xref:Microsoft.Office.Tools.Excel.Controls.Button.Height%2A>和<xref:Microsoft.Office.Tools.Excel.Controls.Button.Width%2A>按钮的属性，以便按钮更改大小，但仍保留在工作表上的同一位置。 <xref:System.Windows.Forms.Control.Click>的第二个按钮的事件处理程序调整<xref:Microsoft.Office.Tools.Excel.Controls.Button.Top%2A>和<xref:Microsoft.Office.Tools.Excel.Controls.Button.Left%2A>按钮的属性，以便按钮更改在工作表上的位置，但保留在相同的大小。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWindowsFormsControls#3](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWindowsFormsControls/CS/Sheet1.cs#3)]
 [!code-vb[Trin_ExcelWindowsFormsControls#3](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWindowsFormsControls/VB/Sheet1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Index">
      <MemberSignature Language="C#" Value="public int Index { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Index" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.Controls.Button.Index" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:Microsoft.Office.Tools.Excel.Controls.Button" /> 在工作表上的 <see cref="T:Microsoft.Office.Interop.Excel.OLEObjects" /> 集合内的索引号。</summary>
        <value>
          <see cref="T:Microsoft.Office.Tools.Excel.Controls.Button" /> 在工作表上的 <see cref="T:Microsoft.Office.Interop.Excel.OLEObjects" /> 集合内的索引号。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 控件添加到 Microsoft Office Excel 工作表的索引值的索引，因为它开始 2<xref:Microsoft.Office.Interop.Excel.OLEObjects>工作表的集合。  
  
   
  
## Examples  
 下面的代码示例添加三个<xref:Microsoft.Office.Tools.Excel.Controls.Button>向工作表中的控件。 这些按钮共享<xref:System.Windows.Forms.Control.Click>事件处理程序使用<xref:Microsoft.Office.Tools.Excel.Controls.Button.Index%2A>属性来显示被单击的按钮的索引。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWindowsFormsControls#12](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWindowsFormsControls/CS/Sheet1.cs#12)]
 [!code-vb[Trin_ExcelWindowsFormsControls#12](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWindowsFormsControls/VB/Sheet1.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Interior">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Interior Interior { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Interior Interior" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.Controls.Button.Interior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Interior</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Interior" /> 对象，该对象表示 <see cref="T:Microsoft.Office.Tools.Excel.Controls.Button" /> 的内部。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.Interior" /> 对象，表示 <see cref="T:Microsoft.Office.Tools.Excel.Controls.Button" /> 的内部。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public double Left { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Left" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.Controls.Button.Left" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:Microsoft.Office.Tools.Excel.Controls.Button" /> 的左边缘与工作表的左边缘之间的距离（以磅为单位）。</summary>
        <value>
          <see cref="T:Microsoft.Office.Tools.Excel.Controls.Button" /> 的左边缘与工作表的左边缘之间的距离（以磅为单位）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Tools.Excel.Controls.Button.Left%2A?displayProperty=fullName>属性使用点，而<xref:System.Windows.Forms.Control.Left%2A?displayProperty=fullName>属性使用像素值。  
  
 将值设置为负数或大于 12288 数字不会引发异常，但会导致控件设置为介于 0 和 12288 之间。  
  
   
  
## Examples  
 下面的代码示例进行比较的大小调整和重新定位的两个行为<xref:Microsoft.Office.Tools.Excel.Controls.Button>向工作表中的控件。 <xref:System.Windows.Forms.Control.Click>的第一个按钮的事件处理程序调整<xref:Microsoft.Office.Tools.Excel.Controls.Button.Height%2A>和<xref:Microsoft.Office.Tools.Excel.Controls.Button.Width%2A>按钮的属性，以便按钮更改大小，但仍保留在工作表上的同一位置。 <xref:System.Windows.Forms.Control.Click>的第二个按钮的事件处理程序调整<xref:Microsoft.Office.Tools.Excel.Controls.Button.Top%2A>和<xref:Microsoft.Office.Tools.Excel.Controls.Button.Left%2A>按钮的属性，以便按钮更改在工作表上的位置，但保留在相同的大小。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWindowsFormsControls#3](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWindowsFormsControls/CS/Sheet1.cs#3)]
 [!code-vb[Trin_ExcelWindowsFormsControls#3](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWindowsFormsControls/VB/Sheet1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Location">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Point Location { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Point Location" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.Controls.Button.Location" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Locked">
      <MemberSignature Language="C#" Value="public bool Locked { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Locked" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.Controls.Button.Locked" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示当工作表受保护时，在设计时能否修改 <see cref="T:Microsoft.Office.Tools.Excel.Controls.Button" />。</summary>
        <value>如果当工作表受保护时不能在设计时修改 <see cref="T:Microsoft.Office.Tools.Excel.Controls.Button" />，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一个<xref:Microsoft.Office.Tools.Excel.Controls.Button>仅可以在工作表受保护时锁定。 锁定<xref:Microsoft.Office.Tools.Excel.Controls.Button>不能移动或调整其大小在设计时。  
  
   
  
## Examples  
 下面的代码示例添加两个<xref:Microsoft.Office.Tools.Excel.Controls.Button>控件添加到当前工作表，并设置<xref:Microsoft.Office.Tools.Excel.Controls.Button.Locked%2A>的其中一个为按钮的属性`true`。 该示例然后保护工作表，并使用<xref:Microsoft.Office.Tools.Excel.Workbook.ToggleFormsDesign%2A>方法放到设计模式下的 Microsoft Office Excel。 此时，未锁定按钮可以移动并调整大小时，但不能移动或调整大小的锁定按钮。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWindowsFormsControls#9](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWindowsFormsControls/CS/Sheet1.cs#9)]
 [!code-vb[Trin_ExcelWindowsFormsControls#9](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWindowsFormsControls/VB/Sheet1.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OLEType">
      <MemberSignature Language="C#" Value="public object OLEType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object OLEType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.Controls.Button.OLEType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取表示 OLE 对象类型的值。</summary>
        <value>一个 <see cref="F:Microsoft.Office.Interop.Excel.XlOLEType.xlOLEControl" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例将创建<xref:Microsoft.Office.Tools.Excel.Controls.Button>控制并将按钮文本分配给一个字符串，描述由 OLE 对象类型的按钮，<xref:Microsoft.Office.Tools.Excel.Controls.Button.OLEType%2A>属性值。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWindowsFormsControls#11](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWindowsFormsControls/CS/Sheet1.cs#11)]
 [!code-vb[Trin_ExcelWindowsFormsControls#11](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWindowsFormsControls/VB/Sheet1.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAction">
      <MemberSignature Language="C#" Value="public string OnAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OnAction" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.Controls.Button.OnAction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public object Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Parent" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.Controls.Button.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:Microsoft.Office.Tools.Excel.Controls.Button" /> 的父对象。</summary>
        <value>
          <see cref="T:Microsoft.Office.Tools.Excel.Controls.Button" /> 的父对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 父<xref:Microsoft.Office.Tools.Excel.Controls.Button>是连接的容器控件<xref:Microsoft.Office.Tools.Excel.Controls.Button>与该文档不<xref:Microsoft.Office.Interop.Excel.Range>，其中包含<xref:Microsoft.Office.Tools.Excel.Controls.Button>。  
  
 父<xref:Microsoft.Office.Tools.Excel.Controls.Button>仅可作为访问<xref:System.Object>。  
  
   
  
## Examples  
 下面的代码示例添加<xref:Microsoft.Office.Tools.Excel.Controls.Button>到当前工作表的控件。 <xref:System.Windows.Forms.Control.Click>此按钮事件处理程序中显示的值<xref:Microsoft.Office.Tools.Excel.Controls.Button.Parent%2A>属性。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWindowsFormsControls#14](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWindowsFormsControls/CS/Sheet1.cs#14)]
 [!code-vb[Trin_ExcelWindowsFormsControls#14](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWindowsFormsControls/VB/Sheet1.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Placement">
      <MemberSignature Language="C#" Value="public object Placement { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Placement" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.Controls.Button.Placement" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个对象，该对象指示 <see cref="T:Microsoft.Office.Tools.Excel.Controls.Button" /> 附加到其下面的单元格的方式。</summary>
        <value>以下 <see cref="T:Microsoft.Office.Interop.Excel.XlPlacement" /> 值之一： 
-   <see cref="F:Microsoft.Office.Interop.Excel.XlPlacement.xlFreeFloating" />.  
  
-   <see cref="F:Microsoft.Office.Interop.Excel.XlPlacement.xlMove" />.  
  
-   <see cref="F:Microsoft.Office.Interop.Excel.XlPlacement.xlMoveAndSize" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例添加两个<xref:Microsoft.Office.Tools.Excel.Controls.Button>具有不同的运行时行为向工作表中的控件。 第一个按钮涵盖范围的单元格 B2 到 C3。 在运行时在用户调整列或在此范围内的行，第一个按钮将调整大小以适应所做的更改。 第二个按钮涵盖范围的单元格 B5 到 C6，并<xref:Microsoft.Office.Tools.Excel.Controls.Button.Placement%2A>此按钮的属性设置为<xref:Microsoft.Office.Interop.Excel.XlPlacement.xlFreeFloating>。 在运行时在用户调整列或在此范围内的行，第二个按钮不会更改大小。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWindowsFormsControls#2](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWindowsFormsControls/CS/Sheet1.cs#2)]
 [!code-vb[Trin_ExcelWindowsFormsControls#2](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWindowsFormsControls/VB/Sheet1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PrintObject">
      <MemberSignature Language="C#" Value="public bool PrintObject { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PrintObject" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.Controls.Button.PrintObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示打印工作表时，是否打印 <see cref="T:Microsoft.Office.Tools.Excel.Controls.Button" />。</summary>
        <value>如果在打印工作表时打印 <see cref="T:Microsoft.Office.Tools.Excel.Controls.Button" />，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示<xref:Microsoft.Office.Tools.Excel.Controls.Button>控件，其<xref:System.Windows.Forms.Control.Click>事件处理程序生成的工作表打印预览。 事件处理程序会提示用户指定按钮应在打印预览中通过设置显示<xref:Microsoft.Office.Tools.Excel.Controls.Button.PrintObject%2A>属性。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWindowsFormsControls#10](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWindowsFormsControls/CS/Sheet1.cs#10)]
 [!code-vb[Trin_ExcelWindowsFormsControls#10](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWindowsFormsControls/VB/Sheet1.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Right">
      <MemberSignature Language="C#" Value="public double Right { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Right" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.Controls.Button.Right" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:Microsoft.Office.Tools.Excel.Controls.Button" /> 的右边缘与工作表的左边缘之间的距离（以磅为单位）。</summary>
        <value>
          <see cref="T:Microsoft.Office.Tools.Excel.Controls.Button" /> 的右边缘与工作表的左边缘之间的距离（以磅为单位）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 值<xref:Microsoft.Office.Tools.Excel.Controls.Button.Right%2A>属性等于的总和<xref:Microsoft.Office.Tools.Excel.Controls.Button.Left%2A>属性值和<xref:Microsoft.Office.Tools.Excel.Controls.Button.Width%2A>属性值。  
  
 <xref:Microsoft.Office.Tools.Excel.Controls.Button.Right%2A?displayProperty=fullName>属性使用点，而<xref:System.Windows.Forms.Control.Right%2A?displayProperty=fullName>属性使用像素值。  
  
 将值设置为负数或大于 12288 数字不会引发异常，但会导致控件设置为介于 0 和 12288 之间。  
  
   
  
## Examples  
 下面的代码示例添加<xref:Microsoft.Office.Tools.Excel.Controls.Button>单元格 B2 上的控件。 <xref:System.Windows.Forms.Control.Click>按钮的事件处理程序显示的当前值<xref:Microsoft.Office.Tools.Excel.Controls.Button.Right%2A>和<xref:Microsoft.Office.Tools.Excel.Controls.Button.Bottom%2A>按钮的属性。 当列 B 或第 2 行的大小调整在运行时，这些值将更改根据列或行的新大小。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWindowsFormsControls#4](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWindowsFormsControls/CS/Sheet1.cs#4)]
 [!code-vb[Trin_ExcelWindowsFormsControls#4](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWindowsFormsControls/VB/Sheet1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public object Select (object Replace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Select(object Replace) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.Controls.Button.Select(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Replace" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Replace">如果设置为 <see langword="true" />，则用 <see cref="T:Microsoft.Office.Tools.Excel.Controls.Button" /> 替换当前选中的内容；如果设置为 <see langword="false" />，则扩展当前选择范围，使之包含以前选择的所有对象和 <see cref="T:Microsoft.Office.Tools.Excel.Controls.Button" />。</param>
        <summary>选择 <see cref="T:Microsoft.Office.Tools.Excel.Controls.Button" />。</summary>
        <returns>此方法将返回一个空引用（在 Visual Basic 中为 <see langword="Nothing" />）；否则，此方法将返回 <see langword="true" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="optional-parameters"></a>可选参数  
 可选参数的信息，请参阅[Office 解决方案中的可选参数](/visualstudio/vsto/optional-parameters-in-office-solutions)。  
  
   
  
## Examples  
 下面的代码示例添加两个<xref:Microsoft.Office.Tools.Excel.Controls.Button>控件添加到工作表，然后通过以编程方式选择这两个按钮<xref:Microsoft.Office.Tools.Excel.Controls.Button.Select%2A>方法。 首次调用<xref:Microsoft.Office.Tools.Excel.Controls.Button.Select%2A>传入`true`的值的`Replace`参数以确保第一个按钮在工作表上的唯一选择。 第二次调用<xref:Microsoft.Office.Tools.Excel.Controls.Button.Select%2A>传入`false`，以便在第二个按钮选择除第一个按钮。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWindowsFormsControls#7](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWindowsFormsControls/CS/Sheet1.cs#7)]
 [!code-vb[Trin_ExcelWindowsFormsControls#7](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWindowsFormsControls/VB/Sheet1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendToBack">
      <MemberSignature Language="C#" Value="public object SendToBack ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object SendToBack() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.Controls.Button.SendToBack" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将 <see cref="T:Microsoft.Office.Tools.Excel.Controls.Button" /> 置于 Z 顺序的底层。</summary>
        <returns>此方法将返回一个空引用（在 Visual Basic 中为 <see langword="Nothing" />）；否则，此方法将返回 <see langword="true" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法设置的 z 顺序<xref:Microsoft.Office.Tools.Excel.Controls.Button>到中的第一个索引<xref:Microsoft.Office.Interop.Excel.OLEObjects>集合; 编号的 z 顺序是相反的中的索引编号<xref:Microsoft.Office.Interop.Excel.OLEObjects>集合。 更高版本中的索引<xref:Microsoft.Office.Interop.Excel.OLEObjects>集合、 z 顺序的较小<xref:Microsoft.Office.Tools.Excel.Controls.Button>。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.Controls.Button.BringToFront%2A>并<xref:Microsoft.Office.Tools.Excel.Controls.Button.SendToBack%2A>方法设置为 3 的 z 顺序<xref:Microsoft.Office.Tools.Excel.Controls.Button>工作表上的控件。 如果单击的按钮当前在 z 顺序的前面，则按钮通过调用移动到集合的底层<xref:Microsoft.Office.Tools.Excel.Controls.Button.SendToBack%2A>。 否则，该按钮移动到集合的顶层通过调用<xref:Microsoft.Office.Tools.Excel.Controls.Button.BringToFront%2A>。 请注意，z 顺序的三个按钮的初始范围从 2 到 4。 工作表上的运行时存储控件最初具有 1 的 z 顺序位置。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWindowsFormsControls#1](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWindowsFormsControls/CS/Sheet1.cs#1)]
 [!code-vb[Trin_ExcelWindowsFormsControls#1](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWindowsFormsControls/VB/Sheet1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBounds">
      <MemberSignature Language="C#" Value="public virtual void SetBounds (int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetBounds(int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.Controls.Button.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <param name="y">To be added.</param>
        <param name="width">To be added.</param>
        <param name="height">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBounds">
      <MemberSignature Language="C#" Value="public virtual void SetBounds (int x, int y, int width, int height, System.Windows.Forms.BoundsSpecified specified);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetBounds(int32 x, int32 y, int32 width, int32 height, valuetype System.Windows.Forms.BoundsSpecified specified) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.Controls.Button.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="specified" Type="System.Windows.Forms.BoundsSpecified" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <param name="y">To be added.</param>
        <param name="width">To be added.</param>
        <param name="height">To be added.</param>
        <param name="specified">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetVisibleCore">
      <MemberSignature Language="C#" Value="protected override void SetVisibleCore (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void SetVisibleCore(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.Controls.Button.SetVisibleCore(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">
          <see langword="true" /> 表示使控件可见；<see langword="false" /> 表示使控件不可见。</param>
        <summary>将 <see cref="T:Microsoft.Office.Tools.Excel.Controls.Button" /> 设置为指定的可见状态。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常，将会替代此方法可以更改该控件的可见性行为。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>重写时<see cref="M:Microsoft.Office.Tools.Excel.Controls.Button.SetVisibleCore(System.Boolean)" />在派生类中，请务必调用基类的<c>SetVisibleCore</c>方法来强制执行要更改的控件的可见性。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ShapeRange">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.ShapeRange ShapeRange { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.ShapeRange ShapeRange" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.Controls.Button.ShapeRange" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.ShapeRange</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个表示 <see cref="T:Microsoft.Office.Interop.Excel.ShapeRange" /> 的 <see cref="T:Microsoft.Office.Tools.Excel.Controls.Button" /> 对象。</summary>
        <value>一个表示 <see cref="T:Microsoft.Office.Interop.Excel.ShapeRange" /> 的 <see cref="T:Microsoft.Office.Tools.Excel.Controls.Button" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例添加<xref:Microsoft.Office.Tools.Excel.Controls.Button>到当前工作表的控件。 <xref:System.Windows.Forms.Control.Click>此按钮的事件处理程序使用<xref:Microsoft.Office.Tools.Excel.Controls.Button.ShapeRange%2A>属性来获取<xref:Microsoft.Office.Interop.Excel.ShapeRange?displayProperty=fullName>按钮，然后会增加此宽度<xref:Microsoft.Office.Interop.Excel.ShapeRange?displayProperty=fullName>10 点。 虽然事件处理程序仅调整按钮的宽度，高度还自动更改，以便该控件将保留原始比例。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWindowsFormsControls#15](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWindowsFormsControls/CS/Sheet1.cs#15)]
 [!code-vb[Trin_ExcelWindowsFormsControls#15](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWindowsFormsControls/VB/Sheet1.vb#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceName">
      <MemberSignature Language="C#" Value="public string SourceName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SourceName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.Controls.Button.SourceName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:Microsoft.Office.Tools.Excel.Controls.Button" /> 的链接源名称。</summary>
        <value>
          <see cref="T:Microsoft.Office.Tools.Excel.Controls.Button" /> 的链接源名称。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TabIndex">
      <MemberSignature Language="C#" Value="public virtual int TabIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TabIndex" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.Controls.Button.TabIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TabStop">
      <MemberSignature Language="C#" Value="public virtual bool TabStop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TabStop" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.Controls.Button.TabStop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Top">
      <MemberSignature Language="C#" Value="public double Top { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Top" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.Controls.Button.Top" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:Microsoft.Office.Tools.Excel.Controls.Button" /> 的上边缘与工作表的上边缘之间的距离（以磅为单位）。</summary>
        <value>
          <see cref="T:Microsoft.Office.Tools.Excel.Controls.Button" /> 的上边缘与工作表的上边缘之间的距离（以磅为单位）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.Office.Tools.Excel.Controls.Button.Top%2A?displayProperty=fullName>属性使用点，而<xref:System.Windows.Forms.Control.Top%2A?displayProperty=fullName>属性使用像素值。  
  
   
  
## Examples  
 下面的代码示例进行比较的大小调整和重新定位的两个行为<xref:Microsoft.Office.Tools.Excel.Controls.Button>向工作表中的控件。 <xref:System.Windows.Forms.Control.Click>的第一个按钮的事件处理程序调整<xref:Microsoft.Office.Tools.Excel.Controls.Button.Height%2A>和<xref:Microsoft.Office.Tools.Excel.Controls.Button.Width%2A>按钮的属性，以便按钮更改大小，但仍保留在工作表上的同一位置。 <xref:System.Windows.Forms.Control.Click>的第二个按钮的事件处理程序调整<xref:Microsoft.Office.Tools.Excel.Controls.Button.Top%2A>和<xref:Microsoft.Office.Tools.Excel.Controls.Button.Left%2A>按钮的属性，以便按钮更改在工作表上的位置，但仍保持相同的大小。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWindowsFormsControls#3](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWindowsFormsControls/CS/Sheet1.cs#3)]
 [!code-vb[Trin_ExcelWindowsFormsControls#3](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWindowsFormsControls/VB/Sheet1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TopLeftCell">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range TopLeftCell { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range TopLeftCell" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.Controls.Button.TopLeftCell" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 对象，该对象表示位于 <see cref="T:Microsoft.Office.Tools.Excel.Controls.Button" /> 左上角下面的单元格。</summary>
        <value>一个 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 对象，表示位于 <see cref="T:Microsoft.Office.Tools.Excel.Controls.Button" /> 左上角下面的单元格。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.Controls.Button.TopLeftCell%2A>并<xref:Microsoft.Office.Tools.Excel.Controls.Button.BottomRightCell%2A>属性来获取在左上角和右下右角的单元格<xref:Microsoft.Office.Tools.Excel.Controls.Button>控件。 <xref:System.Windows.Forms.Control.Click>事件处理程序按钮的颜色的右上角和右下角单元格边框红色。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWindowsFormsControls#5](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWindowsFormsControls/CS/Sheet1.cs#5)]
 [!code-vb[Trin_ExcelWindowsFormsControls#5](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWindowsFormsControls/VB/Sheet1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TopLevelControl">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.Control TopLevelControl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Control TopLevelControl" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.Controls.Button.TopLevelControl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public object Update ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Update() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Tools.Excel.Controls.Button.Update" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Visible">
      <MemberSignature Language="C#" Value="public bool Visible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Visible" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.Controls.Button.Visible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值表示 <see cref="T:Microsoft.Office.Tools.Excel.Controls.Button" /> 是否可见。</summary>
        <value>如果 <see cref="T:Microsoft.Office.Tools.Excel.Controls.Button" /> 可见，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例将添加<xref:Microsoft.Office.Tools.Excel.Controls.Button>控件与工作表，并使用<xref:Microsoft.Office.Tools.Excel.Controls.Button.Border%2A>属性以绿色的颜色单元格的边框。 <xref:System.Windows.Forms.Control.Click>按钮的事件处理程序使用<xref:Microsoft.Office.Tools.Excel.Controls.Button.Visible%2A>属性来隐藏按钮，然后会提示用户选择要显示该按钮，或允许其保持隐藏状态。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWindowsFormsControls#6](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWindowsFormsControls/CS/Sheet1.cs#6)]
 [!code-vb[Trin_ExcelWindowsFormsControls#6](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWindowsFormsControls/VB/Sheet1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Width">
      <MemberSignature Language="C#" Value="public double Width { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Width" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.Controls.Button.Width" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:Microsoft.Office.Tools.Excel.Controls.Button" /> 的宽度（以磅为单位）。</summary>
        <value>
          <see cref="T:Microsoft.Office.Tools.Excel.Controls.Button" /> 的宽度（以磅为单位）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 对所做更改<xref:Microsoft.Office.Tools.Excel.Controls.Button.Width%2A>和 left 的属性值将导致<xref:Microsoft.Office.Tools.Excel.Controls.Button.Right%2A>属性值为<xref:Microsoft.Office.Tools.Excel.Controls.Button>更改。  
  
 <xref:Microsoft.Office.Tools.Excel.Controls.Button.Width%2A?displayProperty=fullName>属性使用点，而<xref:System.Windows.Forms.Control.Width%2A?displayProperty=fullName>属性使用像素值。  
  
 将值设置为负数或大于 12288 数字不会引发异常，但会导致控件设置为介于 1 和 12288 之间。  
  
   
  
## Examples  
 下面的代码示例进行比较的大小调整和重新定位的两个行为<xref:Microsoft.Office.Tools.Excel.Controls.Button>向工作表中的控件。 <xref:System.Windows.Forms.Control.Click>的第一个按钮的事件处理程序调整<xref:Microsoft.Office.Tools.Excel.Controls.Button.Height%2A>和<xref:Microsoft.Office.Tools.Excel.Controls.Button.Width%2A>按钮的属性，以便按钮更改大小，但仍保留在工作表上的同一位置。 <xref:System.Windows.Forms.Control.Click>的第二个按钮的事件处理程序调整<xref:Microsoft.Office.Tools.Excel.Controls.Button.Top%2A>和<xref:Microsoft.Office.Tools.Excel.Controls.Button.Left%2A>按钮的属性，以便按钮更改在工作表上的位置，但仍保持相同的大小。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWindowsFormsControls#3](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWindowsFormsControls/CS/Sheet1.cs#3)]
 [!code-vb[Trin_ExcelWindowsFormsControls#3](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWindowsFormsControls/VB/Sheet1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ZOrder">
      <MemberSignature Language="C#" Value="public int ZOrder { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ZOrder" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Tools.Excel.Controls.Button.ZOrder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Tools.Excel.v4.0.Utilities</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:Microsoft.Office.Tools.Excel.Controls.Button" /> 的 Z 顺序位置。</summary>
        <value>
          <see cref="T:Microsoft.Office.Tools.Excel.Controls.Button" /> 的 Z 顺序位置。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Z 顺序由<xref:Microsoft.Office.Interop.Excel.OLEObjects>集合。  
  
 对象的任何集合，在 z 顺序的底层对象是*集合*(1)，并在 z 顺序的顶层对象是*集合*(*集合*。`Count`)。  
  
   
  
## Examples  
 下面的代码示例使用<xref:Microsoft.Office.Tools.Excel.Controls.Button.ZOrder%2A>属性设置为 3 的 z 顺序<xref:Microsoft.Office.Tools.Excel.Controls.Button>工作表上的控件。 如果单击按钮当前在 z 顺序的前面时，按钮将移动到集合的底层。 否则，该按钮移到集合的顶层。 请注意，z 顺序的三个按钮的初始范围从 2 到 4。 工作表上的运行时存储控件最初具有 1 的 z 顺序位置。  
  
 此示例适用于文档级自定义。  
  
 [!code-csharp[Trin_ExcelWindowsFormsControls#1](~/snippets/csharp/VS_Snippets_OfficeSP/Trin_ExcelWindowsFormsControls/CS/Sheet1.cs#1)]
 [!code-vb[Trin_ExcelWindowsFormsControls#1](~/snippets/visualbasic/VS_Snippets_OfficeSP/Trin_ExcelWindowsFormsControls/VB/Sheet1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>